
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002cc  00802000  00001ce8  00001d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004bd  008022cc  008022cc  00002048  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a7c7  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c15  00000000  00000000  0000cffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bf8  00000000  00000000  0000ec10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001674  00000000  00000000  00011808  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004441  00000000  00000000  00012e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005728  00000000  00000000  000172bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  0001c9e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
      28:	0c 94 0e 0b 	jmp	0x161c	; 0x161c <__vector_10>
      2c:	0c 94 49 0b 	jmp	0x1692	; 0x1692 <__vector_11>
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	if (Endpoint_IsSETUPReceived())
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

		switch (USB_ControlRequest.bRequest)
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_25>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      68:	0c 94 43 09 	jmp	0x1286	; 0x1286 <__vector_26>
      6c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_27>
      70:	0c 94 4d 09 	jmp	0x129a	; 0x129a <__vector_28>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
      74:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_29>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
      78:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_30>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				Endpoint_Write_8(Data >> 8);
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__vector_58>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
      ec:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_59>
      f0:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__vector_60>
					{
						Endpoint_StallTransaction();
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearSETUP();
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	while (!(Endpoint_IsINReady()));
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     160:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__vector_88>
     164:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_89>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     168:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_90>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					SerialByte = pgm_read_byte(SigReadAddress);
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					NVM.CMD    = 0;
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					if (SerialCharNum & 0x01)
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					{
						SerialByte >>= 4;
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	Endpoint_ClearOUT();
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__vector_125>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
     1fc:	11 24       	eor	r1, r1
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e9       	ldi	r29, 0x9F	; 159
     206:	de bf       	out	0x3e, r29	; 62
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     212:	e8 ee       	ldi	r30, 0xE8	; 232
     214:	fc e1       	ldi	r31, 0x1C	; 28

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
	Endpoint_ClearIN();
     21e:	0d 92       	st	X+, r0
     220:	ac 3c       	cpi	r26, 0xCC	; 204

	Endpoint_ClearStatusStage();
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	27 e2       	ldi	r18, 0x27	; 39
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     228:	ac ec       	ldi	r26, 0xCC	; 204
     22a:	b2 e2       	ldi	r27, 0x22	; 34
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a9 38       	cpi	r26, 0x89	; 137
     232:	b2 07       	cpc	r27, r18
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 9c 07 	call	0xf38	; 0xf38 <main>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     23a:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <arch_spi_master_transmit_byte_val>:
}


static uint8_t arch_spi_master_transmit_byte_val(uint8_t data)
{
	NRF24L01P_SPI.DATA = data;
     242:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS &(1<<SPI_IF_bp)));
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	82 81       	ldd	r24, Z+2	; 0x02
     24c:	88 23       	and	r24, r24
     24e:	ec f7       	brge	.-6      	; 0x24a <arch_spi_master_transmit_byte_val+0x8>
	return SPIC.DATA;
     250:	80 91 c3 08 	lds	r24, 0x08C3
}
     254:	08 95       	ret

00000256 <arch_spi_master_transmit_byte_ref>:

static uint8_t arch_spi_master_transmit_byte_ref(uint8_t *data)
{
	NRF24L01P_SPI.DATA = *data;
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	80 93 c3 08 	sts	0x08C3, r24
	while(!(NRF24L01P_SPI.STATUS &(1<<SPI_IF_bp)));
     25e:	e0 ec       	ldi	r30, 0xC0	; 192
     260:	f8 e0       	ldi	r31, 0x08	; 8
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	88 23       	and	r24, r24
     266:	ec f7       	brge	.-6      	; 0x262 <arch_spi_master_transmit_byte_ref+0xc>
	return NRF24L01P_SPI.DATA;
     268:	80 91 c3 08 	lds	r24, 0x08C3
}
     26c:	08 95       	ret

0000026e <_nrf24l01p_ce_pin>:
 */ 

#include "nrf24l01p.h"


void _nrf24l01p_ce_pin(bool state){
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_ce_pin(bool state){
	//if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	//else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
	
	if(state) DigitalPin_SetValue(&nrf24l01p_ce_pin) ;
     272:	88 23       	and	r24, r24
     274:	29 f0       	breq	.+10     	; 0x280 <_nrf24l01p_ce_pin+0x12>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e2       	ldi	r25, 0x20	; 32
     27a:	0e 94 0f 09 	call	0x121e	; 0x121e <DigitalPin_SetValue>
     27e:	04 c0       	rjmp	.+8      	; 0x288 <_nrf24l01p_ce_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_ce_pin);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e2       	ldi	r25, 0x20	; 32
     284:	0e 94 1f 09 	call	0x123e	; 0x123e <DigitalPin_ClearValue>
	arch_nrf24l01p_ce_pin(state);
	ce_value = state;
     288:	c0 93 db 24 	sts	0x24DB, r28
}
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <_nrf24l01p_csn_pin>:
void _nrf24l01p_csn_pin(bool state){
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_csn_pin(bool state){
// 	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
// 	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);

	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
     294:	88 23       	and	r24, r24
     296:	29 f0       	breq	.+10     	; 0x2a2 <_nrf24l01p_csn_pin+0x12>
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	90 e2       	ldi	r25, 0x20	; 32
     29c:	0e 94 0f 09 	call	0x121e	; 0x121e <DigitalPin_SetValue>
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <_nrf24l01p_csn_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	0e 94 1f 09 	call	0x123e	; 0x123e <DigitalPin_ClearValue>

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     2aa:	c0 93 da 24 	sts	0x24DA, r28
}
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_nrf24l01p_read_register>:
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
	_nrf24l01p_startup();
	
}

void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	c8 2f       	mov	r28, r24
     2c0:	7b 01       	movw	r14, r22
     2c2:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
     2ca:	8c 2f       	mov	r24, r28
     2cc:	8f 71       	andi	r24, 0x1F	; 31
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     2d2:	10 16       	cp	r1, r16
     2d4:	11 06       	cpc	r1, r17
     2d6:	94 f4       	brge	.+36     	; 0x2fc <_nrf24l01p_read_register+0x4a>
     2d8:	e7 01       	movw	r28, r14
     2da:	0e 0d       	add	r16, r14
     2dc:	1f 1d       	adc	r17, r15
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
	*data = NRF24L01P_SPI.DATA;
     2de:	0f 2e       	mov	r0, r31
     2e0:	f0 ec       	ldi	r31, 0xC0	; 192
     2e2:	ef 2e       	mov	r14, r31
     2e4:	f8 e0       	ldi	r31, 0x08	; 8
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     2f0:	f7 01       	movw	r30, r14
     2f2:	83 81       	ldd	r24, Z+3	; 0x03
     2f4:	89 93       	st	Y+, r24
     2f6:	c0 17       	cp	r28, r16
     2f8:	d1 07       	cpc	r29, r17
     2fa:	b9 f7       	brne	.-18     	; 0x2ea <_nrf24l01p_read_register+0x38>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <_nrf24l01p_write_register>:

void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	c8 2f       	mov	r28, r24
     31e:	7b 01       	movw	r14, r22
     320:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
     328:	8c 2f       	mov	r24, r28
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     332:	10 16       	cp	r1, r16
     334:	11 06       	cpc	r1, r17
     336:	54 f4       	brge	.+20     	; 0x34c <_nrf24l01p_write_register+0x3c>
     338:	e7 01       	movw	r28, r14
     33a:	0e 0d       	add	r16, r14
     33c:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 2b 01 	call	0x256	; 0x256 <arch_spi_master_transmit_byte_ref>
     344:	21 96       	adiw	r28, 0x01	; 1
}

void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
     346:	c0 17       	cp	r28, r16
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <_nrf24l01p_write_register+0x2e>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <_nrf24l01p_read_rx_payload>:



void _nrf24l01p_read_rx_payload(uint8_t *dataout, int pay_len){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	7c 01       	movw	r14, r24
     36e:	8b 01       	movw	r16, r22
	_nrf24l01p_csn_pin(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
     376:	81 e6       	ldi	r24, 0x61	; 97
     378:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     37c:	10 16       	cp	r1, r16
     37e:	11 06       	cpc	r1, r17
     380:	94 f4       	brge	.+36     	; 0x3a6 <_nrf24l01p_read_rx_payload+0x46>
     382:	e7 01       	movw	r28, r14
     384:	0e 0d       	add	r16, r14
     386:	1f 1d       	adc	r17, r15
     388:	0f 2e       	mov	r0, r31
     38a:	f0 ec       	ldi	r31, 0xC0	; 192
     38c:	ef 2e       	mov	r14, r31
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     39a:	f7 01       	movw	r30, r14
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	99 93       	st	Y+, r25
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	b9 f7       	brne	.-18     	; 0x394 <_nrf24l01p_read_rx_payload+0x34>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_nrf24l01p_write_tx_payload>:
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	7c 01       	movw	r14, r24
     3c8:	8b 01       	movw	r16, r22
	_nrf24l01p_csn_pin(0);
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
     3d0:	80 ea       	ldi	r24, 0xA0	; 160
     3d2:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     3d6:	10 16       	cp	r1, r16
     3d8:	11 06       	cpc	r1, r17
     3da:	54 f4       	brge	.+20     	; 0x3f0 <_nrf24l01p_write_tx_payload+0x36>
     3dc:	e7 01       	movw	r28, r14
     3de:	0e 0d       	add	r16, r14
     3e0:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     3e2:	ce 01       	movw	r24, r28
     3e4:	0e 94 2b 01 	call	0x256	; 0x256 <arch_spi_master_transmit_byte_ref>
     3e8:	21 96       	adiw	r28, 0x01	; 1
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
	for(int i=0;i<pay_len;i++){
     3ea:	c0 17       	cp	r28, r16
     3ec:	d1 07       	cpc	r29, r17
     3ee:	c9 f7       	brne	.-14     	; 0x3e2 <_nrf24l01p_write_tx_payload+0x28>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <_nrf24l01p_flush_tx>:

void _nrf24l01p_flush_tx(){
	_nrf24l01p_csn_pin(0);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
     40a:	81 ee       	ldi	r24, 0xE1	; 225
     40c:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	_nrf24l01p_csn_pin(1);
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
     416:	08 95       	ret

00000418 <_nrf24l01p_flush_rx>:
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
     41e:	82 ee       	ldi	r24, 0xE2	; 226
     420:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	_nrf24l01p_csn_pin(1);
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
     42a:	08 95       	ret

0000042c <_nrf24l01p_read_rx_payload_width>:
void _nrf24l01p_reuse_tx_payload(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_REUSE_TX_PL);
	_nrf24l01p_csn_pin(1);
}
int _nrf24l01p_read_rx_payload_width(){
     42c:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_R_RX_PL_WID);
     434:	80 e6       	ldi	r24, 0x60	; 96
     436:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	uint8_t temp =  arch_spi_master_transmit_byte_val(0xFF);
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     440:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	return temp;
}
     448:	8c 2f       	mov	r24, r28
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <_nrf24l01p_get_status>:
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
     450:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
     458:	8f ef       	ldi	r24, 0xFF	; 255
     45a:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     45e:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	return temp;
}
     466:	8c 2f       	mov	r24, r28
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_nrf24l01p_power_up>:

void _nrf24l01p_power_up(){
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	1f 92       	push	r1
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     478:	41 e0       	ldi	r20, 0x01	; 1
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	be 01       	movw	r22, r28
     47e:	6f 5f       	subi	r22, 0xFF	; 255
     480:	7f 4f       	sbci	r23, 0xFF	; 255
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PWR_UP;
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	82 60       	ori	r24, 0x02	; 2
     48c:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	be 01       	movw	r22, r28
     494:	6f 5f       	subi	r22, 0xFF	; 255
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	8f e9       	ldi	r24, 0x9F	; 159
     4a0:	9c e8       	ldi	r25, 0x8C	; 140
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <_nrf24l01p_power_up+0x34>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <_nrf24l01p_power_up+0x3a>
     4a8:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	mode = _NRF24L01P_MODE_STANDBY;
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	80 93 dc 24 	sts	0x24DC, r24
}
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	08 95       	ret

000004b8 <_nrf24l01p_power_down>:
void _nrf24l01p_power_down(){
     4b8:	cf 93       	push	r28
     4ba:	df 93       	push	r29
     4bc:	1f 92       	push	r1
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4c2:	41 e0       	ldi	r20, 0x01	; 1
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	be 01       	movw	r22, r28
     4c8:	6f 5f       	subi	r22, 0xFF	; 255
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PWR_UP;
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	8d 7f       	andi	r24, 0xFD	; 253
     4d6:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	be 01       	movw	r22, r28
     4de:	6f 5f       	subi	r22, 0xFF	; 255
     4e0:	7f 4f       	sbci	r23, 0xFF	; 255
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_POWER_DOWN;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	80 93 dc 24 	sts	0x24DC, r24
}
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <_nrf24l01p_rx_mode>:
void _nrf24l01p_rx_mode(){
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PRIM_RX;
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	81 60       	ori	r24, 0x01	; 1
     514:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_RX;
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	80 93 dc 24 	sts	0x24DC, r24
}
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_nrf24l01p_tx_mode>:
void _nrf24l01p_tx_mode(){
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	8e 7f       	andi	r24, 0xFE	; 254
     552:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_TX;
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	80 93 dc 24 	sts	0x24DC, r24
}
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <_nrf24l01p_enable_auto_ack>:
	temp &= ~(_NRF24L01P_CONFIG_CRC_MASK);
	temp |= opt;
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
}

void _nrf24l01p_enable_auto_ack(_nrf24l01p_pipe_t pipe){
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	1f 92       	push	r1
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	be 01       	movw	r22, r28
     586:	6f 5f       	subi	r22, 0xFF	; 255
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     590:	21 e0       	ldi	r18, 0x01	; 1
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	c9 01       	movw	r24, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <_nrf24l01p_enable_auto_ack+0x2a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	1a 95       	dec	r17
     59e:	e2 f7       	brpl	.-8      	; 0x598 <_nrf24l01p_enable_auto_ack+0x26>
     5a0:	99 81       	ldd	r25, Y+1	; 0x01
     5a2:	89 2b       	or	r24, r25
     5a4:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     5a6:	41 e0       	ldi	r20, 0x01	; 1
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	be 01       	movw	r22, r28
     5ac:	6f 5f       	subi	r22, 0xFF	; 255
     5ae:	7f 4f       	sbci	r23, 0xFF	; 255
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	08 95       	ret

000005c0 <_nrf24l01p_disable_auto_ack_all_pipes>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
	clr_bit(temp,pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
}
void _nrf24l01p_disable_auto_ack_all_pipes(){
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	1f 92       	push	r1
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
     5ca:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     5cc:	41 e0       	ldi	r20, 0x01	; 1
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <_nrf24l01p_enable_rx_on_pipe>:

void _nrf24l01p_enable_rx_on_pipe(_nrf24l01p_pipe_t pipe){
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	1f 92       	push	r1
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	82 e0       	ldi	r24, 0x02	; 2
     5fe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	c9 01       	movw	r24, r18
     608:	02 c0       	rjmp	.+4      	; 0x60e <_nrf24l01p_enable_rx_on_pipe+0x2a>
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	1a 95       	dec	r17
     610:	e2 f7       	brpl	.-8      	; 0x60a <_nrf24l01p_enable_rx_on_pipe+0x26>
     612:	99 81       	ldd	r25, Y+1	; 0x01
     614:	89 2b       	or	r24, r25
     616:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     618:	41 e0       	ldi	r20, 0x01	; 1
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	be 01       	movw	r22, r28
     61e:	6f 5f       	subi	r22, 0xFF	; 255
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     628:	0f 90       	pop	r0
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	08 95       	ret

00000632 <_nrf24l01p_set_auto_retransmission_delay>:
uint8_t _nrf24l01p_read_auto_retransmission_count(){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	1f 92       	push	r1
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	be 01       	movw	r22, r28
     646:	6f 5f       	subi	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~(0xF0);
	temp |= (times250us<<4);
     650:	20 e1       	ldi	r18, 0x10	; 16
     652:	12 9f       	mul	r17, r18
     654:	c0 01       	movw	r24, r0
     656:	11 24       	eor	r1, r1
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	temp &= ~(0xF0);
     658:	99 81       	ldd	r25, Y+1	; 0x01
     65a:	9f 70       	andi	r25, 0x0F	; 15
	temp |= (times250us<<4);
     65c:	89 2b       	or	r24, r25
     65e:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	be 01       	movw	r22, r28
     666:	6f 5f       	subi	r22, 0xFF	; 255
     668:	7f 4f       	sbci	r23, 0xFF	; 255
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     670:	0f 90       	pop	r0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	08 95       	ret

0000067a <_nrf24l01p_get_max_retry_flag>:
	return flag;
}
bool _nrf24l01p_get_max_retry_flag(){
	bool flag;
	//(_nrf24l01p_get_status()&_NRF24L01P_STATUS_MAX_RT)?flag = 1 : flag = 0;
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_MAX_RT) flag = 1;
     67a:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
     67e:	92 95       	swap	r25
     680:	82 95       	swap	r24
     682:	8f 70       	andi	r24, 0x0F	; 15
     684:	89 27       	eor	r24, r25
     686:	9f 70       	andi	r25, 0x0F	; 15
     688:	89 27       	eor	r24, r25
	else flag  = 0;
	return flag;
}
     68a:	81 70       	andi	r24, 0x01	; 1
     68c:	08 95       	ret

0000068e <_nrf24l01p_clear_max_retry_flag>:


void _nrf24l01p_clear_max_retry_flag(){
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     698:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_MAX_RT;
     69c:	80 61       	ori	r24, 0x10	; 16
     69e:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	be 01       	movw	r22, r28
     6a6:	6f 5f       	subi	r22, 0xFF	; 255
     6a8:	7f 4f       	sbci	r23, 0xFF	; 255
     6aa:	87 e0       	ldi	r24, 0x07	; 7
     6ac:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     6b0:	0f 90       	pop	r0
     6b2:	df 91       	pop	r29
     6b4:	cf 91       	pop	r28
     6b6:	08 95       	ret

000006b8 <_nrf24l01p_get_data_sent_flag>:

bool _nrf24l01p_get_data_sent_flag(){
	bool flag;
	//(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS)?flag = 1 : flag = 0;
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS) flag = 1;
     6b8:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	92 95       	swap	r25
     6c2:	82 95       	swap	r24
     6c4:	8f 70       	andi	r24, 0x0F	; 15
     6c6:	89 27       	eor	r24, r25
     6c8:	9f 70       	andi	r25, 0x0F	; 15
     6ca:	89 27       	eor	r24, r25
	else flag  = 0;
	return flag;
}
     6cc:	81 70       	andi	r24, 0x01	; 1
     6ce:	08 95       	ret

000006d0 <_nrf24l01p_clear_data_sent_flag>:

void _nrf24l01p_clear_data_sent_flag(){
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	1f 92       	push	r1
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     6da:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_TX_DS;
     6de:	80 62       	ori	r24, 0x20	; 32
     6e0:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	be 01       	movw	r22, r28
     6e8:	6f 5f       	subi	r22, 0xFF	; 255
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	87 e0       	ldi	r24, 0x07	; 7
     6ee:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <_nrf24l01p_clear_data_ready_flag>:
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_RX_DR)flag = 1  ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_clear_data_ready_flag(){
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	1f 92       	push	r1
     700:	cd b7       	in	r28, 0x3d	; 61
     702:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     704:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_RX_DR;
     708:	80 64       	ori	r24, 0x40	; 64
     70a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	be 01       	movw	r22, r28
     712:	6f 5f       	subi	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	87 e0       	ldi	r24, 0x07	; 7
     718:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <_nrf24l01p_set_RX_pipe_address>:
	if(temp!=0) flag = 1  ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_set_RX_pipe_address(_nrf24l01p_pipe_t pipe,uint64_t address){
     724:	2f 92       	push	r2
     726:	3f 92       	push	r3
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cd b7       	in	r28, 0x3d	; 61
     74a:	de b7       	in	r29, 0x3e	; 62
     74c:	25 97       	sbiw	r28, 0x05	; 5
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	de bf       	out	0x3e, r29	; 62
     752:	48 2e       	mov	r4, r24
     754:	b0 2e       	mov	r11, r16
     756:	a2 2e       	mov	r10, r18
     758:	93 2e       	mov	r9, r19
     75a:	84 2e       	mov	r8, r20
     75c:	75 2e       	mov	r7, r21
     75e:	66 2e       	mov	r6, r22
     760:	57 2e       	mov	r5, r23
 	int max_pipe_addr_width = 0;

	if((pipe>=0) && (pipe<=1)   )
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	84 15       	cp	r24, r4
     766:	68 f4       	brcc	.+26     	; 0x782 <_nrf24l01p_set_RX_pipe_address+0x5e>
	{
		max_pipe_addr_width = 5;
	}
	else if ((pipe>=2) && (pipe<=5)   ){
     768:	21 e0       	ldi	r18, 0x01	; 1
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	8e ef       	ldi	r24, 0xFE	; 254
     76e:	84 0d       	add	r24, r4
     770:	84 30       	cpi	r24, 0x04	; 4
     772:	08 f0       	brcs	.+2      	; 0x776 <_nrf24l01p_set_RX_pipe_address+0x52>
     774:	20 e0       	ldi	r18, 0x00	; 0
void _nrf24l01p_set_RX_pipe_address(_nrf24l01p_pipe_t pipe,uint64_t address){
 	int max_pipe_addr_width = 0;

	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     776:	c2 2e       	mov	r12, r18
     778:	d9 2e       	mov	r13, r25
	}
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
     77a:	1c 14       	cp	r1, r12
     77c:	1d 04       	cpc	r1, r13
     77e:	34 f0       	brlt	.+12     	; 0x78c <_nrf24l01p_set_RX_pipe_address+0x68>
     780:	21 c0       	rjmp	.+66     	; 0x7c4 <_nrf24l01p_set_RX_pipe_address+0xa0>
void _nrf24l01p_set_RX_pipe_address(_nrf24l01p_pipe_t pipe,uint64_t address){
 	int max_pipe_addr_width = 0;

	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     782:	0f 2e       	mov	r0, r31
     784:	f5 e0       	ldi	r31, 0x05	; 5
     786:	cf 2e       	mov	r12, r31
     788:	d1 2c       	mov	r13, r1
     78a:	f0 2d       	mov	r31, r0
     78c:	de 01       	movw	r26, r28
     78e:	11 96       	adiw	r26, 0x01	; 1
     790:	7d 01       	movw	r14, r26
     792:	21 2c       	mov	r2, r1
     794:	31 2c       	mov	r3, r1
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	f0 e0       	ldi	r31, 0x00	; 0
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
		temp[i] = (address>>(8*i))&0xFF;
     79a:	2b 2d       	mov	r18, r11
     79c:	31 2f       	mov	r19, r17
     79e:	4a 2d       	mov	r20, r10
     7a0:	59 2d       	mov	r21, r9
     7a2:	68 2d       	mov	r22, r8
     7a4:	77 2d       	mov	r23, r7
     7a6:	86 2d       	mov	r24, r6
     7a8:	95 2d       	mov	r25, r5
     7aa:	02 2d       	mov	r16, r2
     7ac:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__lshrdi3>
     7b0:	d7 01       	movw	r26, r14
     7b2:	2d 93       	st	X+, r18
     7b4:	7d 01       	movw	r14, r26
	}
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
     7b6:	31 96       	adiw	r30, 0x01	; 1
     7b8:	b8 e0       	ldi	r27, 0x08	; 8
     7ba:	2b 0e       	add	r2, r27
     7bc:	31 1c       	adc	r3, r1
     7be:	ec 15       	cp	r30, r12
     7c0:	fd 05       	cpc	r31, r13
     7c2:	5c f3       	brlt	.-42     	; 0x79a <_nrf24l01p_set_RX_pipe_address+0x76>
		temp[i] = (address>>(8*i))&0xFF;
	}
	_nrf24l01p_write_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
     7c4:	a6 01       	movw	r20, r12
     7c6:	be 01       	movw	r22, r28
     7c8:	6f 5f       	subi	r22, 0xFF	; 255
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	8a e0       	ldi	r24, 0x0A	; 10
     7ce:	84 0d       	add	r24, r4
     7d0:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	
}
     7d4:	25 96       	adiw	r28, 0x05	; 5
     7d6:	cd bf       	out	0x3d, r28	; 61
     7d8:	de bf       	out	0x3e, r29	; 62
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	df 90       	pop	r13
     7e8:	cf 90       	pop	r12
     7ea:	bf 90       	pop	r11
     7ec:	af 90       	pop	r10
     7ee:	9f 90       	pop	r9
     7f0:	8f 90       	pop	r8
     7f2:	7f 90       	pop	r7
     7f4:	6f 90       	pop	r6
     7f6:	5f 90       	pop	r5
     7f8:	4f 90       	pop	r4
     7fa:	3f 90       	pop	r3
     7fc:	2f 90       	pop	r2
     7fe:	08 95       	ret

00000800 <_nrf24l01p_set_TX_pipe_address>:
	}
	
	return temp_addr;	
}

void _nrf24l01p_set_TX_pipe_address(uint64_t address){
     800:	9f 92       	push	r9
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	25 97       	sbiw	r28, 0x05	; 5
     81c:	cd bf       	out	0x3d, r28	; 61
     81e:	de bf       	out	0x3e, r29	; 62
     820:	92 2e       	mov	r9, r18
     822:	a3 2e       	mov	r10, r19
     824:	b4 2e       	mov	r11, r20
     826:	c5 2e       	mov	r12, r21
     828:	d6 2e       	mov	r13, r22
     82a:	e7 2e       	mov	r14, r23
     82c:	f8 2e       	mov	r15, r24
     82e:	19 2f       	mov	r17, r25
     830:	de 01       	movw	r26, r28
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t temp[5];
	
	for(int i=0;i<5;i++){
		temp[i] = (address>>(8*i))&0xFF;
     838:	29 2d       	mov	r18, r9
     83a:	3a 2d       	mov	r19, r10
     83c:	4b 2d       	mov	r20, r11
     83e:	5c 2d       	mov	r21, r12
     840:	6d 2d       	mov	r22, r13
     842:	7e 2d       	mov	r23, r14
     844:	8f 2d       	mov	r24, r15
     846:	91 2f       	mov	r25, r17
     848:	0e 2f       	mov	r16, r30
     84a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__lshrdi3>
     84e:	2d 93       	st	X+, r18
     850:	38 96       	adiw	r30, 0x08	; 8
}

void _nrf24l01p_set_TX_pipe_address(uint64_t address){
	uint8_t temp[5];
	
	for(int i=0;i<5;i++){
     852:	e8 32       	cpi	r30, 0x28	; 40
     854:	f1 05       	cpc	r31, r1
     856:	81 f7       	brne	.-32     	; 0x838 <_nrf24l01p_set_TX_pipe_address+0x38>
		temp[i] = (address>>(8*i))&0xFF;
	}
	_nrf24l01p_write_register(_NRF24L01P_REG_TX_ADDR,temp,5);
     858:	45 e0       	ldi	r20, 0x05	; 5
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	be 01       	movw	r22, r28
     85e:	6f 5f       	subi	r22, 0xFF	; 255
     860:	7f 4f       	sbci	r23, 0xFF	; 255
     862:	80 e1       	ldi	r24, 0x10	; 16
     864:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     868:	25 96       	adiw	r28, 0x05	; 5
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	de bf       	out	0x3e, r29	; 62
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	df 90       	pop	r13
     87c:	cf 90       	pop	r12
     87e:	bf 90       	pop	r11
     880:	af 90       	pop	r10
     882:	9f 90       	pop	r9
     884:	08 95       	ret

00000886 <_nrf24l01p_get_fifo_flag_rx_empty>:
uint8_t _nrf24l01p_get_RX_pipe_width(_nrf24l01p_pipe_t pipe){
	uint8_t temp;
	_nrf24l01p_read_register((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
	return (temp&(0x3F));
}
bool _nrf24l01p_get_fifo_flag_rx_empty(){
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	1f 92       	push	r1
     88c:	cd b7       	in	r28, 0x3d	; 61
     88e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	bool flag;
	_nrf24l01p_read_register(_NRF24L01P_REG_FIFO_STATUS,&temp,sizeof(temp));
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	be 01       	movw	r22, r28
     896:	6f 5f       	subi	r22, 0xFF	; 255
     898:	7f 4f       	sbci	r23, 0xFF	; 255
     89a:	87 e1       	ldi	r24, 0x17	; 23
     89c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	if(temp&_NRF24L01P_FIFO_STATUS_RX_EMPTY) flag = 1 ;
     8a0:	89 81       	ldd	r24, Y+1	; 0x01
	else flag = 0;
	return flag;
	
}
     8a2:	81 70       	andi	r24, 0x01	; 1
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <_nrf24l01p_enable_dynamic_payload_pipe>:
	if(temp&_NRF24L01P_FIFO_STATUS_RX_REUSE) flag = 1 ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_enable_dynamic_payload_pipe(_nrf24l01p_pipe_t pipe){
     8ac:	1f 93       	push	r17
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	1f 92       	push	r1
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	be 01       	movw	r22, r28
     8c0:	6f 5f       	subi	r22, 0xFF	; 255
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	8c e1       	ldi	r24, 0x1C	; 28
     8c6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= (1<<pipe);
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	c9 01       	movw	r24, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	1a 95       	dec	r17
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     8da:	99 81       	ldd	r25, Y+1	; 0x01
     8dc:	89 2b       	or	r24, r25
     8de:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	be 01       	movw	r22, r28
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	8c e1       	ldi	r24, 0x1C	; 28
     8ec:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     8f0:	0f 90       	pop	r0
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	08 95       	ret

000008fa <_nrf24l01p_disable_dynamic_payload_all_pipe>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
	temp &= ~(1<<pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
}
void _nrf24l01p_disable_dynamic_payload_all_pipe(){
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	1f 92       	push	r1
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0x00;
     904:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));	
     906:	41 e0       	ldi	r20, 0x01	; 1
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	be 01       	movw	r22, r28
     90c:	6f 5f       	subi	r22, 0xFF	; 255
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	8c e1       	ldi	r24, 0x1C	; 28
     912:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <_nrf24l01p_enable_dynamic_payload>:
void _nrf24l01p_enable_dynamic_payload(){
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	1f 92       	push	r1
     924:	cd b7       	in	r28, 0x3d	; 61
     926:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	be 01       	movw	r22, r28
     92e:	6f 5f       	subi	r22, 0xFF	; 255
     930:	7f 4f       	sbci	r23, 0xFF	; 255
     932:	8d e1       	ldi	r24, 0x1D	; 29
     934:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_DPL;
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	84 60       	ori	r24, 0x04	; 4
     93c:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	be 01       	movw	r22, r28
     944:	6f 5f       	subi	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	8d e1       	ldi	r24, 0x1D	; 29
     94a:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     94e:	0f 90       	pop	r0
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	08 95       	ret

00000956 <_nrf24l01p_enable_payload_with_ack>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
	temp &= ~_NRF24L01_FEATURE_EN_DPL;
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
}
void _nrf24l01p_enable_payload_with_ack(){
     956:	cf 93       	push	r28
     958:	df 93       	push	r29
     95a:	1f 92       	push	r1
     95c:	cd b7       	in	r28, 0x3d	; 61
     95e:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     960:	41 e0       	ldi	r20, 0x01	; 1
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	be 01       	movw	r22, r28
     966:	6f 5f       	subi	r22, 0xFF	; 255
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	8d e1       	ldi	r24, 0x1D	; 29
     96c:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	82 60       	ori	r24, 0x02	; 2
     974:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     976:	41 e0       	ldi	r20, 0x01	; 1
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	be 01       	movw	r22, r28
     97c:	6f 5f       	subi	r22, 0xFF	; 255
     97e:	7f 4f       	sbci	r23, 0xFF	; 255
     980:	8d e1       	ldi	r24, 0x1D	; 29
     982:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <_nrf24l01p_startup>:


//////////////////////////////////////////////////////////////////////////


void _nrf24l01p_startup(){
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	1f 92       	push	r1
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
	#define TRANSFER_SIZE 1
	uint8_t temp = 0b00000111;
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	be 01       	movw	r22, r28
     9a2:	6f 5f       	subi	r22, 0xFF	; 255
     9a4:	7f 4f       	sbci	r23, 0xFF	; 255
     9a6:	86 e0       	ldi	r24, 0x06	; 6
     9a8:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>

	temp = 0;
     9ac:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(uint8_t));
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	50 e0       	ldi	r21, 0x00	; 0
     9b2:	be 01       	movw	r22, r28
     9b4:	6f 5f       	subi	r22, 0xFF	; 255
     9b6:	7f 4f       	sbci	r23, 0xFF	; 255
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	temp = TRANSFER_SIZE;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	be 01       	movw	r22, r28
     9c8:	6f 5f       	subi	r22, 0xFF	; 255
     9ca:	7f 4f       	sbci	r23, 0xFF	; 255
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_power_up();
     9d2:	0e 94 37 02 	call	0x46e	; 0x46e <_nrf24l01p_power_up>
     9d6:	8f e9       	ldi	r24, 0x9F	; 159
     9d8:	9c e8       	ldi	r25, 0x8C	; 140
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <_nrf24l01p_startup+0x4c>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <_nrf24l01p_startup+0x52>
     9e0:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);

	_nrf24l01p_rx_mode();
     9e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(1);
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>

}
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <_nrf24l01p_init>:

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
}

void _nrf24l01p_init(){
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	1f 92       	push	r1
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
}

static void arch_nrf24l01p_initialize(){
	NRF24L01P_SPI_PORT.DIRSET = (1<<5) | (1<<4) | (1<<7);
     a00:	e0 e4       	ldi	r30, 0x40	; 64
     a02:	f6 e0       	ldi	r31, 0x06	; 6
     a04:	80 eb       	ldi	r24, 0xB0	; 176
     a06:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_SPI.CTRL = (1<<SPI_ENABLE_bp) | (1<<SPI_MASTER_bp);
     a08:	80 e5       	ldi	r24, 0x50	; 80
     a0a:	80 93 c0 08 	sts	0x08C0, r24
	NRF24L01P_CSN_PIN_PORT.DIRSET = (1<<NRF24L01P_CSN_PIN_BIT);
     a0e:	80 e1       	ldi	r24, 0x10	; 16
     a10:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_CE_PIN_PORT.DIRSET = (1<<NRF24L01P_CE_PIN_BIT);
     a12:	82 e0       	ldi	r24, 0x02	; 2
     a14:	81 83       	std	Z+1, r24	; 0x01
	arch_nrf24l01p_initialize();
	
	_nrf24l01p_ce_pin(0);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
	_nrf24l01p_csn_pin(1);
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	
	_nrf24l01p_flush_rx();
     a22:	0e 94 0c 02 	call	0x418	; 0x418 <_nrf24l01p_flush_rx>
	_nrf24l01p_power_down();
     a26:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_nrf24l01p_power_down>
	uint8_t status_rst_val = 0x0e;//reset status
     a2a:	8e e0       	ldi	r24, 0x0E	; 14
     a2c:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
     a2e:	41 e0       	ldi	r20, 0x01	; 1
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	be 01       	movw	r22, r28
     a34:	6f 5f       	subi	r22, 0xFF	; 255
     a36:	7f 4f       	sbci	r23, 0xFF	; 255
     a38:	87 e0       	ldi	r24, 0x07	; 7
     a3a:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
     a3e:	8b e0       	ldi	r24, 0x0B	; 11
     a40:	8a 83       	std	Y+2, r24	; 0x02
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
     a42:	41 e0       	ldi	r20, 0x01	; 1
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	be 01       	movw	r22, r28
     a48:	6e 5f       	subi	r22, 0xFE	; 254
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_disable_auto_ack_all_pipes();
     a52:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_nrf24l01p_disable_auto_ack_all_pipes>
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
     a56:	0e 94 7d 04 	call	0x8fa	; 0x8fa <_nrf24l01p_disable_dynamic_payload_all_pipe>
	_nrf24l01p_startup();
     a5a:	0e 94 c7 04 	call	0x98e	; 0x98e <_nrf24l01p_startup>
	
}
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <_nrf24l01p_readable>:
	_nrf24l01p_ce_pin(1);

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
     a68:	cf 93       	push	r28
	bool flag = 0;
	if((pipe >=0)   && (pipe <=5)){
     a6a:	86 30       	cpi	r24, 0x06	; 6
     a6c:	90 f4       	brcc	.+36     	; 0xa92 <_nrf24l01p_readable+0x2a>
     a6e:	c8 2f       	mov	r28, r24
		int status = _nrf24l01p_get_status();
     a70:	0e 94 28 02 	call	0x450	; 0x450 <_nrf24l01p_get_status>
		if(   (status&_NRF24L01P_STATUS_RX_DR)  && ((status&_NRF24L01P_STATUS_RX_P_NO)>>1)==pipe){
     a74:	86 ff       	sbrs	r24, 6
     a76:	0f c0       	rjmp	.+30     	; 0xa96 <_nrf24l01p_readable+0x2e>
     a78:	8e 70       	andi	r24, 0x0E	; 14
     a7a:	99 27       	eor	r25, r25
     a7c:	ac 01       	movw	r20, r24
     a7e:	55 95       	asr	r21
     a80:	47 95       	ror	r20
     a82:	2c 2f       	mov	r18, r28
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	42 17       	cp	r20, r18
     a8a:	53 07       	cpc	r21, r19
     a8c:	29 f0       	breq	.+10     	; 0xa98 <_nrf24l01p_readable+0x30>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <_nrf24l01p_readable+0x30>

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
	bool flag = 0;
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <_nrf24l01p_readable+0x30>
		int status = _nrf24l01p_get_status();
		if(   (status&_NRF24L01P_STATUS_RX_DR)  && ((status&_NRF24L01P_STATUS_RX_P_NO)>>1)==pipe){
			flag = 1;
		}
		else{
			flag = 0;
     a96:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return flag;
}
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <_nrf24l01p_write>:

volatile int mystat;

int _nrf24l01p_write(uint8_t *data, int datalen){
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	7c 01       	movw	r14, r24
     aaa:	eb 01       	movw	r28, r22
	int error_status = 0;
	int originalCe = ce_value;//backup original ce_value
     aac:	10 91 db 24 	lds	r17, 0x24DB
	_nrf24l01p_ce_pin(0);//disable();
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
	if ( datalen <= 0 ) return 0;
     ab6:	1c 16       	cp	r1, r28
     ab8:	1d 06       	cpc	r1, r29
     aba:	ec f5       	brge	.+122    	; 0xb36 <_nrf24l01p_write+0x9a>
	if ( datalen > _NRF24L01P_TX_FIFO_SIZE ) datalen = _NRF24L01P_TX_FIFO_SIZE;
	
	_nrf24l01p_clear_data_sent_flag();
     abc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_nrf24l01p_clear_data_sent_flag>
     ac0:	be 01       	movw	r22, r28
     ac2:	a1 97       	sbiw	r28, 0x21	; 33
     ac4:	14 f0       	brlt	.+4      	; 0xaca <_nrf24l01p_write+0x2e>
     ac6:	60 e2       	ldi	r22, 0x20	; 32
     ac8:	70 e0       	ldi	r23, 0x00	; 0
	_nrf24l01p_write_tx_payload(data,datalen);
     aca:	c7 01       	movw	r24, r14
     acc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_tx_payload>
	
	int originalMode = mode; //backup mode
     ad0:	00 91 dc 24 	lds	r16, 0x24DC
	_nrf24l01p_tx_mode();
     ad4:	0e 94 9a 02 	call	0x534	; 0x534 <_nrf24l01p_tx_mode>
	
	_nrf24l01p_ce_pin(1);//enable();
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
     ade:	8a e6       	ldi	r24, 0x6A	; 106
     ae0:	8a 95       	dec	r24
     ae2:	f1 f7       	brne	.-4      	; 0xae0 <_nrf24l01p_write+0x44>
     ae4:	00 c0       	rjmp	.+0      	; 0xae6 <_nrf24l01p_write+0x4a>
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
	
	//bool max_retry_flag_reached= 0;
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     aec:	0a c0       	rjmp	.+20     	; 0xb02 <_nrf24l01p_write+0x66>
		if(_nrf24l01p_get_max_retry_flag()){
     aee:	0e 94 3d 03 	call	0x67a	; 0x67a <_nrf24l01p_get_max_retry_flag>
     af2:	88 23       	and	r24, r24
     af4:	31 f0       	breq	.+12     	; 0xb02 <_nrf24l01p_write+0x66>
			PORTR.OUTTGL = (1<<1);/////////////////////////////////DELETE
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	80 93 e7 07 	sts	0x07E7, r24
			error_status = -1;
     afc:	df ef       	ldi	r29, 0xFF	; 255
     afe:	cf ef       	ldi	r28, 0xFF	; 255
			break;
     b00:	06 c0       	rjmp	.+12     	; 0xb0e <_nrf24l01p_write+0x72>
	_nrf24l01p_ce_pin(1);//enable();
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
	
	//bool max_retry_flag_reached= 0;
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     b02:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <_nrf24l01p_get_data_sent_flag>
     b06:	88 23       	and	r24, r24
     b08:	91 f3       	breq	.-28     	; 0xaee <_nrf24l01p_write+0x52>
}

volatile int mystat;

int _nrf24l01p_write(uint8_t *data, int datalen){
	int error_status = 0;
     b0a:	d0 e0       	ldi	r29, 0x00	; 0
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
			error_status = -1;
			break;
		}
	}

	_nrf24l01p_flush_tx();
     b0e:	0e 94 02 02 	call	0x404	; 0x404 <_nrf24l01p_flush_tx>
	
	
	_nrf24l01p_clear_data_sent_flag();
     b12:	0e 94 68 03 	call	0x6d0	; 0x6d0 <_nrf24l01p_clear_data_sent_flag>
	_nrf24l01p_clear_max_retry_flag();
     b16:	0e 94 47 03 	call	0x68e	; 0x68e <_nrf24l01p_clear_max_retry_flag>
	if ( originalMode == _NRF24L01P_MODE_RX ) _nrf24l01p_rx_mode();//restore original mode
     b1a:	03 30       	cpi	r16, 0x03	; 3
     b1c:	11 f4       	brne	.+4      	; 0xb22 <_nrf24l01p_write+0x86>
     b1e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(originalCe);//restore original CE pin status
     b22:	81 2f       	mov	r24, r17
     b24:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
     b28:	8a e2       	ldi	r24, 0x2A	; 42
     b2a:	8a 95       	dec	r24
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <_nrf24l01p_write+0x8e>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <_nrf24l01p_write+0x94>
	_nrf24l01p_delay_us( _NRF24L01P_TIMING_Tpece2csn_us );
	
	return error_status;
     b30:	8d 2f       	mov	r24, r29
     b32:	9c 2f       	mov	r25, r28
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <_nrf24l01p_write+0x9e>

int _nrf24l01p_write(uint8_t *data, int datalen){
	int error_status = 0;
	int originalCe = ce_value;//backup original ce_value
	_nrf24l01p_ce_pin(0);//disable();
	if ( datalen <= 0 ) return 0;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
	if ( originalMode == _NRF24L01P_MODE_RX ) _nrf24l01p_rx_mode();//restore original mode
	_nrf24l01p_ce_pin(originalCe);//restore original CE pin status
	_nrf24l01p_delay_us( _NRF24L01P_TIMING_Tpece2csn_us );
	
	return error_status;
}
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	08 95       	ret

00000b48 <_nrf24l01p_write_to_address_ack>:
int _nrf24l01p_write_to_address(uint64_t address, uint8_t *data, int datalen){
	_nrf24l01p_set_TX_pipe_address(address);
	_nrf24l01p_write(data,datalen);
	
}
int _nrf24l01p_write_to_address_ack(uint64_t address, uint8_t *data, int datalen){
     b48:	6f 92       	push	r6
     b4a:	7f 92       	push	r7
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	62 2e       	mov	r6, r18
     b66:	73 2e       	mov	r7, r19
     b68:	a4 2e       	mov	r10, r20
     b6a:	b5 2e       	mov	r11, r21
     b6c:	c6 2e       	mov	r12, r22
     b6e:	d7 2e       	mov	r13, r23
     b70:	d8 2f       	mov	r29, r24
     b72:	c9 2f       	mov	r28, r25
     b74:	48 01       	movw	r8, r16
	_nrf24l01p_set_TX_pipe_address(address);
     b76:	0e 94 00 04 	call	0x800	; 0x800 <_nrf24l01p_set_TX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P0, address);
     b7a:	06 2d       	mov	r16, r6
     b7c:	17 2d       	mov	r17, r7
     b7e:	2a 2d       	mov	r18, r10
     b80:	3b 2d       	mov	r19, r11
     b82:	4c 2d       	mov	r20, r12
     b84:	5d 2d       	mov	r21, r13
     b86:	6d 2f       	mov	r22, r29
     b88:	7c 2f       	mov	r23, r28
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	0e 94 92 03 	call	0x724	; 0x724 <_nrf24l01p_set_RX_pipe_address>
	_nrf24l01p_write(data,datalen);
     b90:	b7 01       	movw	r22, r14
     b92:	c4 01       	movw	r24, r8
     b94:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_nrf24l01p_write>
	
	
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	df 90       	pop	r13
     ba6:	cf 90       	pop	r12
     ba8:	bf 90       	pop	r11
     baa:	af 90       	pop	r10
     bac:	9f 90       	pop	r9
     bae:	8f 90       	pop	r8
     bb0:	7f 90       	pop	r7
     bb2:	6f 90       	pop	r6
     bb4:	08 95       	ret

00000bb6 <_nrf24l01p_read_dyn_pld>:
	else {//if pipe not readable
		return 0;
	}
	return 0;	
}
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
	
	int rxPayloadWidth;
	
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
     bbe:	86 30       	cpi	r24, 0x06	; 6
     bc0:	f0 f4       	brcc	.+60     	; 0xbfe <_nrf24l01p_read_dyn_pld+0x48>
     bc2:	eb 01       	movw	r28, r22
		return -1;
	}
	
	if (_nrf24l01p_readable(pipe) ) {
     bc4:	0e 94 34 05 	call	0xa68	; 0xa68 <_nrf24l01p_readable>
     bc8:	88 23       	and	r24, r24
     bca:	e1 f0       	breq	.+56     	; 0xc04 <_nrf24l01p_read_dyn_pld+0x4e>
		asm("nop");
     bcc:	00 00       	nop
		rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
     bce:	0e 94 16 02 	call	0x42c	; 0x42c <_nrf24l01p_read_rx_payload_width>
     bd2:	8c 01       	movw	r16, r24
	
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
     bd4:	81 32       	cpi	r24, 0x21	; 33
     bd6:	91 05       	cpc	r25, r1
     bd8:	28 f0       	brcs	.+10     	; 0xbe4 <_nrf24l01p_read_dyn_pld+0x2e>
			_nrf24l01p_flush_rx();
     bda:	0e 94 0c 02 	call	0x418	; 0x418 <_nrf24l01p_flush_rx>
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
				_nrf24l01p_clear_data_ready_flag();
			}
		}

		return rxPayloadWidth;
     bde:	80 2f       	mov	r24, r16
     be0:	91 2f       	mov	r25, r17
     be2:	15 c0       	rjmp	.+42     	; 0xc0e <_nrf24l01p_read_dyn_pld+0x58>
	
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
			_nrf24l01p_flush_rx();
		}
		else{
			_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
     be4:	bc 01       	movw	r22, r24
     be6:	ce 01       	movw	r24, r28
     be8:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_read_rx_payload>
					
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
     bec:	0e 94 43 04 	call	0x886	; 0x886 <_nrf24l01p_get_fifo_flag_rx_empty>
     bf0:	88 23       	and	r24, r24
     bf2:	59 f0       	breq	.+22     	; 0xc0a <_nrf24l01p_read_dyn_pld+0x54>
				_nrf24l01p_clear_data_ready_flag();
     bf4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_nrf24l01p_clear_data_ready_flag>
			}
		}

		return rxPayloadWidth;
     bf8:	80 2f       	mov	r24, r16
     bfa:	91 2f       	mov	r25, r17
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <_nrf24l01p_read_dyn_pld+0x58>
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
	
	int rxPayloadWidth;
	
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
		return -1;
     bfe:	8f ef       	ldi	r24, 0xFF	; 255
     c00:	9f ef       	ldi	r25, 0xFF	; 255
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <_nrf24l01p_read_dyn_pld+0x58>
// 			_nrf24l01p_clear_data_ready_flag();
// 		}
// 		return rxPayloadWidth;
//	}
	else {//if pipe not readable
		return 0;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <_nrf24l01p_read_dyn_pld+0x58>
			if(_nrf24l01p_get_fifo_flag_rx_empty()) {
				_nrf24l01p_clear_data_ready_flag();
			}
		}

		return rxPayloadWidth;
     c0a:	80 2f       	mov	r24, r16
     c0c:	91 2f       	mov	r25, r17
//	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     c18:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     c1a:	81 81       	ldd	r24, Z+1	; 0x01
     c1c:	85 ff       	sbrs	r24, 5
     c1e:	fd cf       	rjmp	.-6      	; 0xc1a <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     c20:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     c22:	81 81       	ldd	r24, Z+1	; 0x01
     c24:	86 ff       	sbrs	r24, 6
     c26:	fd cf       	rjmp	.-6      	; 0xc22 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     c28:	80 e4       	ldi	r24, 0x40	; 64
     c2a:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     c2c:	80 81       	ld	r24, Z
}
     c2e:	08 95       	ret

00000c30 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     c36:	c0 ea       	ldi	r28, 0xA0	; 160
     c38:	d6 e0       	ldi	r29, 0x06	; 6
     c3a:	18 e0       	ldi	r17, 0x08	; 8
     c3c:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     c3e:	e0 e6       	ldi	r30, 0x60	; 96
     c40:	f6 e0       	ldi	r31, 0x06	; 6
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     c46:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     c48:	68 2f       	mov	r22, r24
     c4a:	80 ea       	ldi	r24, 0xA0	; 160
     c4c:	99 e0       	ldi	r25, 0x09	; 9
     c4e:	0e 94 0c 06 	call	0xc18	; 0xc18 <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     c52:	1d 83       	std	Y+5, r17	; 0x05
	
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	1f 91       	pop	r17
     c5a:	08 95       	ret

00000c5c <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     c68:	c0 ea       	ldi	r28, 0xA0	; 160
     c6a:	d6 e0       	ldi	r29, 0x06	; 6
     c6c:	18 e0       	ldi	r17, 0x08	; 8
     c6e:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     c70:	0f 2e       	mov	r0, r31
     c72:	f0 e6       	ldi	r31, 0x60	; 96
     c74:	ef 2e       	mov	r14, r31
     c76:	f6 e0       	ldi	r31, 0x06	; 6
     c78:	ff 2e       	mov	r15, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	01 e0       	ldi	r16, 0x01	; 1
     c7e:	f7 01       	movw	r30, r14
     c80:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     c82:	68 2f       	mov	r22, r24
     c84:	80 ea       	ldi	r24, 0xA0	; 160
     c86:	99 e0       	ldi	r25, 0x09	; 9
     c88:	0e 94 0c 06 	call	0xc18	; 0xc18 <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     c8c:	f7 01       	movw	r30, r14
     c8e:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     c90:	1d 83       	std	Y+5, r17	; 0x05

}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	08 95       	ret

00000ca0 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     ca0:	87 70       	andi	r24, 0x07	; 7
     ca2:	80 6b       	ori	r24, 0xB0	; 176
     ca4:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
     ca8:	08 95       	ret

00000caa <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     caa:	cf 93       	push	r28
     cac:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     cae:	98 2f       	mov	r25, r24
     cb0:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     cb2:	89 2f       	mov	r24, r25
     cb4:	82 95       	swap	r24
     cb6:	8f 70       	andi	r24, 0x0F	; 15
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     cbe:	8c 2f       	mov	r24, r28
     cc0:	8f 70       	andi	r24, 0x0F	; 15
     cc2:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
}
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
     cd0:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     cd8:	a0 e6       	ldi	r26, 0x60	; 96
     cda:	b6 e0       	ldi	r27, 0x06	; 6
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	8c 93       	st	X, r24
     ce2:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     ce4:	15 96       	adiw	r26, 0x05	; 5
     ce6:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     ce8:	8d 81       	ldd	r24, Y+5	; 0x05
     cea:	80 6c       	ori	r24, 0xC0	; 192
     cec:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     cee:	84 81       	ldd	r24, Z+4	; 0x04
     cf0:	8d 7f       	andi	r24, 0xFD	; 253
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	21 f4       	brne	.+8      	; 0xcfe <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	8d 83       	std	Y+5, r24	; 0x05
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	8d 7f       	andi	r24, 0xFD	; 253
     d02:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     d04:	85 81       	ldd	r24, Z+5	; 0x05
     d06:	88 23       	and	r24, r24
     d08:	21 f0       	breq	.+8      	; 0xd12 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     d0a:	8d 81       	ldd	r24, Y+5	; 0x05
     d0c:	84 60       	ori	r24, 0x04	; 4
     d0e:	8d 83       	std	Y+5, r24	; 0x05
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	8b 7f       	andi	r24, 0xFB	; 251
     d16:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	a2 81       	ldd	r26, Z+2	; 0x02
     d1e:	b3 81       	ldd	r27, Z+3	; 0x03
     d20:	9c 01       	movw	r18, r24
     d22:	ad 01       	movw	r20, r26
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	55 1f       	adc	r21, r21
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	78 e4       	ldi	r23, 0x48	; 72
     d30:	88 ee       	ldi	r24, 0xE8	; 232
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__udivmodsi4>
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     d3c:	83 2f       	mov	r24, r19
     d3e:	8f 70       	andi	r24, 0x0F	; 15
     d40:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     d42:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	88 60       	ori	r24, 0x08	; 8
     d48:	8c 83       	std	Y+4, r24	; 0x04

}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <ssd1306_init>:




void ssd1306_init(void)
{
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	00 d0       	rcall	.+0      	; 0xd56 <ssd1306_init+0x6>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <ssd1306_init+0x8>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     d5c:	20 ea       	ldi	r18, 0xA0	; 160
     d5e:	36 e0       	ldi	r19, 0x06	; 6
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	d9 01       	movw	r26, r18
     d64:	11 96       	adiw	r26, 0x01	; 1
     d66:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     d68:	a0 e6       	ldi	r26, 0x60	; 96
     d6a:	b6 e0       	ldi	r27, 0x06	; 6
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	11 96       	adiw	r26, 0x01	; 1
     d70:	9c 93       	st	X, r25
     d72:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTA,(1<<3));//reset
     d74:	e0 e0       	ldi	r30, 0x00	; 0
     d76:	f6 e0       	ldi	r31, 0x06	; 6
     d78:	81 83       	std	Z+1, r24	; 0x01
	port_direction_set_mask(&PORTD,(1<<1));//sck
     d7a:	92 e0       	ldi	r25, 0x02	; 2
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	9c 93       	st	X, r25
     d80:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	8c 93       	st	X, r24
// 	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     d86:	d9 01       	movw	r26, r18
     d88:	15 96       	adiw	r26, 0x05	; 5
     d8a:	8c 93       	st	X, r24
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     d8c:	86 83       	std	Z+6, r24	; 0x06
     d8e:	ba e6       	ldi	r27, 0x6A	; 106
     d90:	ba 95       	dec	r27
     d92:	f1 f7       	brne	.-4      	; 0xd90 <ssd1306_init+0x40>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <ssd1306_init+0x46>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     d96:	85 83       	std	Z+5, r24	; 0x05
     d98:	ea e6       	ldi	r30, 0x6A	; 106
     d9a:	ea 95       	dec	r30
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <ssd1306_init+0x4a>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <ssd1306_init+0x50>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     da0:	e0 e7       	ldi	r30, 0x70	; 112
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	84 81       	ldd	r24, Z+4	; 0x04
     da6:	8f 7e       	andi	r24, 0xEF	; 239
     da8:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	9b e1       	ldi	r25, 0x1B	; 27
     dae:	a7 eb       	ldi	r26, 0xB7	; 183
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	ab 83       	std	Y+3, r26	; 0x03
     db8:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     dba:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     dbc:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     dbe:	be 01       	movw	r22, r28
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	80 ea       	ldi	r24, 0xA0	; 160
     dc6:	99 e0       	ldi	r25, 0x09	; 9
     dc8:	0e 94 65 06 	call	0xcca	; 0xcca <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     dcc:	88 ea       	ldi	r24, 0xA8	; 168
     dce:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     dd2:	8f e1       	ldi	r24, 0x1F	; 31
     dd4:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     dd8:	83 ed       	ldi	r24, 0xD3	; 211
     dda:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x00);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     de4:	80 e4       	ldi	r24, 0x40	; 64
     de6:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     dea:	81 ea       	ldi	r24, 0xA1	; 161
     dec:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     df0:	88 ec       	ldi	r24, 0xC8	; 200
     df2:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     df6:	8a ed       	ldi	r24, 0xDA	; 218
     df8:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x02);
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     e02:	81 e8       	ldi	r24, 0x81	; 129
     e04:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     e08:	8f e8       	ldi	r24, 0x8F	; 143
     e0a:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     e0e:	84 ea       	ldi	r24, 0xA4	; 164
     e10:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     e14:	86 ea       	ldi	r24, 0xA6	; 166
     e16:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     e1a:	85 ed       	ldi	r24, 0xD5	; 213
     e1c:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x80);
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     e26:	8d e8       	ldi	r24, 0x8D	; 141
     e28:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x14);
     e2c:	84 e1       	ldi	r24, 0x14	; 20
     e2e:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     e32:	8b ed       	ldi	r24, 0xDB	; 219
     e34:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     e38:	80 e4       	ldi	r24, 0x40	; 64
     e3a:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     e3e:	89 ed       	ldi	r24, 0xD9	; 217
     e40:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     e44:	81 ef       	ldi	r24, 0xF1	; 241
     e46:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     e4a:	8f ea       	ldi	r24, 0xAF	; 175
     e4c:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
}
     e50:	26 96       	adiw	r28, 0x06	; 6
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     e66:	dc 01       	movw	r26, r24
     e68:	ec 91       	ld	r30, X
     e6a:	ee 23       	and	r30, r30
     e6c:	29 f1       	breq	.+74     	; 0xeb8 <ssd1306_write_text+0x5c>
     e6e:	7c 01       	movw	r14, r24
     e70:	bf ef       	ldi	r27, 0xFF	; 255
     e72:	eb 1a       	sub	r14, r27
     e74:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     e76:	ef 37       	cpi	r30, 0x7F	; 127
     e78:	d0 f4       	brcc	.+52     	; 0xeae <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	ee 0f       	add	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	ef 56       	subi	r30, 0x6F	; 111
     e82:	fe 4d       	sbci	r31, 0xDE	; 222
     e84:	00 81       	ld	r16, Z
     e86:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     e88:	f8 01       	movw	r30, r16
     e8a:	80 81       	ld	r24, Z
     e8c:	88 23       	and	r24, r24
     e8e:	61 f0       	breq	.+24     	; 0xea8 <ssd1306_write_text+0x4c>
     e90:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     e92:	f8 01       	movw	r30, r16
     e94:	ec 0f       	add	r30, r28
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     e9e:	cf 5f       	subi	r28, 0xFF	; 255
     ea0:	d8 01       	movw	r26, r16
     ea2:	9c 91       	ld	r25, X
     ea4:	9c 17       	cp	r25, r28
     ea6:	a8 f7       	brcc	.-22     	; 0xe92 <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     eae:	d7 01       	movw	r26, r14
     eb0:	ed 91       	ld	r30, X+
     eb2:	7d 01       	movw	r14, r26
     eb4:	e1 11       	cpse	r30, r1
     eb6:	df cf       	rjmp	.-66     	; 0xe76 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	08 95       	ret

00000ec4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     ec4:	20 e8       	ldi	r18, 0x80	; 128
     ec6:	82 9f       	mul	r24, r18
     ec8:	c0 01       	movw	r24, r0
     eca:	11 24       	eor	r1, r1
     ecc:	86 0f       	add	r24, r22
     ece:	91 1d       	adc	r25, r1
     ed0:	e0 91 d4 22 	lds	r30, 0x22D4
     ed4:	f0 91 d5 22 	lds	r31, 0x22D5
     ed8:	e8 0f       	add	r30, r24
     eda:	f9 1f       	adc	r31, r25
     edc:	40 83       	st	Z, r20
     ede:	08 95       	ret

00000ee0 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     ee0:	20 e8       	ldi	r18, 0x80	; 128
     ee2:	82 9f       	mul	r24, r18
     ee4:	c0 01       	movw	r24, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	86 0f       	add	r24, r22
     eea:	91 1d       	adc	r25, r1
     eec:	e0 91 d4 22 	lds	r30, 0x22D4
     ef0:	f0 91 d5 22 	lds	r31, 0x22D5
     ef4:	e8 0f       	add	r30, r24
     ef6:	f9 1f       	adc	r31, r25
}
     ef8:	80 81       	ld	r24, Z
     efa:	08 95       	ret

00000efc <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	18 2f       	mov	r17, r24
     f04:	d6 2f       	mov	r29, r22
     f06:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     f08:	21 11       	cpse	r18, r1
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <gfx_mono_ssd1306_put_byte+0x18>
     f0c:	0e 94 70 07 	call	0xee0	; 0xee0 <gfx_mono_framebuffer_get_byte>
     f10:	8c 17       	cp	r24, r28
     f12:	71 f0       	breq	.+28     	; 0xf30 <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     f14:	4c 2f       	mov	r20, r28
     f16:	6d 2f       	mov	r22, r29
     f18:	81 2f       	mov	r24, r17
     f1a:	0e 94 62 07 	call	0xec4	; 0xec4 <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     f1e:	81 2f       	mov	r24, r17
     f20:	0e 94 50 06 	call	0xca0	; 0xca0 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     f24:	8d 2f       	mov	r24, r29
     f26:	0e 94 55 06 	call	0xcaa	; 0xcaa <ssd1306_set_column_address>

	ssd1306_write_data(data);
     f2a:	8c 2f       	mov	r24, r28
     f2c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ssd1306_write_data>
}
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	08 95       	ret

00000f38 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	c9 54       	subi	r28, 0x49	; 73
     f42:	d1 09       	sbc	r29, r1
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	de bf       	out	0x3e, r29	; 62
	
	//set_system_time (1463064367);
	rtc_initialize();
     f48:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <rtc_initialize>
	
	DigitalPin_t led = {&PORTR, 0};
     f4c:	80 ee       	ldi	r24, 0xE0	; 224
     f4e:	97 e0       	ldi	r25, 0x07	; 7
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	1b 82       	std	Y+3, r1	; 0x03
	DigitalPin_t led2 = {&PORTR, 1};
     f56:	8c 83       	std	Y+4, r24	; 0x04
     f58:	9d 83       	std	Y+5, r25	; 0x05
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8e 83       	std	Y+6, r24	; 0x06

	
	_nrf24l01p_init();
     f5e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <_nrf24l01p_init>
	_nrf24l01p_enable_dynamic_payload();
     f62:	0e 94 8f 04 	call	0x91e	; 0x91e <_nrf24l01p_enable_dynamic_payload>
	_nrf24l01p_enable_payload_with_ack();
     f66:	0e 94 ab 04 	call	0x956	; 0x956 <_nrf24l01p_enable_payload_with_ack>

	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P0);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P1);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P2);
     f76:	82 e0       	ldi	r24, 0x02	; 2
     f78:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P3);
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P4);
     f82:	84 e0       	ldi	r24, 0x04	; 4
     f84:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P5);
     f88:	85 e0       	ldi	r24, 0x05	; 5
     f8a:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_enable_auto_ack>
	
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P0);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P1);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P2);
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P3);
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P4);
     fa6:	84 e0       	ldi	r24, 0x04	; 4
     fa8:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P5);
     fac:	85 e0       	ldi	r24, 0x05	; 5
     fae:	0e 94 56 04 	call	0x8ac	; 0x8ac <_nrf24l01p_enable_dynamic_payload_pipe>
	
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P0);
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P1);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P2);
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P3);
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P4);
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P5);
     fd0:	85 e0       	ldi	r24, 0x05	; 5
     fd2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_nrf24l01p_enable_rx_on_pipe>


	_nrf24l01p_set_auto_retransmission_delay(15);
     fd6:	8f e0       	ldi	r24, 0x0F	; 15
     fd8:	0e 94 19 03 	call	0x632	; 0x632 <_nrf24l01p_set_auto_retransmission_delay>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     fdc:	86 ed       	ldi	r24, 0xD6	; 214
     fde:	92 e2       	ldi	r25, 0x22	; 34
     fe0:	80 93 d4 22 	sts	0x22D4, r24
     fe4:	90 93 d5 22 	sts	0x22D5, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
     fe8:	0e 94 a8 06 	call	0xd50	; 0xd50 <ssd1306_init>
	asm("nop");
     fec:	00 00       	nop
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     fee:	10 e0       	ldi	r17, 0x00	; 0
     ff0:	0f c0       	rjmp	.+30     	; 0x1010 <main+0xd8>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
     ff2:	81 2f       	mov	r24, r17
     ff4:	0e 94 50 06 	call	0xca0	; 0xca0 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
     ff8:	80 2f       	mov	r24, r16
     ffa:	0e 94 55 06 	call	0xcaa	; 0xcaa <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    1004:	0f 5f       	subi	r16, 0xFF	; 255
    1006:	00 38       	cpi	r16, 0x80	; 128
    1008:	a1 f7       	brne	.-24     	; 0xff2 <main+0xba>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    100a:	1f 5f       	subi	r17, 0xFF	; 255
    100c:	14 30       	cpi	r17, 0x04	; 4
    100e:	11 f0       	breq	.+4      	; 0x1014 <main+0xdc>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	ef cf       	rjmp	.-34     	; 0xff2 <main+0xba>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    1014:	80 e4       	ldi	r24, 0x40	; 64
    1016:	0e 94 18 06 	call	0xc30	; 0xc30 <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    101a:	10 e0       	ldi	r17, 0x00	; 0
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <main+0xfe>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	60 2f       	mov	r22, r16
    1024:	81 2f       	mov	r24, r17
    1026:	0e 94 7e 07 	call	0xefc	; 0xefc <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    102a:	0f 5f       	subi	r16, 0xFF	; 255
    102c:	00 38       	cpi	r16, 0x80	; 128
    102e:	b9 f7       	brne	.-18     	; 0x101e <main+0xe6>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1030:	1f 5f       	subi	r17, 0xFF	; 255
    1032:	14 30       	cpi	r17, 0x04	; 4
    1034:	11 f0       	breq	.+4      	; 0x103a <main+0x102>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	f2 cf       	rjmp	.-28     	; 0x101e <main+0xe6>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
    103a:	00 00       	nop
	ssd1306_set_page_address(0);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 50 06 	call	0xca0	; 0xca0 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    1042:	8b ea       	ldi	r24, 0xAB	; 171
    1044:	92 e2       	ldi	r25, 0x22	; 34
    1046:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ssd1306_write_text>
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    1050:	80 e3       	ldi	r24, 0x30	; 48
    1052:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    105c:	10 92 65 06 	sts	0x0665, r1
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
    1060:	78 94       	sei
 	//SetupHardware();
// 
 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	GlobalInterruptEnable();

	DigitalPin_SetDIr(&led,1);
    1062:	61 e0       	ldi	r22, 0x01	; 1
    1064:	ce 01       	movw	r24, r28
    1066:	01 96       	adiw	r24, 0x01	; 1
    1068:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    106c:	61 e0       	ldi	r22, 0x01	; 1
    106e:	ce 01       	movw	r24, r28
    1070:	04 96       	adiw	r24, 0x04	; 4
    1072:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
    1076:	e0 e5       	ldi	r30, 0x50	; 80
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	82 60       	ori	r24, 0x02	; 2
    107e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    1080:	81 81       	ldd	r24, Z+1	; 0x01
    1082:	81 ff       	sbrs	r24, 1
    1084:	fd cf       	rjmp	.-6      	; 0x1080 <main+0x148>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 c6 09 	call	0x138c	; 0x138c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	0e 94 bc 09 	call	0x1378	; 0x1378 <CLKSYS_Disable>
	
	_nrf24l01p_flush_rx();
    1092:	0e 94 0c 02 	call	0x418	; 0x418 <_nrf24l01p_flush_rx>
		
	//_nrf24l01p_set_TX_pipe_address(0x1122334455);	
	//_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P0, 0x1122334455);
	
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P1, 0xC2C2C2C255);
    1096:	05 e5       	ldi	r16, 0x55	; 85
    1098:	12 ec       	ldi	r17, 0xC2	; 194
    109a:	22 ec       	ldi	r18, 0xC2	; 194
    109c:	32 ec       	ldi	r19, 0xC2	; 194
    109e:	42 ec       	ldi	r20, 0xC2	; 194
    10a0:	50 e0       	ldi	r21, 0x00	; 0
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0e 94 92 03 	call	0x724	; 0x724 <_nrf24l01p_set_RX_pipe_address>
		
		
		uint8_t emon_rxData[33];
		
		if((_nrf24l01p_readable(_NRF24L01P_PIPE_P1))){
			PORTR.OUTTGL = (1<<0);
    10ac:	0f 2e       	mov	r0, r31
    10ae:	f0 ee       	ldi	r31, 0xE0	; 224
    10b0:	6f 2e       	mov	r6, r31
    10b2:	f7 e0       	ldi	r31, 0x07	; 7
    10b4:	7f 2e       	mov	r7, r31
    10b6:	f0 2d       	mov	r31, r0
			emon_rxData[width] = '\0';
			_nrf24l01p_flush_rx();
			_nrf24l01p_clear_data_ready_flag();
			
			volatile char printlcd[20];
			sprintf(printlcd,"width : %d\0", width);
    10b8:	0f 2e       	mov	r0, r31
    10ba:	ff e9       	ldi	r31, 0x9F	; 159
    10bc:	8f 2e       	mov	r8, r31
    10be:	f2 e2       	ldi	r31, 0x22	; 34
    10c0:	9f 2e       	mov	r9, r31
    10c2:	f0 2d       	mov	r31, r0
    10c4:	5e 01       	movw	r10, r28
    10c6:	88 e2       	ldi	r24, 0x28	; 40
    10c8:	a8 0e       	add	r10, r24
    10ca:	b1 1c       	adc	r11, r1
			ssd1306_set_page_address(0);
			ssd1306_set_column_address(0);
			ssd1306_write_text(emon_rxData);
			
			
			char txData[] = "sample text";
    10cc:	0f 2e       	mov	r0, r31
    10ce:	fc e0       	ldi	r31, 0x0C	; 12
    10d0:	5f 2e       	mov	r5, r31
    10d2:	f0 2d       	mov	r31, r0
    10d4:	fe 01       	movw	r30, r28
    10d6:	fc 96       	adiw	r30, 0x3c	; 60
    10d8:	6f 01       	movw	r12, r30
		
		
		
		uint8_t emon_rxData[33];
		
		if((_nrf24l01p_readable(_NRF24L01P_PIPE_P1))){
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 34 05 	call	0xa68	; 0xa68 <_nrf24l01p_readable>
    10e0:	88 23       	and	r24, r24
    10e2:	d9 f3       	breq	.-10     	; 0x10da <main+0x1a2>
			PORTR.OUTTGL = (1<<0);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	f3 01       	movw	r30, r6
    10e8:	87 83       	std	Z+7, r24	; 0x07

			volatile int width = _nrf24l01p_read_dyn_pld(_NRF24L01P_PIPE_P1, (uint8_t*) emon_rxData);
    10ea:	be 01       	movw	r22, r28
    10ec:	69 5f       	subi	r22, 0xF9	; 249
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_nrf24l01p_read_dyn_pld>
    10f4:	2a 96       	adiw	r28, 0x0a	; 10
    10f6:	8e af       	std	Y+62, r24	; 0x3e
    10f8:	9f af       	std	Y+63, r25	; 0x3f
    10fa:	2a 97       	sbiw	r28, 0x0a	; 10
			emon_rxData[width] = '\0';
    10fc:	2a 96       	adiw	r28, 0x0a	; 10
    10fe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1100:	ff ad       	ldd	r31, Y+63	; 0x3f
    1102:	2a 97       	sbiw	r28, 0x0a	; 10
    1104:	87 e0       	ldi	r24, 0x07	; 7
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	8c 0f       	add	r24, r28
    110a:	9d 1f       	adc	r25, r29
    110c:	e8 0f       	add	r30, r24
    110e:	f9 1f       	adc	r31, r25
    1110:	10 82       	st	Z, r1
			_nrf24l01p_flush_rx();
    1112:	0e 94 0c 02 	call	0x418	; 0x418 <_nrf24l01p_flush_rx>
			_nrf24l01p_clear_data_ready_flag();
    1116:	0e 94 7d 03 	call	0x6fa	; 0x6fa <_nrf24l01p_clear_data_ready_flag>
			
			volatile char printlcd[20];
			sprintf(printlcd,"width : %d\0", width);
    111a:	2a 96       	adiw	r28, 0x0a	; 10
    111c:	8e ad       	ldd	r24, Y+62	; 0x3e
    111e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1120:	2a 97       	sbiw	r28, 0x0a	; 10
    1122:	9f 93       	push	r25
    1124:	8f 93       	push	r24
    1126:	9f 92       	push	r9
    1128:	8f 92       	push	r8
    112a:	bf 92       	push	r11
    112c:	af 92       	push	r10
    112e:	0e 94 a7 0b 	call	0x174e	; 0x174e <sprintf>
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	00 e0       	ldi	r16, 0x00	; 0
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <main+0x228>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
    1142:	80 2f       	mov	r24, r16
    1144:	0e 94 50 06 	call	0xca0	; 0xca0 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
    1148:	81 2f       	mov	r24, r17
    114a:	0e 94 55 06 	call	0xcaa	; 0xcaa <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	0e 94 2e 06 	call	0xc5c	; 0xc5c <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    1154:	1f 5f       	subi	r17, 0xFF	; 255
    1156:	10 38       	cpi	r17, 0x80	; 128
    1158:	a1 f7       	brne	.-24     	; 0x1142 <main+0x20a>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    115a:	0f 5f       	subi	r16, 0xFF	; 255
    115c:	04 30       	cpi	r16, 0x04	; 4
    115e:	11 f0       	breq	.+4      	; 0x1164 <main+0x22c>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    1160:	10 e0       	ldi	r17, 0x00	; 0
    1162:	ef cf       	rjmp	.-34     	; 0x1142 <main+0x20a>
			
			volatile char printlcd[20];
			sprintf(printlcd,"width : %d\0", width);
			ssd1306_clear();

			ssd1306_set_page_address(0);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	0e 94 50 06 	call	0xca0	; 0xca0 <ssd1306_set_page_address>
			ssd1306_set_column_address(0);
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0e 94 55 06 	call	0xcaa	; 0xcaa <ssd1306_set_column_address>
			ssd1306_write_text(emon_rxData);
    1170:	ce 01       	movw	r24, r28
    1172:	07 96       	adiw	r24, 0x07	; 7
    1174:	0e 94 2e 07 	call	0xe5c	; 0xe5c <ssd1306_write_text>
			
			
			char txData[] = "sample text";
    1178:	e0 eb       	ldi	r30, 0xB0	; 176
    117a:	f2 e2       	ldi	r31, 0x22	; 34
    117c:	d6 01       	movw	r26, r12
    117e:	85 2d       	mov	r24, r5
    1180:	01 90       	ld	r0, Z+
    1182:	0d 92       	st	X+, r0
    1184:	8a 95       	dec	r24
    1186:	e1 f7       	brne	.-8      	; 0x1180 <main+0x248>
			_nrf24l01p_write_to_address_ack(0x1122334455, (uint8_t*)txData,strlen(txData));
    1188:	f6 01       	movw	r30, r12
    118a:	01 90       	ld	r0, Z+
    118c:	00 20       	and	r0, r0
    118e:	e9 f7       	brne	.-6      	; 0x118a <main+0x252>
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	7f 01       	movw	r14, r30
    1194:	ec 18       	sub	r14, r12
    1196:	fd 08       	sbc	r15, r13
    1198:	86 01       	movw	r16, r12
    119a:	25 e5       	ldi	r18, 0x55	; 85
    119c:	34 e4       	ldi	r19, 0x44	; 68
    119e:	43 e3       	ldi	r20, 0x33	; 51
    11a0:	52 e2       	ldi	r21, 0x22	; 34
    11a2:	61 e1       	ldi	r22, 0x11	; 17
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	0e 94 a4 05 	call	0xb48	; 0xb48 <_nrf24l01p_write_to_address_ack>
		
		
		
 			//HID_Device_USBTask(&Generic_HID_Interface);
 			//USB_USBTask();
	}
    11ae:	95 cf       	rjmp	.-214    	; 0x10da <main+0x1a2>

000011b0 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    11b0:	83 e0       	ldi	r24, 0x03	; 3
    11b2:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    11b6:	80 e3       	ldi	r24, 0x30	; 48
    11b8:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    11c2:	80 e1       	ldi	r24, 0x10	; 16
    11c4:	80 93 65 06 	sts	0x0665, r24
    11c8:	08 95       	ret

000011ca <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    11d0:	80 e3       	ldi	r24, 0x30	; 48
    11d2:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    11dc:	10 92 65 06 	sts	0x0665, r1
    11e0:	08 95       	ret

000011e2 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    11e2:	80 91 9d 22 	lds	r24, 0x229D
    11e6:	90 91 9e 22 	lds	r25, 0x229E
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	29 f0       	breq	.+10     	; 0x11f8 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	80 93 9d 22 	sts	0x229D, r24
    11f4:	90 93 9e 22 	sts	0x229E, r25
    11f8:	08 95       	ret

000011fa <DigitalPin_SetDIr>:
	SREG = sreg;	
}


void DigitalPin_SetDIr(DigitalPin_t *pin , bool dir){
	if(dir) pin->_port->DIRSET = (1<< pin->_pin);
    11fa:	66 23       	and	r22, r22
    11fc:	79 f0       	breq	.+30     	; 0x121c <DigitalPin_SetDIr+0x22>
    11fe:	dc 01       	movw	r26, r24
    1200:	ed 91       	ld	r30, X+
    1202:	fc 91       	ld	r31, X
    1204:	11 97       	sbiw	r26, 0x01	; 1
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	0c 90       	ld	r0, X
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DigitalPin_SetDIr+0x1c>
    1212:	44 0f       	add	r20, r20
    1214:	55 1f       	adc	r21, r21
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DigitalPin_SetDIr+0x18>
    121a:	41 83       	std	Z+1, r20	; 0x01
    121c:	08 95       	ret

0000121e <DigitalPin_SetValue>:
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	11 97       	sbiw	r26, 0x01	; 1
    1226:	21 e0       	ldi	r18, 0x01	; 1
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	a9 01       	movw	r20, r18
    122c:	12 96       	adiw	r26, 0x02	; 2
    122e:	0c 90       	ld	r0, X
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DigitalPin_SetValue+0x18>
    1232:	44 0f       	add	r20, r20
    1234:	55 1f       	adc	r21, r21
    1236:	0a 94       	dec	r0
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DigitalPin_SetValue+0x14>
    123a:	45 83       	std	Z+5, r20	; 0x05
    123c:	08 95       	ret

0000123e <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
    123e:	dc 01       	movw	r26, r24
    1240:	ed 91       	ld	r30, X+
    1242:	fc 91       	ld	r31, X
    1244:	11 97       	sbiw	r26, 0x01	; 1
    1246:	21 e0       	ldi	r18, 0x01	; 1
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	0c 90       	ld	r0, X
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DigitalPin_ClearValue+0x18>
    1252:	44 0f       	add	r20, r20
    1254:	55 1f       	adc	r21, r21
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DigitalPin_ClearValue+0x14>
    125a:	46 83       	std	Z+6, r20	; 0x06
    125c:	08 95       	ret

0000125e <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1

}
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_27>:

ISR(USARTC0_TXC_vect){
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
	
}
    127c:	0f 90       	pop	r0
    127e:	0f be       	out	0x3f, r0	; 63
    1280:	0f 90       	pop	r0
    1282:	1f 90       	pop	r1
    1284:	18 95       	reti

00001286 <__vector_26>:

ISR(USARTC0_DRE_vect){
    1286:	1f 92       	push	r1
    1288:	0f 92       	push	r0
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	0f 92       	push	r0
    128e:	11 24       	eor	r1, r1
	
}
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	0f 90       	pop	r0
    1296:	1f 90       	pop	r1
    1298:	18 95       	reti

0000129a <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    129a:	1f 92       	push	r1
    129c:	0f 92       	push	r0
    129e:	0f b6       	in	r0, 0x3f	; 63
    12a0:	0f 92       	push	r0
    12a2:	11 24       	eor	r1, r1
	
}
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_30>:

ISR(USARTC1_TXC_vect){
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
	
}
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <__vector_29>:

ISR(USARTC1_DRE_vect){
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
	
}
    12cc:	0f 90       	pop	r0
    12ce:	0f be       	out	0x3f, r0	; 63
    12d0:	0f 90       	pop	r0
    12d2:	1f 90       	pop	r1
    12d4:	18 95       	reti

000012d6 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    12d6:	1f 92       	push	r1
    12d8:	0f 92       	push	r0
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	0f 92       	push	r0
    12de:	11 24       	eor	r1, r1
	
}
    12e0:	0f 90       	pop	r0
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	0f 90       	pop	r0
    12e6:	1f 90       	pop	r1
    12e8:	18 95       	reti

000012ea <__vector_90>:

ISR(USARTD0_TXC_vect){
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
	
}
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	18 95       	reti

000012fe <__vector_89>:

ISR(USARTD0_DRE_vect){
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
	
}
    1308:	0f 90       	pop	r0
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	0f 90       	pop	r0
    130e:	1f 90       	pop	r1
    1310:	18 95       	reti

00001312 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    1312:	1f 92       	push	r1
    1314:	0f 92       	push	r0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	0f 92       	push	r0
    131a:	11 24       	eor	r1, r1
	
}
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	0f 90       	pop	r0
    1322:	1f 90       	pop	r1
    1324:	18 95       	reti

00001326 <__vector_60>:

ISR(USARTE0_TXC_vect){
    1326:	1f 92       	push	r1
    1328:	0f 92       	push	r0
    132a:	0f b6       	in	r0, 0x3f	; 63
    132c:	0f 92       	push	r0
    132e:	11 24       	eor	r1, r1
	
}
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	0f 90       	pop	r0
    1336:	1f 90       	pop	r1
    1338:	18 95       	reti

0000133a <__vector_59>:

ISR(USARTE0_DRE_vect){
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
	
}
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    134e:	0f 93       	push	r16
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	1f 92       	push	r1
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    135a:	2f b7       	in	r18, 0x3f	; 63
    135c:	29 83       	std	Y+1, r18	; 0x01
    135e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    1360:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    1362:	fc 01       	movw	r30, r24
    1364:	08 ed       	ldi	r16, 0xD8	; 216
    1366:	04 bf       	out	0x34, r16	; 52
    1368:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	8f bf       	out	0x3f, r24	; 63
#endif
}
    136e:	0f 90       	pop	r0
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    1378:	e0 e5       	ldi	r30, 0x50	; 80
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	90 81       	ld	r25, Z
    137e:	28 2f       	mov	r18, r24
    1380:	20 95       	com	r18
    1382:	92 23       	and	r25, r18
    1384:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    1386:	90 81       	ld	r25, Z
	return clkEnabled;
}
    1388:	89 23       	and	r24, r25
    138a:	08 95       	ret

0000138c <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    1394:	00 e4       	ldi	r16, 0x40	; 64
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	f8 01       	movw	r30, r16
    139a:	60 81       	ld	r22, Z
    139c:	68 7f       	andi	r22, 0xF8	; 248
    139e:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    13a0:	80 e4       	ldi	r24, 0x40	; 64
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 a7 09 	call	0x134e	; 0x134e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    13a8:	f8 01       	movw	r30, r16
    13aa:	80 81       	ld	r24, Z
	return clkCtrl;
}
    13ac:	8c 23       	and	r24, r28
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    13b6:	08 95       	ret

000013b8 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    13b8:	80 93 f4 24 	sts	0x24F4, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    13bc:	28 2f       	mov	r18, r24
    13be:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    13c0:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    13c2:	40 91 c6 04 	lds	r20, 0x04C6
    13c6:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    13ca:	88 23       	and	r24, r24
    13cc:	e4 f4       	brge	.+56     	; 0x1406 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    13ce:	64 e8       	ldi	r22, 0x84	; 132
    13d0:	62 9f       	mul	r22, r18
    13d2:	c0 01       	movw	r24, r0
    13d4:	63 9f       	mul	r22, r19
    13d6:	90 0d       	add	r25, r0
    13d8:	11 24       	eor	r1, r1
    13da:	89 5c       	subi	r24, 0xC9	; 201
    13dc:	9a 4d       	sbci	r25, 0xDA	; 218
    13de:	80 93 f0 24 	sts	0x24F0, r24
    13e2:	90 93 f1 24 	sts	0x24F1, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    13e6:	c9 01       	movw	r24, r18
    13e8:	82 95       	swap	r24
    13ea:	92 95       	swap	r25
    13ec:	90 7f       	andi	r25, 0xF0	; 240
    13ee:	98 27       	eor	r25, r24
    13f0:	80 7f       	andi	r24, 0xF0	; 240
    13f2:	98 27       	eor	r25, r24
    13f4:	08 96       	adiw	r24, 0x08	; 8
    13f6:	9a 01       	movw	r18, r20
    13f8:	28 0f       	add	r18, r24
    13fa:	39 1f       	adc	r19, r25
    13fc:	20 93 f2 24 	sts	0x24F2, r18
    1400:	30 93 f3 24 	sts	0x24F3, r19
    1404:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1406:	64 e8       	ldi	r22, 0x84	; 132
    1408:	62 9f       	mul	r22, r18
    140a:	c0 01       	movw	r24, r0
    140c:	63 9f       	mul	r22, r19
    140e:	90 0d       	add	r25, r0
    1410:	11 24       	eor	r1, r1
    1412:	8b 50       	subi	r24, 0x0B	; 11
    1414:	9b 4d       	sbci	r25, 0xDB	; 219
    1416:	80 93 f0 24 	sts	0x24F0, r24
    141a:	90 93 f1 24 	sts	0x24F1, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    141e:	22 95       	swap	r18
    1420:	32 95       	swap	r19
    1422:	30 7f       	andi	r19, 0xF0	; 240
    1424:	32 27       	eor	r19, r18
    1426:	20 7f       	andi	r18, 0xF0	; 240
    1428:	32 27       	eor	r19, r18
    142a:	24 0f       	add	r18, r20
    142c:	35 1f       	adc	r19, r21
    142e:	20 93 f2 24 	sts	0x24F2, r18
    1432:	30 93 f3 24 	sts	0x24F3, r19
    1436:	08 95       	ret

00001438 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	d8 2f       	mov	r29, r24
    1440:	16 2f       	mov	r17, r22
    1442:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    1444:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    1448:	e0 91 f2 24 	lds	r30, 0x24F2
    144c:	f0 91 f3 24 	lds	r31, 0x24F3
    1450:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1452:	e0 91 f2 24 	lds	r30, 0x24F2
    1456:	f0 91 f3 24 	lds	r31, 0x24F3
    145a:	dd 23       	and	r29, r29
    145c:	a4 f0       	brlt	.+40     	; 0x1486 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    145e:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1460:	e0 91 f2 24 	lds	r30, 0x24F2
    1464:	f0 91 f3 24 	lds	r31, 0x24F3
    1468:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    146a:	e0 91 f2 24 	lds	r30, 0x24F2
    146e:	f0 91 f3 24 	lds	r31, 0x24F3
    1472:	12 82       	std	Z+2, r1	; 0x02
    1474:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1476:	80 91 f0 24 	lds	r24, 0x24F0
    147a:	90 91 f1 24 	lds	r25, 0x24F1
    147e:	84 83       	std	Z+4, r24	; 0x04
    1480:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	14 c0       	rjmp	.+40     	; 0x14ae <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1486:	82 e0       	ldi	r24, 0x02	; 2
    1488:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    148a:	e0 91 f2 24 	lds	r30, 0x24F2
    148e:	f0 91 f3 24 	lds	r31, 0x24F3
    1492:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1494:	e0 91 f2 24 	lds	r30, 0x24F2
    1498:	f0 91 f3 24 	lds	r31, 0x24F3
    149c:	12 82       	std	Z+2, r1	; 0x02
    149e:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    14a0:	80 91 f0 24 	lds	r24, 0x24F0
    14a4:	90 91 f1 24 	lds	r25, 0x24F1
    14a8:	84 83       	std	Z+4, r24	; 0x04
    14aa:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    14ac:	4c 2f       	mov	r20, r28
    14ae:	fc 01       	movw	r30, r24
    14b0:	e0 5c       	subi	r30, 0xC0	; 192
    14b2:	ff 4f       	sbci	r31, 0xFF	; 255
    14b4:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    14b6:	31 96       	adiw	r30, 0x01	; 1
    14b8:	10 82       	st	Z, r1

	return true;
}
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	08 95       	ret

000014c4 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    14c8:	a0 ec       	ldi	r26, 0xC0	; 192
    14ca:	b4 e0       	ldi	r27, 0x04	; 4
    14cc:	16 96       	adiw	r26, 0x06	; 6
    14ce:	ed 91       	ld	r30, X+
    14d0:	fc 91       	ld	r31, X
    14d2:	17 97       	sbiw	r26, 0x07	; 7
    14d4:	c9 01       	movw	r24, r18
    14d6:	82 95       	swap	r24
    14d8:	92 95       	swap	r25
    14da:	90 7f       	andi	r25, 0xF0	; 240
    14dc:	98 27       	eor	r25, r24
    14de:	80 7f       	andi	r24, 0xF0	; 240
    14e0:	98 27       	eor	r25, r24
    14e2:	e8 0f       	add	r30, r24
    14e4:	f9 1f       	adc	r31, r25
    14e6:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    14e8:	16 96       	adiw	r26, 0x06	; 6
    14ea:	4d 91       	ld	r20, X+
    14ec:	5c 91       	ld	r21, X
    14ee:	17 97       	sbiw	r26, 0x07	; 7
    14f0:	fa 01       	movw	r30, r20
    14f2:	e8 0f       	add	r30, r24
    14f4:	f9 1f       	adc	r31, r25
    14f6:	11 82       	std	Z+1, r1	; 0x01
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    14fc:	25 30       	cpi	r18, 0x05	; 5
    14fe:	31 05       	cpc	r19, r1
    1500:	29 f7       	brne	.-54     	; 0x14cc <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    1502:	08 95       	ret

00001504 <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    1504:	1f 92       	push	r1
    1506:	0f 92       	push	r0
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	0f 92       	push	r0
    150c:	11 24       	eor	r1, r1
    150e:	0b b6       	in	r0, 0x3b	; 59
    1510:	0f 92       	push	r0
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	ef 93       	push	r30
    1528:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    152a:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    152e:	88 23       	and	r24, r24
    1530:	4c f4       	brge	.+18     	; 0x1544 <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    1532:	80 91 c8 04 	lds	r24, 0x04C8
    1536:	88 23       	and	r24, r24
    1538:	2c f4       	brge	.+10     	; 0x1544 <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    153a:	80 e8       	ldi	r24, 0x80	; 128
    153c:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1540:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <EVENT_USB_Device_StartOfFrame>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    1544:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    1548:	86 ff       	sbrs	r24, 6
    154a:	07 c0       	rjmp	.+14     	; 0x155a <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    154c:	80 e4       	ldi	r24, 0x40	; 64
    154e:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1552:	10 92 e7 24 	sts	0x24E7, r1
		EVENT_USB_Device_Disconnect();
    1556:	0e 94 e5 08 	call	0x11ca	; 0x11ca <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    155a:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    155e:	85 ff       	sbrs	r24, 5
    1560:	16 c0       	rjmp	.+44     	; 0x158e <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    1568:	80 91 e3 24 	lds	r24, 0x24E3
    156c:	88 23       	and	r24, r24
    156e:	21 f0       	breq	.+8      	; 0x1578 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1570:	84 e0       	ldi	r24, 0x04	; 4
    1572:	80 93 e7 24 	sts	0x24E7, r24
    1576:	09 c0       	rjmp	.+18     	; 0x158a <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1578:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    157c:	81 11       	cpse	r24, r1
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <__vector_125+0x80>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <__vector_125+0x82>
    1584:	83 e0       	ldi	r24, 0x03	; 3
    1586:	80 93 e7 24 	sts	0x24E7, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    158a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    158e:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1592:	84 ff       	sbrs	r24, 4
    1594:	18 c0       	rjmp	.+48     	; 0x15c6 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    1596:	e0 ec       	ldi	r30, 0xC0	; 192
    1598:	f4 e0       	ldi	r31, 0x04	; 4
    159a:	80 e1       	ldi	r24, 0x10	; 16
    159c:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	80 93 e7 24 	sts	0x24E7, r24
		USB_Device_ConfigurationNumber = 0;
    15a4:	10 92 e3 24 	sts	0x24E3, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    15a8:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    15aa:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    15ae:	48 e0       	ldi	r20, 0x08	; 8
    15b0:	68 e4       	ldi	r22, 0x48	; 72
    15b2:	80 e8       	ldi	r24, 0x80	; 128
    15b4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    15b8:	48 e0       	ldi	r20, 0x08	; 8
    15ba:	68 e4       	ldi	r22, 0x48	; 72
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0e 94 1c 0a 	call	0x1438	; 0x1438 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    15c2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <USB_Event_Stub>
	}
}
    15c6:	ff 91       	pop	r31
    15c8:	ef 91       	pop	r30
    15ca:	bf 91       	pop	r27
    15cc:	af 91       	pop	r26
    15ce:	9f 91       	pop	r25
    15d0:	8f 91       	pop	r24
    15d2:	7f 91       	pop	r23
    15d4:	6f 91       	pop	r22
    15d6:	5f 91       	pop	r21
    15d8:	4f 91       	pop	r20
    15da:	3f 91       	pop	r19
    15dc:	2f 91       	pop	r18
    15de:	0f 90       	pop	r0
    15e0:	0b be       	out	0x3b, r0	; 59
    15e2:	0f 90       	pop	r0
    15e4:	0f be       	out	0x3f, r0	; 63
    15e6:	0f 90       	pop	r0
    15e8:	1f 90       	pop	r1
    15ea:	18 95       	reti

000015ec <rtc_initialize>:
/*
 *	initialize the rtc
 */
void rtc_initialize(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
    15ec:	e2 ea       	ldi	r30, 0xA2	; 162
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	87 60       	ori	r24, 0x07	; 7
    15f4:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
    15f6:	8b e0       	ldi	r24, 0x0B	; 11
    15f8:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
    15fc:	e2 e0       	ldi	r30, 0x02	; 2
    15fe:	f4 e0       	ldi	r31, 0x04	; 4
    1600:	80 81       	ld	r24, Z
    1602:	81 60       	ori	r24, 0x01	; 1
    1604:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	80 93 0a 04 	sts	0x040A, r24
    160e:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	80 93 00 04 	sts	0x0400, r24
	sei();
    1618:	78 94       	sei
    161a:	08 95       	ret

0000161c <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
    161c:	1f 92       	push	r1
    161e:	0f 92       	push	r0
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	0f 92       	push	r0
    1624:	11 24       	eor	r1, r1
    1626:	0b b6       	in	r0, 0x3b	; 59
    1628:	0f 92       	push	r0
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31
	#if (USE_RTC_TICK == 1)
	rtc_tick_global++;	
    1642:	80 91 d6 24 	lds	r24, 0x24D6
    1646:	90 91 d7 24 	lds	r25, 0x24D7
    164a:	a0 91 d8 24 	lds	r26, 0x24D8
    164e:	b0 91 d9 24 	lds	r27, 0x24D9
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	a1 1d       	adc	r26, r1
    1656:	b1 1d       	adc	r27, r1
    1658:	80 93 d6 24 	sts	0x24D6, r24
    165c:	90 93 d7 24 	sts	0x24D7, r25
    1660:	a0 93 d8 24 	sts	0x24D8, r26
    1664:	b0 93 d9 24 	sts	0x24D9, r27
	#endif
	
	system_tick();
    1668:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <system_tick>

	
}
    166c:	ff 91       	pop	r31
    166e:	ef 91       	pop	r30
    1670:	bf 91       	pop	r27
    1672:	af 91       	pop	r26
    1674:	9f 91       	pop	r25
    1676:	8f 91       	pop	r24
    1678:	7f 91       	pop	r23
    167a:	6f 91       	pop	r22
    167c:	5f 91       	pop	r21
    167e:	4f 91       	pop	r20
    1680:	3f 91       	pop	r19
    1682:	2f 91       	pop	r18
    1684:	0f 90       	pop	r0
    1686:	0b be       	out	0x3b, r0	; 59
    1688:	0f 90       	pop	r0
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	0f 90       	pop	r0
    168e:	1f 90       	pop	r1
    1690:	18 95       	reti

00001692 <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
    1692:	1f 92       	push	r1
    1694:	0f 92       	push	r0
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	0f 92       	push	r0
    169a:	11 24       	eor	r1, r1


}
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	0f 90       	pop	r0
    16a2:	1f 90       	pop	r1
    16a4:	18 95       	reti

000016a6 <system_tick>:



void            system_tick(void){
	
	__system_time++;
    16a6:	80 91 df 24 	lds	r24, 0x24DF
    16aa:	90 91 e0 24 	lds	r25, 0x24E0
    16ae:	a0 91 e1 24 	lds	r26, 0x24E1
    16b2:	b0 91 e2 24 	lds	r27, 0x24E2
    16b6:	01 96       	adiw	r24, 0x01	; 1
    16b8:	a1 1d       	adc	r26, r1
    16ba:	b1 1d       	adc	r27, r1
    16bc:	80 93 df 24 	sts	0x24DF, r24
    16c0:	90 93 e0 24 	sts	0x24E0, r25
    16c4:	a0 93 e1 24 	sts	0x24E1, r26
    16c8:	b0 93 e2 24 	sts	0x24E2, r27
    16cc:	08 95       	ret

000016ce <__udivmodsi4>:
    16ce:	a1 e2       	ldi	r26, 0x21	; 33
    16d0:	1a 2e       	mov	r1, r26
    16d2:	aa 1b       	sub	r26, r26
    16d4:	bb 1b       	sub	r27, r27
    16d6:	fd 01       	movw	r30, r26
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <__udivmodsi4_ep>

000016da <__udivmodsi4_loop>:
    16da:	aa 1f       	adc	r26, r26
    16dc:	bb 1f       	adc	r27, r27
    16de:	ee 1f       	adc	r30, r30
    16e0:	ff 1f       	adc	r31, r31
    16e2:	a2 17       	cp	r26, r18
    16e4:	b3 07       	cpc	r27, r19
    16e6:	e4 07       	cpc	r30, r20
    16e8:	f5 07       	cpc	r31, r21
    16ea:	20 f0       	brcs	.+8      	; 0x16f4 <__udivmodsi4_ep>
    16ec:	a2 1b       	sub	r26, r18
    16ee:	b3 0b       	sbc	r27, r19
    16f0:	e4 0b       	sbc	r30, r20
    16f2:	f5 0b       	sbc	r31, r21

000016f4 <__udivmodsi4_ep>:
    16f4:	66 1f       	adc	r22, r22
    16f6:	77 1f       	adc	r23, r23
    16f8:	88 1f       	adc	r24, r24
    16fa:	99 1f       	adc	r25, r25
    16fc:	1a 94       	dec	r1
    16fe:	69 f7       	brne	.-38     	; 0x16da <__udivmodsi4_loop>
    1700:	60 95       	com	r22
    1702:	70 95       	com	r23
    1704:	80 95       	com	r24
    1706:	90 95       	com	r25
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	bd 01       	movw	r22, r26
    170e:	cf 01       	movw	r24, r30
    1710:	08 95       	ret

00001712 <__ashrdi3>:
    1712:	97 fb       	bst	r25, 7
    1714:	10 f8       	bld	r1, 0

00001716 <__lshrdi3>:
    1716:	16 94       	lsr	r1
    1718:	00 08       	sbc	r0, r0
    171a:	0f 93       	push	r16
    171c:	08 30       	cpi	r16, 0x08	; 8
    171e:	98 f0       	brcs	.+38     	; 0x1746 <__lshrdi3+0x30>
    1720:	08 50       	subi	r16, 0x08	; 8
    1722:	23 2f       	mov	r18, r19
    1724:	34 2f       	mov	r19, r20
    1726:	45 2f       	mov	r20, r21
    1728:	56 2f       	mov	r21, r22
    172a:	67 2f       	mov	r22, r23
    172c:	78 2f       	mov	r23, r24
    172e:	89 2f       	mov	r24, r25
    1730:	90 2d       	mov	r25, r0
    1732:	f4 cf       	rjmp	.-24     	; 0x171c <__lshrdi3+0x6>
    1734:	05 94       	asr	r0
    1736:	97 95       	ror	r25
    1738:	87 95       	ror	r24
    173a:	77 95       	ror	r23
    173c:	67 95       	ror	r22
    173e:	57 95       	ror	r21
    1740:	47 95       	ror	r20
    1742:	37 95       	ror	r19
    1744:	27 95       	ror	r18
    1746:	0a 95       	dec	r16
    1748:	aa f7       	brpl	.-22     	; 0x1734 <__lshrdi3+0x1e>
    174a:	0f 91       	pop	r16
    174c:	08 95       	ret

0000174e <sprintf>:
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
    175a:	2e 97       	sbiw	r28, 0x0e	; 14
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	de bf       	out	0x3e, r29	; 62
    1760:	0e 89       	ldd	r16, Y+22	; 0x16
    1762:	1f 89       	ldd	r17, Y+23	; 0x17
    1764:	86 e0       	ldi	r24, 0x06	; 6
    1766:	8c 83       	std	Y+4, r24	; 0x04
    1768:	09 83       	std	Y+1, r16	; 0x01
    176a:	1a 83       	std	Y+2, r17	; 0x02
    176c:	8f ef       	ldi	r24, 0xFF	; 255
    176e:	9f e7       	ldi	r25, 0x7F	; 127
    1770:	8d 83       	std	Y+5, r24	; 0x05
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	ae 01       	movw	r20, r28
    1776:	46 5e       	subi	r20, 0xE6	; 230
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	68 8d       	ldd	r22, Y+24	; 0x18
    177c:	79 8d       	ldd	r23, Y+25	; 0x19
    177e:	ce 01       	movw	r24, r28
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <vfprintf>
    1786:	2f 81       	ldd	r18, Y+7	; 0x07
    1788:	38 85       	ldd	r19, Y+8	; 0x08
    178a:	f8 01       	movw	r30, r16
    178c:	e2 0f       	add	r30, r18
    178e:	f3 1f       	adc	r31, r19
    1790:	10 82       	st	Z, r1
    1792:	2e 96       	adiw	r28, 0x0e	; 14
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <vfprintf>:
    17a2:	2f 92       	push	r2
    17a4:	3f 92       	push	r3
    17a6:	4f 92       	push	r4
    17a8:	5f 92       	push	r5
    17aa:	6f 92       	push	r6
    17ac:	7f 92       	push	r7
    17ae:	8f 92       	push	r8
    17b0:	9f 92       	push	r9
    17b2:	af 92       	push	r10
    17b4:	bf 92       	push	r11
    17b6:	cf 92       	push	r12
    17b8:	df 92       	push	r13
    17ba:	ef 92       	push	r14
    17bc:	ff 92       	push	r15
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	2c 97       	sbiw	r28, 0x0c	; 12
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	7c 01       	movw	r14, r24
    17d2:	6b 01       	movw	r12, r22
    17d4:	8a 01       	movw	r16, r20
    17d6:	fc 01       	movw	r30, r24
    17d8:	16 82       	std	Z+6, r1	; 0x06
    17da:	17 82       	std	Z+7, r1	; 0x07
    17dc:	83 81       	ldd	r24, Z+3	; 0x03
    17de:	81 ff       	sbrs	r24, 1
    17e0:	bd c1       	rjmp	.+890    	; 0x1b5c <vfprintf+0x3ba>
    17e2:	ce 01       	movw	r24, r28
    17e4:	01 96       	adiw	r24, 0x01	; 1
    17e6:	4c 01       	movw	r8, r24
    17e8:	f7 01       	movw	r30, r14
    17ea:	93 81       	ldd	r25, Z+3	; 0x03
    17ec:	f6 01       	movw	r30, r12
    17ee:	93 fd       	sbrc	r25, 3
    17f0:	85 91       	lpm	r24, Z+
    17f2:	93 ff       	sbrs	r25, 3
    17f4:	81 91       	ld	r24, Z+
    17f6:	6f 01       	movw	r12, r30
    17f8:	88 23       	and	r24, r24
    17fa:	09 f4       	brne	.+2      	; 0x17fe <vfprintf+0x5c>
    17fc:	ab c1       	rjmp	.+854    	; 0x1b54 <vfprintf+0x3b2>
    17fe:	85 32       	cpi	r24, 0x25	; 37
    1800:	39 f4       	brne	.+14     	; 0x1810 <vfprintf+0x6e>
    1802:	93 fd       	sbrc	r25, 3
    1804:	85 91       	lpm	r24, Z+
    1806:	93 ff       	sbrs	r25, 3
    1808:	81 91       	ld	r24, Z+
    180a:	6f 01       	movw	r12, r30
    180c:	85 32       	cpi	r24, 0x25	; 37
    180e:	29 f4       	brne	.+10     	; 0x181a <vfprintf+0x78>
    1810:	b7 01       	movw	r22, r14
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1818:	e7 cf       	rjmp	.-50     	; 0x17e8 <vfprintf+0x46>
    181a:	51 2c       	mov	r5, r1
    181c:	31 2c       	mov	r3, r1
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	20 32       	cpi	r18, 0x20	; 32
    1822:	a0 f4       	brcc	.+40     	; 0x184c <vfprintf+0xaa>
    1824:	8b 32       	cpi	r24, 0x2B	; 43
    1826:	69 f0       	breq	.+26     	; 0x1842 <vfprintf+0xa0>
    1828:	30 f4       	brcc	.+12     	; 0x1836 <vfprintf+0x94>
    182a:	80 32       	cpi	r24, 0x20	; 32
    182c:	59 f0       	breq	.+22     	; 0x1844 <vfprintf+0xa2>
    182e:	83 32       	cpi	r24, 0x23	; 35
    1830:	69 f4       	brne	.+26     	; 0x184c <vfprintf+0xaa>
    1832:	20 61       	ori	r18, 0x10	; 16
    1834:	2c c0       	rjmp	.+88     	; 0x188e <vfprintf+0xec>
    1836:	8d 32       	cpi	r24, 0x2D	; 45
    1838:	39 f0       	breq	.+14     	; 0x1848 <vfprintf+0xa6>
    183a:	80 33       	cpi	r24, 0x30	; 48
    183c:	39 f4       	brne	.+14     	; 0x184c <vfprintf+0xaa>
    183e:	21 60       	ori	r18, 0x01	; 1
    1840:	26 c0       	rjmp	.+76     	; 0x188e <vfprintf+0xec>
    1842:	22 60       	ori	r18, 0x02	; 2
    1844:	24 60       	ori	r18, 0x04	; 4
    1846:	23 c0       	rjmp	.+70     	; 0x188e <vfprintf+0xec>
    1848:	28 60       	ori	r18, 0x08	; 8
    184a:	21 c0       	rjmp	.+66     	; 0x188e <vfprintf+0xec>
    184c:	27 fd       	sbrc	r18, 7
    184e:	27 c0       	rjmp	.+78     	; 0x189e <vfprintf+0xfc>
    1850:	30 ed       	ldi	r19, 0xD0	; 208
    1852:	38 0f       	add	r19, r24
    1854:	3a 30       	cpi	r19, 0x0A	; 10
    1856:	78 f4       	brcc	.+30     	; 0x1876 <vfprintf+0xd4>
    1858:	26 ff       	sbrs	r18, 6
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0xc6>
    185c:	fa e0       	ldi	r31, 0x0A	; 10
    185e:	5f 9e       	mul	r5, r31
    1860:	30 0d       	add	r19, r0
    1862:	11 24       	eor	r1, r1
    1864:	53 2e       	mov	r5, r19
    1866:	13 c0       	rjmp	.+38     	; 0x188e <vfprintf+0xec>
    1868:	8a e0       	ldi	r24, 0x0A	; 10
    186a:	38 9e       	mul	r3, r24
    186c:	30 0d       	add	r19, r0
    186e:	11 24       	eor	r1, r1
    1870:	33 2e       	mov	r3, r19
    1872:	20 62       	ori	r18, 0x20	; 32
    1874:	0c c0       	rjmp	.+24     	; 0x188e <vfprintf+0xec>
    1876:	8e 32       	cpi	r24, 0x2E	; 46
    1878:	21 f4       	brne	.+8      	; 0x1882 <vfprintf+0xe0>
    187a:	26 fd       	sbrc	r18, 6
    187c:	6b c1       	rjmp	.+726    	; 0x1b54 <vfprintf+0x3b2>
    187e:	20 64       	ori	r18, 0x40	; 64
    1880:	06 c0       	rjmp	.+12     	; 0x188e <vfprintf+0xec>
    1882:	8c 36       	cpi	r24, 0x6C	; 108
    1884:	11 f4       	brne	.+4      	; 0x188a <vfprintf+0xe8>
    1886:	20 68       	ori	r18, 0x80	; 128
    1888:	02 c0       	rjmp	.+4      	; 0x188e <vfprintf+0xec>
    188a:	88 36       	cpi	r24, 0x68	; 104
    188c:	41 f4       	brne	.+16     	; 0x189e <vfprintf+0xfc>
    188e:	f6 01       	movw	r30, r12
    1890:	93 fd       	sbrc	r25, 3
    1892:	85 91       	lpm	r24, Z+
    1894:	93 ff       	sbrs	r25, 3
    1896:	81 91       	ld	r24, Z+
    1898:	6f 01       	movw	r12, r30
    189a:	81 11       	cpse	r24, r1
    189c:	c1 cf       	rjmp	.-126    	; 0x1820 <vfprintf+0x7e>
    189e:	98 2f       	mov	r25, r24
    18a0:	9f 7d       	andi	r25, 0xDF	; 223
    18a2:	95 54       	subi	r25, 0x45	; 69
    18a4:	93 30       	cpi	r25, 0x03	; 3
    18a6:	28 f4       	brcc	.+10     	; 0x18b2 <vfprintf+0x110>
    18a8:	0c 5f       	subi	r16, 0xFC	; 252
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	ff e3       	ldi	r31, 0x3F	; 63
    18ae:	f9 83       	std	Y+1, r31	; 0x01
    18b0:	0d c0       	rjmp	.+26     	; 0x18cc <vfprintf+0x12a>
    18b2:	83 36       	cpi	r24, 0x63	; 99
    18b4:	31 f0       	breq	.+12     	; 0x18c2 <vfprintf+0x120>
    18b6:	83 37       	cpi	r24, 0x73	; 115
    18b8:	71 f0       	breq	.+28     	; 0x18d6 <vfprintf+0x134>
    18ba:	83 35       	cpi	r24, 0x53	; 83
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <vfprintf+0x11e>
    18be:	5b c0       	rjmp	.+182    	; 0x1976 <vfprintf+0x1d4>
    18c0:	22 c0       	rjmp	.+68     	; 0x1906 <vfprintf+0x164>
    18c2:	f8 01       	movw	r30, r16
    18c4:	80 81       	ld	r24, Z
    18c6:	89 83       	std	Y+1, r24	; 0x01
    18c8:	0e 5f       	subi	r16, 0xFE	; 254
    18ca:	1f 4f       	sbci	r17, 0xFF	; 255
    18cc:	44 24       	eor	r4, r4
    18ce:	43 94       	inc	r4
    18d0:	51 2c       	mov	r5, r1
    18d2:	54 01       	movw	r10, r8
    18d4:	15 c0       	rjmp	.+42     	; 0x1900 <vfprintf+0x15e>
    18d6:	38 01       	movw	r6, r16
    18d8:	f2 e0       	ldi	r31, 0x02	; 2
    18da:	6f 0e       	add	r6, r31
    18dc:	71 1c       	adc	r7, r1
    18de:	f8 01       	movw	r30, r16
    18e0:	a0 80       	ld	r10, Z
    18e2:	b1 80       	ldd	r11, Z+1	; 0x01
    18e4:	26 ff       	sbrs	r18, 6
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <vfprintf+0x14c>
    18e8:	65 2d       	mov	r22, r5
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <vfprintf+0x150>
    18ee:	6f ef       	ldi	r22, 0xFF	; 255
    18f0:	7f ef       	ldi	r23, 0xFF	; 255
    18f2:	c5 01       	movw	r24, r10
    18f4:	2c 87       	std	Y+12, r18	; 0x0c
    18f6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <strnlen>
    18fa:	2c 01       	movw	r4, r24
    18fc:	83 01       	movw	r16, r6
    18fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1900:	2f 77       	andi	r18, 0x7F	; 127
    1902:	22 2e       	mov	r2, r18
    1904:	17 c0       	rjmp	.+46     	; 0x1934 <vfprintf+0x192>
    1906:	38 01       	movw	r6, r16
    1908:	f2 e0       	ldi	r31, 0x02	; 2
    190a:	6f 0e       	add	r6, r31
    190c:	71 1c       	adc	r7, r1
    190e:	f8 01       	movw	r30, r16
    1910:	a0 80       	ld	r10, Z
    1912:	b1 80       	ldd	r11, Z+1	; 0x01
    1914:	26 ff       	sbrs	r18, 6
    1916:	03 c0       	rjmp	.+6      	; 0x191e <vfprintf+0x17c>
    1918:	65 2d       	mov	r22, r5
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <vfprintf+0x180>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	c5 01       	movw	r24, r10
    1924:	2c 87       	std	Y+12, r18	; 0x0c
    1926:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <strnlen_P>
    192a:	2c 01       	movw	r4, r24
    192c:	2c 85       	ldd	r18, Y+12	; 0x0c
    192e:	20 68       	ori	r18, 0x80	; 128
    1930:	22 2e       	mov	r2, r18
    1932:	83 01       	movw	r16, r6
    1934:	23 fc       	sbrc	r2, 3
    1936:	1b c0       	rjmp	.+54     	; 0x196e <vfprintf+0x1cc>
    1938:	83 2d       	mov	r24, r3
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	48 16       	cp	r4, r24
    193e:	59 06       	cpc	r5, r25
    1940:	b0 f4       	brcc	.+44     	; 0x196e <vfprintf+0x1cc>
    1942:	b7 01       	movw	r22, r14
    1944:	80 e2       	ldi	r24, 0x20	; 32
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    194c:	3a 94       	dec	r3
    194e:	f4 cf       	rjmp	.-24     	; 0x1938 <vfprintf+0x196>
    1950:	f5 01       	movw	r30, r10
    1952:	27 fc       	sbrc	r2, 7
    1954:	85 91       	lpm	r24, Z+
    1956:	27 fe       	sbrs	r2, 7
    1958:	81 91       	ld	r24, Z+
    195a:	5f 01       	movw	r10, r30
    195c:	b7 01       	movw	r22, r14
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1964:	31 10       	cpse	r3, r1
    1966:	3a 94       	dec	r3
    1968:	f1 e0       	ldi	r31, 0x01	; 1
    196a:	4f 1a       	sub	r4, r31
    196c:	51 08       	sbc	r5, r1
    196e:	41 14       	cp	r4, r1
    1970:	51 04       	cpc	r5, r1
    1972:	71 f7       	brne	.-36     	; 0x1950 <vfprintf+0x1ae>
    1974:	e5 c0       	rjmp	.+458    	; 0x1b40 <vfprintf+0x39e>
    1976:	84 36       	cpi	r24, 0x64	; 100
    1978:	11 f0       	breq	.+4      	; 0x197e <vfprintf+0x1dc>
    197a:	89 36       	cpi	r24, 0x69	; 105
    197c:	39 f5       	brne	.+78     	; 0x19cc <vfprintf+0x22a>
    197e:	f8 01       	movw	r30, r16
    1980:	27 ff       	sbrs	r18, 7
    1982:	07 c0       	rjmp	.+14     	; 0x1992 <vfprintf+0x1f0>
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	0c 5f       	subi	r16, 0xFC	; 252
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	08 c0       	rjmp	.+16     	; 0x19a2 <vfprintf+0x200>
    1992:	60 81       	ld	r22, Z
    1994:	71 81       	ldd	r23, Z+1	; 0x01
    1996:	07 2e       	mov	r0, r23
    1998:	00 0c       	add	r0, r0
    199a:	88 0b       	sbc	r24, r24
    199c:	99 0b       	sbc	r25, r25
    199e:	0e 5f       	subi	r16, 0xFE	; 254
    19a0:	1f 4f       	sbci	r17, 0xFF	; 255
    19a2:	2f 76       	andi	r18, 0x6F	; 111
    19a4:	72 2e       	mov	r7, r18
    19a6:	97 ff       	sbrs	r25, 7
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <vfprintf+0x21a>
    19aa:	90 95       	com	r25
    19ac:	80 95       	com	r24
    19ae:	70 95       	com	r23
    19b0:	61 95       	neg	r22
    19b2:	7f 4f       	sbci	r23, 0xFF	; 255
    19b4:	8f 4f       	sbci	r24, 0xFF	; 255
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	20 68       	ori	r18, 0x80	; 128
    19ba:	72 2e       	mov	r7, r18
    19bc:	2a e0       	ldi	r18, 0x0A	; 10
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	a4 01       	movw	r20, r8
    19c2:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__ultoa_invert>
    19c6:	a8 2e       	mov	r10, r24
    19c8:	a8 18       	sub	r10, r8
    19ca:	44 c0       	rjmp	.+136    	; 0x1a54 <vfprintf+0x2b2>
    19cc:	85 37       	cpi	r24, 0x75	; 117
    19ce:	29 f4       	brne	.+10     	; 0x19da <vfprintf+0x238>
    19d0:	2f 7e       	andi	r18, 0xEF	; 239
    19d2:	b2 2e       	mov	r11, r18
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	25 c0       	rjmp	.+74     	; 0x1a24 <vfprintf+0x282>
    19da:	f2 2f       	mov	r31, r18
    19dc:	f9 7f       	andi	r31, 0xF9	; 249
    19de:	bf 2e       	mov	r11, r31
    19e0:	8f 36       	cpi	r24, 0x6F	; 111
    19e2:	c1 f0       	breq	.+48     	; 0x1a14 <vfprintf+0x272>
    19e4:	18 f4       	brcc	.+6      	; 0x19ec <vfprintf+0x24a>
    19e6:	88 35       	cpi	r24, 0x58	; 88
    19e8:	79 f0       	breq	.+30     	; 0x1a08 <vfprintf+0x266>
    19ea:	b4 c0       	rjmp	.+360    	; 0x1b54 <vfprintf+0x3b2>
    19ec:	80 37       	cpi	r24, 0x70	; 112
    19ee:	19 f0       	breq	.+6      	; 0x19f6 <vfprintf+0x254>
    19f0:	88 37       	cpi	r24, 0x78	; 120
    19f2:	21 f0       	breq	.+8      	; 0x19fc <vfprintf+0x25a>
    19f4:	af c0       	rjmp	.+350    	; 0x1b54 <vfprintf+0x3b2>
    19f6:	2f 2f       	mov	r18, r31
    19f8:	20 61       	ori	r18, 0x10	; 16
    19fa:	b2 2e       	mov	r11, r18
    19fc:	b4 fe       	sbrs	r11, 4
    19fe:	0d c0       	rjmp	.+26     	; 0x1a1a <vfprintf+0x278>
    1a00:	8b 2d       	mov	r24, r11
    1a02:	84 60       	ori	r24, 0x04	; 4
    1a04:	b8 2e       	mov	r11, r24
    1a06:	09 c0       	rjmp	.+18     	; 0x1a1a <vfprintf+0x278>
    1a08:	24 ff       	sbrs	r18, 4
    1a0a:	0a c0       	rjmp	.+20     	; 0x1a20 <vfprintf+0x27e>
    1a0c:	9f 2f       	mov	r25, r31
    1a0e:	96 60       	ori	r25, 0x06	; 6
    1a10:	b9 2e       	mov	r11, r25
    1a12:	06 c0       	rjmp	.+12     	; 0x1a20 <vfprintf+0x27e>
    1a14:	28 e0       	ldi	r18, 0x08	; 8
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <vfprintf+0x282>
    1a1a:	20 e1       	ldi	r18, 0x10	; 16
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	02 c0       	rjmp	.+4      	; 0x1a24 <vfprintf+0x282>
    1a20:	20 e1       	ldi	r18, 0x10	; 16
    1a22:	32 e0       	ldi	r19, 0x02	; 2
    1a24:	f8 01       	movw	r30, r16
    1a26:	b7 fe       	sbrs	r11, 7
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <vfprintf+0x296>
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	0c 5f       	subi	r16, 0xFC	; 252
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	06 c0       	rjmp	.+12     	; 0x1a44 <vfprintf+0x2a2>
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	80 e0       	ldi	r24, 0x00	; 0
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 5f       	subi	r16, 0xFE	; 254
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	a4 01       	movw	r20, r8
    1a46:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__ultoa_invert>
    1a4a:	a8 2e       	mov	r10, r24
    1a4c:	a8 18       	sub	r10, r8
    1a4e:	fb 2d       	mov	r31, r11
    1a50:	ff 77       	andi	r31, 0x7F	; 127
    1a52:	7f 2e       	mov	r7, r31
    1a54:	76 fe       	sbrs	r7, 6
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <vfprintf+0x2cc>
    1a58:	37 2d       	mov	r19, r7
    1a5a:	3e 7f       	andi	r19, 0xFE	; 254
    1a5c:	a5 14       	cp	r10, r5
    1a5e:	50 f4       	brcc	.+20     	; 0x1a74 <vfprintf+0x2d2>
    1a60:	74 fe       	sbrs	r7, 4
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <vfprintf+0x2d6>
    1a64:	72 fc       	sbrc	r7, 2
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0x2d6>
    1a68:	37 2d       	mov	r19, r7
    1a6a:	3e 7e       	andi	r19, 0xEE	; 238
    1a6c:	05 c0       	rjmp	.+10     	; 0x1a78 <vfprintf+0x2d6>
    1a6e:	ba 2c       	mov	r11, r10
    1a70:	37 2d       	mov	r19, r7
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <vfprintf+0x2d8>
    1a74:	ba 2c       	mov	r11, r10
    1a76:	01 c0       	rjmp	.+2      	; 0x1a7a <vfprintf+0x2d8>
    1a78:	b5 2c       	mov	r11, r5
    1a7a:	34 ff       	sbrs	r19, 4
    1a7c:	0d c0       	rjmp	.+26     	; 0x1a98 <vfprintf+0x2f6>
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ea 0d       	add	r30, r10
    1a82:	f1 1d       	adc	r31, r1
    1a84:	80 81       	ld	r24, Z
    1a86:	80 33       	cpi	r24, 0x30	; 48
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <vfprintf+0x2ec>
    1a8a:	39 7e       	andi	r19, 0xE9	; 233
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <vfprintf+0x2fe>
    1a8e:	32 ff       	sbrs	r19, 2
    1a90:	06 c0       	rjmp	.+12     	; 0x1a9e <vfprintf+0x2fc>
    1a92:	b3 94       	inc	r11
    1a94:	b3 94       	inc	r11
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <vfprintf+0x2fe>
    1a98:	83 2f       	mov	r24, r19
    1a9a:	86 78       	andi	r24, 0x86	; 134
    1a9c:	09 f0       	breq	.+2      	; 0x1aa0 <vfprintf+0x2fe>
    1a9e:	b3 94       	inc	r11
    1aa0:	33 fd       	sbrc	r19, 3
    1aa2:	13 c0       	rjmp	.+38     	; 0x1aca <vfprintf+0x328>
    1aa4:	30 ff       	sbrs	r19, 0
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <vfprintf+0x312>
    1aa8:	5a 2c       	mov	r5, r10
    1aaa:	b3 14       	cp	r11, r3
    1aac:	18 f4       	brcc	.+6      	; 0x1ab4 <vfprintf+0x312>
    1aae:	53 0c       	add	r5, r3
    1ab0:	5b 18       	sub	r5, r11
    1ab2:	b3 2c       	mov	r11, r3
    1ab4:	b3 14       	cp	r11, r3
    1ab6:	68 f4       	brcc	.+26     	; 0x1ad2 <vfprintf+0x330>
    1ab8:	b7 01       	movw	r22, r14
    1aba:	80 e2       	ldi	r24, 0x20	; 32
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	3c 87       	std	Y+12, r19	; 0x0c
    1ac0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1ac4:	b3 94       	inc	r11
    1ac6:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ac8:	f5 cf       	rjmp	.-22     	; 0x1ab4 <vfprintf+0x312>
    1aca:	b3 14       	cp	r11, r3
    1acc:	10 f4       	brcc	.+4      	; 0x1ad2 <vfprintf+0x330>
    1ace:	3b 18       	sub	r3, r11
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <vfprintf+0x332>
    1ad2:	31 2c       	mov	r3, r1
    1ad4:	34 ff       	sbrs	r19, 4
    1ad6:	12 c0       	rjmp	.+36     	; 0x1afc <vfprintf+0x35a>
    1ad8:	b7 01       	movw	r22, r14
    1ada:	80 e3       	ldi	r24, 0x30	; 48
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	3c 87       	std	Y+12, r19	; 0x0c
    1ae0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1ae4:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ae6:	32 ff       	sbrs	r19, 2
    1ae8:	17 c0       	rjmp	.+46     	; 0x1b18 <vfprintf+0x376>
    1aea:	31 fd       	sbrc	r19, 1
    1aec:	03 c0       	rjmp	.+6      	; 0x1af4 <vfprintf+0x352>
    1aee:	88 e7       	ldi	r24, 0x78	; 120
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <vfprintf+0x356>
    1af4:	88 e5       	ldi	r24, 0x58	; 88
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	b7 01       	movw	r22, r14
    1afa:	0c c0       	rjmp	.+24     	; 0x1b14 <vfprintf+0x372>
    1afc:	83 2f       	mov	r24, r19
    1afe:	86 78       	andi	r24, 0x86	; 134
    1b00:	59 f0       	breq	.+22     	; 0x1b18 <vfprintf+0x376>
    1b02:	31 ff       	sbrs	r19, 1
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <vfprintf+0x368>
    1b06:	8b e2       	ldi	r24, 0x2B	; 43
    1b08:	01 c0       	rjmp	.+2      	; 0x1b0c <vfprintf+0x36a>
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	37 fd       	sbrc	r19, 7
    1b0e:	8d e2       	ldi	r24, 0x2D	; 45
    1b10:	b7 01       	movw	r22, r14
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1b18:	a5 14       	cp	r10, r5
    1b1a:	38 f4       	brcc	.+14     	; 0x1b2a <vfprintf+0x388>
    1b1c:	b7 01       	movw	r22, r14
    1b1e:	80 e3       	ldi	r24, 0x30	; 48
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1b26:	5a 94       	dec	r5
    1b28:	f7 cf       	rjmp	.-18     	; 0x1b18 <vfprintf+0x376>
    1b2a:	aa 94       	dec	r10
    1b2c:	f4 01       	movw	r30, r8
    1b2e:	ea 0d       	add	r30, r10
    1b30:	f1 1d       	adc	r31, r1
    1b32:	80 81       	ld	r24, Z
    1b34:	b7 01       	movw	r22, r14
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1b3c:	a1 10       	cpse	r10, r1
    1b3e:	f5 cf       	rjmp	.-22     	; 0x1b2a <vfprintf+0x388>
    1b40:	33 20       	and	r3, r3
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <vfprintf+0x3a4>
    1b44:	51 ce       	rjmp	.-862    	; 0x17e8 <vfprintf+0x46>
    1b46:	b7 01       	movw	r22, r14
    1b48:	80 e2       	ldi	r24, 0x20	; 32
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <fputc>
    1b50:	3a 94       	dec	r3
    1b52:	f6 cf       	rjmp	.-20     	; 0x1b40 <vfprintf+0x39e>
    1b54:	f7 01       	movw	r30, r14
    1b56:	86 81       	ldd	r24, Z+6	; 0x06
    1b58:	97 81       	ldd	r25, Z+7	; 0x07
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <vfprintf+0x3be>
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	2c 96       	adiw	r28, 0x0c	; 12
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	de bf       	out	0x3e, r29	; 62
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	0f 91       	pop	r16
    1b6e:	ff 90       	pop	r15
    1b70:	ef 90       	pop	r14
    1b72:	df 90       	pop	r13
    1b74:	cf 90       	pop	r12
    1b76:	bf 90       	pop	r11
    1b78:	af 90       	pop	r10
    1b7a:	9f 90       	pop	r9
    1b7c:	8f 90       	pop	r8
    1b7e:	7f 90       	pop	r7
    1b80:	6f 90       	pop	r6
    1b82:	5f 90       	pop	r5
    1b84:	4f 90       	pop	r4
    1b86:	3f 90       	pop	r3
    1b88:	2f 90       	pop	r2
    1b8a:	08 95       	ret

00001b8c <strnlen_P>:
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	05 90       	lpm	r0, Z+
    1b90:	61 50       	subi	r22, 0x01	; 1
    1b92:	70 40       	sbci	r23, 0x00	; 0
    1b94:	01 10       	cpse	r0, r1
    1b96:	d8 f7       	brcc	.-10     	; 0x1b8e <strnlen_P+0x2>
    1b98:	80 95       	com	r24
    1b9a:	90 95       	com	r25
    1b9c:	8e 0f       	add	r24, r30
    1b9e:	9f 1f       	adc	r25, r31
    1ba0:	08 95       	ret

00001ba2 <strnlen>:
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	61 50       	subi	r22, 0x01	; 1
    1ba6:	70 40       	sbci	r23, 0x00	; 0
    1ba8:	01 90       	ld	r0, Z+
    1baa:	01 10       	cpse	r0, r1
    1bac:	d8 f7       	brcc	.-10     	; 0x1ba4 <strnlen+0x2>
    1bae:	80 95       	com	r24
    1bb0:	90 95       	com	r25
    1bb2:	8e 0f       	add	r24, r30
    1bb4:	9f 1f       	adc	r25, r31
    1bb6:	08 95       	ret

00001bb8 <fputc>:
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	23 81       	ldd	r18, Z+3	; 0x03
    1bc4:	21 fd       	sbrc	r18, 1
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <fputc+0x16>
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	9f ef       	ldi	r25, 0xFF	; 255
    1bcc:	28 c0       	rjmp	.+80     	; 0x1c1e <fputc+0x66>
    1bce:	22 ff       	sbrs	r18, 2
    1bd0:	16 c0       	rjmp	.+44     	; 0x1bfe <fputc+0x46>
    1bd2:	46 81       	ldd	r20, Z+6	; 0x06
    1bd4:	57 81       	ldd	r21, Z+7	; 0x07
    1bd6:	24 81       	ldd	r18, Z+4	; 0x04
    1bd8:	35 81       	ldd	r19, Z+5	; 0x05
    1bda:	42 17       	cp	r20, r18
    1bdc:	53 07       	cpc	r21, r19
    1bde:	44 f4       	brge	.+16     	; 0x1bf0 <fputc+0x38>
    1be0:	a0 81       	ld	r26, Z
    1be2:	b1 81       	ldd	r27, Z+1	; 0x01
    1be4:	9d 01       	movw	r18, r26
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	20 83       	st	Z, r18
    1bec:	31 83       	std	Z+1, r19	; 0x01
    1bee:	8c 93       	st	X, r24
    1bf0:	26 81       	ldd	r18, Z+6	; 0x06
    1bf2:	37 81       	ldd	r19, Z+7	; 0x07
    1bf4:	2f 5f       	subi	r18, 0xFF	; 255
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	26 83       	std	Z+6, r18	; 0x06
    1bfa:	37 83       	std	Z+7, r19	; 0x07
    1bfc:	10 c0       	rjmp	.+32     	; 0x1c1e <fputc+0x66>
    1bfe:	eb 01       	movw	r28, r22
    1c00:	09 2f       	mov	r16, r25
    1c02:	18 2f       	mov	r17, r24
    1c04:	00 84       	ldd	r0, Z+8	; 0x08
    1c06:	f1 85       	ldd	r31, Z+9	; 0x09
    1c08:	e0 2d       	mov	r30, r0
    1c0a:	19 95       	eicall
    1c0c:	89 2b       	or	r24, r25
    1c0e:	e1 f6       	brne	.-72     	; 0x1bc8 <fputc+0x10>
    1c10:	8e 81       	ldd	r24, Y+6	; 0x06
    1c12:	9f 81       	ldd	r25, Y+7	; 0x07
    1c14:	01 96       	adiw	r24, 0x01	; 1
    1c16:	8e 83       	std	Y+6, r24	; 0x06
    1c18:	9f 83       	std	Y+7, r25	; 0x07
    1c1a:	81 2f       	mov	r24, r17
    1c1c:	90 2f       	mov	r25, r16
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <__ultoa_invert>:
    1c28:	fa 01       	movw	r30, r20
    1c2a:	aa 27       	eor	r26, r26
    1c2c:	28 30       	cpi	r18, 0x08	; 8
    1c2e:	51 f1       	breq	.+84     	; 0x1c84 <__ultoa_invert+0x5c>
    1c30:	20 31       	cpi	r18, 0x10	; 16
    1c32:	81 f1       	breq	.+96     	; 0x1c94 <__ultoa_invert+0x6c>
    1c34:	e8 94       	clt
    1c36:	6f 93       	push	r22
    1c38:	6e 7f       	andi	r22, 0xFE	; 254
    1c3a:	6e 5f       	subi	r22, 0xFE	; 254
    1c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c40:	9f 4f       	sbci	r25, 0xFF	; 255
    1c42:	af 4f       	sbci	r26, 0xFF	; 255
    1c44:	b1 e0       	ldi	r27, 0x01	; 1
    1c46:	3e d0       	rcall	.+124    	; 0x1cc4 <__ultoa_invert+0x9c>
    1c48:	b4 e0       	ldi	r27, 0x04	; 4
    1c4a:	3c d0       	rcall	.+120    	; 0x1cc4 <__ultoa_invert+0x9c>
    1c4c:	67 0f       	add	r22, r23
    1c4e:	78 1f       	adc	r23, r24
    1c50:	89 1f       	adc	r24, r25
    1c52:	9a 1f       	adc	r25, r26
    1c54:	a1 1d       	adc	r26, r1
    1c56:	68 0f       	add	r22, r24
    1c58:	79 1f       	adc	r23, r25
    1c5a:	8a 1f       	adc	r24, r26
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	a1 1d       	adc	r26, r1
    1c60:	6a 0f       	add	r22, r26
    1c62:	71 1d       	adc	r23, r1
    1c64:	81 1d       	adc	r24, r1
    1c66:	91 1d       	adc	r25, r1
    1c68:	a1 1d       	adc	r26, r1
    1c6a:	20 d0       	rcall	.+64     	; 0x1cac <__ultoa_invert+0x84>
    1c6c:	09 f4       	brne	.+2      	; 0x1c70 <__ultoa_invert+0x48>
    1c6e:	68 94       	set
    1c70:	3f 91       	pop	r19
    1c72:	2a e0       	ldi	r18, 0x0A	; 10
    1c74:	26 9f       	mul	r18, r22
    1c76:	11 24       	eor	r1, r1
    1c78:	30 19       	sub	r19, r0
    1c7a:	30 5d       	subi	r19, 0xD0	; 208
    1c7c:	31 93       	st	Z+, r19
    1c7e:	de f6       	brtc	.-74     	; 0x1c36 <__ultoa_invert+0xe>
    1c80:	cf 01       	movw	r24, r30
    1c82:	08 95       	ret
    1c84:	46 2f       	mov	r20, r22
    1c86:	47 70       	andi	r20, 0x07	; 7
    1c88:	40 5d       	subi	r20, 0xD0	; 208
    1c8a:	41 93       	st	Z+, r20
    1c8c:	b3 e0       	ldi	r27, 0x03	; 3
    1c8e:	0f d0       	rcall	.+30     	; 0x1cae <__ultoa_invert+0x86>
    1c90:	c9 f7       	brne	.-14     	; 0x1c84 <__ultoa_invert+0x5c>
    1c92:	f6 cf       	rjmp	.-20     	; 0x1c80 <__ultoa_invert+0x58>
    1c94:	46 2f       	mov	r20, r22
    1c96:	4f 70       	andi	r20, 0x0F	; 15
    1c98:	40 5d       	subi	r20, 0xD0	; 208
    1c9a:	4a 33       	cpi	r20, 0x3A	; 58
    1c9c:	18 f0       	brcs	.+6      	; 0x1ca4 <__ultoa_invert+0x7c>
    1c9e:	49 5d       	subi	r20, 0xD9	; 217
    1ca0:	31 fd       	sbrc	r19, 1
    1ca2:	40 52       	subi	r20, 0x20	; 32
    1ca4:	41 93       	st	Z+, r20
    1ca6:	02 d0       	rcall	.+4      	; 0x1cac <__ultoa_invert+0x84>
    1ca8:	a9 f7       	brne	.-22     	; 0x1c94 <__ultoa_invert+0x6c>
    1caa:	ea cf       	rjmp	.-44     	; 0x1c80 <__ultoa_invert+0x58>
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	a6 95       	lsr	r26
    1cb0:	97 95       	ror	r25
    1cb2:	87 95       	ror	r24
    1cb4:	77 95       	ror	r23
    1cb6:	67 95       	ror	r22
    1cb8:	ba 95       	dec	r27
    1cba:	c9 f7       	brne	.-14     	; 0x1cae <__ultoa_invert+0x86>
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 05       	cpc	r22, r1
    1cc0:	71 05       	cpc	r23, r1
    1cc2:	08 95       	ret
    1cc4:	9b 01       	movw	r18, r22
    1cc6:	ac 01       	movw	r20, r24
    1cc8:	0a 2e       	mov	r0, r26
    1cca:	06 94       	lsr	r0
    1ccc:	57 95       	ror	r21
    1cce:	47 95       	ror	r20
    1cd0:	37 95       	ror	r19
    1cd2:	27 95       	ror	r18
    1cd4:	ba 95       	dec	r27
    1cd6:	c9 f7       	brne	.-14     	; 0x1cca <__ultoa_invert+0xa2>
    1cd8:	62 0f       	add	r22, r18
    1cda:	73 1f       	adc	r23, r19
    1cdc:	84 1f       	adc	r24, r20
    1cde:	95 1f       	adc	r25, r21
    1ce0:	a0 1d       	adc	r26, r0
    1ce2:	08 95       	ret

00001ce4 <_exit>:
    1ce4:	f8 94       	cli

00001ce6 <__stop_program>:
    1ce6:	ff cf       	rjmp	.-2      	; 0x1ce6 <__stop_program>
