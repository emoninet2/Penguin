
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00802000  00001298  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004bd  008022b4  008022b4  000015e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a600  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c53  00000000  00000000  0000c390  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bb1  00000000  00000000  0000dfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015a4  00000000  00000000  00010b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043eb  00000000  00000000  00012138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005436  00000000  00000000  00016523  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  0001b959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
      28:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_10>
      2c:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <__vector_11>
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	if (Endpoint_IsSETUPReceived())
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

		switch (USB_ControlRequest.bRequest)
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__vector_25>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      68:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_26>
      6c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__vector_27>
      70:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__vector_28>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
      74:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_29>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
      78:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_30>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				Endpoint_Write_8(Data >> 8);
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_58>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
      ec:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__vector_59>
      f0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__vector_60>
					{
						Endpoint_StallTransaction();
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearSETUP();
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	while (!(Endpoint_IsINReady()));
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     160:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__vector_88>
     164:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__vector_89>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     168:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_90>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					SerialByte = pgm_read_byte(SigReadAddress);
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					NVM.CMD    = 0;
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					if (SerialCharNum & 0x01)
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					{
						SerialByte >>= 4;
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	Endpoint_ClearOUT();
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_125>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
     1fc:	11 24       	eor	r1, r1
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e9       	ldi	r29, 0x9F	; 159
     206:	de bf       	out	0x3e, r29	; 62
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     212:	e8 e9       	ldi	r30, 0x98	; 152
     214:	f2 e1       	ldi	r31, 0x12	; 18

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
	Endpoint_ClearIN();
     21e:	0d 92       	st	X+, r0
     220:	a4 3b       	cpi	r26, 0xB4	; 180

	Endpoint_ClearStatusStage();
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	27 e2       	ldi	r18, 0x27	; 39
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     228:	a4 eb       	ldi	r26, 0xB4	; 180
     22a:	b2 e2       	ldi	r27, 0x22	; 34
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a1 37       	cpi	r26, 0x71	; 113
     232:	b2 07       	cpc	r27, r18
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 d0 05 	call	0xba0	; 0xba0 <main>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     23a:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <arch_spi_master_transmit_byte_val>:
}


static uint8_t arch_spi_master_transmit_byte_val(uint8_t data)
{
	NRF24L01P_SPI.DATA = data;
     242:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS &(1<<SPI_IF_bp)));
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	82 81       	ldd	r24, Z+2	; 0x02
     24c:	88 23       	and	r24, r24
     24e:	ec f7       	brge	.-6      	; 0x24a <arch_spi_master_transmit_byte_val+0x8>
	return SPIC.DATA;
     250:	80 91 c3 08 	lds	r24, 0x08C3
}
     254:	08 95       	ret

00000256 <arch_spi_master_transmit_byte_ref>:

static uint8_t arch_spi_master_transmit_byte_ref(uint8_t *data)
{
	NRF24L01P_SPI.DATA = *data;
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	80 93 c3 08 	sts	0x08C3, r24
	while(!(NRF24L01P_SPI.STATUS &(1<<SPI_IF_bp)));
     25e:	e0 ec       	ldi	r30, 0xC0	; 192
     260:	f8 e0       	ldi	r31, 0x08	; 8
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	88 23       	and	r24, r24
     266:	ec f7       	brge	.-6      	; 0x262 <arch_spi_master_transmit_byte_ref+0xc>
	return NRF24L01P_SPI.DATA;
     268:	80 91 c3 08 	lds	r24, 0x08C3
}
     26c:	08 95       	ret

0000026e <_nrf24l01p_ce_pin>:
 */ 

#include "nrf24l01p.h"


void _nrf24l01p_ce_pin(bool state){
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_ce_pin(bool state){
	//if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	//else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
	
	if(state) DigitalPin_SetValue(&nrf24l01p_ce_pin) ;
     272:	88 23       	and	r24, r24
     274:	29 f0       	breq	.+10     	; 0x280 <_nrf24l01p_ce_pin+0x12>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e2       	ldi	r25, 0x20	; 32
     27a:	0e 94 d0 06 	call	0xda0	; 0xda0 <DigitalPin_SetValue>
     27e:	04 c0       	rjmp	.+8      	; 0x288 <_nrf24l01p_ce_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_ce_pin);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e2       	ldi	r25, 0x20	; 32
     284:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DigitalPin_ClearValue>
	arch_nrf24l01p_ce_pin(state);
	ce_value = state;
     288:	c0 93 c3 24 	sts	0x24C3, r28
}
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <_nrf24l01p_csn_pin>:
void _nrf24l01p_csn_pin(bool state){
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_csn_pin(bool state){
// 	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
// 	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);

	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
     294:	88 23       	and	r24, r24
     296:	29 f0       	breq	.+10     	; 0x2a2 <_nrf24l01p_csn_pin+0x12>
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	90 e2       	ldi	r25, 0x20	; 32
     29c:	0e 94 d0 06 	call	0xda0	; 0xda0 <DigitalPin_SetValue>
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <_nrf24l01p_csn_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <DigitalPin_ClearValue>

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     2aa:	c0 93 c2 24 	sts	0x24C2, r28
}
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_nrf24l01p_read_register>:
	_nrf24l01p_startup();
	
}


void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	c8 2f       	mov	r28, r24
     2c0:	7b 01       	movw	r14, r22
     2c2:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
     2ca:	8c 2f       	mov	r24, r28
     2cc:	8f 71       	andi	r24, 0x1F	; 31
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     2d2:	10 16       	cp	r1, r16
     2d4:	11 06       	cpc	r1, r17
     2d6:	94 f4       	brge	.+36     	; 0x2fc <_nrf24l01p_read_register+0x4a>
     2d8:	e7 01       	movw	r28, r14
     2da:	0e 0d       	add	r16, r14
     2dc:	1f 1d       	adc	r17, r15
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
	*data = NRF24L01P_SPI.DATA;
     2de:	0f 2e       	mov	r0, r31
     2e0:	f0 ec       	ldi	r31, 0xC0	; 192
     2e2:	ef 2e       	mov	r14, r31
     2e4:	f8 e0       	ldi	r31, 0x08	; 8
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     2f0:	f7 01       	movw	r30, r14
     2f2:	83 81       	ldd	r24, Z+3	; 0x03
     2f4:	89 93       	st	Y+, r24
     2f6:	c0 17       	cp	r28, r16
     2f8:	d1 07       	cpc	r29, r17
     2fa:	b9 f7       	brne	.-18     	; 0x2ea <_nrf24l01p_read_register+0x38>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <_nrf24l01p_write_register>:
// 	uint8_t temp =  arch_spi_master_transmit_byte_val(0xff);
// 	_nrf24l01p_csn_pin(1);

// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	c8 2f       	mov	r28, r24
     31e:	7b 01       	movw	r14, r22
     320:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
     328:	8c 2f       	mov	r24, r28
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     332:	10 16       	cp	r1, r16
     334:	11 06       	cpc	r1, r17
     336:	54 f4       	brge	.+20     	; 0x34c <_nrf24l01p_write_register+0x3c>
     338:	e7 01       	movw	r28, r14
     33a:	0e 0d       	add	r16, r14
     33c:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 2b 01 	call	0x256	; 0x256 <arch_spi_master_transmit_byte_ref>
     344:	21 96       	adiw	r28, 0x01	; 1
// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
     346:	c0 17       	cp	r28, r16
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <_nrf24l01p_write_register+0x2e>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <_nrf24l01p_read_rx_payload>:
// 	arch_spi_master_transmit_byte_val(datain);
// 	_nrf24l01p_csn_pin(1);

// }

void _nrf24l01p_read_rx_payload(uint8_t *dataout, int pay_len){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	7c 01       	movw	r14, r24
     36e:	8b 01       	movw	r16, r22
	_nrf24l01p_csn_pin(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
     376:	81 e6       	ldi	r24, 0x61	; 97
     378:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     37c:	10 16       	cp	r1, r16
     37e:	11 06       	cpc	r1, r17
     380:	94 f4       	brge	.+36     	; 0x3a6 <_nrf24l01p_read_rx_payload+0x46>
     382:	e7 01       	movw	r28, r14
     384:	0e 0d       	add	r16, r14
     386:	1f 1d       	adc	r17, r15
     388:	0f 2e       	mov	r0, r31
     38a:	f0 ec       	ldi	r31, 0xC0	; 192
     38c:	ef 2e       	mov	r14, r31
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     39a:	f7 01       	movw	r30, r14
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	99 93       	st	Y+, r25
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	b9 f7       	brne	.-18     	; 0x394 <_nrf24l01p_read_rx_payload+0x34>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_nrf24l01p_flush_rx>:
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
     3c0:	82 ee       	ldi	r24, 0xE2	; 226
     3c2:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	_nrf24l01p_csn_pin(1);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
     3cc:	08 95       	ret

000003ce <_nrf24l01p_read_rx_payload_width>:
void _nrf24l01p_reuse_tx_payload(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_REUSE_TX_PL);
	_nrf24l01p_csn_pin(1);
}
int _nrf24l01p_read_rx_payload_width(){
     3ce:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_R_RX_PL_WID);
     3d6:	80 e6       	ldi	r24, 0x60	; 96
     3d8:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	uint8_t temp =  arch_spi_master_transmit_byte_val(0xFF);
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     3e2:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	return temp;
}
     3ea:	8c 2f       	mov	r24, r28
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <_nrf24l01p_get_status>:
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
     3f2:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     400:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	return temp;
}
     408:	8c 2f       	mov	r24, r28
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <_nrf24l01p_power_up>:

void _nrf24l01p_power_up(){
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PWR_UP;
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	be 01       	movw	r22, r28
     436:	6f 5f       	subi	r22, 0xFF	; 255
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	8f e9       	ldi	r24, 0x9F	; 159
     442:	9c e8       	ldi	r25, 0x8C	; 140
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <_nrf24l01p_power_up+0x34>
     448:	00 c0       	rjmp	.+0      	; 0x44a <_nrf24l01p_power_up+0x3a>
     44a:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	mode = _NRF24L01P_MODE_STANDBY;
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	80 93 c4 24 	sts	0x24C4, r24
}
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <_nrf24l01p_power_down>:
void _nrf24l01p_power_down(){
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	1f 92       	push	r1
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PWR_UP;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	8d 7f       	andi	r24, 0xFD	; 253
     478:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	be 01       	movw	r22, r28
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_POWER_DOWN;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 c4 24 	sts	0x24C4, r24
}
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <_nrf24l01p_rx_mode>:
void _nrf24l01p_rx_mode(){
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PRIM_RX;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	be 01       	movw	r22, r28
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_RX;
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	80 93 c4 24 	sts	0x24C4, r24
}
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <_nrf24l01p_enable_auto_ack>:
	temp &= ~(_NRF24L01P_CONFIG_CRC_MASK);
	temp |= opt;
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
}

void _nrf24l01p_enable_auto_ack(_nrf24l01p_pipe_t pipe){
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	1f 92       	push	r1
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	be 01       	movw	r22, r28
     4ea:	6f 5f       	subi	r22, 0xFF	; 255
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	c9 01       	movw	r24, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_nrf24l01p_enable_auto_ack+0x2a>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	1a 95       	dec	r17
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_nrf24l01p_enable_auto_ack+0x26>
     504:	99 81       	ldd	r25, Y+1	; 0x01
     506:	89 2b       	or	r24, r25
     508:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	be 01       	movw	r22, r28
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <_nrf24l01p_disable_auto_ack_all_pipes>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
	clr_bit(temp,pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
}
void _nrf24l01p_disable_auto_ack_all_pipes(){
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
     52e:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_nrf24l01p_enable_rx_on_pipe>:

void _nrf24l01p_enable_rx_on_pipe(_nrf24l01p_pipe_t pipe){
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	1f 92       	push	r1
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	c9 01       	movw	r24, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <_nrf24l01p_enable_rx_on_pipe+0x2a>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	1a 95       	dec	r17
     574:	e2 f7       	brpl	.-8      	; 0x56e <_nrf24l01p_enable_rx_on_pipe+0x26>
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	89 2b       	or	r24, r25
     57a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     58c:	0f 90       	pop	r0
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	08 95       	ret

00000596 <_nrf24l01p_set_auto_retransmission_delay>:
uint8_t _nrf24l01p_read_auto_retransmission_count(){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	1f 92       	push	r1
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~(0xF0);
	temp |= (times250us<<4);
     5b4:	20 e1       	ldi	r18, 0x10	; 16
     5b6:	12 9f       	mul	r17, r18
     5b8:	c0 01       	movw	r24, r0
     5ba:	11 24       	eor	r1, r1
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	temp &= ~(0xF0);
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	9f 70       	andi	r25, 0x0F	; 15
	temp |= (times250us<<4);
     5c0:	89 2b       	or	r24, r25
     5c2:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <_nrf24l01p_clear_data_ready_flag>:
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_RX_DR)flag = 1  ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_clear_data_ready_flag(){
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     5e8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_RX_DR;
     5ec:	80 64       	ori	r24, 0x40	; 64
     5ee:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <_nrf24l01p_get_fifo_flag_rx_empty>:
uint8_t _nrf24l01p_get_RX_pipe_width(_nrf24l01p_pipe_t pipe){
	uint8_t temp;
	_nrf24l01p_read_register((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
	return (temp&(0x3F));
}
bool _nrf24l01p_get_fifo_flag_rx_empty(){
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	1f 92       	push	r1
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	bool flag;
	_nrf24l01p_read_register(_NRF24L01P_REG_FIFO_STATUS,&temp,sizeof(temp));
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	87 e1       	ldi	r24, 0x17	; 23
     61e:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	if(temp&_NRF24L01P_FIFO_STATUS_RX_EMPTY) flag = 1 ;
     622:	89 81       	ldd	r24, Y+1	; 0x01
	else flag = 0;
	return flag;
	
}
     624:	81 70       	andi	r24, 0x01	; 1
     626:	0f 90       	pop	r0
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <_nrf24l01p_enable_dynamic_payload_pipe>:
	if(temp&_NRF24L01P_FIFO_STATUS_RX_REUSE) flag = 1 ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_enable_dynamic_payload_pipe(_nrf24l01p_pipe_t pipe){
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	1f 92       	push	r1
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	8c e1       	ldi	r24, 0x1C	; 28
     648:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= (1<<pipe);
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	c9 01       	movw	r24, r18
     652:	02 c0       	rjmp	.+4      	; 0x658 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	1a 95       	dec	r17
     65a:	e2 f7       	brpl	.-8      	; 0x654 <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     65c:	99 81       	ldd	r25, Y+1	; 0x01
     65e:	89 2b       	or	r24, r25
     660:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	8c e1       	ldi	r24, 0x1C	; 28
     66e:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     672:	0f 90       	pop	r0
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	1f 91       	pop	r17
     67a:	08 95       	ret

0000067c <_nrf24l01p_disable_dynamic_payload_all_pipe>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
	temp &= ~(1<<pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
}
void _nrf24l01p_disable_dynamic_payload_all_pipe(){
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	1f 92       	push	r1
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0x00;
     686:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));	
     688:	41 e0       	ldi	r20, 0x01	; 1
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	be 01       	movw	r22, r28
     68e:	6f 5f       	subi	r22, 0xFF	; 255
     690:	7f 4f       	sbci	r23, 0xFF	; 255
     692:	8c e1       	ldi	r24, 0x1C	; 28
     694:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     698:	0f 90       	pop	r0
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <_nrf24l01p_enable_dynamic_payload>:
void _nrf24l01p_enable_dynamic_payload(){
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	1f 92       	push	r1
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6aa:	41 e0       	ldi	r20, 0x01	; 1
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	be 01       	movw	r22, r28
     6b0:	6f 5f       	subi	r22, 0xFF	; 255
     6b2:	7f 4f       	sbci	r23, 0xFF	; 255
     6b4:	8d e1       	ldi	r24, 0x1D	; 29
     6b6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_DPL;
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	be 01       	movw	r22, r28
     6c6:	6f 5f       	subi	r22, 0xFF	; 255
     6c8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ca:	8d e1       	ldi	r24, 0x1D	; 29
     6cc:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     6d0:	0f 90       	pop	r0
     6d2:	df 91       	pop	r29
     6d4:	cf 91       	pop	r28
     6d6:	08 95       	ret

000006d8 <_nrf24l01p_enable_payload_with_ack>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
	temp &= ~_NRF24L01_FEATURE_EN_DPL;
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
}
void _nrf24l01p_enable_payload_with_ack(){
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	1f 92       	push	r1
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6e2:	41 e0       	ldi	r20, 0x01	; 1
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	be 01       	movw	r22, r28
     6e8:	6f 5f       	subi	r22, 0xFF	; 255
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	8d e1       	ldi	r24, 0x1D	; 29
     6ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
     6f2:	89 81       	ldd	r24, Y+1	; 0x01
     6f4:	82 60       	ori	r24, 0x02	; 2
     6f6:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6f8:	41 e0       	ldi	r20, 0x01	; 1
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	be 01       	movw	r22, r28
     6fe:	6f 5f       	subi	r22, 0xFF	; 255
     700:	7f 4f       	sbci	r23, 0xFF	; 255
     702:	8d e1       	ldi	r24, 0x1D	; 29
     704:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     708:	0f 90       	pop	r0
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <_nrf24l01p_startup>:
// 	printf("fifo status : %x\r\n",read_register(_NRF24L01P_REG_FIFO_STATUS));
}


//////////////////////////////////////////////////////////////////////////
void _nrf24l01p_startup(){
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	1f 92       	push	r1
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
	#define TRANSFER_SIZE 1
	//nrf24l01p_write_rf_setup(0b00000111);
	uint8_t temp = 0b00000111;
     71a:	87 e0       	ldi	r24, 0x07	; 7
     71c:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	be 01       	movw	r22, r28
     724:	6f 5f       	subi	r22, 0xFF	; 255
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	86 e0       	ldi	r24, 0x06	; 6
     72a:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_en_aa(0);
	temp = 0;
     72e:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(uint8_t));
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	50 e0       	ldi	r21, 0x00	; 0
     734:	be 01       	movw	r22, r28
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_rx_pw(0, TRANSFER_SIZE);
	temp = TRANSFER_SIZE;
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     744:	41 e0       	ldi	r20, 0x01	; 1
     746:	50 e0       	ldi	r21, 0x00	; 0
     748:	be 01       	movw	r22, r28
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_power_up();
     754:	0e 94 08 02 	call	0x410	; 0x410 <_nrf24l01p_power_up>
     758:	8f e9       	ldi	r24, 0x9F	; 159
     75a:	9c e8       	ldi	r25, 0x8C	; 140
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	f1 f7       	brne	.-4      	; 0x75c <_nrf24l01p_startup+0x4c>
     760:	00 c0       	rjmp	.+0      	; 0x762 <_nrf24l01p_startup+0x52>
     762:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	//
	_nrf24l01p_rx_mode();
     764:	0e 94 4c 02 	call	0x498	; 0x498 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(1);
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>

}
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <_nrf24l01p_init>:

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
}

void _nrf24l01p_init(){
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	1f 92       	push	r1
     77c:	1f 92       	push	r1
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
}

static void arch_nrf24l01p_initialize(){
	NRF24L01P_SPI_PORT.DIRSET = (1<<5) | (1<<4) | (1<<7);
     782:	e0 e4       	ldi	r30, 0x40	; 64
     784:	f6 e0       	ldi	r31, 0x06	; 6
     786:	80 eb       	ldi	r24, 0xB0	; 176
     788:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_SPI.CTRL = (1<<SPI_ENABLE_bp) | (1<<SPI_MASTER_bp);
     78a:	80 e5       	ldi	r24, 0x50	; 80
     78c:	80 93 c0 08 	sts	0x08C0, r24
	NRF24L01P_CSN_PIN_PORT.DIRSET = (1<<NRF24L01P_CSN_PIN_BIT);
     790:	80 e1       	ldi	r24, 0x10	; 16
     792:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_CE_PIN_PORT.DIRSET = (1<<NRF24L01P_CE_PIN_BIT);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	81 83       	std	Z+1, r24	; 0x01
	arch_nrf24l01p_initialize();
	
	_nrf24l01p_ce_pin(0);
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
	_nrf24l01p_csn_pin(1);
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	
	_nrf24l01p_flush_rx();
     7a4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
	_nrf24l01p_power_down();
     7a8:	0e 94 2d 02 	call	0x45a	; 0x45a <_nrf24l01p_power_down>
	uint8_t status_rst_val = 0x0e;//reset status
     7ac:	8e e0       	ldi	r24, 0x0E	; 14
     7ae:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	be 01       	movw	r22, r28
     7b6:	6f 5f       	subi	r22, 0xFF	; 255
     7b8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ba:	87 e0       	ldi	r24, 0x07	; 7
     7bc:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
     7c0:	8b e0       	ldi	r24, 0x0B	; 11
     7c2:	8a 83       	std	Y+2, r24	; 0x02
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
     7c4:	41 e0       	ldi	r20, 0x01	; 1
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	be 01       	movw	r22, r28
     7ca:	6e 5f       	subi	r22, 0xFE	; 254
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_disable_auto_ack_all_pipes();
     7d4:	0e 94 92 02 	call	0x524	; 0x524 <_nrf24l01p_disable_auto_ack_all_pipes>
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
     7d8:	0e 94 3e 03 	call	0x67c	; 0x67c <_nrf24l01p_disable_dynamic_payload_all_pipe>
	_nrf24l01p_startup();
     7dc:	0e 94 88 03 	call	0x710	; 0x710 <_nrf24l01p_startup>
	
}
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <_nrf24l01p_readable>:
	_nrf24l01p_ce_pin(1);

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
     7ea:	cf 93       	push	r28
	bool flag = 0;
	if((pipe >=0)   && (pipe <=5)){
     7ec:	86 30       	cpi	r24, 0x06	; 6
     7ee:	90 f4       	brcc	.+36     	; 0x814 <_nrf24l01p_readable+0x2a>
     7f0:	c8 2f       	mov	r28, r24
		//flag = (_nrf24l01p_get_data_ready_flag()/* && (_nrf24l01p_get_rx_payload_pipe() == pipe)*/ );
		//OCD.OCDR0 = (_nrf24l01p_get_rx_payload_pipe());
		int status = _nrf24l01p_get_status();
     7f2:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_nrf24l01p_get_status>
		//OCD.OCDR0 = status;
		
		if(   (status&_NRF24L01P_STATUS_RX_DR)  && ((status&_NRF24L01P_STATUS_RX_P_NO)>>1)==pipe){
     7f6:	86 ff       	sbrs	r24, 6
     7f8:	0f c0       	rjmp	.+30     	; 0x818 <_nrf24l01p_readable+0x2e>
     7fa:	8e 70       	andi	r24, 0x0E	; 14
     7fc:	99 27       	eor	r25, r25
     7fe:	ac 01       	movw	r20, r24
     800:	55 95       	asr	r21
     802:	47 95       	ror	r20
     804:	2c 2f       	mov	r18, r28
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	42 17       	cp	r20, r18
     80c:	53 07       	cpc	r21, r19
     80e:	29 f0       	breq	.+10     	; 0x81a <_nrf24l01p_readable+0x30>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	03 c0       	rjmp	.+6      	; 0x81a <_nrf24l01p_readable+0x30>

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
	bool flag = 0;
     814:	80 e0       	ldi	r24, 0x00	; 0
     816:	01 c0       	rjmp	.+2      	; 0x81a <_nrf24l01p_readable+0x30>
			flag = 1;
			//OCD.OCDR0 = status;
			
		}
		else{
			flag = 0;
     818:	80 e0       	ldi	r24, 0x00	; 0
// 
// 		return flag;
		
	}
	return flag;
}
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <_nrf24l01p_read_dyn_pld>:
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
     826:	86 30       	cpi	r24, 0x06	; 6
     828:	f0 f4       	brcc	.+60     	; 0x866 <_nrf24l01p_read_dyn_pld+0x48>
     82a:	eb 01       	movw	r28, r22
		return -1;
	}
	int x;
	if (x = _nrf24l01p_readable(pipe) ) {
     82c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_nrf24l01p_readable>
     830:	88 23       	and	r24, r24
     832:	e1 f0       	breq	.+56     	; 0x86c <_nrf24l01p_read_dyn_pld+0x4e>
		asm("nop");
     834:	00 00       	nop
		int rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
     836:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_nrf24l01p_read_rx_payload_width>
     83a:	8c 01       	movw	r16, r24
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
     83c:	81 32       	cpi	r24, 0x21	; 33
     83e:	91 05       	cpc	r25, r1
     840:	28 f0       	brcs	.+10     	; 0x84c <_nrf24l01p_read_dyn_pld+0x2e>
			_nrf24l01p_flush_rx();
     842:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
	}
	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	15 c0       	rjmp	.+42     	; 0x876 <_nrf24l01p_read_dyn_pld+0x58>
		int rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
			_nrf24l01p_flush_rx();
		}
	else {
		_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
     84c:	bc 01       	movw	r22, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_read_rx_payload>
		if(_nrf24l01p_get_fifo_flag_rx_empty()) {
     854:	0e 94 04 03 	call	0x608	; 0x608 <_nrf24l01p_get_fifo_flag_rx_empty>
     858:	88 23       	and	r24, r24
     85a:	59 f0       	breq	.+22     	; 0x872 <_nrf24l01p_read_dyn_pld+0x54>
			_nrf24l01p_clear_data_ready_flag();
     85c:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_clear_data_ready_flag>
		}
		return rxPayloadWidth;
     860:	80 2f       	mov	r24, r16
     862:	91 2f       	mov	r25, r17
     864:	08 c0       	rjmp	.+16     	; 0x876 <_nrf24l01p_read_dyn_pld+0x58>
	}
	return 0;
}
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
		return -1;
     866:	8f ef       	ldi	r24, 0xFF	; 255
     868:	9f ef       	ldi	r25, 0xFF	; 255
     86a:	05 c0       	rjmp	.+10     	; 0x876 <_nrf24l01p_read_dyn_pld+0x58>
		}
		return rxPayloadWidth;
	}
	}
	else {//if pipe not readable
		return 0;
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <_nrf24l01p_read_dyn_pld+0x58>
	else {
		_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
		if(_nrf24l01p_get_fifo_flag_rx_empty()) {
			_nrf24l01p_clear_data_ready_flag();
		}
		return rxPayloadWidth;
     872:	80 2f       	mov	r24, r16
     874:	91 2f       	mov	r25, r17
	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	08 95       	ret

00000880 <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     880:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     882:	81 81       	ldd	r24, Z+1	; 0x01
     884:	85 ff       	sbrs	r24, 5
     886:	fd cf       	rjmp	.-6      	; 0x882 <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     888:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     88a:	81 81       	ldd	r24, Z+1	; 0x01
     88c:	86 ff       	sbrs	r24, 6
     88e:	fd cf       	rjmp	.-6      	; 0x88a <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     890:	80 e4       	ldi	r24, 0x40	; 64
     892:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     894:	80 81       	ld	r24, Z
}
     896:	08 95       	ret

00000898 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     898:	1f 93       	push	r17
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     89e:	c0 ea       	ldi	r28, 0xA0	; 160
     8a0:	d6 e0       	ldi	r29, 0x06	; 6
     8a2:	18 e0       	ldi	r17, 0x08	; 8
     8a4:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     8a6:	e0 e6       	ldi	r30, 0x60	; 96
     8a8:	f6 e0       	ldi	r31, 0x06	; 6
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     8ae:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     8b0:	68 2f       	mov	r22, r24
     8b2:	80 ea       	ldi	r24, 0xA0	; 160
     8b4:	99 e0       	ldi	r25, 0x09	; 9
     8b6:	0e 94 40 04 	call	0x880	; 0x880 <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     8ba:	1d 83       	std	Y+5, r17	; 0x05
	
}
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	08 95       	ret

000008c4 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     8d0:	c0 ea       	ldi	r28, 0xA0	; 160
     8d2:	d6 e0       	ldi	r29, 0x06	; 6
     8d4:	18 e0       	ldi	r17, 0x08	; 8
     8d6:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     8d8:	0f 2e       	mov	r0, r31
     8da:	f0 e6       	ldi	r31, 0x60	; 96
     8dc:	ef 2e       	mov	r14, r31
     8de:	f6 e0       	ldi	r31, 0x06	; 6
     8e0:	ff 2e       	mov	r15, r31
     8e2:	f0 2d       	mov	r31, r0
     8e4:	01 e0       	ldi	r16, 0x01	; 1
     8e6:	f7 01       	movw	r30, r14
     8e8:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     8ea:	68 2f       	mov	r22, r24
     8ec:	80 ea       	ldi	r24, 0xA0	; 160
     8ee:	99 e0       	ldi	r25, 0x09	; 9
     8f0:	0e 94 40 04 	call	0x880	; 0x880 <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     8f4:	f7 01       	movw	r30, r14
     8f6:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     8f8:	1d 83       	std	Y+5, r17	; 0x05

}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	1f 91       	pop	r17
     900:	0f 91       	pop	r16
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	08 95       	ret

00000908 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     908:	87 70       	andi	r24, 0x07	; 7
     90a:	80 6b       	ori	r24, 0xB0	; 176
     90c:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
     910:	08 95       	ret

00000912 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     912:	cf 93       	push	r28
     914:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     916:	98 2f       	mov	r25, r24
     918:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     91a:	89 2f       	mov	r24, r25
     91c:	82 95       	swap	r24
     91e:	8f 70       	andi	r24, 0x0F	; 15
     920:	80 61       	ori	r24, 0x10	; 16
     922:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     926:	8c 2f       	mov	r24, r28
     928:	8f 70       	andi	r24, 0x0F	; 15
     92a:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
}
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	ec 01       	movw	r28, r24
     938:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     93a:	8c 81       	ldd	r24, Y+4	; 0x04
     93c:	8f 7e       	andi	r24, 0xEF	; 239
     93e:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     940:	a0 e6       	ldi	r26, 0x60	; 96
     942:	b6 e0       	ldi	r27, 0x06	; 6
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	8c 93       	st	X, r24
     94a:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     94c:	15 96       	adiw	r26, 0x05	; 5
     94e:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     950:	8d 81       	ldd	r24, Y+5	; 0x05
     952:	80 6c       	ori	r24, 0xC0	; 192
     954:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     956:	84 81       	ldd	r24, Z+4	; 0x04
     958:	8d 7f       	andi	r24, 0xFD	; 253
     95a:	81 30       	cpi	r24, 0x01	; 1
     95c:	21 f4       	brne	.+8      	; 0x966 <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	82 60       	ori	r24, 0x02	; 2
     962:	8d 83       	std	Y+5, r24	; 0x05
     964:	03 c0       	rjmp	.+6      	; 0x96c <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     966:	8d 81       	ldd	r24, Y+5	; 0x05
     968:	8d 7f       	andi	r24, 0xFD	; 253
     96a:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     96c:	85 81       	ldd	r24, Z+5	; 0x05
     96e:	88 23       	and	r24, r24
     970:	21 f0       	breq	.+8      	; 0x97a <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     972:	8d 81       	ldd	r24, Y+5	; 0x05
     974:	84 60       	ori	r24, 0x04	; 4
     976:	8d 83       	std	Y+5, r24	; 0x05
     978:	03 c0       	rjmp	.+6      	; 0x980 <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     97a:	8d 81       	ldd	r24, Y+5	; 0x05
     97c:	8b 7f       	andi	r24, 0xFB	; 251
     97e:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	a2 81       	ldd	r26, Z+2	; 0x02
     986:	b3 81       	ldd	r27, Z+3	; 0x03
     988:	9c 01       	movw	r18, r24
     98a:	ad 01       	movw	r20, r26
     98c:	22 0f       	add	r18, r18
     98e:	33 1f       	adc	r19, r19
     990:	44 1f       	adc	r20, r20
     992:	55 1f       	adc	r21, r21
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	78 e4       	ldi	r23, 0x48	; 72
     998:	88 ee       	ldi	r24, 0xE8	; 232
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 28 09 	call	0x1250	; 0x1250 <__udivmodsi4>
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     9a4:	83 2f       	mov	r24, r19
     9a6:	8f 70       	andi	r24, 0x0F	; 15
     9a8:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     9aa:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     9ac:	8c 81       	ldd	r24, Y+4	; 0x04
     9ae:	88 60       	ori	r24, 0x08	; 8
     9b0:	8c 83       	std	Y+4, r24	; 0x04

}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <ssd1306_init>:




void ssd1306_init(void)
{
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <ssd1306_init+0x6>
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <ssd1306_init+0x8>
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     9c4:	20 ea       	ldi	r18, 0xA0	; 160
     9c6:	36 e0       	ldi	r19, 0x06	; 6
     9c8:	88 e0       	ldi	r24, 0x08	; 8
     9ca:	d9 01       	movw	r26, r18
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     9d0:	a0 e6       	ldi	r26, 0x60	; 96
     9d2:	b6 e0       	ldi	r27, 0x06	; 6
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	11 96       	adiw	r26, 0x01	; 1
     9d8:	9c 93       	st	X, r25
     9da:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTA,(1<<3));//reset
     9dc:	e0 e0       	ldi	r30, 0x00	; 0
     9de:	f6 e0       	ldi	r31, 0x06	; 6
     9e0:	81 83       	std	Z+1, r24	; 0x01
	port_direction_set_mask(&PORTD,(1<<1));//sck
     9e2:	92 e0       	ldi	r25, 0x02	; 2
     9e4:	11 96       	adiw	r26, 0x01	; 1
     9e6:	9c 93       	st	X, r25
     9e8:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	8c 93       	st	X, r24
// 	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     9ee:	d9 01       	movw	r26, r18
     9f0:	15 96       	adiw	r26, 0x05	; 5
     9f2:	8c 93       	st	X, r24
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     9f4:	86 83       	std	Z+6, r24	; 0x06
     9f6:	ba e6       	ldi	r27, 0x6A	; 106
     9f8:	ba 95       	dec	r27
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <ssd1306_init+0x40>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <ssd1306_init+0x46>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     9fe:	85 83       	std	Z+5, r24	; 0x05
     a00:	ea e6       	ldi	r30, 0x6A	; 106
     a02:	ea 95       	dec	r30
     a04:	f1 f7       	brne	.-4      	; 0xa02 <ssd1306_init+0x4a>
     a06:	00 c0       	rjmp	.+0      	; 0xa08 <ssd1306_init+0x50>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     a08:	e0 e7       	ldi	r30, 0x70	; 112
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	8f 7e       	andi	r24, 0xEF	; 239
     a10:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	9b e1       	ldi	r25, 0x1B	; 27
     a16:	a7 eb       	ldi	r26, 0xB7	; 183
     a18:	b0 e0       	ldi	r27, 0x00	; 0
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	ab 83       	std	Y+3, r26	; 0x03
     a20:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     a22:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     a24:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     a26:	be 01       	movw	r22, r28
     a28:	6f 5f       	subi	r22, 0xFF	; 255
     a2a:	7f 4f       	sbci	r23, 0xFF	; 255
     a2c:	80 ea       	ldi	r24, 0xA0	; 160
     a2e:	99 e0       	ldi	r25, 0x09	; 9
     a30:	0e 94 99 04 	call	0x932	; 0x932 <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     a34:	88 ea       	ldi	r24, 0xA8	; 168
     a36:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     a3a:	8f e1       	ldi	r24, 0x1F	; 31
     a3c:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     a40:	83 ed       	ldi	r24, 0xD3	; 211
     a42:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x00);
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     a52:	81 ea       	ldi	r24, 0xA1	; 161
     a54:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     a58:	88 ec       	ldi	r24, 0xC8	; 200
     a5a:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     a5e:	8a ed       	ldi	r24, 0xDA	; 218
     a60:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x02);
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     a6a:	81 e8       	ldi	r24, 0x81	; 129
     a6c:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     a70:	8f e8       	ldi	r24, 0x8F	; 143
     a72:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     a76:	84 ea       	ldi	r24, 0xA4	; 164
     a78:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     a7c:	86 ea       	ldi	r24, 0xA6	; 166
     a7e:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     a82:	85 ed       	ldi	r24, 0xD5	; 213
     a84:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x80);
     a88:	80 e8       	ldi	r24, 0x80	; 128
     a8a:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     a8e:	8d e8       	ldi	r24, 0x8D	; 141
     a90:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x14);
     a94:	84 e1       	ldi	r24, 0x14	; 20
     a96:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     a9a:	8b ed       	ldi	r24, 0xDB	; 219
     a9c:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     aa0:	80 e4       	ldi	r24, 0x40	; 64
     aa2:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     aa6:	89 ed       	ldi	r24, 0xD9	; 217
     aa8:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     aac:	81 ef       	ldi	r24, 0xF1	; 241
     aae:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     ab2:	8f ea       	ldi	r24, 0xAF	; 175
     ab4:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
}
     ab8:	26 96       	adiw	r28, 0x06	; 6
     aba:	cd bf       	out	0x3d, r28	; 61
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     ace:	dc 01       	movw	r26, r24
     ad0:	ec 91       	ld	r30, X
     ad2:	ee 23       	and	r30, r30
     ad4:	29 f1       	breq	.+74     	; 0xb20 <ssd1306_write_text+0x5c>
     ad6:	7c 01       	movw	r14, r24
     ad8:	bf ef       	ldi	r27, 0xFF	; 255
     ada:	eb 1a       	sub	r14, r27
     adc:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     ade:	ef 37       	cpi	r30, 0x7F	; 127
     ae0:	d0 f4       	brcc	.+52     	; 0xb16 <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ef 56       	subi	r30, 0x6F	; 111
     aea:	fe 4d       	sbci	r31, 0xDE	; 222
     aec:	00 81       	ld	r16, Z
     aee:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     af0:	f8 01       	movw	r30, r16
     af2:	80 81       	ld	r24, Z
     af4:	88 23       	and	r24, r24
     af6:	61 f0       	breq	.+24     	; 0xb10 <ssd1306_write_text+0x4c>
     af8:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     afa:	f8 01       	movw	r30, r16
     afc:	ec 0f       	add	r30, r28
     afe:	f1 1d       	adc	r31, r1
     b00:	80 81       	ld	r24, Z
     b02:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     b06:	cf 5f       	subi	r28, 0xFF	; 255
     b08:	d8 01       	movw	r26, r16
     b0a:	9c 91       	ld	r25, X
     b0c:	9c 17       	cp	r25, r28
     b0e:	a8 f7       	brcc	.-22     	; 0xafa <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     b16:	d7 01       	movw	r26, r14
     b18:	ed 91       	ld	r30, X+
     b1a:	7d 01       	movw	r14, r26
     b1c:	e1 11       	cpse	r30, r1
     b1e:	df cf       	rjmp	.-66     	; 0xade <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	08 95       	ret

00000b2c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     b2c:	20 e8       	ldi	r18, 0x80	; 128
     b2e:	82 9f       	mul	r24, r18
     b30:	c0 01       	movw	r24, r0
     b32:	11 24       	eor	r1, r1
     b34:	86 0f       	add	r24, r22
     b36:	91 1d       	adc	r25, r1
     b38:	e0 91 bc 22 	lds	r30, 0x22BC
     b3c:	f0 91 bd 22 	lds	r31, 0x22BD
     b40:	e8 0f       	add	r30, r24
     b42:	f9 1f       	adc	r31, r25
     b44:	40 83       	st	Z, r20
     b46:	08 95       	ret

00000b48 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     b48:	20 e8       	ldi	r18, 0x80	; 128
     b4a:	82 9f       	mul	r24, r18
     b4c:	c0 01       	movw	r24, r0
     b4e:	11 24       	eor	r1, r1
     b50:	86 0f       	add	r24, r22
     b52:	91 1d       	adc	r25, r1
     b54:	e0 91 bc 22 	lds	r30, 0x22BC
     b58:	f0 91 bd 22 	lds	r31, 0x22BD
     b5c:	e8 0f       	add	r30, r24
     b5e:	f9 1f       	adc	r31, r25
}
     b60:	80 81       	ld	r24, Z
     b62:	08 95       	ret

00000b64 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	18 2f       	mov	r17, r24
     b6c:	d6 2f       	mov	r29, r22
     b6e:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     b70:	21 11       	cpse	r18, r1
     b72:	04 c0       	rjmp	.+8      	; 0xb7c <gfx_mono_ssd1306_put_byte+0x18>
     b74:	0e 94 a4 05 	call	0xb48	; 0xb48 <gfx_mono_framebuffer_get_byte>
     b78:	8c 17       	cp	r24, r28
     b7a:	71 f0       	breq	.+28     	; 0xb98 <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     b7c:	4c 2f       	mov	r20, r28
     b7e:	6d 2f       	mov	r22, r29
     b80:	81 2f       	mov	r24, r17
     b82:	0e 94 96 05 	call	0xb2c	; 0xb2c <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     b86:	81 2f       	mov	r24, r17
     b88:	0e 94 84 04 	call	0x908	; 0x908 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     b8c:	8d 2f       	mov	r24, r29
     b8e:	0e 94 89 04 	call	0x912	; 0x912 <ssd1306_set_column_address>

	ssd1306_write_data(data);
     b92:	8c 2f       	mov	r24, r28
     b94:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ssd1306_write_data>
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	08 95       	ret

00000ba0 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
     ba8:	c7 56       	subi	r28, 0x67	; 103
     baa:	d1 09       	sbc	r29, r1
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	de bf       	out	0x3e, r29	; 62
	
	//set_system_time (1463064367);
	rtc_initialize();
     bb0:	0e 94 b7 08 	call	0x116e	; 0x116e <rtc_initialize>
	
	DigitalPin_t led = {&PORTR, 0};
     bb4:	80 ee       	ldi	r24, 0xE0	; 224
     bb6:	97 e0       	ldi	r25, 0x07	; 7
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	9a 83       	std	Y+2, r25	; 0x02
     bbc:	1b 82       	std	Y+3, r1	; 0x03
	

	
	_nrf24l01p_init();
     bbe:	0e 94 bb 03 	call	0x776	; 0x776 <_nrf24l01p_init>
	_nrf24l01p_enable_dynamic_payload();
     bc2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <_nrf24l01p_enable_dynamic_payload>
	_nrf24l01p_enable_payload_with_ack();
     bc6:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_nrf24l01p_enable_payload_with_ack>
	
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P0);
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P1);
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P2);
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P3);
     bdc:	83 e0       	ldi	r24, 0x03	; 3
     bde:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P4);
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P5);
     be8:	85 e0       	ldi	r24, 0x05	; 5
     bea:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P0);
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P1);
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P2);
     bfa:	82 e0       	ldi	r24, 0x02	; 2
     bfc:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P3);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P4);
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P5);
     c0c:	85 e0       	ldi	r24, 0x05	; 5
     c0e:	0e 94 17 03 	call	0x62e	; 0x62e <_nrf24l01p_enable_dynamic_payload_pipe>
	
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P0);
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P1);
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P2);
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P3);
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P4);
     c2a:	84 e0       	ldi	r24, 0x04	; 4
     c2c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 _nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P5);
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	 
	_nrf24l01p_set_auto_retransmission_delay(15);
     c36:	8f e0       	ldi	r24, 0x0F	; 15
     c38:	0e 94 cb 02 	call	0x596	; 0x596 <_nrf24l01p_set_auto_retransmission_delay>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     c3c:	8e eb       	ldi	r24, 0xBE	; 190
     c3e:	92 e2       	ldi	r25, 0x22	; 34
     c40:	80 93 bc 22 	sts	0x22BC, r24
     c44:	90 93 bd 22 	sts	0x22BD, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
     c48:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <ssd1306_init>
	asm("nop");
     c4c:	00 00       	nop
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     c4e:	00 e0       	ldi	r16, 0x00	; 0
     c50:	0f c0       	rjmp	.+30     	; 0xc70 <main+0xd0>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
     c52:	80 2f       	mov	r24, r16
     c54:	0e 94 84 04 	call	0x908	; 0x908 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
     c58:	81 2f       	mov	r24, r17
     c5a:	0e 94 89 04 	call	0x912	; 0x912 <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 62 04 	call	0x8c4	; 0x8c4 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
     c64:	1f 5f       	subi	r17, 0xFF	; 255
     c66:	10 38       	cpi	r17, 0x80	; 128
     c68:	a1 f7       	brne	.-24     	; 0xc52 <main+0xb2>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     c6a:	0f 5f       	subi	r16, 0xFF	; 255
     c6c:	04 30       	cpi	r16, 0x04	; 4
     c6e:	11 f0       	breq	.+4      	; 0xc74 <main+0xd4>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	ef cf       	rjmp	.-34     	; 0xc52 <main+0xb2>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
     c74:	80 e4       	ldi	r24, 0x40	; 64
     c76:	0e 94 4c 04 	call	0x898	; 0x898 <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c7a:	00 e0       	ldi	r16, 0x00	; 0
     c7c:	0c c0       	rjmp	.+24     	; 0xc96 <main+0xf6>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	40 e0       	ldi	r20, 0x00	; 0
     c82:	61 2f       	mov	r22, r17
     c84:	80 2f       	mov	r24, r16
     c86:	0e 94 b2 05 	call	0xb64	; 0xb64 <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     c8a:	1f 5f       	subi	r17, 0xFF	; 255
     c8c:	10 38       	cpi	r17, 0x80	; 128
     c8e:	b9 f7       	brne	.-18     	; 0xc7e <main+0xde>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     c90:	0f 5f       	subi	r16, 0xFF	; 255
     c92:	04 30       	cpi	r16, 0x04	; 4
     c94:	11 f0       	breq	.+4      	; 0xc9a <main+0xfa>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     c96:	10 e0       	ldi	r17, 0x00	; 0
     c98:	f2 cf       	rjmp	.-28     	; 0xc7e <main+0xde>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
     c9a:	00 00       	nop
	ssd1306_set_page_address(0);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 84 04 	call	0x908	; 0x908 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
     ca2:	8f e9       	ldi	r24, 0x9F	; 159
     ca4:	92 e2       	ldi	r25, 0x22	; 34
     ca6:	0e 94 62 05 	call	0xac4	; 0xac4 <ssd1306_write_text>
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     cb0:	80 e3       	ldi	r24, 0x30	; 48
     cb2:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     cbc:	10 92 65 06 	sts	0x0665, r1
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
     cc0:	78 94       	sei
 	//SetupHardware();
// 
 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	GlobalInterruptEnable();

	DigitalPin_SetDIr(&led,1);
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	ce 01       	movw	r24, r28
     cc6:	01 96       	adiw	r24, 0x01	; 1
     cc8:	0e 94 be 06 	call	0xd7c	; 0xd7c <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
     ccc:	e0 e5       	ldi	r30, 0x50	; 80
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	82 60       	ori	r24, 0x02	; 2
     cd4:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     cd6:	81 81       	ldd	r24, Z+1	; 0x01
     cd8:	81 ff       	sbrs	r24, 1
     cda:	fd cf       	rjmp	.-6      	; 0xcd6 <main+0x136>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	0e 94 87 07 	call	0xf0e	; 0xf0e <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	0e 94 7d 07 	call	0xefa	; 0xefa <CLKSYS_Disable>
	
	_nrf24l01p_flush_rx();
     ce8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
// 			_nrf24l01p_write(msg,strlen(msg));
			 //_nrf24l01p_write_ack(_NRF24L01P_PIPE_P0,msg,strlen(msg));
		
			
			if((_nrf24l01p_readable(_NRF24L01P_PIPE_P4))){
				PORTR.OUTTGL = (1<<0);
     cec:	0f 2e       	mov	r0, r31
     cee:	f0 ee       	ldi	r31, 0xE0	; 224
     cf0:	ef 2e       	mov	r14, r31
     cf2:	f7 e0       	ldi	r31, 0x07	; 7
     cf4:	ff 2e       	mov	r15, r31
     cf6:	f0 2d       	mov	r31, r0
     cf8:	11 e0       	ldi	r17, 0x01	; 1
// 			char msg[] = "get time";
// 			_nrf24l01p_write(msg,strlen(msg));
			 //_nrf24l01p_write_ack(_NRF24L01P_PIPE_P0,msg,strlen(msg));
		
			
			if((_nrf24l01p_readable(_NRF24L01P_PIPE_P4))){
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <_nrf24l01p_readable>
     d00:	88 23       	and	r24, r24
     d02:	d9 f3       	breq	.-10     	; 0xcfa <main+0x15a>
				PORTR.OUTTGL = (1<<0);
     d04:	f7 01       	movw	r30, r14
     d06:	17 83       	std	Z+7, r17	; 0x07
				//printf("status %x\r\n",_nrf24l01p_get_status());
				//printf("pipe : %d\r\n", _nrf24l01p_get_rx_payload_pipe());
				//led1 = !led1;
				
				int width = _nrf24l01p_read_dyn_pld(_NRF24L01P_PIPE_P4, (uint8_t*) emon_rxData);
     d08:	be 01       	movw	r22, r28
     d0a:	6c 5f       	subi	r22, 0xFC	; 252
     d0c:	7f 4f       	sbci	r23, 0xFF	; 255
     d0e:	84 e0       	ldi	r24, 0x04	; 4
     d10:	0e 94 0f 04 	call	0x81e	; 0x81e <_nrf24l01p_read_dyn_pld>
				emon_rxData[width] = '\0';
     d14:	24 e0       	ldi	r18, 0x04	; 4
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	2c 0f       	add	r18, r28
     d1a:	3d 1f       	adc	r19, r29
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	fc 01       	movw	r30, r24
     d22:	10 82       	st	Z, r1
				_nrf24l01p_flush_rx();
     d24:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
				_nrf24l01p_clear_data_ready_flag();
     d28:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_clear_data_ready_flag>
// 	  			ssd1306_clear();
// 	  			ssd1306_set_column_address(0);
// 				ssd1306_set_page_address(0);
// 	  			ssd1306_write_text(emon_rxData);
				  
				_nrf24l01p_flush_rx();
     d2c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>


		
 			//HID_Device_USBTask(&Generic_HID_Interface);
 			//USB_USBTask();
	}
     d30:	e4 cf       	rjmp	.-56     	; 0xcfa <main+0x15a>

00000d32 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     d32:	83 e0       	ldi	r24, 0x03	; 3
     d34:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     d38:	80 e3       	ldi	r24, 0x30	; 48
     d3a:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     d3e:	82 e0       	ldi	r24, 0x02	; 2
     d40:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     d44:	80 e1       	ldi	r24, 0x10	; 16
     d46:	80 93 65 06 	sts	0x0665, r24
     d4a:	08 95       	ret

00000d4c <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     d52:	80 e3       	ldi	r24, 0x30	; 48
     d54:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     d5e:	10 92 65 06 	sts	0x0665, r1
     d62:	08 95       	ret

00000d64 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     d64:	80 91 9d 22 	lds	r24, 0x229D
     d68:	90 91 9e 22 	lds	r25, 0x229E
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	29 f0       	breq	.+10     	; 0xd7a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	80 93 9d 22 	sts	0x229D, r24
     d76:	90 93 9e 22 	sts	0x229E, r25
     d7a:	08 95       	ret

00000d7c <DigitalPin_SetDIr>:
	SREG = sreg;	
}


void DigitalPin_SetDIr(DigitalPin_t *pin , bool dir){
	if(dir) pin->_port->DIRSET = (1<< pin->_pin);
     d7c:	66 23       	and	r22, r22
     d7e:	79 f0       	breq	.+30     	; 0xd9e <DigitalPin_SetDIr+0x22>
     d80:	dc 01       	movw	r26, r24
     d82:	ed 91       	ld	r30, X+
     d84:	fc 91       	ld	r31, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	21 e0       	ldi	r18, 0x01	; 1
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	a9 01       	movw	r20, r18
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	0c 90       	ld	r0, X
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DigitalPin_SetDIr+0x1c>
     d94:	44 0f       	add	r20, r20
     d96:	55 1f       	adc	r21, r21
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DigitalPin_SetDIr+0x18>
     d9c:	41 83       	std	Z+1, r20	; 0x01
     d9e:	08 95       	ret

00000da0 <DigitalPin_SetValue>:
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
     da0:	dc 01       	movw	r26, r24
     da2:	ed 91       	ld	r30, X+
     da4:	fc 91       	ld	r31, X
     da6:	11 97       	sbiw	r26, 0x01	; 1
     da8:	21 e0       	ldi	r18, 0x01	; 1
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	a9 01       	movw	r20, r18
     dae:	12 96       	adiw	r26, 0x02	; 2
     db0:	0c 90       	ld	r0, X
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DigitalPin_SetValue+0x18>
     db4:	44 0f       	add	r20, r20
     db6:	55 1f       	adc	r21, r21
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DigitalPin_SetValue+0x14>
     dbc:	45 83       	std	Z+5, r20	; 0x05
     dbe:	08 95       	ret

00000dc0 <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
     dc0:	dc 01       	movw	r26, r24
     dc2:	ed 91       	ld	r30, X+
     dc4:	fc 91       	ld	r31, X
     dc6:	11 97       	sbiw	r26, 0x01	; 1
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	0c 90       	ld	r0, X
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DigitalPin_ClearValue+0x18>
     dd4:	44 0f       	add	r20, r20
     dd6:	55 1f       	adc	r21, r21
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DigitalPin_ClearValue+0x14>
     ddc:	46 83       	std	Z+6, r20	; 0x06
     dde:	08 95       	ret

00000de0 <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1

}
     dea:	0f 90       	pop	r0
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	0f 90       	pop	r0
     df0:	1f 90       	pop	r1
     df2:	18 95       	reti

00000df4 <__vector_27>:

ISR(USARTC0_TXC_vect){
     df4:	1f 92       	push	r1
     df6:	0f 92       	push	r0
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	0f 92       	push	r0
     dfc:	11 24       	eor	r1, r1
	
}
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_26>:

ISR(USARTC0_DRE_vect){
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
	
}
     e12:	0f 90       	pop	r0
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	0f 90       	pop	r0
     e18:	1f 90       	pop	r1
     e1a:	18 95       	reti

00000e1c <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
     e1c:	1f 92       	push	r1
     e1e:	0f 92       	push	r0
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	0f 92       	push	r0
     e24:	11 24       	eor	r1, r1
	
}
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <__vector_30>:

ISR(USARTC1_TXC_vect){
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
	
}
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_29>:

ISR(USARTC1_DRE_vect){
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
	
}
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
     e58:	1f 92       	push	r1
     e5a:	0f 92       	push	r0
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	0f 92       	push	r0
     e60:	11 24       	eor	r1, r1
	
}
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_90>:

ISR(USARTD0_TXC_vect){
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
	
}
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_89>:

ISR(USARTD0_DRE_vect){
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
	
}
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
	
}
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_60>:

ISR(USARTE0_TXC_vect){
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
	
}
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_59>:

ISR(USARTE0_DRE_vect){
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
	
}
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
     ed0:	0f 93       	push	r16
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
     edc:	2f b7       	in	r18, 0x3f	; 63
     ede:	29 83       	std	Y+1, r18	; 0x01
     ee0:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
     ee2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
     ee4:	fc 01       	movw	r30, r24
     ee6:	08 ed       	ldi	r16, 0xD8	; 216
     ee8:	04 bf       	out	0x34, r16	; 52
     eea:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	8f bf       	out	0x3f, r24	; 63
#endif
}
     ef0:	0f 90       	pop	r0
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
     efa:	e0 e5       	ldi	r30, 0x50	; 80
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	90 81       	ld	r25, Z
     f00:	28 2f       	mov	r18, r24
     f02:	20 95       	com	r18
     f04:	92 23       	and	r25, r18
     f06:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
     f08:	90 81       	ld	r25, Z
	return clkEnabled;
}
     f0a:	89 23       	and	r24, r25
     f0c:	08 95       	ret

00000f0e <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
     f16:	00 e4       	ldi	r16, 0x40	; 64
     f18:	10 e0       	ldi	r17, 0x00	; 0
     f1a:	f8 01       	movw	r30, r16
     f1c:	60 81       	ld	r22, Z
     f1e:	68 7f       	andi	r22, 0xF8	; 248
     f20:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
     f22:	80 e4       	ldi	r24, 0x40	; 64
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 68 07 	call	0xed0	; 0xed0 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
     f2a:	f8 01       	movw	r30, r16
     f2c:	80 81       	ld	r24, Z
	return clkCtrl;
}
     f2e:	8c 23       	and	r24, r28
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	08 95       	ret

00000f38 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
     f38:	08 95       	ret

00000f3a <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
     f3a:	80 93 dc 24 	sts	0x24DC, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
     f3e:	28 2f       	mov	r18, r24
     f40:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
     f42:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
     f44:	40 91 c6 04 	lds	r20, 0x04C6
     f48:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
     f4c:	88 23       	and	r24, r24
     f4e:	e4 f4       	brge	.+56     	; 0xf88 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
     f50:	64 e8       	ldi	r22, 0x84	; 132
     f52:	62 9f       	mul	r22, r18
     f54:	c0 01       	movw	r24, r0
     f56:	63 9f       	mul	r22, r19
     f58:	90 0d       	add	r25, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	81 5e       	subi	r24, 0xE1	; 225
     f5e:	9a 4d       	sbci	r25, 0xDA	; 218
     f60:	80 93 d8 24 	sts	0x24D8, r24
     f64:	90 93 d9 24 	sts	0x24D9, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
     f68:	c9 01       	movw	r24, r18
     f6a:	82 95       	swap	r24
     f6c:	92 95       	swap	r25
     f6e:	90 7f       	andi	r25, 0xF0	; 240
     f70:	98 27       	eor	r25, r24
     f72:	80 7f       	andi	r24, 0xF0	; 240
     f74:	98 27       	eor	r25, r24
     f76:	08 96       	adiw	r24, 0x08	; 8
     f78:	9a 01       	movw	r18, r20
     f7a:	28 0f       	add	r18, r24
     f7c:	39 1f       	adc	r19, r25
     f7e:	20 93 da 24 	sts	0x24DA, r18
     f82:	30 93 db 24 	sts	0x24DB, r19
     f86:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
     f88:	64 e8       	ldi	r22, 0x84	; 132
     f8a:	62 9f       	mul	r22, r18
     f8c:	c0 01       	movw	r24, r0
     f8e:	63 9f       	mul	r22, r19
     f90:	90 0d       	add	r25, r0
     f92:	11 24       	eor	r1, r1
     f94:	83 52       	subi	r24, 0x23	; 35
     f96:	9b 4d       	sbci	r25, 0xDB	; 219
     f98:	80 93 d8 24 	sts	0x24D8, r24
     f9c:	90 93 d9 24 	sts	0x24D9, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
     fa0:	22 95       	swap	r18
     fa2:	32 95       	swap	r19
     fa4:	30 7f       	andi	r19, 0xF0	; 240
     fa6:	32 27       	eor	r19, r18
     fa8:	20 7f       	andi	r18, 0xF0	; 240
     faa:	32 27       	eor	r19, r18
     fac:	24 0f       	add	r18, r20
     fae:	35 1f       	adc	r19, r21
     fb0:	20 93 da 24 	sts	0x24DA, r18
     fb4:	30 93 db 24 	sts	0x24DB, r19
     fb8:	08 95       	ret

00000fba <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	d8 2f       	mov	r29, r24
     fc2:	16 2f       	mov	r17, r22
     fc4:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
     fc6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
     fca:	e0 91 da 24 	lds	r30, 0x24DA
     fce:	f0 91 db 24 	lds	r31, 0x24DB
     fd2:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
     fd4:	e0 91 da 24 	lds	r30, 0x24DA
     fd8:	f0 91 db 24 	lds	r31, 0x24DB
     fdc:	dd 23       	and	r29, r29
     fde:	a4 f0       	brlt	.+40     	; 0x1008 <Endpoint_ConfigureEndpoint_PRV+0x4e>
     fe0:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
     fe2:	e0 91 da 24 	lds	r30, 0x24DA
     fe6:	f0 91 db 24 	lds	r31, 0x24DB
     fea:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
     fec:	e0 91 da 24 	lds	r30, 0x24DA
     ff0:	f0 91 db 24 	lds	r31, 0x24DB
     ff4:	12 82       	std	Z+2, r1	; 0x02
     ff6:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
     ff8:	80 91 d8 24 	lds	r24, 0x24D8
     ffc:	90 91 d9 24 	lds	r25, 0x24D9
    1000:	84 83       	std	Z+4, r24	; 0x04
    1002:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1004:	40 e0       	ldi	r20, 0x00	; 0
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    100c:	e0 91 da 24 	lds	r30, 0x24DA
    1010:	f0 91 db 24 	lds	r31, 0x24DB
    1014:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1016:	e0 91 da 24 	lds	r30, 0x24DA
    101a:	f0 91 db 24 	lds	r31, 0x24DB
    101e:	12 82       	std	Z+2, r1	; 0x02
    1020:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1022:	80 91 d8 24 	lds	r24, 0x24D8
    1026:	90 91 d9 24 	lds	r25, 0x24D9
    102a:	84 83       	std	Z+4, r24	; 0x04
    102c:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    102e:	4c 2f       	mov	r20, r28
    1030:	fc 01       	movw	r30, r24
    1032:	e0 5c       	subi	r30, 0xC0	; 192
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1038:	31 96       	adiw	r30, 0x01	; 1
    103a:	10 82       	st	Z, r1

	return true;
}
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	08 95       	ret

00001046 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    104a:	a0 ec       	ldi	r26, 0xC0	; 192
    104c:	b4 e0       	ldi	r27, 0x04	; 4
    104e:	16 96       	adiw	r26, 0x06	; 6
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	17 97       	sbiw	r26, 0x07	; 7
    1056:	c9 01       	movw	r24, r18
    1058:	82 95       	swap	r24
    105a:	92 95       	swap	r25
    105c:	90 7f       	andi	r25, 0xF0	; 240
    105e:	98 27       	eor	r25, r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	98 27       	eor	r25, r24
    1064:	e8 0f       	add	r30, r24
    1066:	f9 1f       	adc	r31, r25
    1068:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    106a:	16 96       	adiw	r26, 0x06	; 6
    106c:	4d 91       	ld	r20, X+
    106e:	5c 91       	ld	r21, X
    1070:	17 97       	sbiw	r26, 0x07	; 7
    1072:	fa 01       	movw	r30, r20
    1074:	e8 0f       	add	r30, r24
    1076:	f9 1f       	adc	r31, r25
    1078:	11 82       	std	Z+1, r1	; 0x01
    107a:	2f 5f       	subi	r18, 0xFF	; 255
    107c:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    107e:	25 30       	cpi	r18, 0x05	; 5
    1080:	31 05       	cpc	r19, r1
    1082:	29 f7       	brne	.-54     	; 0x104e <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    1084:	08 95       	ret

00001086 <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	11 24       	eor	r1, r1
    1090:	0b b6       	in	r0, 0x3b	; 59
    1092:	0f 92       	push	r0
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    10ac:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    10b0:	88 23       	and	r24, r24
    10b2:	4c f4       	brge	.+18     	; 0x10c6 <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    10b4:	80 91 c8 04 	lds	r24, 0x04C8
    10b8:	88 23       	and	r24, r24
    10ba:	2c f4       	brge	.+10     	; 0x10c6 <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    10bc:	80 e8       	ldi	r24, 0x80	; 128
    10be:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    10c2:	0e 94 b2 06 	call	0xd64	; 0xd64 <EVENT_USB_Device_StartOfFrame>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    10c6:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    10ca:	86 ff       	sbrs	r24, 6
    10cc:	07 c0       	rjmp	.+14     	; 0x10dc <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    10ce:	80 e4       	ldi	r24, 0x40	; 64
    10d0:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    10d4:	10 92 cf 24 	sts	0x24CF, r1
		EVENT_USB_Device_Disconnect();
    10d8:	0e 94 a6 06 	call	0xd4c	; 0xd4c <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    10dc:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    10e0:	85 ff       	sbrs	r24, 5
    10e2:	16 c0       	rjmp	.+44     	; 0x1110 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    10e4:	80 e2       	ldi	r24, 0x20	; 32
    10e6:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    10ea:	80 91 cb 24 	lds	r24, 0x24CB
    10ee:	88 23       	and	r24, r24
    10f0:	21 f0       	breq	.+8      	; 0x10fa <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	80 93 cf 24 	sts	0x24CF, r24
    10f8:	09 c0       	rjmp	.+18     	; 0x110c <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    10fa:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    10fe:	81 11       	cpse	r24, r1
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <__vector_125+0x80>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <__vector_125+0x82>
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	80 93 cf 24 	sts	0x24CF, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    110c:	0e 94 99 06 	call	0xd32	; 0xd32 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1110:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1114:	84 ff       	sbrs	r24, 4
    1116:	18 c0       	rjmp	.+48     	; 0x1148 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    1118:	e0 ec       	ldi	r30, 0xC0	; 192
    111a:	f4 e0       	ldi	r31, 0x04	; 4
    111c:	80 e1       	ldi	r24, 0x10	; 16
    111e:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	80 93 cf 24 	sts	0x24CF, r24
		USB_Device_ConfigurationNumber = 0;
    1126:	10 92 cb 24 	sts	0x24CB, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    112a:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    112c:	0e 94 23 08 	call	0x1046	; 0x1046 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1130:	48 e0       	ldi	r20, 0x08	; 8
    1132:	68 e4       	ldi	r22, 0x48	; 72
    1134:	80 e8       	ldi	r24, 0x80	; 128
    1136:	0e 94 dd 07 	call	0xfba	; 0xfba <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    113a:	48 e0       	ldi	r20, 0x08	; 8
    113c:	68 e4       	ldi	r22, 0x48	; 72
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	0e 94 dd 07 	call	0xfba	; 0xfba <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    1144:	0e 94 9c 07 	call	0xf38	; 0xf38 <USB_Event_Stub>
	}
}
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	bf 91       	pop	r27
    114e:	af 91       	pop	r26
    1150:	9f 91       	pop	r25
    1152:	8f 91       	pop	r24
    1154:	7f 91       	pop	r23
    1156:	6f 91       	pop	r22
    1158:	5f 91       	pop	r21
    115a:	4f 91       	pop	r20
    115c:	3f 91       	pop	r19
    115e:	2f 91       	pop	r18
    1160:	0f 90       	pop	r0
    1162:	0b be       	out	0x3b, r0	; 59
    1164:	0f 90       	pop	r0
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	0f 90       	pop	r0
    116a:	1f 90       	pop	r1
    116c:	18 95       	reti

0000116e <rtc_initialize>:
/*
 *	initialize the rtc
 */
void rtc_initialize(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
    116e:	e2 ea       	ldi	r30, 0xA2	; 162
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	87 60       	ori	r24, 0x07	; 7
    1176:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
    1178:	8b e0       	ldi	r24, 0x0B	; 11
    117a:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
    117e:	e2 e0       	ldi	r30, 0x02	; 2
    1180:	f4 e0       	ldi	r31, 0x04	; 4
    1182:	80 81       	ld	r24, Z
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
    1188:	80 e2       	ldi	r24, 0x20	; 32
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	80 93 0a 04 	sts	0x040A, r24
    1190:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 93 00 04 	sts	0x0400, r24
	sei();
    119a:	78 94       	sei
    119c:	08 95       	ret

0000119e <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	0b b6       	in	r0, 0x3b	; 59
    11aa:	0f 92       	push	r0
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	ef 93       	push	r30
    11c2:	ff 93       	push	r31
	#if (USE_RTC_TICK == 1)
	rtc_tick_global++;	
    11c4:	80 91 be 24 	lds	r24, 0x24BE
    11c8:	90 91 bf 24 	lds	r25, 0x24BF
    11cc:	a0 91 c0 24 	lds	r26, 0x24C0
    11d0:	b0 91 c1 24 	lds	r27, 0x24C1
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	a1 1d       	adc	r26, r1
    11d8:	b1 1d       	adc	r27, r1
    11da:	80 93 be 24 	sts	0x24BE, r24
    11de:	90 93 bf 24 	sts	0x24BF, r25
    11e2:	a0 93 c0 24 	sts	0x24C0, r26
    11e6:	b0 93 c1 24 	sts	0x24C1, r27
	#endif
	
	system_tick();
    11ea:	0e 94 14 09 	call	0x1228	; 0x1228 <system_tick>

	
}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	0f 90       	pop	r0
    1208:	0b be       	out	0x3b, r0	; 59
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti

00001214 <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
    1214:	1f 92       	push	r1
    1216:	0f 92       	push	r0
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	0f 92       	push	r0
    121c:	11 24       	eor	r1, r1


}
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <system_tick>:



void            system_tick(void){
	
	__system_time++;
    1228:	80 91 c7 24 	lds	r24, 0x24C7
    122c:	90 91 c8 24 	lds	r25, 0x24C8
    1230:	a0 91 c9 24 	lds	r26, 0x24C9
    1234:	b0 91 ca 24 	lds	r27, 0x24CA
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	a1 1d       	adc	r26, r1
    123c:	b1 1d       	adc	r27, r1
    123e:	80 93 c7 24 	sts	0x24C7, r24
    1242:	90 93 c8 24 	sts	0x24C8, r25
    1246:	a0 93 c9 24 	sts	0x24C9, r26
    124a:	b0 93 ca 24 	sts	0x24CA, r27
    124e:	08 95       	ret

00001250 <__udivmodsi4>:
    1250:	a1 e2       	ldi	r26, 0x21	; 33
    1252:	1a 2e       	mov	r1, r26
    1254:	aa 1b       	sub	r26, r26
    1256:	bb 1b       	sub	r27, r27
    1258:	fd 01       	movw	r30, r26
    125a:	0d c0       	rjmp	.+26     	; 0x1276 <__udivmodsi4_ep>

0000125c <__udivmodsi4_loop>:
    125c:	aa 1f       	adc	r26, r26
    125e:	bb 1f       	adc	r27, r27
    1260:	ee 1f       	adc	r30, r30
    1262:	ff 1f       	adc	r31, r31
    1264:	a2 17       	cp	r26, r18
    1266:	b3 07       	cpc	r27, r19
    1268:	e4 07       	cpc	r30, r20
    126a:	f5 07       	cpc	r31, r21
    126c:	20 f0       	brcs	.+8      	; 0x1276 <__udivmodsi4_ep>
    126e:	a2 1b       	sub	r26, r18
    1270:	b3 0b       	sbc	r27, r19
    1272:	e4 0b       	sbc	r30, r20
    1274:	f5 0b       	sbc	r31, r21

00001276 <__udivmodsi4_ep>:
    1276:	66 1f       	adc	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	1a 94       	dec	r1
    1280:	69 f7       	brne	.-38     	; 0x125c <__udivmodsi4_loop>
    1282:	60 95       	com	r22
    1284:	70 95       	com	r23
    1286:	80 95       	com	r24
    1288:	90 95       	com	r25
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	bd 01       	movw	r22, r26
    1290:	cf 01       	movw	r24, r30
    1292:	08 95       	ret

00001294 <_exit>:
    1294:	f8 94       	cli

00001296 <__stop_program>:
    1296:	ff cf       	rjmp	.-2      	; 0x1296 <__stop_program>
