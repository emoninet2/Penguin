
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003852  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000358  00802000  00003852  000038e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000743e  00802358  00802358  00003c3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c0  00000000  00000000  00003cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e821  00000000  00000000  0000469c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002466  00000000  00000000  00012ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000570b  00000000  00000000  00015323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b94  00000000  00000000  0001aa30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000523c  00000000  00000000  0001c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007630  00000000  00000000  00021800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  00028e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 89 01 	jmp	0x312	; 0x312 <__ctors_end>
       4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
       c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      10:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      14:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      18:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      1c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      20:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      24:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      28:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      2c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      30:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      34:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      38:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <__vector_14>
      3c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      40:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      44:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      4c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      50:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      54:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      58:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      5c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      60:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      64:	0c 94 a1 15 	jmp	0x2b42	; 0x2b42 <__vector_25>
      68:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__vector_26>
      6c:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <__vector_27>
      70:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__vector_28>
      74:	0c 94 d3 15 	jmp	0x2ba6	; 0x2ba6 <__vector_29>
      78:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <__vector_30>
      7c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      80:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      84:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      88:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      8c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      90:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      94:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      98:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      9c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      e8:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <__vector_58>
      ec:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__vector_59>
      f0:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__vector_60>
      f4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
      fc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     100:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     104:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     108:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     10c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     110:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     114:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     118:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     11c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     120:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     124:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     128:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     12c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     130:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     134:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     138:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     13c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     140:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     144:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     148:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     14c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     150:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     154:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     158:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     15c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     160:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__vector_88>
     164:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <__vector_89>
     168:	0c 94 e7 15 	jmp	0x2bce	; 0x2bce <__vector_90>
     16c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     170:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     174:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     178:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     17c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     180:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     184:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     188:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     18c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     190:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     194:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     198:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     19c:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1a8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ac:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1b8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1bc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1c8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1cc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1d8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1dc:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e4:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1e8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1ec:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f0:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>
     1f4:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_125>
     1f8:	0c 94 aa 01 	jmp	0x354	; 0x354 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <xRadio>
     200:	0c 94 0d 10 	jmp	0x201a	; 0x201a <xNotification>
     204:	0c 94 88 11 	jmp	0x2310	; 0x2310 <xGLCD>
     208:	0c 94 9e 0f 	jmp	0x1f3c	; 0x1f3c <xRelay>
     20c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <prvIdleTask>

00000210 <__trampolines_end>:
     210:	6e 61       	ori	r22, 0x1E	; 30
     212:	6e 00       	.word	0x006e	; ????

00000214 <__c.2332>:
     214:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     224:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     234:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     244:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     254:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     264:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     274:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     284:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     294:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d4:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     304:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000312 <__ctors_end>:
     312:	11 24       	eor	r1, r1
     314:	1f be       	out	0x3f, r1	; 63
     316:	cf ef       	ldi	r28, 0xFF	; 255
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df e9       	ldi	r29, 0x9F	; 159
     31c:	de bf       	out	0x3e, r29	; 62
     31e:	00 e0       	ldi	r16, 0x00	; 0
     320:	0c bf       	out	0x3c, r16	; 60

00000322 <__do_copy_data>:
     322:	13 e2       	ldi	r17, 0x23	; 35
     324:	a0 e0       	ldi	r26, 0x00	; 0
     326:	b0 e2       	ldi	r27, 0x20	; 32
     328:	e2 e5       	ldi	r30, 0x52	; 82
     32a:	f8 e3       	ldi	r31, 0x38	; 56
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	0b bf       	out	0x3b, r16	; 59
     330:	02 c0       	rjmp	.+4      	; 0x336 <__do_copy_data+0x14>
     332:	07 90       	elpm	r0, Z+
     334:	0d 92       	st	X+, r0
     336:	a8 35       	cpi	r26, 0x58	; 88
     338:	b1 07       	cpc	r27, r17
     33a:	d9 f7       	brne	.-10     	; 0x332 <__do_copy_data+0x10>

0000033c <__do_clear_bss>:
     33c:	27 e9       	ldi	r18, 0x97	; 151
     33e:	a8 e5       	ldi	r26, 0x58	; 88
     340:	b3 e2       	ldi	r27, 0x23	; 35
     342:	01 c0       	rjmp	.+2      	; 0x346 <.do_clear_bss_start>

00000344 <.do_clear_bss_loop>:
     344:	1d 92       	st	X+, r1

00000346 <.do_clear_bss_start>:
     346:	a6 39       	cpi	r26, 0x96	; 150
     348:	b2 07       	cpc	r27, r18
     34a:	e1 f7       	brne	.-8      	; 0x344 <.do_clear_bss_loop>
     34c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <main>
     350:	0c 94 27 1c 	jmp	0x384e	; 0x384e <_exit>

00000354 <__bad_interrupt>:
     354:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000358 <RadioMode>:
    }
}

ErrorStatus_t writeAckPayload(Payload_t *payload){
    write_ack_payload(payload->pipe, payload->data, payload->length);
}
     358:	82 30       	cpi	r24, 0x02	; 2
     35a:	99 f0       	breq	.+38     	; 0x382 <RadioMode+0x2a>
     35c:	18 f4       	brcc	.+6      	; 0x364 <RadioMode+0xc>
     35e:	81 30       	cpi	r24, 0x01	; 1
     360:	31 f0       	breq	.+12     	; 0x36e <RadioMode+0x16>
     362:	08 95       	ret
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	11 f1       	breq	.+68     	; 0x3ac <RadioMode+0x54>
     368:	84 30       	cpi	r24, 0x04	; 4
     36a:	c1 f1       	breq	.+112    	; 0x3dc <RadioMode+0x84>
     36c:	08 95       	ret
     36e:	0e 94 d4 05 	call	0xba8	; 0xba8 <power_down>
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e2       	ldi	r25, 0x20	; 32
     376:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 ba 93 	sts	0x93BA, r24	; 0x8093ba <RadioState>
     380:	08 95       	ret
     382:	80 91 ba 93 	lds	r24, 0x93BA	; 0x8093ba <RadioState>
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	49 f4       	brne	.+18     	; 0x39c <RadioMode+0x44>
     38a:	0e 94 cb 05 	call	0xb96	; 0xb96 <power_up>
     38e:	8f e9       	ldi	r24, 0x9F	; 159
     390:	9c e8       	ldi	r25, 0x8C	; 140
     392:	01 97       	sbiw	r24, 0x01	; 1
     394:	f1 f7       	brne	.-4      	; 0x392 <RadioMode+0x3a>
     396:	00 c0       	rjmp	.+0      	; 0x398 <RadioMode+0x40>
     398:	00 00       	nop
     39a:	04 c0       	rjmp	.+8      	; 0x3a4 <RadioMode+0x4c>
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	90 e2       	ldi	r25, 0x20	; 32
     3a0:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	80 93 ba 93 	sts	0x93BA, r24	; 0x8093ba <RadioState>
     3aa:	08 95       	ret
     3ac:	80 91 ba 93 	lds	r24, 0x93BA	; 0x8093ba <RadioState>
     3b0:	83 30       	cpi	r24, 0x03	; 3
     3b2:	59 f1       	breq	.+86     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e2       	ldi	r25, 0x20	; 32
     3b8:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     3bc:	0e 94 dd 05 	call	0xbba	; 0xbba <rx_mode>
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e2       	ldi	r25, 0x20	; 32
     3c4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     3c8:	8f e0       	ldi	r24, 0x0F	; 15
     3ca:	94 e0       	ldi	r25, 0x04	; 4
     3cc:	01 97       	sbiw	r24, 0x01	; 1
     3ce:	f1 f7       	brne	.-4      	; 0x3cc <RadioMode+0x74>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <RadioMode+0x7a>
     3d2:	00 00       	nop
     3d4:	83 e0       	ldi	r24, 0x03	; 3
     3d6:	80 93 ba 93 	sts	0x93BA, r24	; 0x8093ba <RadioState>
     3da:	08 95       	ret
     3dc:	80 91 ba 93 	lds	r24, 0x93BA	; 0x8093ba <RadioState>
     3e0:	84 30       	cpi	r24, 0x04	; 4
     3e2:	99 f0       	breq	.+38     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e2       	ldi	r25, 0x20	; 32
     3e8:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     3ec:	0e 94 e6 05 	call	0xbcc	; 0xbcc <tx_mode>
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	90 e2       	ldi	r25, 0x20	; 32
     3f4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     3f8:	8f e0       	ldi	r24, 0x0F	; 15
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <RadioMode+0xa4>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	84 e0       	ldi	r24, 0x04	; 4
     406:	80 93 ba 93 	sts	0x93BA, r24	; 0x8093ba <RadioState>
     40a:	08 95       	ret

0000040c <ResetConfigValues>:
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	7c 01       	movw	r14, r24
     424:	06 2f       	mov	r16, r22
     426:	17 2f       	mov	r17, r23
     428:	e0 e4       	ldi	r30, 0x40	; 64
     42a:	f6 e0       	ldi	r31, 0x06	; 6
     42c:	80 eb       	ldi	r24, 0xB0	; 176
     42e:	81 83       	std	Z+1, r24	; 0x01
     430:	80 e4       	ldi	r24, 0x40	; 64
     432:	82 83       	std	Z+2, r24	; 0x02
     434:	80 e5       	ldi	r24, 0x50	; 80
     436:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     43a:	80 e1       	ldi	r24, 0x10	; 16
     43c:	81 83       	std	Z+1, r24	; 0x01
     43e:	80 e8       	ldi	r24, 0x80	; 128
     440:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e2       	ldi	r25, 0x20	; 32
     448:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     44c:	83 e0       	ldi	r24, 0x03	; 3
     44e:	90 e2       	ldi	r25, 0x20	; 32
     450:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	83 ec       	ldi	r24, 0xC3	; 195
     458:	99 e0       	ldi	r25, 0x09	; 9
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	90 40       	sbci	r25, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <ResetConfigValues+0x4e>
     462:	00 c0       	rjmp	.+0      	; 0x464 <ResetConfigValues+0x58>
     464:	00 00       	nop
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
     472:	0e 94 b2 06 	call	0xd64	; 0xd64 <clear_data_ready_flag>
     476:	0e 94 4f 05 	call	0xa9e	; 0xa9e <flush_rx>
     47a:	0e 94 36 05 	call	0xa6c	; 0xa6c <flush_tx>
     47e:	80 e7       	ldi	r24, 0x70	; 112
     480:	89 83       	std	Y+1, r24	; 0x01
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	50 e0       	ldi	r21, 0x00	; 0
     486:	be 01       	movw	r22, r28
     488:	6f 5f       	subi	r22, 0xFF	; 255
     48a:	7f 4f       	sbci	r23, 0xFF	; 255
     48c:	87 e0       	ldi	r24, 0x07	; 7
     48e:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     492:	8b e0       	ldi	r24, 0x0B	; 11
     494:	8a 83       	std	Y+2, r24	; 0x02
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	be 01       	movw	r22, r28
     49c:	6e 5f       	subi	r22, 0xFE	; 254
     49e:	7f 4f       	sbci	r23, 0xFF	; 255
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     4a6:	d7 01       	movw	r26, r14
     4a8:	8c 91       	ld	r24, X
     4aa:	eb eb       	ldi	r30, 0xBB	; 187
     4ac:	f3 e9       	ldi	r31, 0x93	; 147
     4ae:	80 83       	st	Z, r24
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 91       	ld	r24, X
     4b4:	11 97       	sbiw	r26, 0x01	; 1
     4b6:	81 83       	std	Z+1, r24	; 0x01
     4b8:	12 96       	adiw	r26, 0x02	; 2
     4ba:	8c 91       	ld	r24, X
     4bc:	12 97       	sbiw	r26, 0x02	; 2
     4be:	82 83       	std	Z+2, r24	; 0x02
     4c0:	13 96       	adiw	r26, 0x03	; 3
     4c2:	8c 91       	ld	r24, X
     4c4:	13 97       	sbiw	r26, 0x03	; 3
     4c6:	83 83       	std	Z+3, r24	; 0x03
     4c8:	14 96       	adiw	r26, 0x04	; 4
     4ca:	8c 91       	ld	r24, X
     4cc:	14 97       	sbiw	r26, 0x04	; 4
     4ce:	84 83       	std	Z+4, r24	; 0x04
     4d0:	15 96       	adiw	r26, 0x05	; 5
     4d2:	8c 91       	ld	r24, X
     4d4:	15 97       	sbiw	r26, 0x05	; 5
     4d6:	85 83       	std	Z+5, r24	; 0x05
     4d8:	16 96       	adiw	r26, 0x06	; 6
     4da:	8c 91       	ld	r24, X
     4dc:	16 97       	sbiw	r26, 0x06	; 6
     4de:	86 83       	std	Z+6, r24	; 0x06
     4e0:	17 96       	adiw	r26, 0x07	; 7
     4e2:	8c 91       	ld	r24, X
     4e4:	17 97       	sbiw	r26, 0x07	; 7
     4e6:	87 83       	std	Z+7, r24	; 0x07
     4e8:	18 96       	adiw	r26, 0x08	; 8
     4ea:	8c 91       	ld	r24, X
     4ec:	18 97       	sbiw	r26, 0x08	; 8
     4ee:	80 87       	std	Z+8, r24	; 0x08
     4f0:	19 96       	adiw	r26, 0x09	; 9
     4f2:	8c 91       	ld	r24, X
     4f4:	19 97       	sbiw	r26, 0x09	; 9
     4f6:	81 87       	std	Z+9, r24	; 0x09
     4f8:	1a 96       	adiw	r26, 0x0a	; 10
     4fa:	8c 91       	ld	r24, X
     4fc:	1a 97       	sbiw	r26, 0x0a	; 10
     4fe:	82 87       	std	Z+10, r24	; 0x0a
     500:	1b 96       	adiw	r26, 0x0b	; 11
     502:	8c 91       	ld	r24, X
     504:	1b 97       	sbiw	r26, 0x0b	; 11
     506:	83 87       	std	Z+11, r24	; 0x0b
     508:	1c 96       	adiw	r26, 0x0c	; 12
     50a:	9c 91       	ld	r25, X
     50c:	1c 97       	sbiw	r26, 0x0c	; 12
     50e:	94 87       	std	Z+12, r25	; 0x0c
     510:	1d 96       	adiw	r26, 0x0d	; 13
     512:	9c 91       	ld	r25, X
     514:	95 87       	std	Z+13, r25	; 0x0d
     516:	40 2f       	mov	r20, r16
     518:	51 2f       	mov	r21, r17
     51a:	0f 2e       	mov	r0, r31
     51c:	f1 ed       	ldi	r31, 0xD1	; 209
     51e:	ef 2e       	mov	r14, r31
     520:	f3 e9       	ldi	r31, 0x93	; 147
     522:	ff 2e       	mov	r15, r31
     524:	f0 2d       	mov	r31, r0
     526:	69 e1       	ldi	r22, 0x19	; 25
     528:	74 e9       	ldi	r23, 0x94	; 148
     52a:	97 01       	movw	r18, r14
     52c:	9c e0       	ldi	r25, 0x0C	; 12
     52e:	fa 01       	movw	r30, r20
     530:	d9 01       	movw	r26, r18
     532:	01 90       	ld	r0, Z+
     534:	0d 92       	st	X+, r0
     536:	9a 95       	dec	r25
     538:	e1 f7       	brne	.-8      	; 0x532 <ResetConfigValues+0x126>
     53a:	44 5f       	subi	r20, 0xF4	; 244
     53c:	5f 4f       	sbci	r21, 0xFF	; 255
     53e:	24 5f       	subi	r18, 0xF4	; 244
     540:	3f 4f       	sbci	r19, 0xFF	; 255
     542:	26 17       	cp	r18, r22
     544:	37 07       	cpc	r19, r23
     546:	91 f7       	brne	.-28     	; 0x52c <ResetConfigValues+0x120>
     548:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <enable_dynamic_payload>
     54c:	0b eb       	ldi	r16, 0xBB	; 187
     54e:	13 e9       	ldi	r17, 0x93	; 147
     550:	f8 01       	movw	r30, r16
     552:	84 85       	ldd	r24, Z+12	; 0x0c
     554:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <enable_payload_with_ack>
     558:	d8 01       	movw	r26, r16
     55a:	1d 96       	adiw	r26, 0x0d	; 13
     55c:	8c 91       	ld	r24, X
     55e:	0e 94 fc 07 	call	0xff8	; 0xff8 <enable_dynamic_payload_with_no_ack>
     562:	f8 01       	movw	r30, r16
     564:	84 81       	ldd	r24, Z+4	; 0x04
     566:	0e 94 37 06 	call	0xc6e	; 0xc6e <set_auto_retransmission_count>
     56a:	d8 01       	movw	r26, r16
     56c:	15 96       	adiw	r26, 0x05	; 5
     56e:	8c 91       	ld	r24, X
     570:	0e 94 44 06 	call	0xc88	; 0xc88 <set_auto_retransmission_delay>
     574:	f8 01       	movw	r30, r16
     576:	87 81       	ldd	r24, Z+7	; 0x07
     578:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <set_DataRate>
     57c:	d1 2c       	mov	r13, r1
     57e:	d7 01       	movw	r26, r14
     580:	6c 91       	ld	r22, X
     582:	8d 2d       	mov	r24, r13
     584:	0e 94 13 06 	call	0xc26	; 0xc26 <enable_rx_on_pipe>
     588:	f7 01       	movw	r30, r14
     58a:	61 81       	ldd	r22, Z+1	; 0x01
     58c:	8d 2d       	mov	r24, r13
     58e:	0e 94 ef 05 	call	0xbde	; 0xbde <enable_auto_ack>
     592:	d7 01       	movw	r26, r14
     594:	1b 96       	adiw	r26, 0x0b	; 11
     596:	6c 91       	ld	r22, X
     598:	8d 2d       	mov	r24, r13
     59a:	0e 94 b0 07 	call	0xf60	; 0xf60 <enable_dynamic_payload_pipe>
     59e:	f7 01       	movw	r30, r14
     5a0:	02 81       	ldd	r16, Z+2	; 0x02
     5a2:	13 81       	ldd	r17, Z+3	; 0x03
     5a4:	24 81       	ldd	r18, Z+4	; 0x04
     5a6:	35 81       	ldd	r19, Z+5	; 0x05
     5a8:	46 81       	ldd	r20, Z+6	; 0x06
     5aa:	57 81       	ldd	r21, Z+7	; 0x07
     5ac:	60 85       	ldd	r22, Z+8	; 0x08
     5ae:	71 85       	ldd	r23, Z+9	; 0x09
     5b0:	8d 2d       	mov	r24, r13
     5b2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <set_RX_pipe_address>
     5b6:	fc e0       	ldi	r31, 0x0C	; 12
     5b8:	ef 0e       	add	r14, r31
     5ba:	f1 1c       	adc	r15, r1
     5bc:	d3 94       	inc	r13
     5be:	26 e0       	ldi	r18, 0x06	; 6
     5c0:	d2 12       	cpse	r13, r18
     5c2:	dd cf       	rjmp	.-70     	; 0x57e <ResetConfigValues+0x172>
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	1f 91       	pop	r17
     5ce:	0f 91       	pop	r16
     5d0:	ff 90       	pop	r15
     5d2:	ef 90       	pop	r14
     5d4:	df 90       	pop	r13
     5d6:	08 95       	ret

000005d8 <readable>:
     5d8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <get_data_ready_flag>
     5dc:	81 11       	cpse	r24, r1
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <readable+0x10>
     5e0:	0e 94 a4 07 	call	0xf48	; 0xf48 <get_fifo_flag_rx_empty>
     5e4:	81 11       	cpse	r24, r1
     5e6:	08 c0       	rjmp	.+16     	; 0x5f8 <readable+0x20>
     5e8:	0e 94 c5 06 	call	0xd8a	; 0xd8a <get_rx_payload_pipe>
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	87 30       	cpi	r24, 0x07	; 7
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <readable+0x1c>
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	89 2f       	mov	r24, r25
     5f6:	01 c0       	rjmp	.+2      	; 0x5fa <readable+0x22>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	81 70       	andi	r24, 0x01	; 1
     5fc:	08 95       	ret

000005fe <writable>:
     5fe:	0e 94 a9 07 	call	0xf52	; 0xf52 <get_fifo_flag_tx_full>
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	89 27       	eor	r24, r25
     606:	08 95       	ret

00000608 <writePayload>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ec 01       	movw	r28, r24
     60e:	28 81       	ld	r18, Y
     610:	39 81       	ldd	r19, Y+1	; 0x01
     612:	4a 81       	ldd	r20, Y+2	; 0x02
     614:	5b 81       	ldd	r21, Y+3	; 0x03
     616:	6c 81       	ldd	r22, Y+4	; 0x04
     618:	7d 81       	ldd	r23, Y+5	; 0x05
     61a:	8e 81       	ldd	r24, Y+6	; 0x06
     61c:	9f 81       	ldd	r25, Y+7	; 0x07
     61e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_TX_pipe_address>
     622:	89 85       	ldd	r24, Y+9	; 0x09
     624:	88 23       	and	r24, r24
     626:	39 f0       	breq	.+14     	; 0x636 <writePayload+0x2e>
     628:	6c 85       	ldd	r22, Y+12	; 0x0c
     62a:	7d 85       	ldd	r23, Y+13	; 0x0d
     62c:	8a 85       	ldd	r24, Y+10	; 0x0a
     62e:	9b 85       	ldd	r25, Y+11	; 0x0b
     630:	0e 94 0f 05 	call	0xa1e	; 0xa1e <write_tx_payload>
     634:	0a c0       	rjmp	.+20     	; 0x64a <writePayload+0x42>
     636:	80 91 c8 93 	lds	r24, 0x93C8	; 0x8093c8 <RadioConfig+0xd>
     63a:	88 23       	and	r24, r24
     63c:	31 f0       	breq	.+12     	; 0x64a <writePayload+0x42>
     63e:	6c 85       	ldd	r22, Y+12	; 0x0c
     640:	7d 85       	ldd	r23, Y+13	; 0x0d
     642:	8a 85       	ldd	r24, Y+10	; 0x0a
     644:	9b 85       	ldd	r25, Y+11	; 0x0b
     646:	0e 94 89 05 	call	0xb12	; 0xb12 <write_tx_payload_noack>
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <readPayload>:
ErrorStatus_t readPayload(Payload_t *payload){
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	ec 01       	movw	r28, r24
    ErrorStatus_t error;
    payload->pipe = get_rx_payload_pipe();
     656:	0e 94 c5 06 	call	0xd8a	; 0xd8a <get_rx_payload_pipe>
     65a:	88 87       	std	Y+8, r24	; 0x08
    
    if(payload->pipe>=0 && payload->pipe<=5){
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	a0 f4       	brcc	.+40     	; 0x688 <readPayload+0x38>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
     660:	90 91 c6 93 	lds	r25, 0x93C6	; 0x8093c6 <RadioConfig+0xb>
     664:	99 23       	and	r25, r25
     666:	29 f0       	breq	.+10     	; 0x672 <readPayload+0x22>
            payload->length = read_rx_payload_width();
     668:	0e 94 68 05 	call	0xad0	; 0xad0 <read_rx_payload_width>
     66c:	8c 87       	std	Y+12, r24	; 0x0c
     66e:	9d 87       	std	Y+13, r25	; 0x0d
     670:	05 c0       	rjmp	.+10     	; 0x67c <readPayload+0x2c>
        }else{
            payload->length = get_RX_pipe_width(payload->pipe);
     672:	0e 94 91 07 	call	0xf22	; 0xf22 <get_RX_pipe_width>
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	8c 87       	std	Y+12, r24	; 0x0c
     67a:	9d 87       	std	Y+13, r25	; 0x0d
        }
        read_rx_payload(payload->data,payload->length);
     67c:	6c 85       	ldd	r22, Y+12	; 0x0c
     67e:	7d 85       	ldd	r23, Y+13	; 0x0d
     680:	8a 85       	ldd	r24, Y+10	; 0x0a
     682:	9b 85       	ldd	r25, Y+11	; 0x0b
     684:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <read_rx_payload>
        error = SUCCESS;
    }
    return error;
}
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <TransmitPayload>:


ErrorStatus_t TransmitPayload(Payload_t *payload){
     690:	5f 92       	push	r5
     692:	6f 92       	push	r6
     694:	7f 92       	push	r7
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
     6a6:	0f 93       	push	r16
     6a8:	1f 93       	push	r17
     6aa:	cf 93       	push	r28
     6ac:	df 93       	push	r29
     6ae:	ec 01       	movw	r28, r24
    ErrorStatus_t error;
    if(TxPipeAddress != payload->address){
     6b0:	58 80       	ld	r5, Y
     6b2:	69 80       	ldd	r6, Y+1	; 0x01
     6b4:	7a 80       	ldd	r7, Y+2	; 0x02
     6b6:	9b 80       	ldd	r9, Y+3	; 0x03
     6b8:	bc 81       	ldd	r27, Y+4	; 0x04
     6ba:	ad 81       	ldd	r26, Y+5	; 0x05
     6bc:	fe 81       	ldd	r31, Y+6	; 0x06
     6be:	ef 81       	ldd	r30, Y+7	; 0x07
     6c0:	a0 90 c9 93 	lds	r10, 0x93C9	; 0x8093c9 <TxPipeAddress>
     6c4:	b0 90 ca 93 	lds	r11, 0x93CA	; 0x8093ca <TxPipeAddress+0x1>
     6c8:	c0 90 cb 93 	lds	r12, 0x93CB	; 0x8093cb <TxPipeAddress+0x2>
     6cc:	d0 90 cc 93 	lds	r13, 0x93CC	; 0x8093cc <TxPipeAddress+0x3>
     6d0:	e0 90 cd 93 	lds	r14, 0x93CD	; 0x8093cd <TxPipeAddress+0x4>
     6d4:	f0 90 ce 93 	lds	r15, 0x93CE	; 0x8093ce <TxPipeAddress+0x5>
     6d8:	00 91 cf 93 	lds	r16, 0x93CF	; 0x8093cf <TxPipeAddress+0x6>
     6dc:	10 91 d0 93 	lds	r17, 0x93D0	; 0x8093d0 <TxPipeAddress+0x7>
     6e0:	25 2d       	mov	r18, r5
     6e2:	36 2d       	mov	r19, r6
     6e4:	47 2d       	mov	r20, r7
     6e6:	59 2d       	mov	r21, r9
     6e8:	6b 2f       	mov	r22, r27
     6ea:	7a 2f       	mov	r23, r26
     6ec:	8f 2f       	mov	r24, r31
     6ee:	9e 2f       	mov	r25, r30
     6f0:	0e 94 39 1a 	call	0x3472	; 0x3472 <__cmpdi2>
     6f4:	d1 f0       	breq	.+52     	; 0x72a <TransmitPayload+0x9a>
	    set_TX_pipe_address(payload->address);
     6f6:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_TX_pipe_address>
	    TxPipeAddress = payload->address;
     6fa:	78 81       	ld	r23, Y
     6fc:	69 81       	ldd	r22, Y+1	; 0x01
     6fe:	5a 81       	ldd	r21, Y+2	; 0x02
     700:	4b 81       	ldd	r20, Y+3	; 0x03
     702:	3c 81       	ldd	r19, Y+4	; 0x04
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	9e 81       	ldd	r25, Y+6	; 0x06
     708:	8f 81       	ldd	r24, Y+7	; 0x07
     70a:	70 93 c9 93 	sts	0x93C9, r23	; 0x8093c9 <TxPipeAddress>
     70e:	60 93 ca 93 	sts	0x93CA, r22	; 0x8093ca <TxPipeAddress+0x1>
     712:	50 93 cb 93 	sts	0x93CB, r21	; 0x8093cb <TxPipeAddress+0x2>
     716:	40 93 cc 93 	sts	0x93CC, r20	; 0x8093cc <TxPipeAddress+0x3>
     71a:	30 93 cd 93 	sts	0x93CD, r19	; 0x8093cd <TxPipeAddress+0x4>
     71e:	20 93 ce 93 	sts	0x93CE, r18	; 0x8093ce <TxPipeAddress+0x5>
     722:	90 93 cf 93 	sts	0x93CF, r25	; 0x8093cf <TxPipeAddress+0x6>
     726:	80 93 d0 93 	sts	0x93D0, r24	; 0x8093d0 <TxPipeAddress+0x7>
    }

    if(payload->UseAck){
     72a:	89 85       	ldd	r24, Y+9	; 0x09
     72c:	88 23       	and	r24, r24
     72e:	09 f4       	brne	.+2      	; 0x732 <TransmitPayload+0xa2>
     730:	62 c0       	rjmp	.+196    	; 0x7f6 <TransmitPayload+0x166>
	    
	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
     732:	80 91 d2 93 	lds	r24, 0x93D2	; 0x8093d2 <RxPipeConfig+0x1>
     736:	81 11       	cpse	r24, r1
     738:	03 c0       	rjmp	.+6      	; 0x740 <TransmitPayload+0xb0>
		    enable_auto_ack(PIPE_P0, 1);
     73a:	61 e0       	ldi	r22, 0x01	; 1
     73c:	0e 94 ef 05 	call	0xbde	; 0xbde <enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
     740:	80 91 d1 93 	lds	r24, 0x93D1	; 0x8093d1 <RxPipeConfig>
     744:	81 11       	cpse	r24, r1
     746:	03 c0       	rjmp	.+6      	; 0x74e <TransmitPayload+0xbe>
		    enable_rx_on_pipe(PIPE_P0, 1);
     748:	61 e0       	ldi	r22, 0x01	; 1
     74a:	0e 94 13 06 	call	0xc26	; 0xc26 <enable_rx_on_pipe>
	    }
	    set_RX_pipe_address(PIPE_P0, payload->address);
     74e:	08 81       	ld	r16, Y
     750:	19 81       	ldd	r17, Y+1	; 0x01
     752:	2a 81       	ldd	r18, Y+2	; 0x02
     754:	3b 81       	ldd	r19, Y+3	; 0x03
     756:	4c 81       	ldd	r20, Y+4	; 0x04
     758:	5d 81       	ldd	r21, Y+5	; 0x05
     75a:	6e 81       	ldd	r22, Y+6	; 0x06
     75c:	7f 81       	ldd	r23, Y+7	; 0x07
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <set_RX_pipe_address>
	    
	    
	    writePayload(payload);
     764:	ce 01       	movw	r24, r28
     766:	0e 94 04 03 	call	0x608	; 0x608 <writePayload>
	    
	    RadioState_t originalState = RadioState;
     76a:	10 91 ba 93 	lds	r17, 0x93BA	; 0x8093ba <RadioState>
	    RadioMode(MODE_STANDBY);
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
	    

	    if(writable()){
     774:	0e 94 ff 02 	call	0x5fe	; 0x5fe <writable>
     778:	88 23       	and	r24, r24
     77a:	f9 f0       	breq	.+62     	; 0x7ba <TransmitPayload+0x12a>
		    clear_data_sent_flag();
     77c:	0e 94 92 06 	call	0xd24	; 0xd24 <clear_data_sent_flag>
		    while(1){
			    RadioMode(MODE_TX);
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
			    RadioMode(MODE_STANDBY);
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
			    
			    if(get_data_sent_flag()){
     78c:	0e 94 86 06 	call	0xd0c	; 0xd0c <get_data_sent_flag>
     790:	81 11       	cpse	r24, r1
     792:	12 c0       	rjmp	.+36     	; 0x7b8 <TransmitPayload+0x128>
				    error = SUCCESS;
				    break;
			    }
			    if(get_max_retry_flag()){
     794:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_max_retry_flag>
     798:	88 23       	and	r24, r24
     79a:	91 f3       	breq	.-28     	; 0x780 <TransmitPayload+0xf0>
				    clear_max_retry_flag();
     79c:	0e 94 73 06 	call	0xce6	; 0xce6 <clear_max_retry_flag>
				    if(get_plos_count()>=payload->retransmitCount){
     7a0:	0e 94 cc 06 	call	0xd98	; 0xd98 <get_plos_count>
     7a4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7a6:	89 17       	cp	r24, r25
     7a8:	58 f3       	brcs	.-42     	; 0x780 <TransmitPayload+0xf0>
					    set_frequency_offset(RadioConfig.frequencyOffset);
     7aa:	80 91 c1 93 	lds	r24, 0x93C1	; 0x8093c1 <RadioConfig+0x6>
     7ae:	0e 94 55 06 	call	0xcaa	; 0xcaa <set_frequency_offset>
					    error = ERROR;
     7b2:	88 24       	eor	r8, r8
     7b4:	8a 94       	dec	r8
					    break;
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <TransmitPayload+0x12a>
		    while(1){
			    RadioMode(MODE_TX);
			    RadioMode(MODE_STANDBY);
			    
			    if(get_data_sent_flag()){
				    error = SUCCESS;
     7b8:	81 2c       	mov	r8, r1
			    }
		    }

	    }
	    
	    RadioMode(originalState);
     7ba:	81 2f       	mov	r24, r17
     7bc:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
	    
	    set_RX_pipe_address(PIPE_P0, RxPipeConfig[PIPE_P0].address);
     7c0:	c1 ed       	ldi	r28, 0xD1	; 209
     7c2:	d3 e9       	ldi	r29, 0x93	; 147
     7c4:	0a 81       	ldd	r16, Y+2	; 0x02
     7c6:	1b 81       	ldd	r17, Y+3	; 0x03
     7c8:	2c 81       	ldd	r18, Y+4	; 0x04
     7ca:	3d 81       	ldd	r19, Y+5	; 0x05
     7cc:	4e 81       	ldd	r20, Y+6	; 0x06
     7ce:	5f 81       	ldd	r21, Y+7	; 0x07
     7d0:	68 85       	ldd	r22, Y+8	; 0x08
     7d2:	79 85       	ldd	r23, Y+9	; 0x09
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <set_RX_pipe_address>
	    if(RxPipeConfig[PIPE_P0].autoAckEnabled == 0){
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	81 11       	cpse	r24, r1
     7de:	03 c0       	rjmp	.+6      	; 0x7e6 <TransmitPayload+0x156>
		    enable_auto_ack(PIPE_P0, 0);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	0e 94 ef 05 	call	0xbde	; 0xbde <enable_auto_ack>
	    }
	    if(RxPipeConfig[PIPE_P0].PipeEnabled == 0){
     7e6:	80 91 d1 93 	lds	r24, 0x93D1	; 0x8093d1 <RxPipeConfig>
     7ea:	81 11       	cpse	r24, r1
     7ec:	27 c0       	rjmp	.+78     	; 0x83c <TransmitPayload+0x1ac>
		    enable_rx_on_pipe(PIPE_P0, 0);
     7ee:	60 e0       	ldi	r22, 0x00	; 0
     7f0:	0e 94 13 06 	call	0xc26	; 0xc26 <enable_rx_on_pipe>
     7f4:	23 c0       	rjmp	.+70     	; 0x83c <TransmitPayload+0x1ac>
	    }
	    }else{
			set_TX_pipe_address(payload->address);
     7f6:	28 81       	ld	r18, Y
     7f8:	39 81       	ldd	r19, Y+1	; 0x01
     7fa:	4a 81       	ldd	r20, Y+2	; 0x02
     7fc:	5b 81       	ldd	r21, Y+3	; 0x03
     7fe:	6c 81       	ldd	r22, Y+4	; 0x04
     800:	7d 81       	ldd	r23, Y+5	; 0x05
     802:	8e 81       	ldd	r24, Y+6	; 0x06
     804:	9f 81       	ldd	r25, Y+7	; 0x07
     806:	0e 94 4e 07 	call	0xe9c	; 0xe9c <set_TX_pipe_address>
			writePayload(payload);
     80a:	ce 01       	movw	r24, r28
     80c:	0e 94 04 03 	call	0x608	; 0x608 <writePayload>
			RadioState_t originalState = RadioState;
     810:	c0 91 ba 93 	lds	r28, 0x93BA	; 0x8093ba <RadioState>
			if(writable()){
     814:	0e 94 ff 02 	call	0x5fe	; 0x5fe <writable>
     818:	88 23       	and	r24, r24
     81a:	61 f0       	breq	.+24     	; 0x834 <TransmitPayload+0x1a4>
				clear_data_sent_flag();
     81c:	0e 94 92 06 	call	0xd24	; 0xd24 <clear_data_sent_flag>
				while(1){
					RadioMode(MODE_TX);
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
					RadioMode(MODE_STANDBY);
     826:	82 e0       	ldi	r24, 0x02	; 2
     828:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
					if(get_data_sent_flag()){
     82c:	0e 94 86 06 	call	0xd0c	; 0xd0c <get_data_sent_flag>
     830:	88 23       	and	r24, r24
     832:	b1 f3       	breq	.-20     	; 0x820 <TransmitPayload+0x190>
						error = SUCCESS;
						break;
					}
				}
			}
			RadioMode(originalState);
     834:	8c 2f       	mov	r24, r28
     836:	0e 94 ac 01 	call	0x358	; 0x358 <RadioMode>
     83a:	81 2c       	mov	r8, r1
		}
    
    flush_tx();
     83c:	0e 94 36 05 	call	0xa6c	; 0xa6c <flush_tx>
    return error;
}
     840:	88 2d       	mov	r24, r8
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	08 95       	ret

00000862 <port_SPI_Transcieve>:
    else return 0;      
}
bool get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	61 15       	cp	r22, r1
     868:	71 05       	cpc	r23, r1
     86a:	89 f0       	breq	.+34     	; 0x88e <port_SPI_Transcieve+0x2c>
     86c:	dc 01       	movw	r26, r24
     86e:	68 0f       	add	r22, r24
     870:	79 1f       	adc	r23, r25
     872:	e0 ec       	ldi	r30, 0xC0	; 192
     874:	f8 e0       	ldi	r31, 0x08	; 8
     876:	ed 01       	movw	r28, r26
     878:	9c 91       	ld	r25, X
     87a:	93 83       	std	Z+3, r25	; 0x03
     87c:	92 81       	ldd	r25, Z+2	; 0x02
     87e:	99 23       	and	r25, r25
     880:	ec f7       	brge	.-6      	; 0x87c <port_SPI_Transcieve+0x1a>
     882:	93 81       	ldd	r25, Z+3	; 0x03
     884:	98 83       	st	Y, r25
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	a6 17       	cp	r26, r22
     88a:	b7 07       	cpc	r27, r23
     88c:	a1 f7       	brne	.-24     	; 0x876 <port_SPI_Transcieve+0x14>
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <read_register>:
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	1f 92       	push	r1
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	18 2f       	mov	r17, r24
     8a2:	86 e0       	ldi	r24, 0x06	; 6
     8a4:	90 e2       	ldi	r25, 0x20	; 32
     8a6:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     8aa:	1f 71       	andi	r17, 0x1F	; 31
     8ac:	19 83       	std	Y+1, r17	; 0x01
     8ae:	61 e0       	ldi	r22, 0x01	; 1
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	90 e2       	ldi	r25, 0x20	; 32
     8ca:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	08 95       	ret

000008da <read_register_buffer>:
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	1f 92       	push	r1
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	18 2f       	mov	r17, r24
     8f0:	7b 01       	movw	r14, r22
     8f2:	6a 01       	movw	r12, r20
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	90 e2       	ldi	r25, 0x20	; 32
     8f8:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     8fc:	1f 71       	andi	r17, 0x1F	; 31
     8fe:	19 83       	std	Y+1, r17	; 0x01
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	ce 01       	movw	r24, r28
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     90c:	b6 01       	movw	r22, r12
     90e:	c7 01       	movw	r24, r14
     910:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     914:	86 e0       	ldi	r24, 0x06	; 6
     916:	90 e2       	ldi	r25, 0x20	; 32
     918:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     91c:	0f 90       	pop	r0
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	df 90       	pop	r13
     92a:	cf 90       	pop	r12
     92c:	08 95       	ret

0000092e <write_register>:
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	1f 92       	push	r1
     936:	1f 92       	push	r1
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	18 2f       	mov	r17, r24
     93e:	6a 83       	std	Y+2, r22	; 0x02
     940:	86 e0       	ldi	r24, 0x06	; 6
     942:	90 e2       	ldi	r25, 0x20	; 32
     944:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     948:	1f 71       	andi	r17, 0x1F	; 31
     94a:	10 62       	ori	r17, 0x20	; 32
     94c:	19 83       	std	Y+1, r17	; 0x01
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	ce 01       	movw	r24, r28
     960:	02 96       	adiw	r24, 0x02	; 2
     962:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     966:	86 e0       	ldi	r24, 0x06	; 6
     968:	90 e2       	ldi	r25, 0x20	; 32
     96a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	08 95       	ret

0000097a <write_register_buffer>:
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	1f 92       	push	r1
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	18 2f       	mov	r17, r24
     990:	7b 01       	movw	r14, r22
     992:	6a 01       	movw	r12, r20
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	90 e2       	ldi	r25, 0x20	; 32
     998:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     99c:	1f 71       	andi	r17, 0x1F	; 31
     99e:	10 62       	ori	r17, 0x20	; 32
     9a0:	19 83       	std	Y+1, r17	; 0x01
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	ce 01       	movw	r24, r28
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     9ae:	b6 01       	movw	r22, r12
     9b0:	c7 01       	movw	r24, r14
     9b2:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     9b6:	86 e0       	ldi	r24, 0x06	; 6
     9b8:	90 e2       	ldi	r25, 0x20	; 32
     9ba:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     9be:	0f 90       	pop	r0
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	08 95       	ret

000009d0 <read_rx_payload>:
     9d0:	ef 92       	push	r14
     9d2:	ff 92       	push	r15
     9d4:	0f 93       	push	r16
     9d6:	1f 93       	push	r17
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	1f 92       	push	r1
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	8c 01       	movw	r16, r24
     9e4:	7b 01       	movw	r14, r22
     9e6:	86 e0       	ldi	r24, 0x06	; 6
     9e8:	90 e2       	ldi	r25, 0x20	; 32
     9ea:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     9ee:	81 e6       	ldi	r24, 0x61	; 97
     9f0:	89 83       	std	Y+1, r24	; 0x01
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     9fe:	b7 01       	movw	r22, r14
     a00:	c8 01       	movw	r24, r16
     a02:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     a06:	86 e0       	ldi	r24, 0x06	; 6
     a08:	90 e2       	ldi	r25, 0x20	; 32
     a0a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     a0e:	0f 90       	pop	r0
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	08 95       	ret

00000a1e <write_tx_payload>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	1f 92       	push	r1
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62
     a30:	8c 01       	movw	r16, r24
     a32:	7b 01       	movw	r14, r22
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	90 e2       	ldi	r25, 0x20	; 32
     a38:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     a3c:	80 ea       	ldi	r24, 0xA0	; 160
     a3e:	89 83       	std	Y+1, r24	; 0x01
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	ce 01       	movw	r24, r28
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     a4c:	b7 01       	movw	r22, r14
     a4e:	c8 01       	movw	r24, r16
     a50:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     a54:	86 e0       	ldi	r24, 0x06	; 6
     a56:	90 e2       	ldi	r25, 0x20	; 32
     a58:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     a5c:	0f 90       	pop	r0
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	08 95       	ret

00000a6c <flush_tx>:
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	1f 92       	push	r1
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	86 e0       	ldi	r24, 0x06	; 6
     a78:	90 e2       	ldi	r25, 0x20	; 32
     a7a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     a7e:	81 ee       	ldi	r24, 0xE1	; 225
     a80:	89 83       	std	Y+1, r24	; 0x01
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	70 e0       	ldi	r23, 0x00	; 0
     a86:	ce 01       	movw	r24, r28
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     a8e:	86 e0       	ldi	r24, 0x06	; 6
     a90:	90 e2       	ldi	r25, 0x20	; 32
     a92:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <flush_rx>:
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	1f 92       	push	r1
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	86 e0       	ldi	r24, 0x06	; 6
     aaa:	90 e2       	ldi	r25, 0x20	; 32
     aac:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     ab0:	82 ee       	ldi	r24, 0xE2	; 226
     ab2:	89 83       	std	Y+1, r24	; 0x01
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     ac0:	86 e0       	ldi	r24, 0x06	; 6
     ac2:	90 e2       	ldi	r25, 0x20	; 32
     ac4:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     ac8:	0f 90       	pop	r0
     aca:	df 91       	pop	r29
     acc:	cf 91       	pop	r28
     ace:	08 95       	ret

00000ad0 <read_rx_payload_width>:
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	86 e0       	ldi	r24, 0x06	; 6
     adc:	90 e2       	ldi	r25, 0x20	; 32
     ade:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     ae2:	80 e6       	ldi	r24, 0x60	; 96
     ae4:	89 83       	std	Y+1, r24	; 0x01
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     afe:	86 e0       	ldi	r24, 0x06	; 6
     b00:	90 e2       	ldi	r25, 0x20	; 32
     b02:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0f 90       	pop	r0
     b0c:	df 91       	pop	r29
     b0e:	cf 91       	pop	r28
     b10:	08 95       	ret

00000b12 <write_tx_payload_noack>:
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	1f 92       	push	r1
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	8c 01       	movw	r16, r24
     b26:	7b 01       	movw	r14, r22
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	90 e2       	ldi	r25, 0x20	; 32
     b2c:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     b30:	80 eb       	ldi	r24, 0xB0	; 176
     b32:	89 83       	std	Y+1, r24	; 0x01
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     b40:	b7 01       	movw	r22, r14
     b42:	c8 01       	movw	r24, r16
     b44:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	90 e2       	ldi	r25, 0x20	; 32
     b4c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     b50:	0f 90       	pop	r0
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	08 95       	ret

00000b60 <get_status>:
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	1f 92       	push	r1
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	86 e0       	ldi	r24, 0x06	; 6
     b6c:	90 e2       	ldi	r25, 0x20	; 32
     b6e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	89 83       	std	Y+1, r24	; 0x01
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 31 04 	call	0x862	; 0x862 <port_SPI_Transcieve>
     b82:	86 e0       	ldi	r24, 0x06	; 6
     b84:	90 e2       	ldi	r25, 0x20	; 32
     b86:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <power_up>:
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     b9c:	68 2f       	mov	r22, r24
     b9e:	62 60       	ori	r22, 0x02	; 2
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     ba6:	08 95       	ret

00000ba8 <power_down>:
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     bae:	68 2f       	mov	r22, r24
     bb0:	6d 7f       	andi	r22, 0xFD	; 253
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     bb8:	08 95       	ret

00000bba <rx_mode>:
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     bc0:	68 2f       	mov	r22, r24
     bc2:	61 60       	ori	r22, 0x01	; 1
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     bca:	08 95       	ret

00000bcc <tx_mode>:
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     bd2:	68 2f       	mov	r22, r24
     bd4:	6e 7f       	andi	r22, 0xFE	; 254
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     bdc:	08 95       	ret

00000bde <enable_auto_ack>:
     bde:	cf 93       	push	r28
     be0:	c8 2f       	mov	r28, r24
     be2:	66 23       	and	r22, r22
     be4:	79 f0       	breq	.+30     	; 0xc04 <enable_auto_ack+0x26>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <enable_auto_ack+0x18>
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	ca 95       	dec	r28
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <enable_auto_ack+0x14>
     bfa:	68 2b       	or	r22, r24
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <enable_auto_ack+0x44>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <enable_auto_ack+0x36>
     c10:	66 0f       	add	r22, r22
     c12:	77 1f       	adc	r23, r23
     c14:	ca 95       	dec	r28
     c16:	e2 f7       	brpl	.-8      	; 0xc10 <enable_auto_ack+0x32>
     c18:	60 95       	com	r22
     c1a:	68 23       	and	r22, r24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <enable_rx_on_pipe>:
     c26:	cf 93       	push	r28
     c28:	c8 2f       	mov	r28, r24
     c2a:	66 23       	and	r22, r22
     c2c:	79 f0       	breq	.+30     	; 0xc4c <enable_rx_on_pipe+0x26>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     c34:	61 e0       	ldi	r22, 0x01	; 1
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <enable_rx_on_pipe+0x18>
     c3a:	66 0f       	add	r22, r22
     c3c:	77 1f       	adc	r23, r23
     c3e:	ca 95       	dec	r28
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <enable_rx_on_pipe+0x14>
     c42:	68 2b       	or	r22, r24
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <enable_rx_on_pipe+0x44>
     c4c:	82 e0       	ldi	r24, 0x02	; 2
     c4e:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <enable_rx_on_pipe+0x36>
     c58:	66 0f       	add	r22, r22
     c5a:	77 1f       	adc	r23, r23
     c5c:	ca 95       	dec	r28
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <enable_rx_on_pipe+0x32>
     c60:	60 95       	com	r22
     c62:	68 23       	and	r22, r24
     c64:	82 e0       	ldi	r24, 0x02	; 2
     c66:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <set_auto_retransmission_count>:
     c6e:	cf 93       	push	r28
     c70:	c8 2f       	mov	r28, r24
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     c78:	80 7f       	andi	r24, 0xF0	; 240
     c7a:	68 2f       	mov	r22, r24
     c7c:	6c 2b       	or	r22, r28
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <set_auto_retransmission_delay>:
     c88:	cf 93       	push	r28
     c8a:	c8 2f       	mov	r28, r24
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     c92:	90 e1       	ldi	r25, 0x10	; 16
     c94:	c9 9f       	mul	r28, r25
     c96:	90 01       	movw	r18, r0
     c98:	11 24       	eor	r1, r1
     c9a:	8f 70       	andi	r24, 0x0F	; 15
     c9c:	68 2f       	mov	r22, r24
     c9e:	62 2b       	or	r22, r18
     ca0:	84 e0       	ldi	r24, 0x04	; 4
     ca2:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <set_frequency_offset>:
     caa:	8e 37       	cpi	r24, 0x7E	; 126
     cac:	20 f4       	brcc	.+8      	; 0xcb6 <set_frequency_offset+0xc>
     cae:	68 2f       	mov	r22, r24
     cb0:	85 e0       	ldi	r24, 0x05	; 5
     cb2:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     cb6:	08 95       	ret

00000cb8 <set_DataRate>:
     cb8:	cf 93       	push	r28
     cba:	c8 2f       	mov	r28, r24
     cbc:	86 e0       	ldi	r24, 0x06	; 6
     cbe:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     cc2:	87 7d       	andi	r24, 0xD7	; 215
     cc4:	68 2f       	mov	r22, r24
     cc6:	6c 2b       	or	r22, r28
     cc8:	86 e0       	ldi	r24, 0x06	; 6
     cca:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <get_max_retry_flag>:
     cd2:	0e 94 b0 05 	call	0xb60	; 0xb60 <get_status>
     cd6:	92 95       	swap	r25
     cd8:	82 95       	swap	r24
     cda:	8f 70       	andi	r24, 0x0F	; 15
     cdc:	89 27       	eor	r24, r25
     cde:	9f 70       	andi	r25, 0x0F	; 15
     ce0:	89 27       	eor	r24, r25
     ce2:	81 70       	andi	r24, 0x01	; 1
     ce4:	08 95       	ret

00000ce6 <clear_max_retry_flag>:
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	1f 92       	push	r1
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	80 e1       	ldi	r24, 0x10	; 16
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	be 01       	movw	r22, r28
     cfa:	6f 5f       	subi	r22, 0xFF	; 255
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     d04:	0f 90       	pop	r0
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	08 95       	ret

00000d0c <get_data_sent_flag>:
     d0c:	0e 94 b0 05 	call	0xb60	; 0xb60 <get_status>
     d10:	96 95       	lsr	r25
     d12:	87 95       	ror	r24
     d14:	92 95       	swap	r25
     d16:	82 95       	swap	r24
     d18:	8f 70       	andi	r24, 0x0F	; 15
     d1a:	89 27       	eor	r24, r25
     d1c:	9f 70       	andi	r25, 0x0F	; 15
     d1e:	89 27       	eor	r24, r25
     d20:	81 70       	andi	r24, 0x01	; 1
     d22:	08 95       	ret

00000d24 <clear_data_sent_flag>:
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	1f 92       	push	r1
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	80 e2       	ldi	r24, 0x20	; 32
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	50 e0       	ldi	r21, 0x00	; 0
     d36:	be 01       	movw	r22, r28
     d38:	6f 5f       	subi	r22, 0xFF	; 255
     d3a:	7f 4f       	sbci	r23, 0xFF	; 255
     d3c:	87 e0       	ldi	r24, 0x07	; 7
     d3e:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     d42:	0f 90       	pop	r0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <get_data_ready_flag>:
     d4a:	0e 94 b0 05 	call	0xb60	; 0xb60 <get_status>
     d4e:	00 24       	eor	r0, r0
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	00 1c       	adc	r0, r0
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	00 1c       	adc	r0, r0
     d5c:	89 2f       	mov	r24, r25
     d5e:	90 2d       	mov	r25, r0
     d60:	81 70       	andi	r24, 0x01	; 1
     d62:	08 95       	ret

00000d64 <clear_data_ready_flag>:
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	1f 92       	push	r1
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	80 e4       	ldi	r24, 0x40	; 64
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	41 e0       	ldi	r20, 0x01	; 1
     d74:	50 e0       	ldi	r21, 0x00	; 0
     d76:	be 01       	movw	r22, r28
     d78:	6f 5f       	subi	r22, 0xFF	; 255
     d7a:	7f 4f       	sbci	r23, 0xFF	; 255
     d7c:	87 e0       	ldi	r24, 0x07	; 7
     d7e:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     d82:	0f 90       	pop	r0
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <get_rx_payload_pipe>:
     d8a:	0e 94 b0 05 	call	0xb60	; 0xb60 <get_status>
     d8e:	8e 70       	andi	r24, 0x0E	; 14
     d90:	99 27       	eor	r25, r25
     d92:	95 95       	asr	r25
     d94:	87 95       	ror	r24
     d96:	08 95       	ret

00000d98 <get_plos_count>:
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	1f 92       	push	r1
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	be 01       	movw	r22, r28
     da8:	6f 5f       	subi	r22, 0xFF	; 255
     daa:	7f 4f       	sbci	r23, 0xFF	; 255
     dac:	88 e0       	ldi	r24, 0x08	; 8
     dae:	0e 94 6d 04 	call	0x8da	; 0x8da <read_register_buffer>
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	82 95       	swap	r24
     db6:	8f 70       	andi	r24, 0x0F	; 15
     db8:	0f 90       	pop	r0
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <set_RX_pipe_address>:
     dc0:	2f 92       	push	r2
     dc2:	3f 92       	push	r3
     dc4:	4f 92       	push	r4
     dc6:	5f 92       	push	r5
     dc8:	6f 92       	push	r6
     dca:	7f 92       	push	r7
     dcc:	8f 92       	push	r8
     dce:	9f 92       	push	r9
     dd0:	af 92       	push	r10
     dd2:	bf 92       	push	r11
     dd4:	cf 92       	push	r12
     dd6:	df 92       	push	r13
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	25 97       	sbiw	r28, 0x05	; 5
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	48 2e       	mov	r4, r24
     df0:	b0 2e       	mov	r11, r16
     df2:	a2 2e       	mov	r10, r18
     df4:	93 2e       	mov	r9, r19
     df6:	84 2e       	mov	r8, r20
     df8:	75 2e       	mov	r7, r21
     dfa:	66 2e       	mov	r6, r22
     dfc:	57 2e       	mov	r5, r23
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	84 15       	cp	r24, r4
     e02:	68 f4       	brcc	.+26     	; 0xe1e <set_RX_pipe_address+0x5e>
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	8e ef       	ldi	r24, 0xFE	; 254
     e0a:	84 0d       	add	r24, r4
     e0c:	84 30       	cpi	r24, 0x04	; 4
     e0e:	08 f0       	brcs	.+2      	; 0xe12 <set_RX_pipe_address+0x52>
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	c2 2e       	mov	r12, r18
     e14:	d9 2e       	mov	r13, r25
     e16:	1c 14       	cp	r1, r12
     e18:	1d 04       	cpc	r1, r13
     e1a:	34 f0       	brlt	.+12     	; 0xe28 <set_RX_pipe_address+0x68>
     e1c:	21 c0       	rjmp	.+66     	; 0xe60 <set_RX_pipe_address+0xa0>
     e1e:	0f 2e       	mov	r0, r31
     e20:	f5 e0       	ldi	r31, 0x05	; 5
     e22:	cf 2e       	mov	r12, r31
     e24:	d1 2c       	mov	r13, r1
     e26:	f0 2d       	mov	r31, r0
     e28:	de 01       	movw	r26, r28
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	7d 01       	movw	r14, r26
     e2e:	21 2c       	mov	r2, r1
     e30:	31 2c       	mov	r3, r1
     e32:	e0 e0       	ldi	r30, 0x00	; 0
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	2b 2d       	mov	r18, r11
     e38:	31 2f       	mov	r19, r17
     e3a:	4a 2d       	mov	r20, r10
     e3c:	59 2d       	mov	r21, r9
     e3e:	68 2d       	mov	r22, r8
     e40:	77 2d       	mov	r23, r7
     e42:	86 2d       	mov	r24, r6
     e44:	95 2d       	mov	r25, r5
     e46:	02 2d       	mov	r16, r2
     e48:	0e 94 1d 1a 	call	0x343a	; 0x343a <__lshrdi3>
     e4c:	d7 01       	movw	r26, r14
     e4e:	2d 93       	st	X+, r18
     e50:	7d 01       	movw	r14, r26
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	b8 e0       	ldi	r27, 0x08	; 8
     e56:	2b 0e       	add	r2, r27
     e58:	31 1c       	adc	r3, r1
     e5a:	ec 15       	cp	r30, r12
     e5c:	fd 05       	cpc	r31, r13
     e5e:	5c f3       	brlt	.-42     	; 0xe36 <set_RX_pipe_address+0x76>
     e60:	a6 01       	movw	r20, r12
     e62:	be 01       	movw	r22, r28
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	8a e0       	ldi	r24, 0x0A	; 10
     e6a:	84 0d       	add	r24, r4
     e6c:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     e70:	25 96       	adiw	r28, 0x05	; 5
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	7f 90       	pop	r7
     e90:	6f 90       	pop	r6
     e92:	5f 90       	pop	r5
     e94:	4f 90       	pop	r4
     e96:	3f 90       	pop	r3
     e98:	2f 90       	pop	r2
     e9a:	08 95       	ret

00000e9c <set_TX_pipe_address>:
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	25 97       	sbiw	r28, 0x05	; 5
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	92 2e       	mov	r9, r18
     ebe:	a3 2e       	mov	r10, r19
     ec0:	b4 2e       	mov	r11, r20
     ec2:	c5 2e       	mov	r12, r21
     ec4:	d6 2e       	mov	r13, r22
     ec6:	e7 2e       	mov	r14, r23
     ec8:	f8 2e       	mov	r15, r24
     eca:	19 2f       	mov	r17, r25
     ecc:	de 01       	movw	r26, r28
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	e0 e0       	ldi	r30, 0x00	; 0
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	29 2d       	mov	r18, r9
     ed6:	3a 2d       	mov	r19, r10
     ed8:	4b 2d       	mov	r20, r11
     eda:	5c 2d       	mov	r21, r12
     edc:	6d 2d       	mov	r22, r13
     ede:	7e 2d       	mov	r23, r14
     ee0:	8f 2d       	mov	r24, r15
     ee2:	91 2f       	mov	r25, r17
     ee4:	0e 2f       	mov	r16, r30
     ee6:	0e 94 1d 1a 	call	0x343a	; 0x343a <__lshrdi3>
     eea:	2d 93       	st	X+, r18
     eec:	38 96       	adiw	r30, 0x08	; 8
     eee:	e8 32       	cpi	r30, 0x28	; 40
     ef0:	f1 05       	cpc	r31, r1
     ef2:	81 f7       	brne	.-32     	; 0xed4 <set_TX_pipe_address+0x38>
     ef4:	45 e0       	ldi	r20, 0x05	; 5
     ef6:	50 e0       	ldi	r21, 0x00	; 0
     ef8:	be 01       	movw	r22, r28
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	80 e1       	ldi	r24, 0x10	; 16
     f00:	0e 94 bd 04 	call	0x97a	; 0x97a <write_register_buffer>
     f04:	25 96       	adiw	r28, 0x05	; 5
     f06:	cd bf       	out	0x3d, r28	; 61
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	bf 90       	pop	r11
     f1c:	af 90       	pop	r10
     f1e:	9f 90       	pop	r9
     f20:	08 95       	ret

00000f22 <get_RX_pipe_width>:
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	1f 92       	push	r1
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	be 01       	movw	r22, r28
     f32:	6f 5f       	subi	r22, 0xFF	; 255
     f34:	7f 4f       	sbci	r23, 0xFF	; 255
     f36:	8f 5e       	subi	r24, 0xEF	; 239
     f38:	0e 94 6d 04 	call	0x8da	; 0x8da <read_register_buffer>
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	8f 73       	andi	r24, 0x3F	; 63
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <get_fifo_flag_rx_empty>:
     f48:	87 e1       	ldi	r24, 0x17	; 23
     f4a:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	08 95       	ret

00000f52 <get_fifo_flag_tx_full>:
     f52:	87 e1       	ldi	r24, 0x17	; 23
     f54:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
     f58:	85 fb       	bst	r24, 5
     f5a:	88 27       	eor	r24, r24
     f5c:	80 f9       	bld	r24, 0
     f5e:	08 95       	ret

00000f60 <enable_dynamic_payload_pipe>:

void enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
     f60:	cf 93       	push	r28
     f62:	c8 2f       	mov	r28, r24
    if(sel){
     f64:	66 23       	and	r22, r22
     f66:	79 f0       	breq	.+30     	; 0xf86 <enable_dynamic_payload_pipe+0x26>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     f68:	8c e1       	ldi	r24, 0x1C	; 28
     f6a:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp |= (1<<pipe);
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <enable_dynamic_payload_pipe+0x18>
     f74:	66 0f       	add	r22, r22
     f76:	77 1f       	adc	r23, r23
     f78:	ca 95       	dec	r28
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <enable_dynamic_payload_pipe+0x14>
     f7c:	68 2b       	or	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);   
     f7e:	8c e1       	ldi	r24, 0x1C	; 28
     f80:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <enable_dynamic_payload_pipe+0x44>
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     f86:	8c e1       	ldi	r24, 0x1C	; 28
     f88:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp &= ~(1<<pipe);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <enable_dynamic_payload_pipe+0x36>
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	ca 95       	dec	r28
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <enable_dynamic_payload_pipe+0x32>
     f9a:	60 95       	com	r22
     f9c:	68 23       	and	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);    
     f9e:	8c e1       	ldi	r24, 0x1C	; 28
     fa0:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
    }
   
}
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <enable_dynamic_payload>:



void enable_dynamic_payload(bool sel){
    if(sel){
     fa8:	88 23       	and	r24, r24
     faa:	49 f0       	breq	.+18     	; 0xfbe <enable_dynamic_payload+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     fac:	8d e1       	ldi	r24, 0x1D	; 29
     fae:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);     
     fb2:	68 2f       	mov	r22, r24
     fb4:	64 60       	ori	r22, 0x04	; 4
     fb6:	8d e1       	ldi	r24, 0x1D	; 29
     fb8:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     fbc:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     fbe:	8d e1       	ldi	r24, 0x1D	; 29
     fc0:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
        write_register(_NRF24L01P_REG_FEATURE,temp);
     fc4:	68 2f       	mov	r22, r24
     fc6:	6b 7f       	andi	r22, 0xFB	; 251
     fc8:	8d e1       	ldi	r24, 0x1D	; 29
     fca:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     fce:	08 95       	ret

00000fd0 <enable_payload_with_ack>:
}



void enable_payload_with_ack(bool sel){
    if(sel){
     fd0:	88 23       	and	r24, r24
     fd2:	49 f0       	breq	.+18     	; 0xfe6 <enable_payload_with_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     fd4:	8d e1       	ldi	r24, 0x1D	; 29
     fd6:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     fda:	68 2f       	mov	r22, r24
     fdc:	62 60       	ori	r22, 0x02	; 2
     fde:	8d e1       	ldi	r24, 0x1D	; 29
     fe0:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     fe4:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     fe6:	8d e1       	ldi	r24, 0x1D	; 29
     fe8:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     fec:	68 2f       	mov	r22, r24
     fee:	6d 7f       	andi	r22, 0xFD	; 253
     ff0:	8d e1       	ldi	r24, 0x1D	; 29
     ff2:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
     ff6:	08 95       	ret

00000ff8 <enable_dynamic_payload_with_no_ack>:
}



void enable_dynamic_payload_with_no_ack(bool sel){
    if(sel){
     ff8:	88 23       	and	r24, r24
     ffa:	49 f0       	breq	.+18     	; 0x100e <enable_dynamic_payload_with_no_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     ffc:	8d e1       	ldi	r24, 0x1D	; 29
     ffe:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);        
    1002:	68 2f       	mov	r22, r24
    1004:	61 60       	ori	r22, 0x01	; 1
    1006:	8d e1       	ldi	r24, 0x1D	; 29
    1008:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
    100c:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
    100e:	8d e1       	ldi	r24, 0x1D	; 29
    1010:	0e 94 4a 04 	call	0x894	; 0x894 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
        write_register(_NRF24L01P_REG_FEATURE,temp);  
    1014:	68 2f       	mov	r22, r24
    1016:	6e 7f       	andi	r22, 0xFE	; 254
    1018:	8d e1       	ldi	r24, 0x1D	; 29
    101a:	0e 94 97 04 	call	0x92e	; 0x92e <write_register>
    101e:	08 95       	ret

00001020 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1020:	31 e1       	ldi	r19, 0x11	; 17
    1022:	fc 01       	movw	r30, r24
    1024:	30 83       	st	Z, r19
    1026:	31 97       	sbiw	r30, 0x01	; 1
    1028:	22 e2       	ldi	r18, 0x22	; 34
    102a:	20 83       	st	Z, r18
    102c:	31 97       	sbiw	r30, 0x01	; 1
    102e:	a3 e3       	ldi	r26, 0x33	; 51
    1030:	a0 83       	st	Z, r26
    1032:	31 97       	sbiw	r30, 0x01	; 1
    1034:	60 83       	st	Z, r22
    1036:	31 97       	sbiw	r30, 0x01	; 1
    1038:	70 83       	st	Z, r23
    103a:	31 97       	sbiw	r30, 0x01	; 1
    103c:	10 82       	st	Z, r1
    103e:	31 97       	sbiw	r30, 0x01	; 1
    1040:	10 82       	st	Z, r1
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	60 e8       	ldi	r22, 0x80	; 128
    1046:	60 83       	st	Z, r22
    1048:	31 97       	sbiw	r30, 0x01	; 1
    104a:	10 82       	st	Z, r1
    104c:	31 97       	sbiw	r30, 0x01	; 1
    104e:	62 e0       	ldi	r22, 0x02	; 2
    1050:	60 83       	st	Z, r22
    1052:	31 97       	sbiw	r30, 0x01	; 1
    1054:	63 e0       	ldi	r22, 0x03	; 3
    1056:	60 83       	st	Z, r22
    1058:	31 97       	sbiw	r30, 0x01	; 1
    105a:	64 e0       	ldi	r22, 0x04	; 4
    105c:	60 83       	st	Z, r22
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	65 e0       	ldi	r22, 0x05	; 5
    1062:	60 83       	st	Z, r22
    1064:	31 97       	sbiw	r30, 0x01	; 1
    1066:	66 e0       	ldi	r22, 0x06	; 6
    1068:	60 83       	st	Z, r22
    106a:	31 97       	sbiw	r30, 0x01	; 1
    106c:	67 e0       	ldi	r22, 0x07	; 7
    106e:	60 83       	st	Z, r22
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	68 e0       	ldi	r22, 0x08	; 8
    1074:	60 83       	st	Z, r22
    1076:	31 97       	sbiw	r30, 0x01	; 1
    1078:	69 e0       	ldi	r22, 0x09	; 9
    107a:	60 83       	st	Z, r22
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	60 e1       	ldi	r22, 0x10	; 16
    1080:	60 83       	st	Z, r22
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	30 83       	st	Z, r19
    1086:	31 97       	sbiw	r30, 0x01	; 1
    1088:	32 e1       	ldi	r19, 0x12	; 18
    108a:	30 83       	st	Z, r19
    108c:	31 97       	sbiw	r30, 0x01	; 1
    108e:	33 e1       	ldi	r19, 0x13	; 19
    1090:	30 83       	st	Z, r19
    1092:	31 97       	sbiw	r30, 0x01	; 1
    1094:	34 e1       	ldi	r19, 0x14	; 20
    1096:	30 83       	st	Z, r19
    1098:	31 97       	sbiw	r30, 0x01	; 1
    109a:	35 e1       	ldi	r19, 0x15	; 21
    109c:	30 83       	st	Z, r19
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	36 e1       	ldi	r19, 0x16	; 22
    10a2:	30 83       	st	Z, r19
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	37 e1       	ldi	r19, 0x17	; 23
    10a8:	30 83       	st	Z, r19
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	38 e1       	ldi	r19, 0x18	; 24
    10ae:	30 83       	st	Z, r19
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	39 e1       	ldi	r19, 0x19	; 25
    10b4:	30 83       	st	Z, r19
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	30 e2       	ldi	r19, 0x20	; 32
    10ba:	30 83       	st	Z, r19
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	31 e2       	ldi	r19, 0x21	; 33
    10c0:	30 83       	st	Z, r19
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	20 83       	st	Z, r18
    10c6:	31 97       	sbiw	r30, 0x01	; 1
    10c8:	23 e2       	ldi	r18, 0x23	; 35
    10ca:	20 83       	st	Z, r18
    10cc:	31 97       	sbiw	r30, 0x01	; 1
    10ce:	40 83       	st	Z, r20
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	50 83       	st	Z, r21
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	26 e2       	ldi	r18, 0x26	; 38
    10d8:	20 83       	st	Z, r18
    10da:	31 97       	sbiw	r30, 0x01	; 1
    10dc:	27 e2       	ldi	r18, 0x27	; 39
    10de:	20 83       	st	Z, r18
    10e0:	31 97       	sbiw	r30, 0x01	; 1
    10e2:	28 e2       	ldi	r18, 0x28	; 40
    10e4:	20 83       	st	Z, r18
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	29 e2       	ldi	r18, 0x29	; 41
    10ea:	20 83       	st	Z, r18
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	20 e3       	ldi	r18, 0x30	; 48
    10f0:	20 83       	st	Z, r18
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	21 e3       	ldi	r18, 0x31	; 49
    10f6:	20 83       	st	Z, r18
    10f8:	87 97       	sbiw	r24, 0x27	; 39
    10fa:	08 95       	ret

000010fc <xPortStartScheduler>:
    10fc:	65 e0       	ldi	r22, 0x05	; 5
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	98 e0       	ldi	r25, 0x08	; 8
    1102:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <TC0_ConfigClockSource>
    1106:	83 ef       	ldi	r24, 0xF3	; 243
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
    110e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	98 e0       	ldi	r25, 0x08	; 8
    1118:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <TC0_SetOverflowIntLevel>
    111c:	e0 ea       	ldi	r30, 0xA0	; 160
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	82 81       	ldd	r24, Z+2	; 0x02
    1122:	81 60       	ori	r24, 0x01	; 1
    1124:	82 83       	std	Z+2, r24	; 0x02
    1126:	a0 91 af 93 	lds	r26, 0x93AF	; 0x8093af <pxCurrentTCB>
    112a:	b0 91 b0 93 	lds	r27, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    112e:	cd 91       	ld	r28, X+
    1130:	cd bf       	out	0x3d, r28	; 61
    1132:	dd 91       	ld	r29, X+
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	ff 91       	pop	r31
    1138:	ef 91       	pop	r30
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	bf 91       	pop	r27
    1140:	af 91       	pop	r26
    1142:	9f 91       	pop	r25
    1144:	8f 91       	pop	r24
    1146:	7f 91       	pop	r23
    1148:	6f 91       	pop	r22
    114a:	5f 91       	pop	r21
    114c:	4f 91       	pop	r20
    114e:	3f 91       	pop	r19
    1150:	2f 91       	pop	r18
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	ff 90       	pop	r15
    1158:	ef 90       	pop	r14
    115a:	df 90       	pop	r13
    115c:	cf 90       	pop	r12
    115e:	bf 90       	pop	r11
    1160:	af 90       	pop	r10
    1162:	9f 90       	pop	r9
    1164:	8f 90       	pop	r8
    1166:	7f 90       	pop	r7
    1168:	6f 90       	pop	r6
    116a:	5f 90       	pop	r5
    116c:	4f 90       	pop	r4
    116e:	3f 90       	pop	r3
    1170:	2f 90       	pop	r2
    1172:	1f 90       	pop	r1
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	0f 90       	pop	r0
    117a:	08 95       	ret
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret

00001180 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	0f 92       	push	r0
    1188:	1f 92       	push	r1
    118a:	11 24       	eor	r1, r1
    118c:	2f 92       	push	r2
    118e:	3f 92       	push	r3
    1190:	4f 92       	push	r4
    1192:	5f 92       	push	r5
    1194:	6f 92       	push	r6
    1196:	7f 92       	push	r7
    1198:	8f 92       	push	r8
    119a:	9f 92       	push	r9
    119c:	af 92       	push	r10
    119e:	bf 92       	push	r11
    11a0:	cf 92       	push	r12
    11a2:	df 92       	push	r13
    11a4:	ef 92       	push	r14
    11a6:	ff 92       	push	r15
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	2f 93       	push	r18
    11ae:	3f 93       	push	r19
    11b0:	4f 93       	push	r20
    11b2:	5f 93       	push	r21
    11b4:	6f 93       	push	r22
    11b6:	7f 93       	push	r23
    11b8:	8f 93       	push	r24
    11ba:	9f 93       	push	r25
    11bc:	af 93       	push	r26
    11be:	bf 93       	push	r27
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31
    11c8:	a0 91 af 93 	lds	r26, 0x93AF	; 0x8093af <pxCurrentTCB>
    11cc:	b0 91 b0 93 	lds	r27, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    11d0:	0d b6       	in	r0, 0x3d	; 61
    11d2:	0d 92       	st	X+, r0
    11d4:	0e b6       	in	r0, 0x3e	; 62
    11d6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    11d8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    11dc:	a0 91 af 93 	lds	r26, 0x93AF	; 0x8093af <pxCurrentTCB>
    11e0:	b0 91 b0 93 	lds	r27, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    11e4:	cd 91       	ld	r28, X+
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	dd 91       	ld	r29, X+
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	1f 90       	pop	r1
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1230:	08 95       	ret

00001232 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	1f 92       	push	r1
    123c:	11 24       	eor	r1, r1
    123e:	2f 92       	push	r2
    1240:	3f 92       	push	r3
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	a0 91 af 93 	lds	r26, 0x93AF	; 0x8093af <pxCurrentTCB>
    127e:	b0 91 b0 93 	lds	r27, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1282:	0d b6       	in	r0, 0x3d	; 61
    1284:	0d 92       	st	X+, r0
    1286:	0e b6       	in	r0, 0x3e	; 62
    1288:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    128a:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskIncrementTick>
    128e:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1290:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1294:	a0 91 af 93 	lds	r26, 0x93AF	; 0x8093af <pxCurrentTCB>
    1298:	b0 91 b0 93 	lds	r27, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    129c:	cd 91       	ld	r28, X+
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	dd 91       	ld	r29, X+
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	5f 90       	pop	r5
    12da:	4f 90       	pop	r4
    12dc:	3f 90       	pop	r3
    12de:	2f 90       	pop	r2
    12e0:	1f 90       	pop	r1
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    12e8:	08 95       	ret

000012ea <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
    12ea:	0e 94 19 09 	call	0x1232	; 0x1232 <vPortYieldFromTick>
		asm volatile ( "reti" );
    12ee:	18 95       	reti

000012f0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    12f6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    12fa:	80 91 5a 23 	lds	r24, 0x235A	; 0x80235a <pucAlignedHeap.4014>
    12fe:	90 91 5b 23 	lds	r25, 0x235B	; 0x80235b <pucAlignedHeap.4014+0x1>
    1302:	89 2b       	or	r24, r25
    1304:	31 f4       	brne	.+12     	; 0x1312 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    1306:	8f e5       	ldi	r24, 0x5F	; 95
    1308:	93 e2       	ldi	r25, 0x23	; 35
    130a:	80 93 5a 23 	sts	0x235A, r24	; 0x80235a <pucAlignedHeap.4014>
    130e:	90 93 5b 23 	sts	0x235B, r25	; 0x80235b <pucAlignedHeap.4014+0x1>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1312:	20 91 5c 23 	lds	r18, 0x235C	; 0x80235c <xNextFreeByte>
    1316:	30 91 5d 23 	lds	r19, 0x235D	; 0x80235d <xNextFreeByte+0x1>
    131a:	c9 01       	movw	r24, r18
    131c:	8c 0f       	add	r24, r28
    131e:	9d 1f       	adc	r25, r29
    1320:	8f 3f       	cpi	r24, 0xFF	; 255
    1322:	4f e6       	ldi	r20, 0x6F	; 111
    1324:	94 07       	cpc	r25, r20
    1326:	70 f4       	brcc	.+28     	; 0x1344 <pvPortMalloc+0x54>
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	70 f4       	brcc	.+28     	; 0x134a <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    132e:	c0 91 5a 23 	lds	r28, 0x235A	; 0x80235a <pucAlignedHeap.4014>
    1332:	d0 91 5b 23 	lds	r29, 0x235B	; 0x80235b <pucAlignedHeap.4014+0x1>
    1336:	c2 0f       	add	r28, r18
    1338:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    133a:	80 93 5c 23 	sts	0x235C, r24	; 0x80235c <xNextFreeByte>
    133e:	90 93 5d 23 	sts	0x235D, r25	; 0x80235d <xNextFreeByte+0x1>
    1342:	05 c0       	rjmp	.+10     	; 0x134e <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1344:	c0 e0       	ldi	r28, 0x00	; 0
    1346:	d0 e0       	ldi	r29, 0x00	; 0
    1348:	02 c0       	rjmp	.+4      	; 0x134e <pvPortMalloc+0x5e>
    134a:	c0 e0       	ldi	r28, 0x00	; 0
    134c:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    134e:	0e 94 88 0c 	call	0x1910	; 0x1910 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1352:	ce 01       	movw	r24, r28
    1354:	df 91       	pop	r29
    1356:	cf 91       	pop	r28
    1358:	08 95       	ret

0000135a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    135a:	08 95       	ret

0000135c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    135c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    135e:	03 96       	adiw	r24, 0x03	; 3
    1360:	81 83       	std	Z+1, r24	; 0x01
    1362:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1364:	2f ef       	ldi	r18, 0xFF	; 255
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	23 83       	std	Z+3, r18	; 0x03
    136a:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    136c:	85 83       	std	Z+5, r24	; 0x05
    136e:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1370:	87 83       	std	Z+7, r24	; 0x07
    1372:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1374:	10 82       	st	Z, r1
    1376:	08 95       	ret

00001378 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1378:	fc 01       	movw	r30, r24
    137a:	10 86       	std	Z+8, r1	; 0x08
    137c:	11 86       	std	Z+9, r1	; 0x09
    137e:	08 95       	ret

00001380 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	9c 01       	movw	r18, r24
    1386:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1388:	dc 01       	movw	r26, r24
    138a:	11 96       	adiw	r26, 0x01	; 1
    138c:	cd 91       	ld	r28, X+
    138e:	dc 91       	ld	r29, X
    1390:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1392:	c2 83       	std	Z+2, r28	; 0x02
    1394:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	84 83       	std	Z+4, r24	; 0x04
    139c:	95 83       	std	Z+5, r25	; 0x05

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	9d 81       	ldd	r25, Y+5	; 0x05
    13a2:	dc 01       	movw	r26, r24
    13a4:	12 96       	adiw	r26, 0x02	; 2
    13a6:	6d 93       	st	X+, r22
    13a8:	7c 93       	st	X, r23
    13aa:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    13ac:	6c 83       	std	Y+4, r22	; 0x04
    13ae:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    13b0:	20 87       	std	Z+8, r18	; 0x08
    13b2:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    13b4:	f9 01       	movw	r30, r18
    13b6:	80 81       	ld	r24, Z
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	80 83       	st	Z, r24
}
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    13c8:	48 81       	ld	r20, Y
    13ca:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    13cc:	4f 3f       	cpi	r20, 0xFF	; 255
    13ce:	2f ef       	ldi	r18, 0xFF	; 255
    13d0:	52 07       	cpc	r21, r18
    13d2:	21 f4       	brne	.+8      	; 0x13dc <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    13d4:	fc 01       	movw	r30, r24
    13d6:	a7 81       	ldd	r26, Z+7	; 0x07
    13d8:	b0 85       	ldd	r27, Z+8	; 0x08
    13da:	0d c0       	rjmp	.+26     	; 0x13f6 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    13dc:	dc 01       	movw	r26, r24
    13de:	13 96       	adiw	r26, 0x03	; 3
    13e0:	01 c0       	rjmp	.+2      	; 0x13e4 <vListInsert+0x22>
    13e2:	df 01       	movw	r26, r30
    13e4:	12 96       	adiw	r26, 0x02	; 2
    13e6:	ed 91       	ld	r30, X+
    13e8:	fc 91       	ld	r31, X
    13ea:	13 97       	sbiw	r26, 0x03	; 3
    13ec:	20 81       	ld	r18, Z
    13ee:	31 81       	ldd	r19, Z+1	; 0x01
    13f0:	42 17       	cp	r20, r18
    13f2:	53 07       	cpc	r21, r19
    13f4:	b0 f7       	brcc	.-20     	; 0x13e2 <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    13f6:	12 96       	adiw	r26, 0x02	; 2
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	13 97       	sbiw	r26, 0x03	; 3
    13fe:	ea 83       	std	Y+2, r30	; 0x02
    1400:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1402:	c4 83       	std	Z+4, r28	; 0x04
    1404:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    1406:	ac 83       	std	Y+4, r26	; 0x04
    1408:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    140a:	12 96       	adiw	r26, 0x02	; 2
    140c:	cd 93       	st	X+, r28
    140e:	dc 93       	st	X, r29
    1410:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1412:	88 87       	std	Y+8, r24	; 0x08
    1414:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    1416:	fc 01       	movw	r30, r24
    1418:	20 81       	ld	r18, Z
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	20 83       	st	Z, r18
}
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	08 95       	ret

00001424 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    142a:	a0 85       	ldd	r26, Z+8	; 0x08
    142c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    142e:	c2 81       	ldd	r28, Z+2	; 0x02
    1430:	d3 81       	ldd	r29, Z+3	; 0x03
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	95 81       	ldd	r25, Z+5	; 0x05
    1436:	8c 83       	std	Y+4, r24	; 0x04
    1438:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    143a:	c4 81       	ldd	r28, Z+4	; 0x04
    143c:	d5 81       	ldd	r29, Z+5	; 0x05
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	93 81       	ldd	r25, Z+3	; 0x03
    1442:	8a 83       	std	Y+2, r24	; 0x02
    1444:	9b 83       	std	Y+3, r25	; 0x03

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	8d 91       	ld	r24, X+
    144a:	9c 91       	ld	r25, X
    144c:	12 97       	sbiw	r26, 0x02	; 2
    144e:	e8 17       	cp	r30, r24
    1450:	f9 07       	cpc	r31, r25
    1452:	31 f4       	brne	.+12     	; 0x1460 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1454:	84 81       	ldd	r24, Z+4	; 0x04
    1456:	95 81       	ldd	r25, Z+5	; 0x05
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	8d 93       	st	X+, r24
    145c:	9c 93       	st	X, r25
    145e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1460:	10 86       	std	Z+8, r1	; 0x08
    1462:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1464:	8c 91       	ld	r24, X
    1466:	81 50       	subi	r24, 0x01	; 1
    1468:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <prvIdleTask>:
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
		}
		taskEXIT_CRITICAL();

		return ulReturn;
	}
    1470:	ff cf       	rjmp	.-2      	; 0x1470 <prvIdleTask>

00001472 <prvResetNextTaskUnblockTime>:
    1472:	e0 91 77 93 	lds	r30, 0x9377	; 0x809377 <pxDelayedTaskList>
    1476:	f0 91 78 93 	lds	r31, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    147a:	80 81       	ld	r24, Z
    147c:	81 11       	cpse	r24, r1
    147e:	07 c0       	rjmp	.+14     	; 0x148e <prvResetNextTaskUnblockTime+0x1c>
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	9f ef       	ldi	r25, 0xFF	; 255
    1484:	80 93 61 93 	sts	0x9361, r24	; 0x809361 <xNextTaskUnblockTime>
    1488:	90 93 62 93 	sts	0x9362, r25	; 0x809362 <xNextTaskUnblockTime+0x1>
    148c:	08 95       	ret
    148e:	e0 91 77 93 	lds	r30, 0x9377	; 0x809377 <pxDelayedTaskList>
    1492:	f0 91 78 93 	lds	r31, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    1496:	05 80       	ldd	r0, Z+5	; 0x05
    1498:	f6 81       	ldd	r31, Z+6	; 0x06
    149a:	e0 2d       	mov	r30, r0
    149c:	06 80       	ldd	r0, Z+6	; 0x06
    149e:	f7 81       	ldd	r31, Z+7	; 0x07
    14a0:	e0 2d       	mov	r30, r0
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	80 93 61 93 	sts	0x9361, r24	; 0x809361 <xNextTaskUnblockTime>
    14aa:	90 93 62 93 	sts	0x9362, r25	; 0x809362 <xNextTaskUnblockTime+0x1>
    14ae:	08 95       	ret

000014b0 <prvAddCurrentTaskToDelayedList>:
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	ec 01       	movw	r28, r24
    14ba:	00 91 69 93 	lds	r16, 0x9369	; 0x809369 <xTickCount>
    14be:	10 91 6a 93 	lds	r17, 0x936A	; 0x80936a <xTickCount+0x1>
    14c2:	80 91 af 93 	lds	r24, 0x93AF	; 0x8093af <pxCurrentTCB>
    14c6:	90 91 b0 93 	lds	r25, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    14ca:	02 96       	adiw	r24, 0x02	; 2
    14cc:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
    14d0:	c0 0f       	add	r28, r16
    14d2:	d1 1f       	adc	r29, r17
    14d4:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    14d8:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    14dc:	c2 83       	std	Z+2, r28	; 0x02
    14de:	d3 83       	std	Z+3, r29	; 0x03
    14e0:	c0 17       	cp	r28, r16
    14e2:	d1 07       	cpc	r29, r17
    14e4:	68 f4       	brcc	.+26     	; 0x1500 <prvAddCurrentTaskToDelayedList+0x50>
    14e6:	60 91 af 93 	lds	r22, 0x93AF	; 0x8093af <pxCurrentTCB>
    14ea:	70 91 b0 93 	lds	r23, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    14ee:	80 91 75 93 	lds	r24, 0x9375	; 0x809375 <pxOverflowDelayedTaskList>
    14f2:	90 91 76 93 	lds	r25, 0x9376	; 0x809376 <pxOverflowDelayedTaskList+0x1>
    14f6:	6e 5f       	subi	r22, 0xFE	; 254
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vListInsert>
    14fe:	17 c0       	rjmp	.+46     	; 0x152e <prvAddCurrentTaskToDelayedList+0x7e>
    1500:	60 91 af 93 	lds	r22, 0x93AF	; 0x8093af <pxCurrentTCB>
    1504:	70 91 b0 93 	lds	r23, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1508:	80 91 77 93 	lds	r24, 0x9377	; 0x809377 <pxDelayedTaskList>
    150c:	90 91 78 93 	lds	r25, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    1510:	6e 5f       	subi	r22, 0xFE	; 254
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vListInsert>
    1518:	80 91 61 93 	lds	r24, 0x9361	; 0x809361 <xNextTaskUnblockTime>
    151c:	90 91 62 93 	lds	r25, 0x9362	; 0x809362 <xNextTaskUnblockTime+0x1>
    1520:	c8 17       	cp	r28, r24
    1522:	d9 07       	cpc	r29, r25
    1524:	20 f4       	brcc	.+8      	; 0x152e <prvAddCurrentTaskToDelayedList+0x7e>
    1526:	c0 93 61 93 	sts	0x9361, r28	; 0x809361 <xNextTaskUnblockTime>
    152a:	d0 93 62 93 	sts	0x9362, r29	; 0x809362 <xNextTaskUnblockTime+0x1>
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	08 95       	ret

00001538 <xTaskCreate>:
    1538:	4f 92       	push	r4
    153a:	5f 92       	push	r5
    153c:	6f 92       	push	r6
    153e:	7f 92       	push	r7
    1540:	8f 92       	push	r8
    1542:	9f 92       	push	r9
    1544:	af 92       	push	r10
    1546:	bf 92       	push	r11
    1548:	cf 92       	push	r12
    154a:	df 92       	push	r13
    154c:	ef 92       	push	r14
    154e:	ff 92       	push	r15
    1550:	0f 93       	push	r16
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	4c 01       	movw	r8, r24
    1558:	6b 01       	movw	r12, r22
    155a:	5a 01       	movw	r10, r20
    155c:	29 01       	movw	r4, r18
    155e:	ca 01       	movw	r24, r20
    1560:	0e 94 78 09 	call	0x12f0	; 0x12f0 <pvPortMalloc>
    1564:	3c 01       	movw	r6, r24
    1566:	89 2b       	or	r24, r25
    1568:	09 f4       	brne	.+2      	; 0x156c <xTaskCreate+0x34>
    156a:	d9 c0       	rjmp	.+434    	; 0x171e <xTaskCreate+0x1e6>
    156c:	86 e2       	ldi	r24, 0x26	; 38
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 78 09 	call	0x12f0	; 0x12f0 <pvPortMalloc>
    1574:	ec 01       	movw	r28, r24
    1576:	89 2b       	or	r24, r25
    1578:	71 f0       	breq	.+28     	; 0x1596 <xTaskCreate+0x5e>
    157a:	6f 8a       	std	Y+23, r6	; 0x17
    157c:	78 8e       	std	Y+24, r7	; 0x18
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	a8 1a       	sub	r10, r24
    1582:	b1 08       	sbc	r11, r1
    1584:	a6 0c       	add	r10, r6
    1586:	b7 1c       	adc	r11, r7
    1588:	d6 01       	movw	r26, r12
    158a:	8c 91       	ld	r24, X
    158c:	89 8f       	std	Y+25, r24	; 0x19
    158e:	8c 91       	ld	r24, X
    1590:	81 11       	cpse	r24, r1
    1592:	05 c0       	rjmp	.+10     	; 0x159e <xTaskCreate+0x66>
    1594:	18 c0       	rjmp	.+48     	; 0x15c6 <xTaskCreate+0x8e>
    1596:	c3 01       	movw	r24, r6
    1598:	0e 94 ad 09 	call	0x135a	; 0x135a <vPortFree>
    159c:	c0 c0       	rjmp	.+384    	; 0x171e <xTaskCreate+0x1e6>
    159e:	ae 01       	movw	r20, r28
    15a0:	46 5e       	subi	r20, 0xE6	; 230
    15a2:	5f 4f       	sbci	r21, 0xFF	; 255
    15a4:	f6 01       	movw	r30, r12
    15a6:	31 96       	adiw	r30, 0x01	; 1
    15a8:	b8 e0       	ldi	r27, 0x08	; 8
    15aa:	cb 0e       	add	r12, r27
    15ac:	d1 1c       	adc	r13, r1
    15ae:	cf 01       	movw	r24, r30
    15b0:	21 91       	ld	r18, Z+
    15b2:	da 01       	movw	r26, r20
    15b4:	2d 93       	st	X+, r18
    15b6:	ad 01       	movw	r20, r26
    15b8:	dc 01       	movw	r26, r24
    15ba:	8c 91       	ld	r24, X
    15bc:	88 23       	and	r24, r24
    15be:	19 f0       	breq	.+6      	; 0x15c6 <xTaskCreate+0x8e>
    15c0:	ec 15       	cp	r30, r12
    15c2:	fd 05       	cpc	r31, r13
    15c4:	a1 f7       	brne	.-24     	; 0x15ae <xTaskCreate+0x76>
    15c6:	18 a2       	std	Y+32, r1	; 0x20
    15c8:	04 30       	cpi	r16, 0x04	; 4
    15ca:	08 f0       	brcs	.+2      	; 0x15ce <xTaskCreate+0x96>
    15cc:	03 e0       	ldi	r16, 0x03	; 3
    15ce:	0e 8b       	std	Y+22, r16	; 0x16
    15d0:	6e 01       	movw	r12, r28
    15d2:	b2 e0       	ldi	r27, 0x02	; 2
    15d4:	cb 0e       	add	r12, r27
    15d6:	d1 1c       	adc	r13, r1
    15d8:	c6 01       	movw	r24, r12
    15da:	0e 94 bc 09 	call	0x1378	; 0x1378 <vListInitialiseItem>
    15de:	ce 01       	movw	r24, r28
    15e0:	0c 96       	adiw	r24, 0x0c	; 12
    15e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <vListInitialiseItem>
    15e6:	c8 87       	std	Y+8, r28	; 0x08
    15e8:	d9 87       	std	Y+9, r29	; 0x09
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	80 1b       	sub	r24, r16
    15f0:	91 09       	sbc	r25, r1
    15f2:	8c 87       	std	Y+12, r24	; 0x0c
    15f4:	9d 87       	std	Y+13, r25	; 0x0d
    15f6:	ca 8b       	std	Y+18, r28	; 0x12
    15f8:	db 8b       	std	Y+19, r29	; 0x13
    15fa:	19 a2       	std	Y+33, r1	; 0x21
    15fc:	1a a2       	std	Y+34, r1	; 0x22
    15fe:	1b a2       	std	Y+35, r1	; 0x23
    1600:	1c a2       	std	Y+36, r1	; 0x24
    1602:	1d a2       	std	Y+37, r1	; 0x25
    1604:	a2 01       	movw	r20, r4
    1606:	b4 01       	movw	r22, r8
    1608:	c5 01       	movw	r24, r10
    160a:	0e 94 10 08 	call	0x1020	; 0x1020 <pxPortInitialiseStack>
    160e:	88 83       	st	Y, r24
    1610:	99 83       	std	Y+1, r25	; 0x01
    1612:	e1 14       	cp	r14, r1
    1614:	f1 04       	cpc	r15, r1
    1616:	19 f0       	breq	.+6      	; 0x161e <xTaskCreate+0xe6>
    1618:	f7 01       	movw	r30, r14
    161a:	c0 83       	st	Z, r28
    161c:	d1 83       	std	Z+1, r29	; 0x01
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	0f 92       	push	r0
    1624:	80 91 6b 93 	lds	r24, 0x936B	; 0x80936b <uxCurrentNumberOfTasks>
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 93 6b 93 	sts	0x936B, r24	; 0x80936b <uxCurrentNumberOfTasks>
    162e:	80 91 af 93 	lds	r24, 0x93AF	; 0x8093af <pxCurrentTCB>
    1632:	90 91 b0 93 	lds	r25, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1636:	89 2b       	or	r24, r25
    1638:	89 f5       	brne	.+98     	; 0x169c <xTaskCreate+0x164>
    163a:	c0 93 af 93 	sts	0x93AF, r28	; 0x8093af <pxCurrentTCB>
    163e:	d0 93 b0 93 	sts	0x93B0, r29	; 0x8093b0 <pxCurrentTCB+0x1>
    1642:	80 91 6b 93 	lds	r24, 0x936B	; 0x80936b <uxCurrentNumberOfTasks>
    1646:	81 30       	cpi	r24, 0x01	; 1
    1648:	c9 f5       	brne	.+114    	; 0x16bc <xTaskCreate+0x184>
    164a:	8b e8       	ldi	r24, 0x8B	; 139
    164c:	93 e9       	ldi	r25, 0x93	; 147
    164e:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    1652:	84 e9       	ldi	r24, 0x94	; 148
    1654:	93 e9       	ldi	r25, 0x93	; 147
    1656:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    165a:	8d e9       	ldi	r24, 0x9D	; 157
    165c:	93 e9       	ldi	r25, 0x93	; 147
    165e:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    1662:	86 ea       	ldi	r24, 0xA6	; 166
    1664:	93 e9       	ldi	r25, 0x93	; 147
    1666:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    166a:	82 e8       	ldi	r24, 0x82	; 130
    166c:	93 e9       	ldi	r25, 0x93	; 147
    166e:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    1672:	89 e7       	ldi	r24, 0x79	; 121
    1674:	93 e9       	ldi	r25, 0x93	; 147
    1676:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    167a:	8c e6       	ldi	r24, 0x6C	; 108
    167c:	93 e9       	ldi	r25, 0x93	; 147
    167e:	0e 94 ae 09 	call	0x135c	; 0x135c <vListInitialise>
    1682:	82 e8       	ldi	r24, 0x82	; 130
    1684:	93 e9       	ldi	r25, 0x93	; 147
    1686:	80 93 77 93 	sts	0x9377, r24	; 0x809377 <pxDelayedTaskList>
    168a:	90 93 78 93 	sts	0x9378, r25	; 0x809378 <pxDelayedTaskList+0x1>
    168e:	89 e7       	ldi	r24, 0x79	; 121
    1690:	93 e9       	ldi	r25, 0x93	; 147
    1692:	80 93 75 93 	sts	0x9375, r24	; 0x809375 <pxOverflowDelayedTaskList>
    1696:	90 93 76 93 	sts	0x9376, r25	; 0x809376 <pxOverflowDelayedTaskList+0x1>
    169a:	10 c0       	rjmp	.+32     	; 0x16bc <xTaskCreate+0x184>
    169c:	80 91 67 93 	lds	r24, 0x9367	; 0x809367 <xSchedulerRunning>
    16a0:	81 11       	cpse	r24, r1
    16a2:	0c c0       	rjmp	.+24     	; 0x16bc <xTaskCreate+0x184>
    16a4:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    16a8:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    16ac:	96 89       	ldd	r25, Z+22	; 0x16
    16ae:	8e 89       	ldd	r24, Y+22	; 0x16
    16b0:	89 17       	cp	r24, r25
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <xTaskCreate+0x184>
    16b4:	c0 93 af 93 	sts	0x93AF, r28	; 0x8093af <pxCurrentTCB>
    16b8:	d0 93 b0 93 	sts	0x93B0, r29	; 0x8093b0 <pxCurrentTCB+0x1>
    16bc:	80 91 63 93 	lds	r24, 0x9363	; 0x809363 <uxTaskNumber>
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	80 93 63 93 	sts	0x9363, r24	; 0x809363 <uxTaskNumber>
    16c6:	8e 89       	ldd	r24, Y+22	; 0x16
    16c8:	90 91 68 93 	lds	r25, 0x9368	; 0x809368 <uxTopReadyPriority>
    16cc:	98 17       	cp	r25, r24
    16ce:	10 f4       	brcc	.+4      	; 0x16d4 <xTaskCreate+0x19c>
    16d0:	80 93 68 93 	sts	0x9368, r24	; 0x809368 <uxTopReadyPriority>
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 01       	movw	r18, r24
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	b6 01       	movw	r22, r12
    16ea:	85 57       	subi	r24, 0x75	; 117
    16ec:	9c 46       	sbci	r25, 0x6C	; 108
    16ee:	0e 94 c0 09 	call	0x1380	; 0x1380 <vListInsertEnd>
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	80 91 67 93 	lds	r24, 0x9367	; 0x809367 <xSchedulerRunning>
    16fa:	88 23       	and	r24, r24
    16fc:	61 f0       	breq	.+24     	; 0x1716 <xTaskCreate+0x1de>
    16fe:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1702:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1706:	96 89       	ldd	r25, Z+22	; 0x16
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	98 17       	cp	r25, r24
    170c:	30 f4       	brcc	.+12     	; 0x171a <xTaskCreate+0x1e2>
    170e:	0e 94 c0 08 	call	0x1180	; 0x1180 <vPortYield>
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <xTaskCreate+0x1e8>
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	03 c0       	rjmp	.+6      	; 0x1720 <xTaskCreate+0x1e8>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <xTaskCreate+0x1e8>
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	5f 90       	pop	r5
    173c:	4f 90       	pop	r4
    173e:	08 95       	ret

00001740 <vTaskStartScheduler>:
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	0f 2e       	mov	r0, r31
    1748:	ff e5       	ldi	r31, 0x5F	; 95
    174a:	ef 2e       	mov	r14, r31
    174c:	f3 e9       	ldi	r31, 0x93	; 147
    174e:	ff 2e       	mov	r15, r31
    1750:	f0 2d       	mov	r31, r0
    1752:	00 e0       	ldi	r16, 0x00	; 0
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	44 e6       	ldi	r20, 0x64	; 100
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	6a eb       	ldi	r22, 0xBA	; 186
    175e:	72 e2       	ldi	r23, 0x22	; 34
    1760:	88 e3       	ldi	r24, 0x38	; 56
    1762:	9a e0       	ldi	r25, 0x0A	; 10
    1764:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xTaskCreate>
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	81 f4       	brne	.+32     	; 0x178c <vTaskStartScheduler+0x4c>
    176c:	f8 94       	cli
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	9f ef       	ldi	r25, 0xFF	; 255
    1772:	80 93 61 93 	sts	0x9361, r24	; 0x809361 <xNextTaskUnblockTime>
    1776:	90 93 62 93 	sts	0x9362, r25	; 0x809362 <xNextTaskUnblockTime+0x1>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	80 93 67 93 	sts	0x9367, r24	; 0x809367 <xSchedulerRunning>
    1780:	10 92 69 93 	sts	0x9369, r1	; 0x809369 <xTickCount>
    1784:	10 92 6a 93 	sts	0x936A, r1	; 0x80936a <xTickCount+0x1>
    1788:	0e 94 7e 08 	call	0x10fc	; 0x10fc <xPortStartScheduler>
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	08 95       	ret

00001794 <vTaskSuspendAll>:
    1794:	80 91 5e 93 	lds	r24, 0x935E	; 0x80935e <uxSchedulerSuspended>
    1798:	8f 5f       	subi	r24, 0xFF	; 255
    179a:	80 93 5e 93 	sts	0x935E, r24	; 0x80935e <uxSchedulerSuspended>
    179e:	08 95       	ret

000017a0 <xTaskIncrementTick>:
    17a0:	df 92       	push	r13
    17a2:	ef 92       	push	r14
    17a4:	ff 92       	push	r15
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
    17ae:	80 91 5e 93 	lds	r24, 0x935E	; 0x80935e <uxSchedulerSuspended>
    17b2:	81 11       	cpse	r24, r1
    17b4:	98 c0       	rjmp	.+304    	; 0x18e6 <xTaskIncrementTick+0x146>
    17b6:	e0 90 69 93 	lds	r14, 0x9369	; 0x809369 <xTickCount>
    17ba:	f0 90 6a 93 	lds	r15, 0x936A	; 0x80936a <xTickCount+0x1>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	e8 1a       	sub	r14, r24
    17c2:	f8 0a       	sbc	r15, r24
    17c4:	e0 92 69 93 	sts	0x9369, r14	; 0x809369 <xTickCount>
    17c8:	f0 92 6a 93 	sts	0x936A, r15	; 0x80936a <xTickCount+0x1>
    17cc:	e1 14       	cp	r14, r1
    17ce:	f1 04       	cpc	r15, r1
    17d0:	b9 f4       	brne	.+46     	; 0x1800 <xTaskIncrementTick+0x60>
    17d2:	80 91 77 93 	lds	r24, 0x9377	; 0x809377 <pxDelayedTaskList>
    17d6:	90 91 78 93 	lds	r25, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    17da:	20 91 75 93 	lds	r18, 0x9375	; 0x809375 <pxOverflowDelayedTaskList>
    17de:	30 91 76 93 	lds	r19, 0x9376	; 0x809376 <pxOverflowDelayedTaskList+0x1>
    17e2:	20 93 77 93 	sts	0x9377, r18	; 0x809377 <pxDelayedTaskList>
    17e6:	30 93 78 93 	sts	0x9378, r19	; 0x809378 <pxDelayedTaskList+0x1>
    17ea:	80 93 75 93 	sts	0x9375, r24	; 0x809375 <pxOverflowDelayedTaskList>
    17ee:	90 93 76 93 	sts	0x9376, r25	; 0x809376 <pxOverflowDelayedTaskList+0x1>
    17f2:	80 91 64 93 	lds	r24, 0x9364	; 0x809364 <xNumOfOverflows>
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	80 93 64 93 	sts	0x9364, r24	; 0x809364 <xNumOfOverflows>
    17fc:	0e 94 39 0a 	call	0x1472	; 0x1472 <prvResetNextTaskUnblockTime>
    1800:	80 91 61 93 	lds	r24, 0x9361	; 0x809361 <xNextTaskUnblockTime>
    1804:	90 91 62 93 	lds	r25, 0x9362	; 0x809362 <xNextTaskUnblockTime+0x1>
    1808:	e8 16       	cp	r14, r24
    180a:	f9 06       	cpc	r15, r25
    180c:	10 f4       	brcc	.+4      	; 0x1812 <xTaskIncrementTick+0x72>
    180e:	d1 2c       	mov	r13, r1
    1810:	52 c0       	rjmp	.+164    	; 0x18b6 <xTaskIncrementTick+0x116>
    1812:	d1 2c       	mov	r13, r1
    1814:	e0 91 77 93 	lds	r30, 0x9377	; 0x809377 <pxDelayedTaskList>
    1818:	f0 91 78 93 	lds	r31, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    181c:	80 81       	ld	r24, Z
    181e:	81 11       	cpse	r24, r1
    1820:	07 c0       	rjmp	.+14     	; 0x1830 <xTaskIncrementTick+0x90>
    1822:	8f ef       	ldi	r24, 0xFF	; 255
    1824:	9f ef       	ldi	r25, 0xFF	; 255
    1826:	80 93 61 93 	sts	0x9361, r24	; 0x809361 <xNextTaskUnblockTime>
    182a:	90 93 62 93 	sts	0x9362, r25	; 0x809362 <xNextTaskUnblockTime+0x1>
    182e:	43 c0       	rjmp	.+134    	; 0x18b6 <xTaskIncrementTick+0x116>
    1830:	e0 91 77 93 	lds	r30, 0x9377	; 0x809377 <pxDelayedTaskList>
    1834:	f0 91 78 93 	lds	r31, 0x9378	; 0x809378 <pxDelayedTaskList+0x1>
    1838:	05 80       	ldd	r0, Z+5	; 0x05
    183a:	f6 81       	ldd	r31, Z+6	; 0x06
    183c:	e0 2d       	mov	r30, r0
    183e:	c6 81       	ldd	r28, Z+6	; 0x06
    1840:	d7 81       	ldd	r29, Z+7	; 0x07
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	e8 16       	cp	r14, r24
    1848:	f9 06       	cpc	r15, r25
    184a:	28 f4       	brcc	.+10     	; 0x1856 <xTaskIncrementTick+0xb6>
    184c:	80 93 61 93 	sts	0x9361, r24	; 0x809361 <xNextTaskUnblockTime>
    1850:	90 93 62 93 	sts	0x9362, r25	; 0x809362 <xNextTaskUnblockTime+0x1>
    1854:	30 c0       	rjmp	.+96     	; 0x18b6 <xTaskIncrementTick+0x116>
    1856:	8e 01       	movw	r16, r28
    1858:	0e 5f       	subi	r16, 0xFE	; 254
    185a:	1f 4f       	sbci	r17, 0xFF	; 255
    185c:	c8 01       	movw	r24, r16
    185e:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
    1862:	8c 89       	ldd	r24, Y+20	; 0x14
    1864:	9d 89       	ldd	r25, Y+21	; 0x15
    1866:	89 2b       	or	r24, r25
    1868:	21 f0       	breq	.+8      	; 0x1872 <xTaskIncrementTick+0xd2>
    186a:	ce 01       	movw	r24, r28
    186c:	0c 96       	adiw	r24, 0x0c	; 12
    186e:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
    1872:	8e 89       	ldd	r24, Y+22	; 0x16
    1874:	90 91 68 93 	lds	r25, 0x9368	; 0x809368 <uxTopReadyPriority>
    1878:	98 17       	cp	r25, r24
    187a:	10 f4       	brcc	.+4      	; 0x1880 <xTaskIncrementTick+0xe0>
    187c:	80 93 68 93 	sts	0x9368, r24	; 0x809368 <uxTopReadyPriority>
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	9c 01       	movw	r18, r24
    1884:	22 0f       	add	r18, r18
    1886:	33 1f       	adc	r19, r19
    1888:	22 0f       	add	r18, r18
    188a:	33 1f       	adc	r19, r19
    188c:	22 0f       	add	r18, r18
    188e:	33 1f       	adc	r19, r19
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	b8 01       	movw	r22, r16
    1896:	85 57       	subi	r24, 0x75	; 117
    1898:	9c 46       	sbci	r25, 0x6C	; 108
    189a:	0e 94 c0 09 	call	0x1380	; 0x1380 <vListInsertEnd>
    189e:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    18a2:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    18a6:	9e 89       	ldd	r25, Y+22	; 0x16
    18a8:	86 89       	ldd	r24, Z+22	; 0x16
    18aa:	98 17       	cp	r25, r24
    18ac:	08 f4       	brcc	.+2      	; 0x18b0 <xTaskIncrementTick+0x110>
    18ae:	b2 cf       	rjmp	.-156    	; 0x1814 <xTaskIncrementTick+0x74>
    18b0:	dd 24       	eor	r13, r13
    18b2:	d3 94       	inc	r13
    18b4:	af cf       	rjmp	.-162    	; 0x1814 <xTaskIncrementTick+0x74>
    18b6:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    18ba:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    18be:	86 89       	ldd	r24, Z+22	; 0x16
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	fc 01       	movw	r30, r24
    18c4:	ee 0f       	add	r30, r30
    18c6:	ff 1f       	adc	r31, r31
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	ee 0f       	add	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	8e 0f       	add	r24, r30
    18d2:	9f 1f       	adc	r25, r31
    18d4:	fc 01       	movw	r30, r24
    18d6:	e5 57       	subi	r30, 0x75	; 117
    18d8:	fc 46       	sbci	r31, 0x6C	; 108
    18da:	80 81       	ld	r24, Z
    18dc:	82 30       	cpi	r24, 0x02	; 2
    18de:	48 f0       	brcs	.+18     	; 0x18f2 <xTaskIncrementTick+0x152>
    18e0:	dd 24       	eor	r13, r13
    18e2:	d3 94       	inc	r13
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <xTaskIncrementTick+0x152>
    18e6:	80 91 66 93 	lds	r24, 0x9366	; 0x809366 <uxPendedTicks>
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 66 93 	sts	0x9366, r24	; 0x809366 <uxPendedTicks>
    18f0:	d1 2c       	mov	r13, r1
    18f2:	80 91 65 93 	lds	r24, 0x9365	; 0x809365 <xYieldPending>
    18f6:	88 23       	and	r24, r24
    18f8:	11 f0       	breq	.+4      	; 0x18fe <xTaskIncrementTick+0x15e>
    18fa:	dd 24       	eor	r13, r13
    18fc:	d3 94       	inc	r13
    18fe:	8d 2d       	mov	r24, r13
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	ff 90       	pop	r15
    190a:	ef 90       	pop	r14
    190c:	df 90       	pop	r13
    190e:	08 95       	ret

00001910 <xTaskResumeAll>:
    1910:	df 92       	push	r13
    1912:	ef 92       	push	r14
    1914:	ff 92       	push	r15
    1916:	0f 93       	push	r16
    1918:	1f 93       	push	r17
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	0f 92       	push	r0
    1924:	80 91 5e 93 	lds	r24, 0x935E	; 0x80935e <uxSchedulerSuspended>
    1928:	81 50       	subi	r24, 0x01	; 1
    192a:	80 93 5e 93 	sts	0x935E, r24	; 0x80935e <uxSchedulerSuspended>
    192e:	80 91 5e 93 	lds	r24, 0x935E	; 0x80935e <uxSchedulerSuspended>
    1932:	81 11       	cpse	r24, r1
    1934:	5f c0       	rjmp	.+190    	; 0x19f4 <xTaskResumeAll+0xe4>
    1936:	80 91 6b 93 	lds	r24, 0x936B	; 0x80936b <uxCurrentNumberOfTasks>
    193a:	81 11       	cpse	r24, r1
    193c:	33 c0       	rjmp	.+102    	; 0x19a4 <xTaskResumeAll+0x94>
    193e:	5d c0       	rjmp	.+186    	; 0x19fa <xTaskResumeAll+0xea>
    1940:	d7 01       	movw	r26, r14
    1942:	15 96       	adiw	r26, 0x05	; 5
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	16 97       	sbiw	r26, 0x06	; 6
    194a:	c6 81       	ldd	r28, Z+6	; 0x06
    194c:	d7 81       	ldd	r29, Z+7	; 0x07
    194e:	ce 01       	movw	r24, r28
    1950:	0c 96       	adiw	r24, 0x0c	; 12
    1952:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
    1956:	8e 01       	movw	r16, r28
    1958:	0e 5f       	subi	r16, 0xFE	; 254
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	c8 01       	movw	r24, r16
    195e:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
    1962:	8e 89       	ldd	r24, Y+22	; 0x16
    1964:	90 91 68 93 	lds	r25, 0x9368	; 0x809368 <uxTopReadyPriority>
    1968:	98 17       	cp	r25, r24
    196a:	10 f4       	brcc	.+4      	; 0x1970 <xTaskResumeAll+0x60>
    196c:	80 93 68 93 	sts	0x9368, r24	; 0x809368 <uxTopReadyPriority>
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	9c 01       	movw	r18, r24
    1974:	22 0f       	add	r18, r18
    1976:	33 1f       	adc	r19, r19
    1978:	22 0f       	add	r18, r18
    197a:	33 1f       	adc	r19, r19
    197c:	22 0f       	add	r18, r18
    197e:	33 1f       	adc	r19, r19
    1980:	82 0f       	add	r24, r18
    1982:	93 1f       	adc	r25, r19
    1984:	b8 01       	movw	r22, r16
    1986:	85 57       	subi	r24, 0x75	; 117
    1988:	9c 46       	sbci	r25, 0x6C	; 108
    198a:	0e 94 c0 09 	call	0x1380	; 0x1380 <vListInsertEnd>
    198e:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1992:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1996:	9e 89       	ldd	r25, Y+22	; 0x16
    1998:	86 89       	ldd	r24, Z+22	; 0x16
    199a:	98 17       	cp	r25, r24
    199c:	68 f0       	brcs	.+26     	; 0x19b8 <xTaskResumeAll+0xa8>
    199e:	d0 92 65 93 	sts	0x9365, r13	; 0x809365 <xYieldPending>
    19a2:	0a c0       	rjmp	.+20     	; 0x19b8 <xTaskResumeAll+0xa8>
    19a4:	c0 e0       	ldi	r28, 0x00	; 0
    19a6:	d0 e0       	ldi	r29, 0x00	; 0
    19a8:	0f 2e       	mov	r0, r31
    19aa:	fc e6       	ldi	r31, 0x6C	; 108
    19ac:	ef 2e       	mov	r14, r31
    19ae:	f3 e9       	ldi	r31, 0x93	; 147
    19b0:	ff 2e       	mov	r15, r31
    19b2:	f0 2d       	mov	r31, r0
    19b4:	dd 24       	eor	r13, r13
    19b6:	d3 94       	inc	r13
    19b8:	f7 01       	movw	r30, r14
    19ba:	80 81       	ld	r24, Z
    19bc:	81 11       	cpse	r24, r1
    19be:	c0 cf       	rjmp	.-128    	; 0x1940 <xTaskResumeAll+0x30>
    19c0:	cd 2b       	or	r28, r29
    19c2:	11 f0       	breq	.+4      	; 0x19c8 <xTaskResumeAll+0xb8>
    19c4:	0e 94 39 0a 	call	0x1472	; 0x1472 <prvResetNextTaskUnblockTime>
    19c8:	c0 91 66 93 	lds	r28, 0x9366	; 0x809366 <uxPendedTicks>
    19cc:	cc 23       	and	r28, r28
    19ce:	51 f0       	breq	.+20     	; 0x19e4 <xTaskResumeAll+0xd4>
    19d0:	d1 e0       	ldi	r29, 0x01	; 1
    19d2:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <xTaskIncrementTick>
    19d6:	81 11       	cpse	r24, r1
    19d8:	d0 93 65 93 	sts	0x9365, r29	; 0x809365 <xYieldPending>
    19dc:	c1 50       	subi	r28, 0x01	; 1
    19de:	c9 f7       	brne	.-14     	; 0x19d2 <xTaskResumeAll+0xc2>
    19e0:	10 92 66 93 	sts	0x9366, r1	; 0x809366 <uxPendedTicks>
    19e4:	80 91 65 93 	lds	r24, 0x9365	; 0x809365 <xYieldPending>
    19e8:	88 23       	and	r24, r24
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <xTaskResumeAll+0xe8>
    19ec:	0e 94 c0 08 	call	0x1180	; 0x1180 <vPortYield>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	03 c0       	rjmp	.+6      	; 0x19fa <xTaskResumeAll+0xea>
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <xTaskResumeAll+0xea>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0f 90       	pop	r0
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	ef 90       	pop	r14
    1a0a:	df 90       	pop	r13
    1a0c:	08 95       	ret

00001a0e <vTaskDelay>:
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	ec 01       	movw	r28, r24
    1a14:	89 2b       	or	r24, r25
    1a16:	51 f0       	breq	.+20     	; 0x1a2c <vTaskDelay+0x1e>
    1a18:	0e 94 ca 0b 	call	0x1794	; 0x1794 <vTaskSuspendAll>
    1a1c:	60 e0       	ldi	r22, 0x00	; 0
    1a1e:	ce 01       	movw	r24, r28
    1a20:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <prvAddCurrentTaskToDelayedList>
    1a24:	0e 94 88 0c 	call	0x1910	; 0x1910 <xTaskResumeAll>
    1a28:	81 11       	cpse	r24, r1
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <vTaskDelay+0x22>
    1a2c:	0e 94 c0 08 	call	0x1180	; 0x1180 <vPortYield>
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	08 95       	ret

00001a36 <vTaskSwitchContext>:
    1a36:	80 91 5e 93 	lds	r24, 0x935E	; 0x80935e <uxSchedulerSuspended>
    1a3a:	88 23       	and	r24, r24
    1a3c:	21 f0       	breq	.+8      	; 0x1a46 <vTaskSwitchContext+0x10>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 65 93 	sts	0x9365, r24	; 0x809365 <xYieldPending>
    1a44:	08 95       	ret
    1a46:	10 92 65 93 	sts	0x9365, r1	; 0x809365 <xYieldPending>
    1a4a:	20 91 68 93 	lds	r18, 0x9368	; 0x809368 <uxTopReadyPriority>
    1a4e:	82 2f       	mov	r24, r18
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	fc 01       	movw	r30, r24
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0f       	add	r30, r30
    1a5a:	ff 1f       	adc	r31, r31
    1a5c:	ee 0f       	add	r30, r30
    1a5e:	ff 1f       	adc	r31, r31
    1a60:	e8 0f       	add	r30, r24
    1a62:	f9 1f       	adc	r31, r25
    1a64:	e5 57       	subi	r30, 0x75	; 117
    1a66:	fc 46       	sbci	r31, 0x6C	; 108
    1a68:	30 81       	ld	r19, Z
    1a6a:	31 11       	cpse	r19, r1
    1a6c:	11 c0       	rjmp	.+34     	; 0x1a90 <vTaskSwitchContext+0x5a>
    1a6e:	21 50       	subi	r18, 0x01	; 1
    1a70:	82 2f       	mov	r24, r18
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	fc 01       	movw	r30, r24
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	e8 0f       	add	r30, r24
    1a84:	f9 1f       	adc	r31, r25
    1a86:	e5 57       	subi	r30, 0x75	; 117
    1a88:	fc 46       	sbci	r31, 0x6C	; 108
    1a8a:	30 81       	ld	r19, Z
    1a8c:	33 23       	and	r19, r19
    1a8e:	79 f3       	breq	.-34     	; 0x1a6e <vTaskSwitchContext+0x38>
    1a90:	ac 01       	movw	r20, r24
    1a92:	44 0f       	add	r20, r20
    1a94:	55 1f       	adc	r21, r21
    1a96:	44 0f       	add	r20, r20
    1a98:	55 1f       	adc	r21, r21
    1a9a:	44 0f       	add	r20, r20
    1a9c:	55 1f       	adc	r21, r21
    1a9e:	48 0f       	add	r20, r24
    1aa0:	59 1f       	adc	r21, r25
    1aa2:	da 01       	movw	r26, r20
    1aa4:	a5 57       	subi	r26, 0x75	; 117
    1aa6:	bc 46       	sbci	r27, 0x6C	; 108
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	02 80       	ldd	r0, Z+2	; 0x02
    1ab2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	11 96       	adiw	r26, 0x01	; 1
    1ab8:	ed 93       	st	X+, r30
    1aba:	fc 93       	st	X, r31
    1abc:	12 97       	sbiw	r26, 0x02	; 2
    1abe:	42 57       	subi	r20, 0x72	; 114
    1ac0:	5c 46       	sbci	r21, 0x6C	; 108
    1ac2:	e4 17       	cp	r30, r20
    1ac4:	f5 07       	cpc	r31, r21
    1ac6:	29 f4       	brne	.+10     	; 0x1ad2 <vTaskSwitchContext+0x9c>
    1ac8:	42 81       	ldd	r20, Z+2	; 0x02
    1aca:	53 81       	ldd	r21, Z+3	; 0x03
    1acc:	fd 01       	movw	r30, r26
    1ace:	41 83       	std	Z+1, r20	; 0x01
    1ad0:	52 83       	std	Z+2, r21	; 0x02
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	8e 0f       	add	r24, r30
    1ae2:	9f 1f       	adc	r25, r31
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e5 57       	subi	r30, 0x75	; 117
    1ae8:	fc 46       	sbci	r31, 0x6C	; 108
    1aea:	01 80       	ldd	r0, Z+1	; 0x01
    1aec:	f2 81       	ldd	r31, Z+2	; 0x02
    1aee:	e0 2d       	mov	r30, r0
    1af0:	86 81       	ldd	r24, Z+6	; 0x06
    1af2:	97 81       	ldd	r25, Z+7	; 0x07
    1af4:	80 93 af 93 	sts	0x93AF, r24	; 0x8093af <pxCurrentTCB>
    1af8:	90 93 b0 93 	sts	0x93B0, r25	; 0x8093b0 <pxCurrentTCB+0x1>
    1afc:	20 93 68 93 	sts	0x9368, r18	; 0x809368 <uxTopReadyPriority>
    1b00:	08 95       	ret

00001b02 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    1b02:	4f 92       	push	r4
    1b04:	5f 92       	push	r5
    1b06:	6f 92       	push	r6
    1b08:	7f 92       	push	r7
    1b0a:	8f 92       	push	r8
    1b0c:	9f 92       	push	r9
    1b0e:	af 92       	push	r10
    1b10:	bf 92       	push	r11
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	49 01       	movw	r8, r18
    1b1c:	5a 01       	movw	r10, r20
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    1b24:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1b28:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1b2c:	25 a1       	ldd	r18, Z+37	; 0x25
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	29 f1       	breq	.+74     	; 0x1b7c <xTaskNotifyWait+0x7a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    1b32:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1b36:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1b3a:	41 a0       	ldd	r4, Z+33	; 0x21
    1b3c:	52 a0       	ldd	r5, Z+34	; 0x22
    1b3e:	63 a0       	ldd	r6, Z+35	; 0x23
    1b40:	74 a0       	ldd	r7, Z+36	; 0x24
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	80 95       	com	r24
    1b48:	90 95       	com	r25
    1b4a:	a0 95       	com	r26
    1b4c:	b0 95       	com	r27
    1b4e:	84 21       	and	r24, r4
    1b50:	95 21       	and	r25, r5
    1b52:	a6 21       	and	r26, r6
    1b54:	b7 21       	and	r27, r7
    1b56:	81 a3       	std	Z+33, r24	; 0x21
    1b58:	92 a3       	std	Z+34, r25	; 0x22
    1b5a:	a3 a3       	std	Z+35, r26	; 0x23
    1b5c:	b4 a3       	std	Z+36, r27	; 0x24

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    1b5e:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1b62:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	85 a3       	std	Z+37, r24	; 0x25

				if( xTicksToWait > ( TickType_t ) 0 )
    1b6a:	e1 14       	cp	r14, r1
    1b6c:	f1 04       	cpc	r15, r1
    1b6e:	31 f0       	breq	.+12     	; 0x1b7c <xTaskNotifyWait+0x7a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	c7 01       	movw	r24, r14
    1b74:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    1b78:	0e 94 c0 08 	call	0x1180	; 0x1180 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1b7c:	0f 90       	pop	r0
    1b7e:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	f8 94       	cli
    1b84:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    1b86:	01 15       	cp	r16, r1
    1b88:	11 05       	cpc	r17, r1
    1b8a:	69 f0       	breq	.+26     	; 0x1ba6 <xTaskNotifyWait+0xa4>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    1b8c:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1b90:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1b94:	81 a1       	ldd	r24, Z+33	; 0x21
    1b96:	92 a1       	ldd	r25, Z+34	; 0x22
    1b98:	a3 a1       	ldd	r26, Z+35	; 0x23
    1b9a:	b4 a1       	ldd	r27, Z+36	; 0x24
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	80 83       	st	Z, r24
    1ba0:	91 83       	std	Z+1, r25	; 0x01
    1ba2:	a2 83       	std	Z+2, r26	; 0x02
    1ba4:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    1ba6:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1baa:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1bae:	85 a1       	ldd	r24, Z+37	; 0x25
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	b1 f0       	breq	.+44     	; 0x1be0 <xTaskNotifyWait+0xde>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    1bb4:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1bb8:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1bbc:	81 a1       	ldd	r24, Z+33	; 0x21
    1bbe:	92 a1       	ldd	r25, Z+34	; 0x22
    1bc0:	a3 a1       	ldd	r26, Z+35	; 0x23
    1bc2:	b4 a1       	ldd	r27, Z+36	; 0x24
    1bc4:	80 94       	com	r8
    1bc6:	90 94       	com	r9
    1bc8:	a0 94       	com	r10
    1bca:	b0 94       	com	r11
    1bcc:	88 22       	and	r8, r24
    1bce:	99 22       	and	r9, r25
    1bd0:	aa 22       	and	r10, r26
    1bd2:	bb 22       	and	r11, r27
    1bd4:	81 a2       	std	Z+33, r8	; 0x21
    1bd6:	92 a2       	std	Z+34, r9	; 0x22
    1bd8:	a3 a2       	std	Z+35, r10	; 0x23
    1bda:	b4 a2       	std	Z+36, r11	; 0x24
				xReturn = pdTRUE;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	01 c0       	rjmp	.+2      	; 0x1be2 <xTaskNotifyWait+0xe0>
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
				xReturn = pdTRUE;
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    1be2:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1be6:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1bea:	15 a2       	std	Z+37, r1	; 0x25
		}
		taskEXIT_CRITICAL();
    1bec:	0f 90       	pop	r0
    1bee:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    1bf0:	1f 91       	pop	r17
    1bf2:	0f 91       	pop	r16
    1bf4:	ff 90       	pop	r15
    1bf6:	ef 90       	pop	r14
    1bf8:	bf 90       	pop	r11
    1bfa:	af 90       	pop	r10
    1bfc:	9f 90       	pop	r9
    1bfe:	8f 90       	pop	r8
    1c00:	7f 90       	pop	r7
    1c02:	6f 90       	pop	r6
    1c04:	5f 90       	pop	r5
    1c06:	4f 90       	pop	r4
    1c08:	08 95       	ret

00001c0a <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	fc 01       	movw	r30, r24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    1c1a:	01 15       	cp	r16, r1
    1c1c:	11 05       	cpc	r17, r1
    1c1e:	49 f0       	breq	.+18     	; 0x1c32 <xTaskGenericNotify+0x28>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    1c20:	81 a1       	ldd	r24, Z+33	; 0x21
    1c22:	92 a1       	ldd	r25, Z+34	; 0x22
    1c24:	a3 a1       	ldd	r26, Z+35	; 0x23
    1c26:	b4 a1       	ldd	r27, Z+36	; 0x24
    1c28:	e8 01       	movw	r28, r16
    1c2a:	88 83       	st	Y, r24
    1c2c:	99 83       	std	Y+1, r25	; 0x01
    1c2e:	aa 83       	std	Y+2, r26	; 0x02
    1c30:	bb 83       	std	Y+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    1c32:	85 a1       	ldd	r24, Z+37	; 0x25

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	95 a3       	std	Z+37, r25	; 0x25

			switch( eAction )
    1c38:	22 30       	cpi	r18, 0x02	; 2
    1c3a:	b1 f0       	breq	.+44     	; 0x1c68 <xTaskGenericNotify+0x5e>
    1c3c:	18 f4       	brcc	.+6      	; 0x1c44 <xTaskGenericNotify+0x3a>
    1c3e:	21 30       	cpi	r18, 0x01	; 1
    1c40:	31 f0       	breq	.+12     	; 0x1c4e <xTaskGenericNotify+0x44>
    1c42:	2a c0       	rjmp	.+84     	; 0x1c98 <xTaskGenericNotify+0x8e>
    1c44:	23 30       	cpi	r18, 0x03	; 3
    1c46:	e9 f0       	breq	.+58     	; 0x1c82 <xTaskGenericNotify+0x78>
    1c48:	24 30       	cpi	r18, 0x04	; 4
    1c4a:	01 f1       	breq	.+64     	; 0x1c8c <xTaskGenericNotify+0x82>
    1c4c:	25 c0       	rjmp	.+74     	; 0x1c98 <xTaskGenericNotify+0x8e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    1c4e:	01 a1       	ldd	r16, Z+33	; 0x21
    1c50:	12 a1       	ldd	r17, Z+34	; 0x22
    1c52:	23 a1       	ldd	r18, Z+35	; 0x23
    1c54:	34 a1       	ldd	r19, Z+36	; 0x24
    1c56:	40 2b       	or	r20, r16
    1c58:	51 2b       	or	r21, r17
    1c5a:	62 2b       	or	r22, r18
    1c5c:	73 2b       	or	r23, r19
    1c5e:	41 a3       	std	Z+33, r20	; 0x21
    1c60:	52 a3       	std	Z+34, r21	; 0x22
    1c62:	63 a3       	std	Z+35, r22	; 0x23
    1c64:	74 a3       	std	Z+36, r23	; 0x24
					break;
    1c66:	18 c0       	rjmp	.+48     	; 0x1c98 <xTaskGenericNotify+0x8e>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    1c68:	41 a1       	ldd	r20, Z+33	; 0x21
    1c6a:	52 a1       	ldd	r21, Z+34	; 0x22
    1c6c:	63 a1       	ldd	r22, Z+35	; 0x23
    1c6e:	74 a1       	ldd	r23, Z+36	; 0x24
    1c70:	4f 5f       	subi	r20, 0xFF	; 255
    1c72:	5f 4f       	sbci	r21, 0xFF	; 255
    1c74:	6f 4f       	sbci	r22, 0xFF	; 255
    1c76:	7f 4f       	sbci	r23, 0xFF	; 255
    1c78:	41 a3       	std	Z+33, r20	; 0x21
    1c7a:	52 a3       	std	Z+34, r21	; 0x22
    1c7c:	63 a3       	std	Z+35, r22	; 0x23
    1c7e:	74 a3       	std	Z+36, r23	; 0x24
					break;
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <xTaskGenericNotify+0x8e>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    1c82:	41 a3       	std	Z+33, r20	; 0x21
    1c84:	52 a3       	std	Z+34, r21	; 0x22
    1c86:	63 a3       	std	Z+35, r22	; 0x23
    1c88:	74 a3       	std	Z+36, r23	; 0x24
					break;
    1c8a:	06 c0       	rjmp	.+12     	; 0x1c98 <xTaskGenericNotify+0x8e>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	79 f1       	breq	.+94     	; 0x1cee <xTaskGenericNotify+0xe4>
					{
						pxTCB->ulNotifiedValue = ulValue;
    1c90:	41 a3       	std	Z+33, r20	; 0x21
    1c92:	52 a3       	std	Z+34, r21	; 0x22
    1c94:	63 a3       	std	Z+35, r22	; 0x23
    1c96:	74 a3       	std	Z+36, r23	; 0x24

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    1c98:	81 30       	cpi	r24, 0x01	; 1
    1c9a:	59 f5       	brne	.+86     	; 0x1cf2 <xTaskGenericNotify+0xe8>
    1c9c:	ef 01       	movw	r28, r30
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    1c9e:	8f 01       	movw	r16, r30
    1ca0:	0e 5f       	subi	r16, 0xFE	; 254
    1ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	0e 94 12 0a 	call	0x1424	; 0x1424 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    1caa:	8e 89       	ldd	r24, Y+22	; 0x16
    1cac:	90 91 68 93 	lds	r25, 0x9368	; 0x809368 <uxTopReadyPriority>
    1cb0:	98 17       	cp	r25, r24
    1cb2:	10 f4       	brcc	.+4      	; 0x1cb8 <xTaskGenericNotify+0xae>
    1cb4:	80 93 68 93 	sts	0x9368, r24	; 0x809368 <uxTopReadyPriority>
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 01       	movw	r18, r24
    1cbc:	22 0f       	add	r18, r18
    1cbe:	33 1f       	adc	r19, r19
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	22 0f       	add	r18, r18
    1cc6:	33 1f       	adc	r19, r19
    1cc8:	82 0f       	add	r24, r18
    1cca:	93 1f       	adc	r25, r19
    1ccc:	b8 01       	movw	r22, r16
    1cce:	85 57       	subi	r24, 0x75	; 117
    1cd0:	9c 46       	sbci	r25, 0x6C	; 108
    1cd2:	0e 94 c0 09 	call	0x1380	; 0x1380 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    1cd6:	e0 91 af 93 	lds	r30, 0x93AF	; 0x8093af <pxCurrentTCB>
    1cda:	f0 91 b0 93 	lds	r31, 0x93B0	; 0x8093b0 <pxCurrentTCB+0x1>
    1cde:	9e 89       	ldd	r25, Y+22	; 0x16
    1ce0:	86 89       	ldd	r24, Z+22	; 0x16
    1ce2:	89 17       	cp	r24, r25
    1ce4:	40 f4       	brcc	.+16     	; 0x1cf6 <xTaskGenericNotify+0xec>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    1ce6:	0e 94 c0 08 	call	0x1180	; 0x1180 <vPortYield>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	05 c0       	rjmp	.+10     	; 0x1cf8 <xTaskGenericNotify+0xee>
						pxTCB->ulNotifiedValue = ulValue;
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <xTaskGenericNotify+0xee>
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <xTaskGenericNotify+0xee>
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    1cf8:	0f 90       	pop	r0
    1cfa:	0f be       	out	0x3f, r0	; 63

		return xReturn;
	}
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	08 95       	ret

00001d06 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1d06:	08 95       	ret

00001d08 <Endpoint_SelectEndpoint>:
			return false;
		}
	}

	return true;
}
    1d08:	80 93 2a 94 	sts	0x942A, r24	; 0x80942a <USB_Endpoint_SelectedEndpoint>
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	2f 70       	andi	r18, 0x0F	; 15
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
    1d16:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
    1d1a:	88 23       	and	r24, r24
    1d1c:	e4 f4       	brge	.+56     	; 0x1d56 <Endpoint_SelectEndpoint+0x4e>
    1d1e:	64 e8       	ldi	r22, 0x84	; 132
    1d20:	62 9f       	mul	r22, r18
    1d22:	c0 01       	movw	r24, r0
    1d24:	63 9f       	mul	r22, r19
    1d26:	90 0d       	add	r25, r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	83 59       	subi	r24, 0x93	; 147
    1d2c:	9b 46       	sbci	r25, 0x6B	; 107
    1d2e:	80 93 26 94 	sts	0x9426, r24	; 0x809426 <USB_Endpoint_SelectedFIFO>
    1d32:	90 93 27 94 	sts	0x9427, r25	; 0x809427 <USB_Endpoint_SelectedFIFO+0x1>
    1d36:	c9 01       	movw	r24, r18
    1d38:	82 95       	swap	r24
    1d3a:	92 95       	swap	r25
    1d3c:	90 7f       	andi	r25, 0xF0	; 240
    1d3e:	98 27       	eor	r25, r24
    1d40:	80 7f       	andi	r24, 0xF0	; 240
    1d42:	98 27       	eor	r25, r24
    1d44:	08 96       	adiw	r24, 0x08	; 8
    1d46:	9a 01       	movw	r18, r20
    1d48:	28 0f       	add	r18, r24
    1d4a:	39 1f       	adc	r19, r25
    1d4c:	20 93 28 94 	sts	0x9428, r18	; 0x809428 <USB_Endpoint_SelectedHandle>
    1d50:	30 93 29 94 	sts	0x9429, r19	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1d54:	08 95       	ret
    1d56:	64 e8       	ldi	r22, 0x84	; 132
    1d58:	62 9f       	mul	r22, r18
    1d5a:	c0 01       	movw	r24, r0
    1d5c:	63 9f       	mul	r22, r19
    1d5e:	90 0d       	add	r25, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	85 5d       	subi	r24, 0xD5	; 213
    1d64:	9b 46       	sbci	r25, 0x6B	; 107
    1d66:	80 93 26 94 	sts	0x9426, r24	; 0x809426 <USB_Endpoint_SelectedFIFO>
    1d6a:	90 93 27 94 	sts	0x9427, r25	; 0x809427 <USB_Endpoint_SelectedFIFO+0x1>
    1d6e:	22 95       	swap	r18
    1d70:	32 95       	swap	r19
    1d72:	30 7f       	andi	r19, 0xF0	; 240
    1d74:	32 27       	eor	r19, r18
    1d76:	20 7f       	andi	r18, 0xF0	; 240
    1d78:	32 27       	eor	r19, r18
    1d7a:	24 0f       	add	r18, r20
    1d7c:	35 1f       	adc	r19, r21
    1d7e:	20 93 28 94 	sts	0x9428, r18	; 0x809428 <USB_Endpoint_SelectedHandle>
    1d82:	30 93 29 94 	sts	0x9429, r19	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1d86:	08 95       	ret

00001d88 <Endpoint_ConfigureEndpoint_PRV>:
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	d8 2f       	mov	r29, r24
    1d90:	16 2f       	mov	r17, r22
    1d92:	c4 2f       	mov	r28, r20
    1d94:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <Endpoint_SelectEndpoint>
    1d98:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1d9c:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1da0:	11 82       	std	Z+1, r1	; 0x01
    1da2:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1da6:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1daa:	dd 23       	and	r29, r29
    1dac:	a4 f0       	brlt	.+40     	; 0x1dd6 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    1dae:	10 82       	st	Z, r1
    1db0:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1db4:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1db8:	11 83       	std	Z+1, r17	; 0x01
    1dba:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1dbe:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1dc2:	12 82       	std	Z+2, r1	; 0x02
    1dc4:	13 82       	std	Z+3, r1	; 0x03
    1dc6:	80 91 26 94 	lds	r24, 0x9426	; 0x809426 <USB_Endpoint_SelectedFIFO>
    1dca:	90 91 27 94 	lds	r25, 0x9427	; 0x809427 <USB_Endpoint_SelectedFIFO+0x1>
    1dce:	84 83       	std	Z+4, r24	; 0x04
    1dd0:	95 83       	std	Z+5, r25	; 0x05
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	14 c0       	rjmp	.+40     	; 0x1dfe <Endpoint_ConfigureEndpoint_PRV+0x76>
    1dd6:	82 e0       	ldi	r24, 0x02	; 2
    1dd8:	80 83       	st	Z, r24
    1dda:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1dde:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1de2:	11 83       	std	Z+1, r17	; 0x01
    1de4:	e0 91 28 94 	lds	r30, 0x9428	; 0x809428 <USB_Endpoint_SelectedHandle>
    1de8:	f0 91 29 94 	lds	r31, 0x9429	; 0x809429 <USB_Endpoint_SelectedHandle+0x1>
    1dec:	12 82       	std	Z+2, r1	; 0x02
    1dee:	13 82       	std	Z+3, r1	; 0x03
    1df0:	80 91 26 94 	lds	r24, 0x9426	; 0x809426 <USB_Endpoint_SelectedFIFO>
    1df4:	90 91 27 94 	lds	r25, 0x9427	; 0x809427 <USB_Endpoint_SelectedFIFO+0x1>
    1df8:	84 83       	std	Z+4, r24	; 0x04
    1dfa:	95 83       	std	Z+5, r25	; 0x05
    1dfc:	4c 2f       	mov	r20, r28
    1dfe:	fc 01       	movw	r30, r24
    1e00:	e0 5c       	subi	r30, 0xC0	; 192
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	40 83       	st	Z, r20
    1e06:	31 96       	adiw	r30, 0x01	; 1
    1e08:	10 82       	st	Z, r1
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	08 95       	ret

00001e14 <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1e18:	a0 ec       	ldi	r26, 0xC0	; 192
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	ed 91       	ld	r30, X+
    1e20:	fc 91       	ld	r31, X
    1e22:	17 97       	sbiw	r26, 0x07	; 7
    1e24:	c9 01       	movw	r24, r18
    1e26:	82 95       	swap	r24
    1e28:	92 95       	swap	r25
    1e2a:	90 7f       	andi	r25, 0xF0	; 240
    1e2c:	98 27       	eor	r25, r24
    1e2e:	80 7f       	andi	r24, 0xF0	; 240
    1e30:	98 27       	eor	r25, r24
    1e32:	e8 0f       	add	r30, r24
    1e34:	f9 1f       	adc	r31, r25
    1e36:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1e38:	16 96       	adiw	r26, 0x06	; 6
    1e3a:	4d 91       	ld	r20, X+
    1e3c:	5c 91       	ld	r21, X
    1e3e:	17 97       	sbiw	r26, 0x07	; 7
    1e40:	fa 01       	movw	r30, r20
    1e42:	e8 0f       	add	r30, r24
    1e44:	f9 1f       	adc	r31, r25
    1e46:	11 82       	std	Z+1, r1	; 0x01
    1e48:	2f 5f       	subi	r18, 0xFF	; 255
    1e4a:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1e4c:	25 30       	cpi	r18, 0x05	; 5
    1e4e:	31 05       	cpc	r19, r1
    1e50:	29 f7       	brne	.-54     	; 0x1e1c <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    1e52:	08 95       	ret

00001e54 <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	0b b6       	in	r0, 0x3b	; 59
    1e60:	0f 92       	push	r0
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    1e7a:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1e7e:	88 23       	and	r24, r24
    1e80:	4c f4       	brge	.+18     	; 0x1e94 <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    1e82:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    1e8a:	80 e8       	ldi	r24, 0x80	; 128
    1e8c:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1e90:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    1e94:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    1e98:	86 ff       	sbrs	r24, 6
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    1e9c:	80 e4       	ldi	r24, 0x40	; 64
    1e9e:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1ea2:	10 92 1d 94 	sts	0x941D, r1	; 0x80941d <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    1ea6:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USB_Event_Stub>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    1eaa:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    1eae:	85 ff       	sbrs	r24, 5
    1eb0:	16 c0       	rjmp	.+44     	; 0x1ede <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    1eb2:	80 e2       	ldi	r24, 0x20	; 32
    1eb4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    1eb8:	80 91 19 94 	lds	r24, 0x9419	; 0x809419 <USB_Device_ConfigurationNumber>
    1ebc:	88 23       	and	r24, r24
    1ebe:	21 f0       	breq	.+8      	; 0x1ec8 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1ec0:	84 e0       	ldi	r24, 0x04	; 4
    1ec2:	80 93 1d 94 	sts	0x941D, r24	; 0x80941d <USB_DeviceState>
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1ec8:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1ecc:	81 11       	cpse	r24, r1
    1ece:	02 c0       	rjmp	.+4      	; 0x1ed4 <__vector_125+0x80>
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <__vector_125+0x82>
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	80 93 1d 94 	sts	0x941D, r24	; 0x80941d <USB_DeviceState>

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1eda:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USB_Event_Stub>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1ede:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1ee2:	84 ff       	sbrs	r24, 4
    1ee4:	18 c0       	rjmp	.+48     	; 0x1f16 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    1ee6:	e0 ec       	ldi	r30, 0xC0	; 192
    1ee8:	f4 e0       	ldi	r31, 0x04	; 4
    1eea:	80 e1       	ldi	r24, 0x10	; 16
    1eec:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	80 93 1d 94 	sts	0x941D, r24	; 0x80941d <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1ef4:	10 92 19 94 	sts	0x9419, r1	; 0x809419 <USB_Device_ConfigurationNumber>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1ef8:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    1efa:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1efe:	48 e0       	ldi	r20, 0x08	; 8
    1f00:	68 e4       	ldi	r22, 0x48	; 72
    1f02:	80 e8       	ldi	r24, 0x80	; 128
    1f04:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1f08:	48 e0       	ldi	r20, 0x08	; 8
    1f0a:	68 e4       	ldi	r22, 0x48	; 72
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    1f12:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <USB_Event_Stub>
	}
}
    1f16:	ff 91       	pop	r31
    1f18:	ef 91       	pop	r30
    1f1a:	bf 91       	pop	r27
    1f1c:	af 91       	pop	r26
    1f1e:	9f 91       	pop	r25
    1f20:	8f 91       	pop	r24
    1f22:	7f 91       	pop	r23
    1f24:	6f 91       	pop	r22
    1f26:	5f 91       	pop	r21
    1f28:	4f 91       	pop	r20
    1f2a:	3f 91       	pop	r19
    1f2c:	2f 91       	pop	r18
    1f2e:	0f 90       	pop	r0
    1f30:	0b be       	out	0x3b, r0	; 59
    1f32:	0f 90       	pop	r0
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	0f 90       	pop	r0
    1f38:	1f 90       	pop	r1
    1f3a:	18 95       	reti

00001f3c <xRelay>:
	time_t t;
	t = mktime(&_t);
	
	return t;

}
    1f3c:	07 e0       	ldi	r16, 0x07	; 7
    1f3e:	28 e1       	ldi	r18, 0x18	; 24
    1f40:	40 e0       	ldi	r20, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	82 ea       	ldi	r24, 0xA2	; 162
    1f46:	92 e2       	ldi	r25, 0x22	; 34
    1f48:	0e 94 32 15 	call	0x2a64	; 0x2a64 <DigitalPin_Config>
    1f4c:	28 e1       	ldi	r18, 0x18	; 24
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	85 ea       	ldi	r24, 0xA5	; 165
    1f54:	92 e2       	ldi	r25, 0x22	; 34
    1f56:	0e 94 32 15 	call	0x2a64	; 0x2a64 <DigitalPin_Config>
    1f5a:	00 e0       	ldi	r16, 0x00	; 0
    1f5c:	28 e1       	ldi	r18, 0x18	; 24
    1f5e:	40 e0       	ldi	r20, 0x00	; 0
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	88 ea       	ldi	r24, 0xA8	; 168
    1f64:	92 e2       	ldi	r25, 0x22	; 34
    1f66:	0e 94 32 15 	call	0x2a64	; 0x2a64 <DigitalPin_Config>
    1f6a:	28 e1       	ldi	r18, 0x18	; 24
    1f6c:	40 e0       	ldi	r20, 0x00	; 0
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	8b ea       	ldi	r24, 0xAB	; 171
    1f72:	92 e2       	ldi	r25, 0x22	; 34
    1f74:	0e 94 32 15 	call	0x2a64	; 0x2a64 <DigitalPin_Config>
    1f78:	0f 2e       	mov	r0, r31
    1f7a:	f6 e9       	ldi	r31, 0x96	; 150
    1f7c:	cf 2e       	mov	r12, r31
    1f7e:	f2 e2       	ldi	r31, 0x22	; 34
    1f80:	df 2e       	mov	r13, r31
    1f82:	f0 2d       	mov	r31, r0
    1f84:	02 ea       	ldi	r16, 0xA2	; 162
    1f86:	12 e2       	ldi	r17, 0x22	; 34
    1f88:	e6 01       	movw	r28, r12
    1f8a:	ce 01       	movw	r24, r28
    1f8c:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
    1f90:	61 e0       	ldi	r22, 0x01	; 1
    1f92:	ce 01       	movw	r24, r28
    1f94:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <DigitalPin_SetDir>
    1f98:	23 96       	adiw	r28, 0x03	; 3
    1f9a:	0c 17       	cp	r16, r28
    1f9c:	1d 07       	cpc	r17, r29
    1f9e:	a9 f7       	brne	.-22     	; 0x1f8a <xRelay+0x4e>
    1fa0:	bb 24       	eor	r11, r11
    1fa2:	b3 94       	inc	r11
    1fa4:	84 e6       	ldi	r24, 0x64	; 100
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
    1fac:	02 ea       	ldi	r16, 0xA2	; 162
    1fae:	12 e2       	ldi	r17, 0x22	; 34
    1fb0:	e1 2c       	mov	r14, r1
    1fb2:	f1 2c       	mov	r15, r1
    1fb4:	d0 2f       	mov	r29, r16
    1fb6:	c1 2f       	mov	r28, r17
    1fb8:	c8 01       	movw	r24, r16
    1fba:	0e 94 90 15 	call	0x2b20	; 0x2b20 <DigitalPin_GetValue>
    1fbe:	81 11       	cpse	r24, r1
    1fc0:	0c c0       	rjmp	.+24     	; 0x1fda <xRelay+0x9e>
    1fc2:	8d 2f       	mov	r24, r29
    1fc4:	9c 2f       	mov	r25, r28
    1fc6:	0e 94 90 15 	call	0x2b20	; 0x2b20 <DigitalPin_GetValue>
    1fca:	88 23       	and	r24, r24
    1fcc:	d1 f3       	breq	.-12     	; 0x1fc2 <xRelay+0x86>
    1fce:	f7 01       	movw	r30, r14
    1fd0:	ee 56       	subi	r30, 0x6E	; 110
    1fd2:	fd 4d       	sbci	r31, 0xDD	; 221
    1fd4:	80 81       	ld	r24, Z
    1fd6:	8b 25       	eor	r24, r11
    1fd8:	80 83       	st	Z, r24
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	e8 1a       	sub	r14, r24
    1fde:	f8 0a       	sbc	r15, r24
    1fe0:	0d 5f       	subi	r16, 0xFD	; 253
    1fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe4:	84 e0       	ldi	r24, 0x04	; 4
    1fe6:	e8 16       	cp	r14, r24
    1fe8:	f1 04       	cpc	r15, r1
    1fea:	21 f7       	brne	.-56     	; 0x1fb4 <xRelay+0x78>
    1fec:	86 01       	movw	r16, r12
    1fee:	c0 e0       	ldi	r28, 0x00	; 0
    1ff0:	d0 e0       	ldi	r29, 0x00	; 0
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ee 56       	subi	r30, 0x6E	; 110
    1ff6:	fd 4d       	sbci	r31, 0xDD	; 221
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 23       	and	r24, r24
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <xRelay+0xca>
    1ffe:	c8 01       	movw	r24, r16
    2000:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
    2004:	03 c0       	rjmp	.+6      	; 0x200c <xRelay+0xd0>
    2006:	c8 01       	movw	r24, r16
    2008:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
    200c:	21 96       	adiw	r28, 0x01	; 1
    200e:	0d 5f       	subi	r16, 0xFD	; 253
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	c4 30       	cpi	r28, 0x04	; 4
    2014:	d1 05       	cpc	r29, r1
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <xRelay+0xb6>
    2018:	c5 cf       	rjmp	.-118    	; 0x1fa4 <xRelay+0x68>

0000201a <xNotification>:
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	00 d0       	rcall	.+0      	; 0x2020 <xNotification+0x6>
    2020:	1f 92       	push	r1
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	ee 24       	eor	r14, r14
    2028:	ea 94       	dec	r14
    202a:	fe 2c       	mov	r15, r14
    202c:	8e 01       	movw	r16, r28
    202e:	0f 5f       	subi	r16, 0xFF	; 255
    2030:	1f 4f       	sbci	r17, 0xFF	; 255
    2032:	2f ef       	ldi	r18, 0xFF	; 255
    2034:	3f ef       	ldi	r19, 0xFF	; 255
    2036:	a9 01       	movw	r20, r18
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	cb 01       	movw	r24, r22
    203e:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <xTaskNotifyWait>
    2042:	81 30       	cpi	r24, 0x01	; 1
    2044:	61 f4       	brne	.+24     	; 0x205e <xNotification+0x44>
    2046:	87 eb       	ldi	r24, 0xB7	; 183
    2048:	92 e2       	ldi	r25, 0x22	; 34
    204a:	0e 94 80 15 	call	0x2b00	; 0x2b00 <DigitalPin_ClearValue>
    204e:	88 ec       	ldi	r24, 0xC8	; 200
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
    2056:	87 eb       	ldi	r24, 0xB7	; 183
    2058:	92 e2       	ldi	r25, 0x22	; 34
    205a:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
    205e:	84 e6       	ldi	r24, 0x64	; 100
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
    2066:	df cf       	rjmp	.-66     	; 0x2026 <xNotification+0xc>

00002068 <usart_spi_transmit_receive>:
    2068:	fc 01       	movw	r30, r24
    206a:	81 81       	ldd	r24, Z+1	; 0x01
    206c:	85 ff       	sbrs	r24, 5
    206e:	fd cf       	rjmp	.-6      	; 0x206a <usart_spi_transmit_receive+0x2>
    2070:	60 83       	st	Z, r22
    2072:	81 81       	ldd	r24, Z+1	; 0x01
    2074:	86 ff       	sbrs	r24, 6
    2076:	fd cf       	rjmp	.-6      	; 0x2072 <usart_spi_transmit_receive+0xa>
    2078:	80 e4       	ldi	r24, 0x40	; 64
    207a:	81 83       	std	Z+1, r24	; 0x01
    207c:	80 81       	ld	r24, Z
    207e:	08 95       	ret

00002080 <ssd1306_write_command>:
    2080:	1f 93       	push	r17
    2082:	cf 93       	push	r28
    2084:	df 93       	push	r29
    2086:	c0 ea       	ldi	r28, 0xA0	; 160
    2088:	d6 e0       	ldi	r29, 0x06	; 6
    208a:	18 e0       	ldi	r17, 0x08	; 8
    208c:	1e 83       	std	Y+6, r17	; 0x06
    208e:	e0 e6       	ldi	r30, 0x60	; 96
    2090:	f6 e0       	ldi	r31, 0x06	; 6
    2092:	91 e0       	ldi	r25, 0x01	; 1
    2094:	96 83       	std	Z+6, r25	; 0x06
    2096:	96 83       	std	Z+6, r25	; 0x06
    2098:	68 2f       	mov	r22, r24
    209a:	80 ea       	ldi	r24, 0xA0	; 160
    209c:	99 e0       	ldi	r25, 0x09	; 9
    209e:	0e 94 34 10 	call	0x2068	; 0x2068 <usart_spi_transmit_receive>
    20a2:	1d 83       	std	Y+5, r17	; 0x05
    20a4:	df 91       	pop	r29
    20a6:	cf 91       	pop	r28
    20a8:	1f 91       	pop	r17
    20aa:	08 95       	ret

000020ac <ssd1306_write_data>:
    20ac:	ef 92       	push	r14
    20ae:	ff 92       	push	r15
    20b0:	0f 93       	push	r16
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	c0 ea       	ldi	r28, 0xA0	; 160
    20ba:	d6 e0       	ldi	r29, 0x06	; 6
    20bc:	18 e0       	ldi	r17, 0x08	; 8
    20be:	1e 83       	std	Y+6, r17	; 0x06
    20c0:	0f 2e       	mov	r0, r31
    20c2:	f0 e6       	ldi	r31, 0x60	; 96
    20c4:	ef 2e       	mov	r14, r31
    20c6:	f6 e0       	ldi	r31, 0x06	; 6
    20c8:	ff 2e       	mov	r15, r31
    20ca:	f0 2d       	mov	r31, r0
    20cc:	01 e0       	ldi	r16, 0x01	; 1
    20ce:	f7 01       	movw	r30, r14
    20d0:	05 83       	std	Z+5, r16	; 0x05
    20d2:	68 2f       	mov	r22, r24
    20d4:	80 ea       	ldi	r24, 0xA0	; 160
    20d6:	99 e0       	ldi	r25, 0x09	; 9
    20d8:	0e 94 34 10 	call	0x2068	; 0x2068 <usart_spi_transmit_receive>
    20dc:	f7 01       	movw	r30, r14
    20de:	06 83       	std	Z+6, r16	; 0x06
    20e0:	1d 83       	std	Y+5, r17	; 0x05
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	08 95       	ret

000020f0 <ssd1306_set_page_address>:
    20f0:	87 70       	andi	r24, 0x07	; 7
    20f2:	80 6b       	ori	r24, 0xB0	; 176
    20f4:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    20f8:	08 95       	ret

000020fa <ssd1306_set_column_address>:
    20fa:	cf 93       	push	r28
    20fc:	c8 2f       	mov	r28, r24
    20fe:	8f 77       	andi	r24, 0x7F	; 127
    2100:	82 95       	swap	r24
    2102:	8f 70       	andi	r24, 0x0F	; 15
    2104:	80 61       	ori	r24, 0x10	; 16
    2106:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    210a:	8c 2f       	mov	r24, r28
    210c:	8f 70       	andi	r24, 0x0F	; 15
    210e:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <usart_init_spi>:
    2116:	cf 93       	push	r28
    2118:	df 93       	push	r29
    211a:	ec 01       	movw	r28, r24
    211c:	fb 01       	movw	r30, r22
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	8f 7e       	andi	r24, 0xEF	; 239
    2122:	8c 83       	std	Y+4, r24	; 0x04
    2124:	a0 e6       	ldi	r26, 0x60	; 96
    2126:	b6 e0       	ldi	r27, 0x06	; 6
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	11 96       	adiw	r26, 0x01	; 1
    212c:	8c 93       	st	X, r24
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	15 96       	adiw	r26, 0x05	; 5
    2132:	8c 93       	st	X, r24
    2134:	8d 81       	ldd	r24, Y+5	; 0x05
    2136:	80 6c       	ori	r24, 0xC0	; 192
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	84 81       	ldd	r24, Z+4	; 0x04
    213c:	8d 7f       	andi	r24, 0xFD	; 253
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	21 f4       	brne	.+8      	; 0x214a <usart_init_spi+0x34>
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	82 60       	ori	r24, 0x02	; 2
    2146:	8d 83       	std	Y+5, r24	; 0x05
    2148:	03 c0       	rjmp	.+6      	; 0x2150 <usart_init_spi+0x3a>
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	8d 7f       	andi	r24, 0xFD	; 253
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	85 81       	ldd	r24, Z+5	; 0x05
    2152:	88 23       	and	r24, r24
    2154:	21 f0       	breq	.+8      	; 0x215e <usart_init_spi+0x48>
    2156:	8d 81       	ldd	r24, Y+5	; 0x05
    2158:	84 60       	ori	r24, 0x04	; 4
    215a:	8d 83       	std	Y+5, r24	; 0x05
    215c:	03 c0       	rjmp	.+6      	; 0x2164 <usart_init_spi+0x4e>
    215e:	8d 81       	ldd	r24, Y+5	; 0x05
    2160:	8b 7f       	andi	r24, 0xFB	; 251
    2162:	8d 83       	std	Y+5, r24	; 0x05
    2164:	80 81       	ld	r24, Z
    2166:	91 81       	ldd	r25, Z+1	; 0x01
    2168:	a2 81       	ldd	r26, Z+2	; 0x02
    216a:	b3 81       	ldd	r27, Z+3	; 0x03
    216c:	9c 01       	movw	r18, r24
    216e:	ad 01       	movw	r20, r26
    2170:	22 0f       	add	r18, r18
    2172:	33 1f       	adc	r19, r19
    2174:	44 1f       	adc	r20, r20
    2176:	55 1f       	adc	r21, r21
    2178:	60 e0       	ldi	r22, 0x00	; 0
    217a:	78 e4       	ldi	r23, 0x48	; 72
    217c:	88 ee       	ldi	r24, 0xE8	; 232
    217e:	91 e0       	ldi	r25, 0x01	; 1
    2180:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__udivmodsi4>
    2184:	21 50       	subi	r18, 0x01	; 1
    2186:	31 09       	sbc	r19, r1
    2188:	83 2f       	mov	r24, r19
    218a:	8f 70       	andi	r24, 0x0F	; 15
    218c:	8f 83       	std	Y+7, r24	; 0x07
    218e:	2e 83       	std	Y+6, r18	; 0x06
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	88 60       	ori	r24, 0x08	; 8
    2194:	8c 83       	std	Y+4, r24	; 0x04
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	08 95       	ret

0000219c <ssd1306_init>:
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <ssd1306_init+0x6>
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <ssd1306_init+0x8>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	20 ea       	ldi	r18, 0xA0	; 160
    21aa:	36 e0       	ldi	r19, 0x06	; 6
    21ac:	88 e0       	ldi	r24, 0x08	; 8
    21ae:	d9 01       	movw	r26, r18
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	8c 93       	st	X, r24
    21b4:	a0 e6       	ldi	r26, 0x60	; 96
    21b6:	b6 e0       	ldi	r27, 0x06	; 6
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	9c 93       	st	X, r25
    21be:	11 97       	sbiw	r26, 0x01	; 1
    21c0:	e0 e0       	ldi	r30, 0x00	; 0
    21c2:	f6 e0       	ldi	r31, 0x06	; 6
    21c4:	81 83       	std	Z+1, r24	; 0x01
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	11 96       	adiw	r26, 0x01	; 1
    21ca:	9c 93       	st	X, r25
    21cc:	11 97       	sbiw	r26, 0x01	; 1
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8c 93       	st	X, r24
    21d2:	d9 01       	movw	r26, r18
    21d4:	15 96       	adiw	r26, 0x05	; 5
    21d6:	8c 93       	st	X, r24
    21d8:	86 83       	std	Z+6, r24	; 0x06
    21da:	ba e6       	ldi	r27, 0x6A	; 106
    21dc:	ba 95       	dec	r27
    21de:	f1 f7       	brne	.-4      	; 0x21dc <ssd1306_init+0x40>
    21e0:	00 c0       	rjmp	.+0      	; 0x21e2 <ssd1306_init+0x46>
    21e2:	85 83       	std	Z+5, r24	; 0x05
    21e4:	ea e6       	ldi	r30, 0x6A	; 106
    21e6:	ea 95       	dec	r30
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <ssd1306_init+0x4a>
    21ea:	00 c0       	rjmp	.+0      	; 0x21ec <ssd1306_init+0x50>
    21ec:	e0 e7       	ldi	r30, 0x70	; 112
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	84 81       	ldd	r24, Z+4	; 0x04
    21f2:	8f 7e       	andi	r24, 0xEF	; 239
    21f4:	84 83       	std	Z+4, r24	; 0x04
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	9b e1       	ldi	r25, 0x1B	; 27
    21fa:	a7 eb       	ldi	r26, 0xB7	; 183
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	ab 83       	std	Y+3, r26	; 0x03
    2204:	bc 83       	std	Y+4, r27	; 0x04
    2206:	1d 82       	std	Y+5, r1	; 0x05
    2208:	1e 82       	std	Y+6, r1	; 0x06
    220a:	be 01       	movw	r22, r28
    220c:	6f 5f       	subi	r22, 0xFF	; 255
    220e:	7f 4f       	sbci	r23, 0xFF	; 255
    2210:	80 ea       	ldi	r24, 0xA0	; 160
    2212:	99 e0       	ldi	r25, 0x09	; 9
    2214:	0e 94 8b 10 	call	0x2116	; 0x2116 <usart_init_spi>
    2218:	88 ea       	ldi	r24, 0xA8	; 168
    221a:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    221e:	8f e1       	ldi	r24, 0x1F	; 31
    2220:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2224:	83 ed       	ldi	r24, 0xD3	; 211
    2226:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2230:	80 e4       	ldi	r24, 0x40	; 64
    2232:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2236:	81 ea       	ldi	r24, 0xA1	; 161
    2238:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    223c:	88 ec       	ldi	r24, 0xC8	; 200
    223e:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2242:	8a ed       	ldi	r24, 0xDA	; 218
    2244:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2248:	82 e0       	ldi	r24, 0x02	; 2
    224a:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    224e:	81 e8       	ldi	r24, 0x81	; 129
    2250:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2254:	8f e8       	ldi	r24, 0x8F	; 143
    2256:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    225a:	84 ea       	ldi	r24, 0xA4	; 164
    225c:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2260:	86 ea       	ldi	r24, 0xA6	; 166
    2262:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2266:	85 ed       	ldi	r24, 0xD5	; 213
    2268:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    226c:	80 e8       	ldi	r24, 0x80	; 128
    226e:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2272:	8d e8       	ldi	r24, 0x8D	; 141
    2274:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2278:	84 e1       	ldi	r24, 0x14	; 20
    227a:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    227e:	8b ed       	ldi	r24, 0xDB	; 219
    2280:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2284:	80 e4       	ldi	r24, 0x40	; 64
    2286:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    228a:	89 ed       	ldi	r24, 0xD9	; 217
    228c:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2290:	81 ef       	ldi	r24, 0xF1	; 241
    2292:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    2296:	8f ea       	ldi	r24, 0xAF	; 175
    2298:	0e 94 40 10 	call	0x2080	; 0x2080 <ssd1306_write_command>
    229c:	26 96       	adiw	r28, 0x06	; 6
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	08 95       	ret

000022a8 <ssd1306_write_text>:
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	dc 01       	movw	r26, r24
    22b4:	ec 91       	ld	r30, X
    22b6:	ee 23       	and	r30, r30
    22b8:	29 f1       	breq	.+74     	; 0x2304 <ssd1306_write_text+0x5c>
    22ba:	7c 01       	movw	r14, r24
    22bc:	bf ef       	ldi	r27, 0xFF	; 255
    22be:	eb 1a       	sub	r14, r27
    22c0:	fb 0a       	sbc	r15, r27
    22c2:	ef 37       	cpi	r30, 0x7F	; 127
    22c4:	d0 f4       	brcc	.+52     	; 0x22fa <ssd1306_write_text+0x52>
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	ee 0f       	add	r30, r30
    22ca:	ff 1f       	adc	r31, r31
    22cc:	ec 56       	subi	r30, 0x6C	; 108
    22ce:	fe 4d       	sbci	r31, 0xDE	; 222
    22d0:	00 81       	ld	r16, Z
    22d2:	11 81       	ldd	r17, Z+1	; 0x01
    22d4:	f8 01       	movw	r30, r16
    22d6:	80 81       	ld	r24, Z
    22d8:	88 23       	and	r24, r24
    22da:	61 f0       	breq	.+24     	; 0x22f4 <ssd1306_write_text+0x4c>
    22dc:	c1 e0       	ldi	r28, 0x01	; 1
    22de:	f8 01       	movw	r30, r16
    22e0:	ec 0f       	add	r30, r28
    22e2:	f1 1d       	adc	r31, r1
    22e4:	80 81       	ld	r24, Z
    22e6:	0e 94 56 10 	call	0x20ac	; 0x20ac <ssd1306_write_data>
    22ea:	cf 5f       	subi	r28, 0xFF	; 255
    22ec:	d8 01       	movw	r26, r16
    22ee:	9c 91       	ld	r25, X
    22f0:	9c 17       	cp	r25, r28
    22f2:	a8 f7       	brcc	.-22     	; 0x22de <ssd1306_write_text+0x36>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	0e 94 56 10 	call	0x20ac	; 0x20ac <ssd1306_write_data>
    22fa:	d7 01       	movw	r26, r14
    22fc:	ed 91       	ld	r30, X+
    22fe:	7d 01       	movw	r14, r26
    2300:	e1 11       	cpse	r30, r1
    2302:	df cf       	rjmp	.-66     	; 0x22c2 <ssd1306_write_text+0x1a>
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	ff 90       	pop	r15
    230c:	ef 90       	pop	r14
    230e:	08 95       	ret

00002310 <xGLCD>:
    2310:	0e 94 ce 10 	call	0x219c	; 0x219c <ssd1306_init>
    2314:	c0 e0       	ldi	r28, 0x00	; 0
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <xGLCD+0x26>
    2318:	8c 2f       	mov	r24, r28
    231a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ssd1306_set_page_address>
    231e:	8d 2f       	mov	r24, r29
    2320:	0e 94 7d 10 	call	0x20fa	; 0x20fa <ssd1306_set_column_address>
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	0e 94 56 10 	call	0x20ac	; 0x20ac <ssd1306_write_data>
    232a:	df 5f       	subi	r29, 0xFF	; 255
    232c:	d0 38       	cpi	r29, 0x80	; 128
    232e:	a1 f7       	brne	.-24     	; 0x2318 <xGLCD+0x8>
    2330:	cf 5f       	subi	r28, 0xFF	; 255
    2332:	c4 30       	cpi	r28, 0x04	; 4
    2334:	11 f0       	breq	.+4      	; 0x233a <xGLCD+0x2a>
    2336:	d0 e0       	ldi	r29, 0x00	; 0
    2338:	ef cf       	rjmp	.-34     	; 0x2318 <xGLCD+0x8>
    233a:	02 e9       	ldi	r16, 0x92	; 146
    233c:	12 e2       	ldi	r17, 0x22	; 34
    233e:	33 24       	eor	r3, r3
    2340:	33 94       	inc	r3
    2342:	0f 2e       	mov	r0, r31
    2344:	ff eb       	ldi	r31, 0xBF	; 191
    2346:	af 2e       	mov	r10, r31
    2348:	f2 e2       	ldi	r31, 0x22	; 34
    234a:	bf 2e       	mov	r11, r31
    234c:	f0 2d       	mov	r31, r0
    234e:	0f 2e       	mov	r0, r31
    2350:	ff eb       	ldi	r31, 0xBF	; 191
    2352:	cf 2e       	mov	r12, r31
    2354:	f6 e9       	ldi	r31, 0x96	; 150
    2356:	df 2e       	mov	r13, r31
    2358:	f0 2d       	mov	r31, r0
    235a:	0f 2e       	mov	r0, r31
    235c:	fe ec       	ldi	r31, 0xCE	; 206
    235e:	ef 2e       	mov	r14, r31
    2360:	f2 e2       	ldi	r31, 0x22	; 34
    2362:	ff 2e       	mov	r15, r31
    2364:	f0 2d       	mov	r31, r0
    2366:	0f 2e       	mov	r0, r31
    2368:	fd ed       	ldi	r31, 0xDD	; 221
    236a:	8f 2e       	mov	r8, r31
    236c:	f6 e9       	ldi	r31, 0x96	; 150
    236e:	9f 2e       	mov	r9, r31
    2370:	f0 2d       	mov	r31, r0
    2372:	0f 2e       	mov	r0, r31
    2374:	fd ed       	ldi	r31, 0xDD	; 221
    2376:	6f 2e       	mov	r6, r31
    2378:	f2 e2       	ldi	r31, 0x22	; 34
    237a:	7f 2e       	mov	r7, r31
    237c:	f0 2d       	mov	r31, r0
    237e:	0f 2e       	mov	r0, r31
    2380:	fb ef       	ldi	r31, 0xFB	; 251
    2382:	4f 2e       	mov	r4, r31
    2384:	f6 e9       	ldi	r31, 0x96	; 150
    2386:	5f 2e       	mov	r5, r31
    2388:	f0 2d       	mov	r31, r0
    238a:	f8 01       	movw	r30, r16
    238c:	80 81       	ld	r24, Z
    238e:	83 25       	eor	r24, r3
    2390:	1f 92       	push	r1
    2392:	8f 93       	push	r24
    2394:	bf 92       	push	r11
    2396:	af 92       	push	r10
    2398:	df 92       	push	r13
    239a:	cf 92       	push	r12
    239c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
    23a0:	f8 01       	movw	r30, r16
    23a2:	81 81       	ldd	r24, Z+1	; 0x01
    23a4:	83 25       	eor	r24, r3
    23a6:	1f 92       	push	r1
    23a8:	8f 93       	push	r24
    23aa:	ff 92       	push	r15
    23ac:	ef 92       	push	r14
    23ae:	9f 92       	push	r9
    23b0:	8f 92       	push	r8
    23b2:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
    23b6:	f8 01       	movw	r30, r16
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	83 25       	eor	r24, r3
    23bc:	1f 92       	push	r1
    23be:	8f 93       	push	r24
    23c0:	7f 92       	push	r7
    23c2:	6f 92       	push	r6
    23c4:	5f 92       	push	r5
    23c6:	4f 92       	push	r4
    23c8:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
    23cc:	f8 01       	movw	r30, r16
    23ce:	83 81       	ldd	r24, Z+3	; 0x03
    23d0:	83 25       	eor	r24, r3
    23d2:	1f 92       	push	r1
    23d4:	8f 93       	push	r24
    23d6:	8c ee       	ldi	r24, 0xEC	; 236
    23d8:	92 e2       	ldi	r25, 0x22	; 34
    23da:	9f 93       	push	r25
    23dc:	8f 93       	push	r24
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	97 e9       	ldi	r25, 0x97	; 151
    23e2:	9f 93       	push	r25
    23e4:	8f 93       	push	r24
    23e6:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
    23ea:	8d b7       	in	r24, 0x3d	; 61
    23ec:	9e b7       	in	r25, 0x3e	; 62
    23ee:	48 96       	adiw	r24, 0x18	; 24
    23f0:	8d bf       	out	0x3d, r24	; 61
    23f2:	9e bf       	out	0x3e, r25	; 62
    23f4:	d0 e0       	ldi	r29, 0x00	; 0
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <xGLCD+0x106>
    23f8:	8d 2f       	mov	r24, r29
    23fa:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ssd1306_set_page_address>
    23fe:	8c 2f       	mov	r24, r28
    2400:	0e 94 7d 10 	call	0x20fa	; 0x20fa <ssd1306_set_column_address>
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	0e 94 56 10 	call	0x20ac	; 0x20ac <ssd1306_write_data>
    240a:	cf 5f       	subi	r28, 0xFF	; 255
    240c:	c0 38       	cpi	r28, 0x80	; 128
    240e:	a1 f7       	brne	.-24     	; 0x23f8 <xGLCD+0xe8>
    2410:	df 5f       	subi	r29, 0xFF	; 255
    2412:	d4 30       	cpi	r29, 0x04	; 4
    2414:	11 f0       	breq	.+4      	; 0x241a <xGLCD+0x10a>
    2416:	c0 e0       	ldi	r28, 0x00	; 0
    2418:	ef cf       	rjmp	.-34     	; 0x23f8 <xGLCD+0xe8>
    241a:	cf eb       	ldi	r28, 0xBF	; 191
    241c:	d6 e9       	ldi	r29, 0x96	; 150
    241e:	21 2c       	mov	r2, r1
    2420:	82 2d       	mov	r24, r2
    2422:	0e 94 78 10 	call	0x20f0	; 0x20f0 <ssd1306_set_page_address>
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	0e 94 7d 10 	call	0x20fa	; 0x20fa <ssd1306_set_column_address>
    242c:	ce 01       	movw	r24, r28
    242e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <ssd1306_write_text>
    2432:	23 94       	inc	r2
    2434:	6e 96       	adiw	r28, 0x1e	; 30
    2436:	94 e0       	ldi	r25, 0x04	; 4
    2438:	29 12       	cpse	r2, r25
    243a:	f2 cf       	rjmp	.-28     	; 0x2420 <xGLCD+0x110>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
    2444:	a2 cf       	rjmp	.-188    	; 0x238a <xGLCD+0x7a>

00002446 <board_config>:
uint8_t TxData[32];	
char glcd_line[4][30];

void board_config(){

	CLKSYS_Enable( OSC_RC32MEN_bm );
    2446:	e0 e5       	ldi	r30, 0x50	; 80
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    2450:	81 81       	ldd	r24, Z+1	; 0x01
    2452:	81 ff       	sbrs	r24, 1
    2454:	fd cf       	rjmp	.-6      	; 0x2450 <board_config+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	0e 94 38 16 	call	0x2c70	; 0x2c70 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <CLKSYS_Disable>

	DigitalPin_SetDir(&led1,1);
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	87 eb       	ldi	r24, 0xB7	; 183
    2466:	92 e2       	ldi	r25, 0x22	; 34
    2468:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <DigitalPin_SetDir>
	DigitalPin_SetDir(&led2,1);
    246c:	61 e0       	ldi	r22, 0x01	; 1
    246e:	84 eb       	ldi	r24, 0xB4	; 180
    2470:	92 e2       	ldi	r25, 0x22	; 34
    2472:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedR,1);
    2476:	61 e0       	ldi	r22, 0x01	; 1
    2478:	81 eb       	ldi	r24, 0xB1	; 177
    247a:	92 e2       	ldi	r25, 0x22	; 34
    247c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedG,1);
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	8e ea       	ldi	r24, 0xAE	; 174
    2484:	92 e2       	ldi	r25, 0x22	; 34
    2486:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <DigitalPin_SetDir>

	DigitalPin_SetValue(&led1);
    248a:	87 eb       	ldi	r24, 0xB7	; 183
    248c:	92 e2       	ldi	r25, 0x22	; 34
    248e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
	DigitalPin_SetValue(&led2);
    2492:	84 eb       	ldi	r24, 0xB4	; 180
    2494:	92 e2       	ldi	r25, 0x22	; 34
    2496:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedR);//off
    249a:	81 eb       	ldi	r24, 0xB1	; 177
    249c:	92 e2       	ldi	r25, 0x22	; 34
    249e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedG);//on
    24a2:	8e ea       	ldi	r24, 0xAE	; 174
    24a4:	92 e2       	ldi	r25, 0x22	; 34
    24a6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <DigitalPin_SetValue>
    24aa:	08 95       	ret

000024ac <command_handler>:

	
}


void *command_handler(char **args,int arg_count){
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	ec 01       	movw	r28, r24
	TxPayload.data = TxData;
    24b6:	e6 e4       	ldi	r30, 0x46	; 70
    24b8:	f7 e9       	ldi	r31, 0x97	; 151
    24ba:	85 e5       	ldi	r24, 0x55	; 85
    24bc:	97 e9       	ldi	r25, 0x97	; 151
    24be:	82 87       	std	Z+10, r24	; 0x0a
    24c0:	93 87       	std	Z+11, r25	; 0x0b
	TxPayload.address = 0x6565656501;
    24c2:	91 e0       	ldi	r25, 0x01	; 1
    24c4:	90 83       	st	Z, r25
    24c6:	85 e6       	ldi	r24, 0x65	; 101
    24c8:	81 83       	std	Z+1, r24	; 0x01
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	83 83       	std	Z+3, r24	; 0x03
    24ce:	84 83       	std	Z+4, r24	; 0x04
    24d0:	15 82       	std	Z+5, r1	; 0x05
    24d2:	16 82       	std	Z+6, r1	; 0x06
    24d4:	17 82       	std	Z+7, r1	; 0x07
	TxPayload.UseAck = 1;
    24d6:	91 87       	std	Z+9, r25	; 0x09
	
	if(!strcmp(args[0], "light") ) {
    24d8:	08 81       	ld	r16, Y
    24da:	19 81       	ldd	r17, Y+1	; 0x01
    24dc:	6c ef       	ldi	r22, 0xFC	; 252
    24de:	72 e2       	ldi	r23, 0x22	; 34
    24e0:	c8 01       	movw	r24, r16
    24e2:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    24e6:	89 2b       	or	r24, r25
    24e8:	09 f0       	breq	.+2      	; 0x24ec <command_handler+0x40>
    24ea:	c3 c0       	rjmp	.+390    	; 0x2672 <command_handler+0x1c6>

		
		if(!strcmp(args[1], "0")) {
    24ec:	0a 81       	ldd	r16, Y+2	; 0x02
    24ee:	1b 81       	ldd	r17, Y+3	; 0x03
    24f0:	62 e0       	ldi	r22, 0x02	; 2
    24f2:	73 e2       	ldi	r23, 0x23	; 35
    24f4:	c8 01       	movw	r24, r16
    24f6:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    24fa:	89 2b       	or	r24, r25
    24fc:	c9 f5       	brne	.+114    	; 0x2570 <command_handler+0xc4>
			if(!strcmp(args[2], "0")) {
    24fe:	0c 80       	ldd	r0, Y+4	; 0x04
    2500:	dd 81       	ldd	r29, Y+5	; 0x05
    2502:	c0 2d       	mov	r28, r0
    2504:	62 e0       	ldi	r22, 0x02	; 2
    2506:	73 e2       	ldi	r23, 0x23	; 35
    2508:	ce 01       	movw	r24, r28
    250a:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    250e:	89 2b       	or	r24, r25
    2510:	21 f4       	brne	.+8      	; 0x251a <command_handler+0x6e>
				relayState[0] = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <relayState>
    2518:	2a c1       	rjmp	.+596    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "1")) {
    251a:	6c e4       	ldi	r22, 0x4C	; 76
    251c:	73 e2       	ldi	r23, 0x23	; 35
    251e:	ce 01       	movw	r24, r28
    2520:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2524:	89 2b       	or	r24, r25
    2526:	19 f4       	brne	.+6      	; 0x252e <command_handler+0x82>
				relayState[0] = 0;
    2528:	10 92 92 22 	sts	0x2292, r1	; 0x802292 <relayState>
    252c:	20 c1       	rjmp	.+576    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "?")) {
    252e:	64 e0       	ldi	r22, 0x04	; 4
    2530:	73 e2       	ldi	r23, 0x23	; 35
    2532:	ce 01       	movw	r24, r28
    2534:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2538:	89 2b       	or	r24, r25
    253a:	09 f0       	breq	.+2      	; 0x253e <command_handler+0x92>
    253c:	18 c1       	rjmp	.+560    	; 0x276e <command_handler+0x2c2>
				sprintf(TxPayload.data, "light 0 %d", !relayState[0]);
    253e:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <relayState>
    2542:	c1 e0       	ldi	r28, 0x01	; 1
    2544:	8c 27       	eor	r24, r28
    2546:	1f 92       	push	r1
    2548:	8f 93       	push	r24
    254a:	86 e0       	ldi	r24, 0x06	; 6
    254c:	93 e2       	ldi	r25, 0x23	; 35
    254e:	9f 93       	push	r25
    2550:	8f 93       	push	r24
    2552:	85 e5       	ldi	r24, 0x55	; 85
    2554:	97 e9       	ldi	r25, 0x97	; 151
    2556:	9f 93       	push	r25
    2558:	8f 93       	push	r24
    255a:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
				sendStatus = 1;
    255e:	c0 93 b1 93 	sts	0x93B1, r28	; 0x8093b1 <sendStatus>
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	ff c0       	rjmp	.+510    	; 0x276e <command_handler+0x2c2>
			}
		}
		else if(!strcmp(args[1], "1")) {
    2570:	6c e4       	ldi	r22, 0x4C	; 76
    2572:	73 e2       	ldi	r23, 0x23	; 35
    2574:	c8 01       	movw	r24, r16
    2576:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    257a:	89 2b       	or	r24, r25
    257c:	c9 f5       	brne	.+114    	; 0x25f0 <command_handler+0x144>
			if(!strcmp(args[2], "0")) {
    257e:	0c 80       	ldd	r0, Y+4	; 0x04
    2580:	dd 81       	ldd	r29, Y+5	; 0x05
    2582:	c0 2d       	mov	r28, r0
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	73 e2       	ldi	r23, 0x23	; 35
    2588:	ce 01       	movw	r24, r28
    258a:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    258e:	89 2b       	or	r24, r25
    2590:	21 f4       	brne	.+8      	; 0x259a <command_handler+0xee>
				relayState[1] = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 93 93 22 	sts	0x2293, r24	; 0x802293 <relayState+0x1>
    2598:	ea c0       	rjmp	.+468    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "1")) {
    259a:	6c e4       	ldi	r22, 0x4C	; 76
    259c:	73 e2       	ldi	r23, 0x23	; 35
    259e:	ce 01       	movw	r24, r28
    25a0:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    25a4:	89 2b       	or	r24, r25
    25a6:	19 f4       	brne	.+6      	; 0x25ae <command_handler+0x102>
				relayState[1] = 0;
    25a8:	10 92 93 22 	sts	0x2293, r1	; 0x802293 <relayState+0x1>
    25ac:	e0 c0       	rjmp	.+448    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "?")) {
    25ae:	64 e0       	ldi	r22, 0x04	; 4
    25b0:	73 e2       	ldi	r23, 0x23	; 35
    25b2:	ce 01       	movw	r24, r28
    25b4:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    25b8:	89 2b       	or	r24, r25
    25ba:	09 f0       	breq	.+2      	; 0x25be <command_handler+0x112>
    25bc:	d8 c0       	rjmp	.+432    	; 0x276e <command_handler+0x2c2>
				sprintf(TxPayload.data, "light 1 %d", !relayState[1]);
    25be:	80 91 93 22 	lds	r24, 0x2293	; 0x802293 <relayState+0x1>
    25c2:	c1 e0       	ldi	r28, 0x01	; 1
    25c4:	8c 27       	eor	r24, r28
    25c6:	1f 92       	push	r1
    25c8:	8f 93       	push	r24
    25ca:	81 e1       	ldi	r24, 0x11	; 17
    25cc:	93 e2       	ldi	r25, 0x23	; 35
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	85 e5       	ldi	r24, 0x55	; 85
    25d4:	97 e9       	ldi	r25, 0x97	; 151
    25d6:	9f 93       	push	r25
    25d8:	8f 93       	push	r24
    25da:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
				sendStatus = 1;
    25de:	c0 93 b1 93 	sts	0x93B1, r28	; 0x8093b1 <sendStatus>
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	bf c0       	rjmp	.+382    	; 0x276e <command_handler+0x2c2>
			}
		}
		else if(!strcmp(args[1], "2")) {
    25f0:	6f e4       	ldi	r22, 0x4F	; 79
    25f2:	73 e2       	ldi	r23, 0x23	; 35
    25f4:	c8 01       	movw	r24, r16
    25f6:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    25fa:	89 2b       	or	r24, r25
    25fc:	09 f0       	breq	.+2      	; 0x2600 <command_handler+0x154>
    25fe:	b7 c0       	rjmp	.+366    	; 0x276e <command_handler+0x2c2>
			if(!strcmp(args[2], "0")) {
    2600:	0c 80       	ldd	r0, Y+4	; 0x04
    2602:	dd 81       	ldd	r29, Y+5	; 0x05
    2604:	c0 2d       	mov	r28, r0
    2606:	62 e0       	ldi	r22, 0x02	; 2
    2608:	73 e2       	ldi	r23, 0x23	; 35
    260a:	ce 01       	movw	r24, r28
    260c:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2610:	89 2b       	or	r24, r25
    2612:	21 f4       	brne	.+8      	; 0x261c <command_handler+0x170>
				relayState[2] = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <relayState+0x2>
    261a:	a9 c0       	rjmp	.+338    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "1")) {
    261c:	6c e4       	ldi	r22, 0x4C	; 76
    261e:	73 e2       	ldi	r23, 0x23	; 35
    2620:	ce 01       	movw	r24, r28
    2622:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2626:	89 2b       	or	r24, r25
    2628:	19 f4       	brne	.+6      	; 0x2630 <command_handler+0x184>
				relayState[2] = 0;
    262a:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <relayState+0x2>
    262e:	9f c0       	rjmp	.+318    	; 0x276e <command_handler+0x2c2>
			}
			else if(!strcmp(args[2], "?")) {
    2630:	64 e0       	ldi	r22, 0x04	; 4
    2632:	73 e2       	ldi	r23, 0x23	; 35
    2634:	ce 01       	movw	r24, r28
    2636:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    263a:	89 2b       	or	r24, r25
    263c:	09 f0       	breq	.+2      	; 0x2640 <command_handler+0x194>
    263e:	97 c0       	rjmp	.+302    	; 0x276e <command_handler+0x2c2>
				sprintf(TxPayload.data, "light 2 %d", !relayState[2]);
    2640:	80 91 94 22 	lds	r24, 0x2294	; 0x802294 <relayState+0x2>
    2644:	c1 e0       	ldi	r28, 0x01	; 1
    2646:	8c 27       	eor	r24, r28
    2648:	1f 92       	push	r1
    264a:	8f 93       	push	r24
    264c:	8c e1       	ldi	r24, 0x1C	; 28
    264e:	93 e2       	ldi	r25, 0x23	; 35
    2650:	9f 93       	push	r25
    2652:	8f 93       	push	r24
    2654:	85 e5       	ldi	r24, 0x55	; 85
    2656:	97 e9       	ldi	r25, 0x97	; 151
    2658:	9f 93       	push	r25
    265a:	8f 93       	push	r24
    265c:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
				sendStatus = 1;
    2660:	c0 93 b1 93 	sts	0x93B1, r28	; 0x8093b1 <sendStatus>
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	7e c0       	rjmp	.+252    	; 0x276e <command_handler+0x2c2>
			}
		}
	}
	else if(!strcmp(args[0], "fan") ) {
    2672:	67 e2       	ldi	r22, 0x27	; 39
    2674:	73 e2       	ldi	r23, 0x23	; 35
    2676:	c8 01       	movw	r24, r16
    2678:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    267c:	89 2b       	or	r24, r25
    267e:	c9 f5       	brne	.+114    	; 0x26f2 <command_handler+0x246>
		if(!strcmp(args[1], "0")) {
    2680:	0a 80       	ldd	r0, Y+2	; 0x02
    2682:	db 81       	ldd	r29, Y+3	; 0x03
    2684:	c0 2d       	mov	r28, r0
    2686:	62 e0       	ldi	r22, 0x02	; 2
    2688:	73 e2       	ldi	r23, 0x23	; 35
    268a:	ce 01       	movw	r24, r28
    268c:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2690:	89 2b       	or	r24, r25
    2692:	21 f4       	brne	.+8      	; 0x269c <command_handler+0x1f0>
			relayState[3] = 1;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <relayState+0x3>
    269a:	69 c0       	rjmp	.+210    	; 0x276e <command_handler+0x2c2>
		}
		else if(!strcmp(args[1], "1")) {
    269c:	6c e4       	ldi	r22, 0x4C	; 76
    269e:	73 e2       	ldi	r23, 0x23	; 35
    26a0:	ce 01       	movw	r24, r28
    26a2:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    26a6:	89 2b       	or	r24, r25
    26a8:	19 f4       	brne	.+6      	; 0x26b0 <command_handler+0x204>
			relayState[3] = 0;
    26aa:	10 92 95 22 	sts	0x2295, r1	; 0x802295 <relayState+0x3>
    26ae:	5f c0       	rjmp	.+190    	; 0x276e <command_handler+0x2c2>
		}
		else if(!strcmp(args[1], "?")) {
    26b0:	64 e0       	ldi	r22, 0x04	; 4
    26b2:	73 e2       	ldi	r23, 0x23	; 35
    26b4:	ce 01       	movw	r24, r28
    26b6:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    26ba:	89 2b       	or	r24, r25
    26bc:	09 f0       	breq	.+2      	; 0x26c0 <command_handler+0x214>
    26be:	57 c0       	rjmp	.+174    	; 0x276e <command_handler+0x2c2>
			sprintf(TxPayload.data, "fan %d", !relayState[3]);
    26c0:	80 91 95 22 	lds	r24, 0x2295	; 0x802295 <relayState+0x3>
    26c4:	c1 e0       	ldi	r28, 0x01	; 1
    26c6:	8c 27       	eor	r24, r28
    26c8:	1f 92       	push	r1
    26ca:	8f 93       	push	r24
    26cc:	8b e2       	ldi	r24, 0x2B	; 43
    26ce:	93 e2       	ldi	r25, 0x23	; 35
    26d0:	9f 93       	push	r25
    26d2:	8f 93       	push	r24
    26d4:	85 e5       	ldi	r24, 0x55	; 85
    26d6:	97 e9       	ldi	r25, 0x97	; 151
    26d8:	9f 93       	push	r25
    26da:	8f 93       	push	r24
    26dc:	0e 94 a0 1b 	call	0x3740	; 0x3740 <sprintf>
			sendStatus = 1;
    26e0:	c0 93 b1 93 	sts	0x93B1, r28	; 0x8093b1 <sendStatus>
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	0f 90       	pop	r0
    26ee:	0f 90       	pop	r0
    26f0:	3e c0       	rjmp	.+124    	; 0x276e <command_handler+0x2c2>
		}
	}
	else if(!strcmp(args[0], "all") ) {
    26f2:	62 e3       	ldi	r22, 0x32	; 50
    26f4:	73 e2       	ldi	r23, 0x23	; 35
    26f6:	c8 01       	movw	r24, r16
    26f8:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    26fc:	89 2b       	or	r24, r25
    26fe:	01 f5       	brne	.+64     	; 0x2740 <command_handler+0x294>
		if(!strcmp(args[1], "0")) {
    2700:	0a 80       	ldd	r0, Y+2	; 0x02
    2702:	db 81       	ldd	r29, Y+3	; 0x03
    2704:	c0 2d       	mov	r28, r0
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	73 e2       	ldi	r23, 0x23	; 35
    270a:	ce 01       	movw	r24, r28
    270c:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2710:	89 2b       	or	r24, r25
    2712:	41 f4       	brne	.+16     	; 0x2724 <command_handler+0x278>
			relayState[0] = 1;
    2714:	e2 e9       	ldi	r30, 0x92	; 146
    2716:	f2 e2       	ldi	r31, 0x22	; 34
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	80 83       	st	Z, r24
			relayState[1] = 1;
    271c:	81 83       	std	Z+1, r24	; 0x01
			relayState[2] = 1;
    271e:	82 83       	std	Z+2, r24	; 0x02
			relayState[3] = 1;
    2720:	83 83       	std	Z+3, r24	; 0x03
    2722:	25 c0       	rjmp	.+74     	; 0x276e <command_handler+0x2c2>
		}
		else if(!strcmp(args[1], "1")) {
    2724:	6c e4       	ldi	r22, 0x4C	; 76
    2726:	73 e2       	ldi	r23, 0x23	; 35
    2728:	ce 01       	movw	r24, r28
    272a:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    272e:	89 2b       	or	r24, r25
    2730:	f1 f4       	brne	.+60     	; 0x276e <command_handler+0x2c2>
			relayState[0] = 0;
    2732:	e2 e9       	ldi	r30, 0x92	; 146
    2734:	f2 e2       	ldi	r31, 0x22	; 34
    2736:	10 82       	st	Z, r1
			relayState[1] = 0;
    2738:	11 82       	std	Z+1, r1	; 0x01
			relayState[2] = 0;
    273a:	12 82       	std	Z+2, r1	; 0x02
			relayState[3] = 0;
    273c:	13 82       	std	Z+3, r1	; 0x03
    273e:	17 c0       	rjmp	.+46     	; 0x276e <command_handler+0x2c2>
		}
	}
	else if(!strcmp(args[0], "status") ) {
    2740:	66 e3       	ldi	r22, 0x36	; 54
    2742:	73 e2       	ldi	r23, 0x23	; 35
    2744:	c8 01       	movw	r24, r16
    2746:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    274a:	89 2b       	or	r24, r25
    274c:	21 f4       	brne	.+8      	; 0x2756 <command_handler+0x2aa>

		sendStatus = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	80 93 b1 93 	sts	0x93B1, r24	; 0x8093b1 <sendStatus>
    2754:	0c c0       	rjmp	.+24     	; 0x276e <command_handler+0x2c2>
	}
	else if(!strcmp(args[0],"bootloader")){
    2756:	6d e3       	ldi	r22, 0x3D	; 61
    2758:	73 e2       	ldi	r23, 0x23	; 35
    275a:	c8 01       	movw	r24, r16
    275c:	0e 94 29 1b 	call	0x3652	; 0x3652 <strcmp>
    2760:	89 2b       	or	r24, r25
    2762:	29 f4       	brne	.+10     	; 0x276e <command_handler+0x2c2>
		uint8_t jmpE = (uint8_t)((BOOT_SECTION_START/2)>>16);
		uint8_t jmpH = (uint8_t)((BOOT_SECTION_START/2)>>8);
		uint8_t jmpL = (uint8_t)((BOOT_SECTION_START/2)>>0);
		//cli();
		//CCPWrite(&(PMIC.CTRL), PMIC_IVSEL_bm );
		asm("ldi ZH, %0"::"i" (jmpH):"r30","r31");
    2764:	f0 e0       	ldi	r31, 0x00	; 0
		asm("ldi ZL, %0"::"i" (jmpL):"r30","r31");
    2766:	e0 e0       	ldi	r30, 0x00	; 0
		EIND = jmpE;
    2768:	83 e0       	ldi	r24, 0x03	; 3
    276a:	8c bf       	out	0x3c, r24	; 60
		asm("eijmp");
    276c:	19 94       	eijmp
	else{
		//no recognized command
	}

	return 0;
}
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	df 91       	pop	r29
    2774:	cf 91       	pop	r28
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	08 95       	ret

0000277c <command_parse_execute>:

void command_parse_execute(char *command){
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	0f 93       	push	r16
    2782:	1f 93       	push	r17
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	64 97       	sbiw	r28, 0x14	; 20
    278e:	cd bf       	out	0x3d, r28	; 61
    2790:	de bf       	out	0x3e, r29	; 62

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
    2792:	68 e4       	ldi	r22, 0x48	; 72
    2794:	73 e2       	ldi	r23, 0x23	; 35
    2796:	0e 94 25 1b 	call	0x364a	; 0x364a <strtok>
	while(pch != NULL) {
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	d9 f0       	breq	.+54     	; 0x27d4 <command_parse_execute+0x58>
		remotch_args[arg_index] = pch;
    279e:	89 83       	std	Y+1, r24	; 0x01
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	7e 01       	movw	r14, r28
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	e8 0e       	add	r14, r24
    27a8:	f1 1c       	adc	r15, r1
    27aa:	01 e0       	ldi	r16, 0x01	; 1
    27ac:	10 e0       	ldi	r17, 0x00	; 0
    27ae:	09 c0       	rjmp	.+18     	; 0x27c2 <command_parse_execute+0x46>
    27b0:	f7 01       	movw	r30, r14
    27b2:	81 93       	st	Z+, r24
    27b4:	91 93       	st	Z+, r25
    27b6:	7f 01       	movw	r14, r30
		arg_index++;
    27b8:	0f 5f       	subi	r16, 0xFF	; 255
    27ba:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
    27bc:	0a 30       	cpi	r16, 0x0A	; 10
    27be:	11 05       	cpc	r17, r1
    27c0:	59 f0       	breq	.+22     	; 0x27d8 <command_parse_execute+0x5c>
		pch = strtok (NULL, " ,");
    27c2:	68 e4       	ldi	r22, 0x48	; 72
    27c4:	73 e2       	ldi	r23, 0x23	; 35
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 25 1b 	call	0x364a	; 0x364a <strtok>

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	79 f7       	brne	.-34     	; 0x27b0 <command_parse_execute+0x34>
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <command_parse_execute+0x5c>
	return 0;
}

void command_parse_execute(char *command){

	int arg_index = 0;
    27d4:	00 e0       	ldi	r16, 0x00	; 0
    27d6:	10 e0       	ldi	r17, 0x00	; 0
		remotch_args[arg_index] = pch;
		arg_index++;
		if(arg_index >=10) break;
		pch = strtok (NULL, " ,");
	}
	command_handler(remotch_args,arg_index);
    27d8:	b8 01       	movw	r22, r16
    27da:	ce 01       	movw	r24, r28
    27dc:	01 96       	adiw	r24, 0x01	; 1
    27de:	0e 94 56 12 	call	0x24ac	; 0x24ac <command_handler>
}
    27e2:	64 96       	adiw	r28, 0x14	; 20
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	de bf       	out	0x3e, r29	; 62
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	1f 91       	pop	r17
    27ee:	0f 91       	pop	r16
    27f0:	ff 90       	pop	r15
    27f2:	ef 90       	pop	r14
    27f4:	08 95       	ret

000027f6 <RadioReset>:
RadioConfig_t RadioConfig;
RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){

	RadioConfig.DataReadyInterruptEnabled = 0;
    27f6:	eb eb       	ldi	r30, 0xBB	; 187
    27f8:	f3 e9       	ldi	r31, 0x93	; 147
    27fa:	10 82       	st	Z, r1
	RadioConfig.DataSentInterruptFlagEnabled = 0;
    27fc:	11 82       	std	Z+1, r1	; 0x01
	RadioConfig.MaxRetryInterruptFlagEnabled = 0;
    27fe:	12 82       	std	Z+2, r1	; 0x02
	RadioConfig.Crc = CONFIG_CRC_16BIT;
    2800:	8c e0       	ldi	r24, 0x0C	; 12
    2802:	83 83       	std	Z+3, r24	; 0x03
	RadioConfig.AutoReTransmissionCount = 15;
    2804:	8f e0       	ldi	r24, 0x0F	; 15
    2806:	84 83       	std	Z+4, r24	; 0x04
	RadioConfig.AutoReTransmitDelayX250us = 15;
    2808:	85 83       	std	Z+5, r24	; 0x05
	RadioConfig.frequencyOffset = 2;
    280a:	42 e0       	ldi	r20, 0x02	; 2
    280c:	46 83       	std	Z+6, r20	; 0x06
	RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
    280e:	88 e0       	ldi	r24, 0x08	; 8
    2810:	87 83       	std	Z+7, r24	; 0x07
	RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
    2812:	86 e0       	ldi	r24, 0x06	; 6
    2814:	80 87       	std	Z+8, r24	; 0x08
	RadioConfig.PllLock = 0;
    2816:	11 86       	std	Z+9, r1	; 0x09
	RadioConfig.ContWaveEnabled = 0;
    2818:	12 86       	std	Z+10, r1	; 0x0a
	RadioConfig.FeatureDynamicPayloadEnabled = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	83 87       	std	Z+11, r24	; 0x0b
	RadioConfig.FeaturePayloadWithAckEnabled = 1;
    281e:	84 87       	std	Z+12, r24	; 0x0c
	RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
    2820:	85 87       	std	Z+13, r24	; 0x0d
  
    RxPipeConfig[0].address = 0x11223344EE;
    2822:	e1 ed       	ldi	r30, 0xD1	; 209
    2824:	f3 e9       	ldi	r31, 0x93	; 147
    2826:	9e ee       	ldi	r25, 0xEE	; 238
    2828:	92 83       	std	Z+2, r25	; 0x02
    282a:	94 e4       	ldi	r25, 0x44	; 68
    282c:	93 83       	std	Z+3, r25	; 0x03
    282e:	93 e3       	ldi	r25, 0x33	; 51
    2830:	94 83       	std	Z+4, r25	; 0x04
    2832:	92 e2       	ldi	r25, 0x22	; 34
    2834:	95 83       	std	Z+5, r25	; 0x05
    2836:	91 e1       	ldi	r25, 0x11	; 17
    2838:	96 83       	std	Z+6, r25	; 0x06
    283a:	17 82       	std	Z+7, r1	; 0x07
    283c:	10 86       	std	Z+8, r1	; 0x08
    283e:	11 86       	std	Z+9, r1	; 0x09
    RxPipeConfig[1].address = 0x9A4524CE01;
    2840:	86 87       	std	Z+14, r24	; 0x0e
    2842:	3e ec       	ldi	r19, 0xCE	; 206
    2844:	37 87       	std	Z+15, r19	; 0x0f
    2846:	24 e2       	ldi	r18, 0x24	; 36
    2848:	20 8b       	std	Z+16, r18	; 0x10
    284a:	95 e4       	ldi	r25, 0x45	; 69
    284c:	91 8b       	std	Z+17, r25	; 0x11
    284e:	8a e9       	ldi	r24, 0x9A	; 154
    2850:	82 8b       	std	Z+18, r24	; 0x12
    2852:	13 8a       	std	Z+19, r1	; 0x13
    2854:	14 8a       	std	Z+20, r1	; 0x14
    2856:	15 8a       	std	Z+21, r1	; 0x15
    RxPipeConfig[2].address = 0x9A4524CE02;
    2858:	42 8f       	std	Z+26, r20	; 0x1a
    285a:	33 8f       	std	Z+27, r19	; 0x1b
    285c:	24 8f       	std	Z+28, r18	; 0x1c
    285e:	95 8f       	std	Z+29, r25	; 0x1d
    2860:	86 8f       	std	Z+30, r24	; 0x1e
    2862:	17 8e       	std	Z+31, r1	; 0x1f
    2864:	10 a2       	std	Z+32, r1	; 0x20
    2866:	11 a2       	std	Z+33, r1	; 0x21
    RxPipeConfig[3].address = 0x9A4524CE03;
    2868:	43 e0       	ldi	r20, 0x03	; 3
    286a:	46 a3       	std	Z+38, r20	; 0x26
    286c:	37 a3       	std	Z+39, r19	; 0x27
    286e:	20 a7       	std	Z+40, r18	; 0x28
    2870:	91 a7       	std	Z+41, r25	; 0x29
    2872:	82 a7       	std	Z+42, r24	; 0x2a
    2874:	13 a6       	std	Z+43, r1	; 0x2b
    2876:	14 a6       	std	Z+44, r1	; 0x2c
    2878:	15 a6       	std	Z+45, r1	; 0x2d
    RxPipeConfig[4].address = 0x9A4524CE04;
    287a:	44 e0       	ldi	r20, 0x04	; 4
    287c:	42 ab       	std	Z+50, r20	; 0x32
    287e:	33 ab       	std	Z+51, r19	; 0x33
    2880:	24 ab       	std	Z+52, r18	; 0x34
    2882:	95 ab       	std	Z+53, r25	; 0x35
    2884:	86 ab       	std	Z+54, r24	; 0x36
    2886:	17 aa       	std	Z+55, r1	; 0x37
    2888:	10 ae       	std	Z+56, r1	; 0x38
    288a:	11 ae       	std	Z+57, r1	; 0x39
    RxPipeConfig[5].address = 0x9A4524CE05;
    288c:	ef e0       	ldi	r30, 0x0F	; 15
    288e:	f4 e9       	ldi	r31, 0x94	; 148
    2890:	45 e0       	ldi	r20, 0x05	; 5
    2892:	40 83       	st	Z, r20
    2894:	31 83       	std	Z+1, r19	; 0x01
    2896:	22 83       	std	Z+2, r18	; 0x02
    2898:	93 83       	std	Z+3, r25	; 0x03
    289a:	84 83       	std	Z+4, r24	; 0x04
    289c:	15 82       	std	Z+5, r1	; 0x05
    289e:	16 82       	std	Z+6, r1	; 0x06
    28a0:	17 82       	std	Z+7, r1	; 0x07
    28a2:	e1 ed       	ldi	r30, 0xD1	; 209
    28a4:	f3 e9       	ldi	r31, 0x93	; 147
    28a6:	29 e1       	ldi	r18, 0x19	; 25
    28a8:	34 e9       	ldi	r19, 0x94	; 148

  
	int i;
	for(i=0;i<6;i++){
		RxPipeConfig[i].PipeEnabled = 1;
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	80 83       	st	Z, r24
		RxPipeConfig[i].autoAckEnabled = 1;
    28ae:	81 83       	std	Z+1, r24	; 0x01
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
    28b0:	83 87       	std	Z+11, r24	; 0x0b
    28b2:	3c 96       	adiw	r30, 0x0c	; 12
    RxPipeConfig[4].address = 0x9A4524CE04;
    RxPipeConfig[5].address = 0x9A4524CE05;

  
	int i;
	for(i=0;i<6;i++){
    28b4:	e2 17       	cp	r30, r18
    28b6:	f3 07       	cpc	r31, r19
    28b8:	c9 f7       	brne	.-14     	; 0x28ac <RadioReset+0xb6>
		RxPipeConfig[i].autoAckEnabled = 1;
		RxPipeConfig[i].dynamicPayloadEnabled = 1;
	}
  
  
	ResetConfigValues(&RadioConfig, RxPipeConfig);
    28ba:	61 ed       	ldi	r22, 0xD1	; 209
    28bc:	73 e9       	ldi	r23, 0x93	; 147
    28be:	8b eb       	ldi	r24, 0xBB	; 187
    28c0:	93 e9       	ldi	r25, 0x93	; 147
    28c2:	0e 94 06 02 	call	0x40c	; 0x40c <ResetConfigValues>
    28c6:	08 95       	ret

000028c8 <xRadio>:
}



void xRadio( void *pvParameters ){
    28c8:	cf 93       	push	r28
    28ca:	df 93       	push	r29
    28cc:	cd b7       	in	r28, 0x3d	; 61
    28ce:	de b7       	in	r29, 0x3e	; 62
    28d0:	a0 97       	sbiw	r28, 0x20	; 32
    28d2:	cd bf       	out	0x3d, r28	; 61
    28d4:	de bf       	out	0x3e, r29	; 62
	
  RadioReset();
    28d6:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <RadioReset>

  char myMesg[32];

  Rxpayload.UseAck = 1;
    28da:	e7 e3       	ldi	r30, 0x37	; 55
    28dc:	f7 e9       	ldi	r31, 0x97	; 151
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	81 87       	std	Z+9, r24	; 0x09
  

  Rxpayload.address = 0x11223344EE;
    28e2:	8e ee       	ldi	r24, 0xEE	; 238
    28e4:	80 83       	st	Z, r24
    28e6:	84 e4       	ldi	r24, 0x44	; 68
    28e8:	81 83       	std	Z+1, r24	; 0x01
    28ea:	83 e3       	ldi	r24, 0x33	; 51
    28ec:	82 83       	std	Z+2, r24	; 0x02
    28ee:	82 e2       	ldi	r24, 0x22	; 34
    28f0:	83 83       	std	Z+3, r24	; 0x03
    28f2:	81 e1       	ldi	r24, 0x11	; 17
    28f4:	84 83       	std	Z+4, r24	; 0x04
    28f6:	15 82       	std	Z+5, r1	; 0x05
    28f8:	16 82       	std	Z+6, r1	; 0x06
    28fa:	17 82       	std	Z+7, r1	; 0x07
  Rxpayload.data = (uint8_t*)myMesg;
    28fc:	ce 01       	movw	r24, r28
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	82 87       	std	Z+10, r24	; 0x0a
    2902:	93 87       	std	Z+11, r25	; 0x0b
  Rxpayload.length = strlen(myMesg);
    2904:	dc 01       	movw	r26, r24
    2906:	0d 90       	ld	r0, X+
    2908:	00 20       	and	r0, r0
    290a:	e9 f7       	brne	.-6      	; 0x2906 <xRadio+0x3e>
    290c:	11 97       	sbiw	r26, 0x01	; 1
    290e:	a8 1b       	sub	r26, r24
    2910:	b9 0b       	sbc	r27, r25
    2912:	a4 87       	std	Z+12, r26	; 0x0c
    2914:	b5 87       	std	Z+13, r27	; 0x0d
  Rxpayload.retransmitCount = 15;
    2916:	8f e0       	ldi	r24, 0x0F	; 15
    2918:	86 87       	std	Z+14, r24	; 0x0e

			xTaskNotify ( xNotificationHandle, (1<<0), eSetBits);


			//Payload_t payload;
			Rxpayload.data = RxData;
    291a:	7f 01       	movw	r14, r30
    291c:	0f 2e       	mov	r0, r31
    291e:	f5 e7       	ldi	r31, 0x75	; 117
    2920:	af 2e       	mov	r10, r31
    2922:	f7 e9       	ldi	r31, 0x97	; 151
    2924:	bf 2e       	mov	r11, r31
    2926:	f0 2d       	mov	r31, r0

		}
		
		if(sendStatus == 1) {

			TxPayload.length= strlen(TxPayload.data);
    2928:	0f 2e       	mov	r0, r31
    292a:	f6 e4       	ldi	r31, 0x46	; 70
    292c:	cf 2e       	mov	r12, r31
    292e:	f7 e9       	ldi	r31, 0x97	; 151
    2930:	df 2e       	mov	r13, r31
    2932:	f0 2d       	mov	r31, r0
  Rxpayload.length = strlen(myMesg);
  Rxpayload.retransmitCount = 15;

  
	while(1){
		if(readable()){
    2934:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <readable>
    2938:	88 23       	and	r24, r24
    293a:	59 f1       	breq	.+86     	; 0x2992 <xRadio+0xca>

			xTaskNotify ( xNotificationHandle, (1<<0), eSetBits);
    293c:	00 e0       	ldi	r16, 0x00	; 0
    293e:	10 e0       	ldi	r17, 0x00	; 0
    2940:	21 e0       	ldi	r18, 0x01	; 1
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	50 e0       	ldi	r21, 0x00	; 0
    2946:	60 e0       	ldi	r22, 0x00	; 0
    2948:	70 e0       	ldi	r23, 0x00	; 0
    294a:	80 91 b2 93 	lds	r24, 0x93B2	; 0x8093b2 <xNotificationHandle>
    294e:	90 91 b3 93 	lds	r25, 0x93B3	; 0x8093b3 <xNotificationHandle+0x1>
    2952:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTaskGenericNotify>


			//Payload_t payload;
			Rxpayload.data = RxData;
    2956:	d7 01       	movw	r26, r14
    2958:	1a 96       	adiw	r26, 0x0a	; 10
    295a:	ad 92       	st	X+, r10
    295c:	bc 92       	st	X, r11
    295e:	1b 97       	sbiw	r26, 0x0b	; 11
          
			clear_data_ready_flag();
    2960:	0e 94 b2 06 	call	0xd64	; 0xd64 <clear_data_ready_flag>
			readPayload(&Rxpayload);
    2964:	c7 01       	movw	r24, r14
    2966:	0e 94 28 03 	call	0x650	; 0x650 <readPayload>
			Rxpayload.data[Rxpayload.length] = '\0';
    296a:	d7 01       	movw	r26, r14
    296c:	1a 96       	adiw	r26, 0x0a	; 10
    296e:	ed 91       	ld	r30, X+
    2970:	fc 91       	ld	r31, X
    2972:	1b 97       	sbiw	r26, 0x0b	; 11
    2974:	1c 96       	adiw	r26, 0x0c	; 12
    2976:	8d 91       	ld	r24, X+
    2978:	9c 91       	ld	r25, X
    297a:	1d 97       	sbiw	r26, 0x0d	; 13
    297c:	e8 0f       	add	r30, r24
    297e:	f9 1f       	adc	r31, r25
    2980:	10 82       	st	Z, r1
			command_parse_execute(Rxpayload.data);
    2982:	1a 96       	adiw	r26, 0x0a	; 10
    2984:	8d 91       	ld	r24, X+
    2986:	9c 91       	ld	r25, X
    2988:	1b 97       	sbiw	r26, 0x0b	; 11
    298a:	0e 94 be 13 	call	0x277c	; 0x277c <command_parse_execute>

			flush_rx();
    298e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <flush_rx>

		}
		
		if(sendStatus == 1) {
    2992:	80 91 b1 93 	lds	r24, 0x93B1	; 0x8093b1 <sendStatus>
    2996:	88 23       	and	r24, r24
    2998:	d1 f0       	breq	.+52     	; 0x29ce <xRadio+0x106>

			TxPayload.length= strlen(TxPayload.data);
    299a:	f6 01       	movw	r30, r12
    299c:	a2 85       	ldd	r26, Z+10	; 0x0a
    299e:	b3 85       	ldd	r27, Z+11	; 0x0b
    29a0:	fd 01       	movw	r30, r26
    29a2:	01 90       	ld	r0, Z+
    29a4:	00 20       	and	r0, r0
    29a6:	e9 f7       	brne	.-6      	; 0x29a2 <xRadio+0xda>
    29a8:	31 97       	sbiw	r30, 0x01	; 1
    29aa:	ea 1b       	sub	r30, r26
    29ac:	fb 0b       	sbc	r31, r27
    29ae:	d6 01       	movw	r26, r12
    29b0:	1c 96       	adiw	r26, 0x0c	; 12
    29b2:	ed 93       	st	X+, r30
    29b4:	fc 93       	st	X, r31
    29b6:	1d 97       	sbiw	r26, 0x0d	; 13
			TransmitPayload(&TxPayload);
    29b8:	c6 01       	movw	r24, r12
    29ba:	0e 94 48 03 	call	0x690	; 0x690 <TransmitPayload>
			*TxPayload.data = NULL;
    29be:	d6 01       	movw	r26, r12
    29c0:	1a 96       	adiw	r26, 0x0a	; 10
    29c2:	ed 91       	ld	r30, X+
    29c4:	fc 91       	ld	r31, X
    29c6:	1b 97       	sbiw	r26, 0x0b	; 11
    29c8:	10 82       	st	Z, r1

			sendStatus = 0;
    29ca:	10 92 b1 93 	sts	0x93B1, r1	; 0x8093b1 <sendStatus>
		}
		
		
    
		vTaskDelay(200);
    29ce:	88 ec       	ldi	r24, 0xC8	; 200
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vTaskDelay>
		//_SFR_MEM8(0x002E) = 'E';
		//_SFR_IO8(0x004E) = "M";
		
		
		//OCD.OCDR1 = 'M';
	}
    29d6:	ae cf       	rjmp	.-164    	; 0x2934 <xRadio+0x6c>

000029d8 <main>:
 *  setup of all components and the main program loop.
 */
int main(void)
{

	board_config();
    29d8:	0e 94 23 12 	call	0x2446	; 0x2446 <board_config>
	
	xTaskCreate(xRadio,(signed portCHAR *) "t1", 500, NULL, tskIDLE_PRIORITY, &xRadioHandle );
    29dc:	0f 2e       	mov	r0, r31
    29de:	f8 eb       	ldi	r31, 0xB8	; 184
    29e0:	ef 2e       	mov	r14, r31
    29e2:	f3 e9       	ldi	r31, 0x93	; 147
    29e4:	ff 2e       	mov	r15, r31
    29e6:	f0 2d       	mov	r31, r0
    29e8:	00 e0       	ldi	r16, 0x00	; 0
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	44 ef       	ldi	r20, 0xF4	; 244
    29f0:	51 e0       	ldi	r21, 0x01	; 1
    29f2:	6b e4       	ldi	r22, 0x4B	; 75
    29f4:	73 e2       	ldi	r23, 0x23	; 35
    29f6:	84 e6       	ldi	r24, 0x64	; 100
    29f8:	94 e1       	ldi	r25, 0x14	; 20
    29fa:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xTaskCreate>
	xTaskCreate(xRelay,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, &xRelayHandle );
    29fe:	0f 2e       	mov	r0, r31
    2a00:	f6 eb       	ldi	r31, 0xB6	; 182
    2a02:	ef 2e       	mov	r14, r31
    2a04:	f3 e9       	ldi	r31, 0x93	; 147
    2a06:	ff 2e       	mov	r15, r31
    2a08:	f0 2d       	mov	r31, r0
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	44 ef       	ldi	r20, 0xF4	; 244
    2a10:	51 e0       	ldi	r21, 0x01	; 1
    2a12:	6e e4       	ldi	r22, 0x4E	; 78
    2a14:	73 e2       	ldi	r23, 0x23	; 35
    2a16:	8e e9       	ldi	r24, 0x9E	; 158
    2a18:	9f e0       	ldi	r25, 0x0F	; 15
    2a1a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xTaskCreate>
	xTaskCreate(xGLCD,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, &xGLCDHandle );
    2a1e:	0f 2e       	mov	r0, r31
    2a20:	f4 eb       	ldi	r31, 0xB4	; 180
    2a22:	ef 2e       	mov	r14, r31
    2a24:	f3 e9       	ldi	r31, 0x93	; 147
    2a26:	ff 2e       	mov	r15, r31
    2a28:	f0 2d       	mov	r31, r0
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	44 ef       	ldi	r20, 0xF4	; 244
    2a30:	51 e0       	ldi	r21, 0x01	; 1
    2a32:	61 e5       	ldi	r22, 0x51	; 81
    2a34:	73 e2       	ldi	r23, 0x23	; 35
    2a36:	88 e8       	ldi	r24, 0x88	; 136
    2a38:	91 e1       	ldi	r25, 0x11	; 17
    2a3a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xTaskCreate>
	xTaskCreate(xNotification,(signed portCHAR *) "t4", 500, NULL, tskIDLE_PRIORITY, &xNotificationHandle );
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	f2 eb       	ldi	r31, 0xB2	; 178
    2a42:	ef 2e       	mov	r14, r31
    2a44:	f3 e9       	ldi	r31, 0x93	; 147
    2a46:	ff 2e       	mov	r15, r31
    2a48:	f0 2d       	mov	r31, r0
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	44 ef       	ldi	r20, 0xF4	; 244
    2a50:	51 e0       	ldi	r21, 0x01	; 1
    2a52:	64 e5       	ldi	r22, 0x54	; 84
    2a54:	73 e2       	ldi	r23, 0x23	; 35
    2a56:	8d e0       	ldi	r24, 0x0D	; 13
    2a58:	90 e1       	ldi	r25, 0x10	; 16
    2a5a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <xTaskCreate>
	vTaskStartScheduler();
    2a5e:	0e 94 a0 0b 	call	0x1740	; 0x1740 <vTaskStartScheduler>
    2a62:	ff cf       	rjmp	.-2      	; 0x2a62 <main+0x8a>

00002a64 <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    2a64:	0f 93       	push	r16
    2a66:	20 2b       	or	r18, r16
    2a68:	61 11       	cpse	r22, r1
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <DigitalPin_Config+0xc>
    2a6c:	00 e0       	ldi	r16, 0x00	; 0
    2a6e:	01 c0       	rjmp	.+2      	; 0x2a72 <DigitalPin_Config+0xe>
    2a70:	00 e8       	ldi	r16, 0x80	; 128
    2a72:	20 2b       	or	r18, r16
    2a74:	41 11       	cpse	r20, r1
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <DigitalPin_Config+0x18>
    2a78:	00 e0       	ldi	r16, 0x00	; 0
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <DigitalPin_Config+0x1a>
    2a7c:	00 e4       	ldi	r16, 0x40	; 64
    2a7e:	20 2b       	or	r18, r16
    2a80:	3f b7       	in	r19, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	dc 01       	movw	r26, r24
    2a86:	12 96       	adiw	r26, 0x02	; 2
    2a88:	4c 91       	ld	r20, X
    2a8a:	12 97       	sbiw	r26, 0x02	; 2
    2a8c:	40 93 b0 00 	sts	0x00B0, r20	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2a90:	ed 91       	ld	r30, X+
    2a92:	fc 91       	ld	r31, X
    2a94:	20 8b       	std	Z+16, r18	; 0x10
    2a96:	3f bf       	out	0x3f, r19	; 63
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <DigitalPin_SetDir>:
    2a9c:	66 23       	and	r22, r22
    2a9e:	81 f0       	breq	.+32     	; 0x2ac0 <DigitalPin_SetDir+0x24>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	ed 91       	ld	r30, X+
    2aa4:	fc 91       	ld	r31, X
    2aa6:	11 97       	sbiw	r26, 0x01	; 1
    2aa8:	21 e0       	ldi	r18, 0x01	; 1
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	a9 01       	movw	r20, r18
    2aae:	12 96       	adiw	r26, 0x02	; 2
    2ab0:	0c 90       	ld	r0, X
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <DigitalPin_SetDir+0x1c>
    2ab4:	44 0f       	add	r20, r20
    2ab6:	55 1f       	adc	r21, r21
    2ab8:	0a 94       	dec	r0
    2aba:	e2 f7       	brpl	.-8      	; 0x2ab4 <DigitalPin_SetDir+0x18>
    2abc:	41 83       	std	Z+1, r20	; 0x01
    2abe:	08 95       	ret
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	ed 91       	ld	r30, X+
    2ac4:	fc 91       	ld	r31, X
    2ac6:	11 97       	sbiw	r26, 0x01	; 1
    2ac8:	21 e0       	ldi	r18, 0x01	; 1
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	a9 01       	movw	r20, r18
    2ace:	12 96       	adiw	r26, 0x02	; 2
    2ad0:	0c 90       	ld	r0, X
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <DigitalPin_SetDir+0x3c>
    2ad4:	44 0f       	add	r20, r20
    2ad6:	55 1f       	adc	r21, r21
    2ad8:	0a 94       	dec	r0
    2ada:	e2 f7       	brpl	.-8      	; 0x2ad4 <DigitalPin_SetDir+0x38>
    2adc:	42 83       	std	Z+2, r20	; 0x02
    2ade:	08 95       	ret

00002ae0 <DigitalPin_SetValue>:
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	ed 91       	ld	r30, X+
    2ae4:	fc 91       	ld	r31, X
    2ae6:	11 97       	sbiw	r26, 0x01	; 1
    2ae8:	21 e0       	ldi	r18, 0x01	; 1
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	a9 01       	movw	r20, r18
    2aee:	12 96       	adiw	r26, 0x02	; 2
    2af0:	0c 90       	ld	r0, X
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <DigitalPin_SetValue+0x18>
    2af4:	44 0f       	add	r20, r20
    2af6:	55 1f       	adc	r21, r21
    2af8:	0a 94       	dec	r0
    2afa:	e2 f7       	brpl	.-8      	; 0x2af4 <DigitalPin_SetValue+0x14>
    2afc:	45 83       	std	Z+5, r20	; 0x05
    2afe:	08 95       	ret

00002b00 <DigitalPin_ClearValue>:
    2b00:	dc 01       	movw	r26, r24
    2b02:	ed 91       	ld	r30, X+
    2b04:	fc 91       	ld	r31, X
    2b06:	11 97       	sbiw	r26, 0x01	; 1
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	a9 01       	movw	r20, r18
    2b0e:	12 96       	adiw	r26, 0x02	; 2
    2b10:	0c 90       	ld	r0, X
    2b12:	02 c0       	rjmp	.+4      	; 0x2b18 <DigitalPin_ClearValue+0x18>
    2b14:	44 0f       	add	r20, r20
    2b16:	55 1f       	adc	r21, r21
    2b18:	0a 94       	dec	r0
    2b1a:	e2 f7       	brpl	.-8      	; 0x2b14 <DigitalPin_ClearValue+0x14>
    2b1c:	46 83       	std	Z+6, r20	; 0x06
    2b1e:	08 95       	ret

00002b20 <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    2b20:	dc 01       	movw	r26, r24
    2b22:	ed 91       	ld	r30, X+
    2b24:	fc 91       	ld	r31, X
    2b26:	11 97       	sbiw	r26, 0x01	; 1
    2b28:	20 85       	ldd	r18, Z+8	; 0x08
	else pinValue = 0;
	return pinValue;
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	f9 01       	movw	r30, r18
    2b2e:	12 96       	adiw	r26, 0x02	; 2
    2b30:	0c 90       	ld	r0, X
    2b32:	02 c0       	rjmp	.+4      	; 0x2b38 <DigitalPin_GetValue+0x18>
    2b34:	f5 95       	asr	r31
    2b36:	e7 95       	ror	r30
    2b38:	0a 94       	dec	r0
    2b3a:	e2 f7       	brpl	.-8      	; 0x2b34 <DigitalPin_GetValue+0x14>
    2b3c:	cf 01       	movw	r24, r30
    2b3e:	81 70       	andi	r24, 0x01	; 1
    2b40:	08 95       	ret

00002b42 <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    2b42:	1f 92       	push	r1
    2b44:	0f 92       	push	r0
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	0f 92       	push	r0
    2b4a:	11 24       	eor	r1, r1

}
    2b4c:	0f 90       	pop	r0
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	0f 90       	pop	r0
    2b52:	1f 90       	pop	r1
    2b54:	18 95       	reti

00002b56 <__vector_27>:

ISR(USARTC0_TXC_vect){
    2b56:	1f 92       	push	r1
    2b58:	0f 92       	push	r0
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	0f 92       	push	r0
    2b5e:	11 24       	eor	r1, r1
	
}
    2b60:	0f 90       	pop	r0
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <__vector_26>:

ISR(USARTC0_DRE_vect){
    2b6a:	1f 92       	push	r1
    2b6c:	0f 92       	push	r0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	0f 92       	push	r0
    2b72:	11 24       	eor	r1, r1
	
}
    2b74:	0f 90       	pop	r0
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	0f 90       	pop	r0
    2b7a:	1f 90       	pop	r1
    2b7c:	18 95       	reti

00002b7e <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    2b7e:	1f 92       	push	r1
    2b80:	0f 92       	push	r0
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	0f 92       	push	r0
    2b86:	11 24       	eor	r1, r1
	
}
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <__vector_30>:

ISR(USARTC1_TXC_vect){
    2b92:	1f 92       	push	r1
    2b94:	0f 92       	push	r0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	0f 92       	push	r0
    2b9a:	11 24       	eor	r1, r1
	
}
    2b9c:	0f 90       	pop	r0
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	0f 90       	pop	r0
    2ba2:	1f 90       	pop	r1
    2ba4:	18 95       	reti

00002ba6 <__vector_29>:

ISR(USARTC1_DRE_vect){
    2ba6:	1f 92       	push	r1
    2ba8:	0f 92       	push	r0
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	0f 92       	push	r0
    2bae:	11 24       	eor	r1, r1
	
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f be       	out	0x3f, r0	; 63
    2bb4:	0f 90       	pop	r0
    2bb6:	1f 90       	pop	r1
    2bb8:	18 95       	reti

00002bba <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    2bba:	1f 92       	push	r1
    2bbc:	0f 92       	push	r0
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	0f 92       	push	r0
    2bc2:	11 24       	eor	r1, r1
	
}
    2bc4:	0f 90       	pop	r0
    2bc6:	0f be       	out	0x3f, r0	; 63
    2bc8:	0f 90       	pop	r0
    2bca:	1f 90       	pop	r1
    2bcc:	18 95       	reti

00002bce <__vector_90>:

ISR(USARTD0_TXC_vect){
    2bce:	1f 92       	push	r1
    2bd0:	0f 92       	push	r0
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	0f 92       	push	r0
    2bd6:	11 24       	eor	r1, r1
	
}
    2bd8:	0f 90       	pop	r0
    2bda:	0f be       	out	0x3f, r0	; 63
    2bdc:	0f 90       	pop	r0
    2bde:	1f 90       	pop	r1
    2be0:	18 95       	reti

00002be2 <__vector_89>:

ISR(USARTD0_DRE_vect){
    2be2:	1f 92       	push	r1
    2be4:	0f 92       	push	r0
    2be6:	0f b6       	in	r0, 0x3f	; 63
    2be8:	0f 92       	push	r0
    2bea:	11 24       	eor	r1, r1
	
}
    2bec:	0f 90       	pop	r0
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	0f 90       	pop	r0
    2bf2:	1f 90       	pop	r1
    2bf4:	18 95       	reti

00002bf6 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    2bf6:	1f 92       	push	r1
    2bf8:	0f 92       	push	r0
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	0f 92       	push	r0
    2bfe:	11 24       	eor	r1, r1
	
}
    2c00:	0f 90       	pop	r0
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	0f 90       	pop	r0
    2c06:	1f 90       	pop	r1
    2c08:	18 95       	reti

00002c0a <__vector_60>:

ISR(USARTE0_TXC_vect){
    2c0a:	1f 92       	push	r1
    2c0c:	0f 92       	push	r0
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	0f 92       	push	r0
    2c12:	11 24       	eor	r1, r1
	
}
    2c14:	0f 90       	pop	r0
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	0f 90       	pop	r0
    2c1a:	1f 90       	pop	r1
    2c1c:	18 95       	reti

00002c1e <__vector_59>:

ISR(USARTE0_DRE_vect){
    2c1e:	1f 92       	push	r1
    2c20:	0f 92       	push	r0
    2c22:	0f b6       	in	r0, 0x3f	; 63
    2c24:	0f 92       	push	r0
    2c26:	11 24       	eor	r1, r1
	
}
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	0f 90       	pop	r0
    2c2e:	1f 90       	pop	r1
    2c30:	18 95       	reti

00002c32 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    2c32:	0f 93       	push	r16
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	1f 92       	push	r1
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	2f b7       	in	r18, 0x3f	; 63
    2c40:	29 83       	std	Y+1, r18	; 0x01
    2c42:	f8 94       	cli
    2c44:	1b be       	out	0x3b, r1	; 59
    2c46:	fc 01       	movw	r30, r24
    2c48:	08 ed       	ldi	r16, 0xD8	; 216
    2c4a:	04 bf       	out	0x34, r16	; 52
    2c4c:	60 83       	st	Z, r22
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	8f bf       	out	0x3f, r24	; 63
    2c52:	0f 90       	pop	r0
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	0f 91       	pop	r16
    2c5a:	08 95       	ret

00002c5c <CLKSYS_Disable>:
    2c5c:	e0 e5       	ldi	r30, 0x50	; 80
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	90 81       	ld	r25, Z
    2c62:	28 2f       	mov	r18, r24
    2c64:	20 95       	com	r18
    2c66:	92 23       	and	r25, r18
    2c68:	90 83       	st	Z, r25
    2c6a:	90 81       	ld	r25, Z
    2c6c:	89 23       	and	r24, r25
    2c6e:	08 95       	ret

00002c70 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    2c70:	0f 93       	push	r16
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2c78:	00 e4       	ldi	r16, 0x40	; 64
    2c7a:	10 e0       	ldi	r17, 0x00	; 0
    2c7c:	f8 01       	movw	r30, r16
    2c7e:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
    2c80:	68 7f       	andi	r22, 0xF8	; 248
    2c82:	68 2b       	or	r22, r24
    2c84:	80 e4       	ldi	r24, 0x40	; 64
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 19 16 	call	0x2c32	; 0x2c32 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    2c8c:	f8 01       	movw	r30, r16
    2c8e:	80 81       	ld	r24, Z
	return clkCtrl;
}
    2c90:	8c 23       	and	r24, r28
    2c92:	cf 91       	pop	r28
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	08 95       	ret

00002c9a <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    2c9a:	fc 01       	movw	r30, r24
    2c9c:	90 81       	ld	r25, Z
    2c9e:	90 7f       	andi	r25, 0xF0	; 240
    2ca0:	69 2b       	or	r22, r25
    2ca2:	60 83       	st	Z, r22
    2ca4:	08 95       	ret

00002ca6 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    2ca6:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    2ca8:	96 81       	ldd	r25, Z+6	; 0x06
    2caa:	9c 7f       	andi	r25, 0xFC	; 252
    2cac:	69 2b       	or	r22, r25
    2cae:	66 83       	std	Z+6, r22	; 0x06
    2cb0:	08 95       	ret

00002cb2 <vfprintf>:
    2cb2:	2f 92       	push	r2
    2cb4:	3f 92       	push	r3
    2cb6:	4f 92       	push	r4
    2cb8:	5f 92       	push	r5
    2cba:	6f 92       	push	r6
    2cbc:	7f 92       	push	r7
    2cbe:	8f 92       	push	r8
    2cc0:	9f 92       	push	r9
    2cc2:	af 92       	push	r10
    2cc4:	bf 92       	push	r11
    2cc6:	cf 92       	push	r12
    2cc8:	df 92       	push	r13
    2cca:	ef 92       	push	r14
    2ccc:	ff 92       	push	r15
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	cd b7       	in	r28, 0x3d	; 61
    2cd8:	de b7       	in	r29, 0x3e	; 62
    2cda:	60 97       	sbiw	r28, 0x10	; 16
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	7c 01       	movw	r14, r24
    2ce2:	1b 01       	movw	r2, r22
    2ce4:	6a 01       	movw	r12, r20
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	16 82       	std	Z+6, r1	; 0x06
    2cea:	17 82       	std	Z+7, r1	; 0x07
    2cec:	83 81       	ldd	r24, Z+3	; 0x03
    2cee:	81 ff       	sbrs	r24, 1
    2cf0:	44 c3       	rjmp	.+1672   	; 0x337a <vfprintf+0x6c8>
    2cf2:	9e 01       	movw	r18, r28
    2cf4:	2f 5f       	subi	r18, 0xFF	; 255
    2cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf8:	39 01       	movw	r6, r18
    2cfa:	f7 01       	movw	r30, r14
    2cfc:	93 81       	ldd	r25, Z+3	; 0x03
    2cfe:	f1 01       	movw	r30, r2
    2d00:	93 fd       	sbrc	r25, 3
    2d02:	85 91       	lpm	r24, Z+
    2d04:	93 ff       	sbrs	r25, 3
    2d06:	81 91       	ld	r24, Z+
    2d08:	1f 01       	movw	r2, r30
    2d0a:	88 23       	and	r24, r24
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <vfprintf+0x5e>
    2d0e:	31 c3       	rjmp	.+1634   	; 0x3372 <vfprintf+0x6c0>
    2d10:	85 32       	cpi	r24, 0x25	; 37
    2d12:	39 f4       	brne	.+14     	; 0x2d22 <vfprintf+0x70>
    2d14:	93 fd       	sbrc	r25, 3
    2d16:	85 91       	lpm	r24, Z+
    2d18:	93 ff       	sbrs	r25, 3
    2d1a:	81 91       	ld	r24, Z+
    2d1c:	1f 01       	movw	r2, r30
    2d1e:	85 32       	cpi	r24, 0x25	; 37
    2d20:	39 f4       	brne	.+14     	; 0x2d30 <vfprintf+0x7e>
    2d22:	b7 01       	movw	r22, r14
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2d2a:	56 01       	movw	r10, r12
    2d2c:	65 01       	movw	r12, r10
    2d2e:	e5 cf       	rjmp	.-54     	; 0x2cfa <vfprintf+0x48>
    2d30:	10 e0       	ldi	r17, 0x00	; 0
    2d32:	51 2c       	mov	r5, r1
    2d34:	91 2c       	mov	r9, r1
    2d36:	ff e1       	ldi	r31, 0x1F	; 31
    2d38:	f9 15       	cp	r31, r9
    2d3a:	d8 f0       	brcs	.+54     	; 0x2d72 <vfprintf+0xc0>
    2d3c:	8b 32       	cpi	r24, 0x2B	; 43
    2d3e:	79 f0       	breq	.+30     	; 0x2d5e <vfprintf+0xac>
    2d40:	38 f4       	brcc	.+14     	; 0x2d50 <vfprintf+0x9e>
    2d42:	80 32       	cpi	r24, 0x20	; 32
    2d44:	79 f0       	breq	.+30     	; 0x2d64 <vfprintf+0xb2>
    2d46:	83 32       	cpi	r24, 0x23	; 35
    2d48:	a1 f4       	brne	.+40     	; 0x2d72 <vfprintf+0xc0>
    2d4a:	f9 2d       	mov	r31, r9
    2d4c:	f0 61       	ori	r31, 0x10	; 16
    2d4e:	2e c0       	rjmp	.+92     	; 0x2dac <vfprintf+0xfa>
    2d50:	8d 32       	cpi	r24, 0x2D	; 45
    2d52:	61 f0       	breq	.+24     	; 0x2d6c <vfprintf+0xba>
    2d54:	80 33       	cpi	r24, 0x30	; 48
    2d56:	69 f4       	brne	.+26     	; 0x2d72 <vfprintf+0xc0>
    2d58:	29 2d       	mov	r18, r9
    2d5a:	21 60       	ori	r18, 0x01	; 1
    2d5c:	2d c0       	rjmp	.+90     	; 0x2db8 <vfprintf+0x106>
    2d5e:	39 2d       	mov	r19, r9
    2d60:	32 60       	ori	r19, 0x02	; 2
    2d62:	93 2e       	mov	r9, r19
    2d64:	89 2d       	mov	r24, r9
    2d66:	84 60       	ori	r24, 0x04	; 4
    2d68:	98 2e       	mov	r9, r24
    2d6a:	2a c0       	rjmp	.+84     	; 0x2dc0 <vfprintf+0x10e>
    2d6c:	e9 2d       	mov	r30, r9
    2d6e:	e8 60       	ori	r30, 0x08	; 8
    2d70:	15 c0       	rjmp	.+42     	; 0x2d9c <vfprintf+0xea>
    2d72:	97 fc       	sbrc	r9, 7
    2d74:	2d c0       	rjmp	.+90     	; 0x2dd0 <vfprintf+0x11e>
    2d76:	20 ed       	ldi	r18, 0xD0	; 208
    2d78:	28 0f       	add	r18, r24
    2d7a:	2a 30       	cpi	r18, 0x0A	; 10
    2d7c:	88 f4       	brcc	.+34     	; 0x2da0 <vfprintf+0xee>
    2d7e:	96 fe       	sbrs	r9, 6
    2d80:	06 c0       	rjmp	.+12     	; 0x2d8e <vfprintf+0xdc>
    2d82:	3a e0       	ldi	r19, 0x0A	; 10
    2d84:	13 9f       	mul	r17, r19
    2d86:	20 0d       	add	r18, r0
    2d88:	11 24       	eor	r1, r1
    2d8a:	12 2f       	mov	r17, r18
    2d8c:	19 c0       	rjmp	.+50     	; 0x2dc0 <vfprintf+0x10e>
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	58 9e       	mul	r5, r24
    2d92:	20 0d       	add	r18, r0
    2d94:	11 24       	eor	r1, r1
    2d96:	52 2e       	mov	r5, r18
    2d98:	e9 2d       	mov	r30, r9
    2d9a:	e0 62       	ori	r30, 0x20	; 32
    2d9c:	9e 2e       	mov	r9, r30
    2d9e:	10 c0       	rjmp	.+32     	; 0x2dc0 <vfprintf+0x10e>
    2da0:	8e 32       	cpi	r24, 0x2E	; 46
    2da2:	31 f4       	brne	.+12     	; 0x2db0 <vfprintf+0xfe>
    2da4:	96 fc       	sbrc	r9, 6
    2da6:	e5 c2       	rjmp	.+1482   	; 0x3372 <vfprintf+0x6c0>
    2da8:	f9 2d       	mov	r31, r9
    2daa:	f0 64       	ori	r31, 0x40	; 64
    2dac:	9f 2e       	mov	r9, r31
    2dae:	08 c0       	rjmp	.+16     	; 0x2dc0 <vfprintf+0x10e>
    2db0:	8c 36       	cpi	r24, 0x6C	; 108
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <vfprintf+0x10a>
    2db4:	29 2d       	mov	r18, r9
    2db6:	20 68       	ori	r18, 0x80	; 128
    2db8:	92 2e       	mov	r9, r18
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <vfprintf+0x10e>
    2dbc:	88 36       	cpi	r24, 0x68	; 104
    2dbe:	41 f4       	brne	.+16     	; 0x2dd0 <vfprintf+0x11e>
    2dc0:	f1 01       	movw	r30, r2
    2dc2:	93 fd       	sbrc	r25, 3
    2dc4:	85 91       	lpm	r24, Z+
    2dc6:	93 ff       	sbrs	r25, 3
    2dc8:	81 91       	ld	r24, Z+
    2dca:	1f 01       	movw	r2, r30
    2dcc:	81 11       	cpse	r24, r1
    2dce:	b3 cf       	rjmp	.-154    	; 0x2d36 <vfprintf+0x84>
    2dd0:	9b eb       	ldi	r25, 0xBB	; 187
    2dd2:	98 0f       	add	r25, r24
    2dd4:	93 30       	cpi	r25, 0x03	; 3
    2dd6:	20 f4       	brcc	.+8      	; 0x2de0 <vfprintf+0x12e>
    2dd8:	99 2d       	mov	r25, r9
    2dda:	90 61       	ori	r25, 0x10	; 16
    2ddc:	80 5e       	subi	r24, 0xE0	; 224
    2dde:	07 c0       	rjmp	.+14     	; 0x2dee <vfprintf+0x13c>
    2de0:	9b e9       	ldi	r25, 0x9B	; 155
    2de2:	98 0f       	add	r25, r24
    2de4:	93 30       	cpi	r25, 0x03	; 3
    2de6:	08 f0       	brcs	.+2      	; 0x2dea <vfprintf+0x138>
    2de8:	66 c1       	rjmp	.+716    	; 0x30b6 <vfprintf+0x404>
    2dea:	99 2d       	mov	r25, r9
    2dec:	9f 7e       	andi	r25, 0xEF	; 239
    2dee:	96 ff       	sbrs	r25, 6
    2df0:	16 e0       	ldi	r17, 0x06	; 6
    2df2:	9f 73       	andi	r25, 0x3F	; 63
    2df4:	99 2e       	mov	r9, r25
    2df6:	85 36       	cpi	r24, 0x65	; 101
    2df8:	19 f4       	brne	.+6      	; 0x2e00 <vfprintf+0x14e>
    2dfa:	90 64       	ori	r25, 0x40	; 64
    2dfc:	99 2e       	mov	r9, r25
    2dfe:	08 c0       	rjmp	.+16     	; 0x2e10 <vfprintf+0x15e>
    2e00:	86 36       	cpi	r24, 0x66	; 102
    2e02:	21 f4       	brne	.+8      	; 0x2e0c <vfprintf+0x15a>
    2e04:	39 2f       	mov	r19, r25
    2e06:	30 68       	ori	r19, 0x80	; 128
    2e08:	93 2e       	mov	r9, r19
    2e0a:	02 c0       	rjmp	.+4      	; 0x2e10 <vfprintf+0x15e>
    2e0c:	11 11       	cpse	r17, r1
    2e0e:	11 50       	subi	r17, 0x01	; 1
    2e10:	97 fe       	sbrs	r9, 7
    2e12:	07 c0       	rjmp	.+14     	; 0x2e22 <vfprintf+0x170>
    2e14:	1c 33       	cpi	r17, 0x3C	; 60
    2e16:	50 f4       	brcc	.+20     	; 0x2e2c <vfprintf+0x17a>
    2e18:	44 24       	eor	r4, r4
    2e1a:	43 94       	inc	r4
    2e1c:	41 0e       	add	r4, r17
    2e1e:	27 e0       	ldi	r18, 0x07	; 7
    2e20:	0b c0       	rjmp	.+22     	; 0x2e38 <vfprintf+0x186>
    2e22:	18 30       	cpi	r17, 0x08	; 8
    2e24:	38 f0       	brcs	.+14     	; 0x2e34 <vfprintf+0x182>
    2e26:	27 e0       	ldi	r18, 0x07	; 7
    2e28:	17 e0       	ldi	r17, 0x07	; 7
    2e2a:	05 c0       	rjmp	.+10     	; 0x2e36 <vfprintf+0x184>
    2e2c:	27 e0       	ldi	r18, 0x07	; 7
    2e2e:	9c e3       	ldi	r25, 0x3C	; 60
    2e30:	49 2e       	mov	r4, r25
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <vfprintf+0x186>
    2e34:	21 2f       	mov	r18, r17
    2e36:	41 2c       	mov	r4, r1
    2e38:	56 01       	movw	r10, r12
    2e3a:	84 e0       	ldi	r24, 0x04	; 4
    2e3c:	a8 0e       	add	r10, r24
    2e3e:	b1 1c       	adc	r11, r1
    2e40:	f6 01       	movw	r30, r12
    2e42:	60 81       	ld	r22, Z
    2e44:	71 81       	ldd	r23, Z+1	; 0x01
    2e46:	82 81       	ldd	r24, Z+2	; 0x02
    2e48:	93 81       	ldd	r25, Z+3	; 0x03
    2e4a:	04 2d       	mov	r16, r4
    2e4c:	a3 01       	movw	r20, r6
    2e4e:	0e 94 42 1a 	call	0x3484	; 0x3484 <__ftoa_engine>
    2e52:	6c 01       	movw	r12, r24
    2e54:	f9 81       	ldd	r31, Y+1	; 0x01
    2e56:	fc 87       	std	Y+12, r31	; 0x0c
    2e58:	f0 ff       	sbrs	r31, 0
    2e5a:	02 c0       	rjmp	.+4      	; 0x2e60 <vfprintf+0x1ae>
    2e5c:	f3 ff       	sbrs	r31, 3
    2e5e:	06 c0       	rjmp	.+12     	; 0x2e6c <vfprintf+0x1ba>
    2e60:	91 fc       	sbrc	r9, 1
    2e62:	06 c0       	rjmp	.+12     	; 0x2e70 <vfprintf+0x1be>
    2e64:	92 fe       	sbrs	r9, 2
    2e66:	06 c0       	rjmp	.+12     	; 0x2e74 <vfprintf+0x1c2>
    2e68:	00 e2       	ldi	r16, 0x20	; 32
    2e6a:	05 c0       	rjmp	.+10     	; 0x2e76 <vfprintf+0x1c4>
    2e6c:	0d e2       	ldi	r16, 0x2D	; 45
    2e6e:	03 c0       	rjmp	.+6      	; 0x2e76 <vfprintf+0x1c4>
    2e70:	0b e2       	ldi	r16, 0x2B	; 43
    2e72:	01 c0       	rjmp	.+2      	; 0x2e76 <vfprintf+0x1c4>
    2e74:	00 e0       	ldi	r16, 0x00	; 0
    2e76:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e78:	8c 70       	andi	r24, 0x0C	; 12
    2e7a:	19 f0       	breq	.+6      	; 0x2e82 <vfprintf+0x1d0>
    2e7c:	01 11       	cpse	r16, r1
    2e7e:	5a c2       	rjmp	.+1204   	; 0x3334 <vfprintf+0x682>
    2e80:	9b c2       	rjmp	.+1334   	; 0x33b8 <vfprintf+0x706>
    2e82:	97 fe       	sbrs	r9, 7
    2e84:	10 c0       	rjmp	.+32     	; 0x2ea6 <vfprintf+0x1f4>
    2e86:	4c 0c       	add	r4, r12
    2e88:	fc 85       	ldd	r31, Y+12	; 0x0c
    2e8a:	f4 ff       	sbrs	r31, 4
    2e8c:	04 c0       	rjmp	.+8      	; 0x2e96 <vfprintf+0x1e4>
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	81 33       	cpi	r24, 0x31	; 49
    2e92:	09 f4       	brne	.+2      	; 0x2e96 <vfprintf+0x1e4>
    2e94:	4a 94       	dec	r4
    2e96:	14 14       	cp	r1, r4
    2e98:	74 f5       	brge	.+92     	; 0x2ef6 <vfprintf+0x244>
    2e9a:	28 e0       	ldi	r18, 0x08	; 8
    2e9c:	24 15       	cp	r18, r4
    2e9e:	78 f5       	brcc	.+94     	; 0x2efe <vfprintf+0x24c>
    2ea0:	88 e0       	ldi	r24, 0x08	; 8
    2ea2:	48 2e       	mov	r4, r24
    2ea4:	2c c0       	rjmp	.+88     	; 0x2efe <vfprintf+0x24c>
    2ea6:	96 fc       	sbrc	r9, 6
    2ea8:	2a c0       	rjmp	.+84     	; 0x2efe <vfprintf+0x24c>
    2eaa:	81 2f       	mov	r24, r17
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	8c 15       	cp	r24, r12
    2eb0:	9d 05       	cpc	r25, r13
    2eb2:	9c f0       	brlt	.+38     	; 0x2eda <vfprintf+0x228>
    2eb4:	3c ef       	ldi	r19, 0xFC	; 252
    2eb6:	c3 16       	cp	r12, r19
    2eb8:	3f ef       	ldi	r19, 0xFF	; 255
    2eba:	d3 06       	cpc	r13, r19
    2ebc:	74 f0       	brlt	.+28     	; 0x2eda <vfprintf+0x228>
    2ebe:	89 2d       	mov	r24, r9
    2ec0:	80 68       	ori	r24, 0x80	; 128
    2ec2:	98 2e       	mov	r9, r24
    2ec4:	0a c0       	rjmp	.+20     	; 0x2eda <vfprintf+0x228>
    2ec6:	e2 e0       	ldi	r30, 0x02	; 2
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	ec 0f       	add	r30, r28
    2ecc:	fd 1f       	adc	r31, r29
    2ece:	e1 0f       	add	r30, r17
    2ed0:	f1 1d       	adc	r31, r1
    2ed2:	80 81       	ld	r24, Z
    2ed4:	80 33       	cpi	r24, 0x30	; 48
    2ed6:	19 f4       	brne	.+6      	; 0x2ede <vfprintf+0x22c>
    2ed8:	11 50       	subi	r17, 0x01	; 1
    2eda:	11 11       	cpse	r17, r1
    2edc:	f4 cf       	rjmp	.-24     	; 0x2ec6 <vfprintf+0x214>
    2ede:	97 fe       	sbrs	r9, 7
    2ee0:	0e c0       	rjmp	.+28     	; 0x2efe <vfprintf+0x24c>
    2ee2:	44 24       	eor	r4, r4
    2ee4:	43 94       	inc	r4
    2ee6:	41 0e       	add	r4, r17
    2ee8:	81 2f       	mov	r24, r17
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	c8 16       	cp	r12, r24
    2eee:	d9 06       	cpc	r13, r25
    2ef0:	2c f4       	brge	.+10     	; 0x2efc <vfprintf+0x24a>
    2ef2:	1c 19       	sub	r17, r12
    2ef4:	04 c0       	rjmp	.+8      	; 0x2efe <vfprintf+0x24c>
    2ef6:	44 24       	eor	r4, r4
    2ef8:	43 94       	inc	r4
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <vfprintf+0x24c>
    2efc:	10 e0       	ldi	r17, 0x00	; 0
    2efe:	97 fe       	sbrs	r9, 7
    2f00:	06 c0       	rjmp	.+12     	; 0x2f0e <vfprintf+0x25c>
    2f02:	1c 14       	cp	r1, r12
    2f04:	1d 04       	cpc	r1, r13
    2f06:	34 f4       	brge	.+12     	; 0x2f14 <vfprintf+0x262>
    2f08:	c6 01       	movw	r24, r12
    2f0a:	01 96       	adiw	r24, 0x01	; 1
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <vfprintf+0x266>
    2f0e:	85 e0       	ldi	r24, 0x05	; 5
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	02 c0       	rjmp	.+4      	; 0x2f18 <vfprintf+0x266>
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	01 11       	cpse	r16, r1
    2f1a:	01 96       	adiw	r24, 0x01	; 1
    2f1c:	11 23       	and	r17, r17
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <vfprintf+0x27a>
    2f20:	21 2f       	mov	r18, r17
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	2f 5f       	subi	r18, 0xFF	; 255
    2f26:	3f 4f       	sbci	r19, 0xFF	; 255
    2f28:	82 0f       	add	r24, r18
    2f2a:	93 1f       	adc	r25, r19
    2f2c:	25 2d       	mov	r18, r5
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	82 17       	cp	r24, r18
    2f32:	93 07       	cpc	r25, r19
    2f34:	14 f4       	brge	.+4      	; 0x2f3a <vfprintf+0x288>
    2f36:	58 1a       	sub	r5, r24
    2f38:	01 c0       	rjmp	.+2      	; 0x2f3c <vfprintf+0x28a>
    2f3a:	51 2c       	mov	r5, r1
    2f3c:	89 2d       	mov	r24, r9
    2f3e:	89 70       	andi	r24, 0x09	; 9
    2f40:	49 f4       	brne	.+18     	; 0x2f54 <vfprintf+0x2a2>
    2f42:	55 20       	and	r5, r5
    2f44:	39 f0       	breq	.+14     	; 0x2f54 <vfprintf+0x2a2>
    2f46:	b7 01       	movw	r22, r14
    2f48:	80 e2       	ldi	r24, 0x20	; 32
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2f50:	5a 94       	dec	r5
    2f52:	f7 cf       	rjmp	.-18     	; 0x2f42 <vfprintf+0x290>
    2f54:	00 23       	and	r16, r16
    2f56:	29 f0       	breq	.+10     	; 0x2f62 <vfprintf+0x2b0>
    2f58:	b7 01       	movw	r22, r14
    2f5a:	80 2f       	mov	r24, r16
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2f62:	93 fc       	sbrc	r9, 3
    2f64:	09 c0       	rjmp	.+18     	; 0x2f78 <vfprintf+0x2c6>
    2f66:	55 20       	and	r5, r5
    2f68:	39 f0       	breq	.+14     	; 0x2f78 <vfprintf+0x2c6>
    2f6a:	b7 01       	movw	r22, r14
    2f6c:	80 e3       	ldi	r24, 0x30	; 48
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2f74:	5a 94       	dec	r5
    2f76:	f7 cf       	rjmp	.-18     	; 0x2f66 <vfprintf+0x2b4>
    2f78:	97 fe       	sbrs	r9, 7
    2f7a:	4c c0       	rjmp	.+152    	; 0x3014 <vfprintf+0x362>
    2f7c:	46 01       	movw	r8, r12
    2f7e:	d7 fe       	sbrs	r13, 7
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <vfprintf+0x2d4>
    2f82:	81 2c       	mov	r8, r1
    2f84:	91 2c       	mov	r9, r1
    2f86:	c6 01       	movw	r24, r12
    2f88:	88 19       	sub	r24, r8
    2f8a:	99 09       	sbc	r25, r9
    2f8c:	f3 01       	movw	r30, r6
    2f8e:	e8 0f       	add	r30, r24
    2f90:	f9 1f       	adc	r31, r25
    2f92:	ed 87       	std	Y+13, r30	; 0x0d
    2f94:	fe 87       	std	Y+14, r31	; 0x0e
    2f96:	96 01       	movw	r18, r12
    2f98:	24 19       	sub	r18, r4
    2f9a:	31 09       	sbc	r19, r1
    2f9c:	2f 87       	std	Y+15, r18	; 0x0f
    2f9e:	38 8b       	std	Y+16, r19	; 0x10
    2fa0:	01 2f       	mov	r16, r17
    2fa2:	10 e0       	ldi	r17, 0x00	; 0
    2fa4:	11 95       	neg	r17
    2fa6:	01 95       	neg	r16
    2fa8:	11 09       	sbc	r17, r1
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	83 16       	cp	r8, r19
    2fae:	93 06       	cpc	r9, r19
    2fb0:	29 f4       	brne	.+10     	; 0x2fbc <vfprintf+0x30a>
    2fb2:	b7 01       	movw	r22, r14
    2fb4:	8e e2       	ldi	r24, 0x2E	; 46
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2fbc:	c8 14       	cp	r12, r8
    2fbe:	d9 04       	cpc	r13, r9
    2fc0:	4c f0       	brlt	.+18     	; 0x2fd4 <vfprintf+0x322>
    2fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc4:	98 89       	ldd	r25, Y+16	; 0x10
    2fc6:	88 15       	cp	r24, r8
    2fc8:	99 05       	cpc	r25, r9
    2fca:	24 f4       	brge	.+8      	; 0x2fd4 <vfprintf+0x322>
    2fcc:	ed 85       	ldd	r30, Y+13	; 0x0d
    2fce:	fe 85       	ldd	r31, Y+14	; 0x0e
    2fd0:	81 81       	ldd	r24, Z+1	; 0x01
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <vfprintf+0x324>
    2fd4:	80 e3       	ldi	r24, 0x30	; 48
    2fd6:	f1 e0       	ldi	r31, 0x01	; 1
    2fd8:	8f 1a       	sub	r8, r31
    2fda:	91 08       	sbc	r9, r1
    2fdc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fde:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fe0:	2f 5f       	subi	r18, 0xFF	; 255
    2fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe4:	2d 87       	std	Y+13, r18	; 0x0d
    2fe6:	3e 87       	std	Y+14, r19	; 0x0e
    2fe8:	80 16       	cp	r8, r16
    2fea:	91 06       	cpc	r9, r17
    2fec:	2c f0       	brlt	.+10     	; 0x2ff8 <vfprintf+0x346>
    2fee:	b7 01       	movw	r22, r14
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    2ff6:	d9 cf       	rjmp	.-78     	; 0x2faa <vfprintf+0x2f8>
    2ff8:	c8 14       	cp	r12, r8
    2ffa:	d9 04       	cpc	r13, r9
    2ffc:	41 f4       	brne	.+16     	; 0x300e <vfprintf+0x35c>
    2ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    3000:	96 33       	cpi	r25, 0x36	; 54
    3002:	20 f4       	brcc	.+8      	; 0x300c <vfprintf+0x35a>
    3004:	95 33       	cpi	r25, 0x35	; 53
    3006:	19 f4       	brne	.+6      	; 0x300e <vfprintf+0x35c>
    3008:	3c 85       	ldd	r19, Y+12	; 0x0c
    300a:	34 ff       	sbrs	r19, 4
    300c:	81 e3       	ldi	r24, 0x31	; 49
    300e:	b7 01       	movw	r22, r14
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	4e c0       	rjmp	.+156    	; 0x30b0 <vfprintf+0x3fe>
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	81 33       	cpi	r24, 0x31	; 49
    3018:	19 f0       	breq	.+6      	; 0x3020 <vfprintf+0x36e>
    301a:	9c 85       	ldd	r25, Y+12	; 0x0c
    301c:	9f 7e       	andi	r25, 0xEF	; 239
    301e:	9c 87       	std	Y+12, r25	; 0x0c
    3020:	b7 01       	movw	r22, r14
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3028:	11 11       	cpse	r17, r1
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <vfprintf+0x384>
    302c:	94 fc       	sbrc	r9, 4
    302e:	18 c0       	rjmp	.+48     	; 0x3060 <vfprintf+0x3ae>
    3030:	85 e6       	ldi	r24, 0x65	; 101
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	17 c0       	rjmp	.+46     	; 0x3064 <vfprintf+0x3b2>
    3036:	b7 01       	movw	r22, r14
    3038:	8e e2       	ldi	r24, 0x2E	; 46
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3040:	1e 5f       	subi	r17, 0xFE	; 254
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	01 e0       	ldi	r16, 0x01	; 1
    3046:	08 0f       	add	r16, r24
    3048:	f3 01       	movw	r30, r6
    304a:	e8 0f       	add	r30, r24
    304c:	f1 1d       	adc	r31, r1
    304e:	80 81       	ld	r24, Z
    3050:	b7 01       	movw	r22, r14
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3058:	80 2f       	mov	r24, r16
    305a:	01 13       	cpse	r16, r17
    305c:	f3 cf       	rjmp	.-26     	; 0x3044 <vfprintf+0x392>
    305e:	e6 cf       	rjmp	.-52     	; 0x302c <vfprintf+0x37a>
    3060:	85 e4       	ldi	r24, 0x45	; 69
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	b7 01       	movw	r22, r14
    3066:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    306a:	d7 fc       	sbrc	r13, 7
    306c:	06 c0       	rjmp	.+12     	; 0x307a <vfprintf+0x3c8>
    306e:	c1 14       	cp	r12, r1
    3070:	d1 04       	cpc	r13, r1
    3072:	41 f4       	brne	.+16     	; 0x3084 <vfprintf+0x3d2>
    3074:	ec 85       	ldd	r30, Y+12	; 0x0c
    3076:	e4 ff       	sbrs	r30, 4
    3078:	05 c0       	rjmp	.+10     	; 0x3084 <vfprintf+0x3d2>
    307a:	d1 94       	neg	r13
    307c:	c1 94       	neg	r12
    307e:	d1 08       	sbc	r13, r1
    3080:	8d e2       	ldi	r24, 0x2D	; 45
    3082:	01 c0       	rjmp	.+2      	; 0x3086 <vfprintf+0x3d4>
    3084:	8b e2       	ldi	r24, 0x2B	; 43
    3086:	b7 01       	movw	r22, r14
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    308e:	80 e3       	ldi	r24, 0x30	; 48
    3090:	2a e0       	ldi	r18, 0x0A	; 10
    3092:	c2 16       	cp	r12, r18
    3094:	d1 04       	cpc	r13, r1
    3096:	2c f0       	brlt	.+10     	; 0x30a2 <vfprintf+0x3f0>
    3098:	8f 5f       	subi	r24, 0xFF	; 255
    309a:	fa e0       	ldi	r31, 0x0A	; 10
    309c:	cf 1a       	sub	r12, r31
    309e:	d1 08       	sbc	r13, r1
    30a0:	f7 cf       	rjmp	.-18     	; 0x3090 <vfprintf+0x3de>
    30a2:	b7 01       	movw	r22, r14
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    30aa:	b7 01       	movw	r22, r14
    30ac:	c6 01       	movw	r24, r12
    30ae:	c0 96       	adiw	r24, 0x30	; 48
    30b0:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    30b4:	54 c1       	rjmp	.+680    	; 0x335e <vfprintf+0x6ac>
    30b6:	83 36       	cpi	r24, 0x63	; 99
    30b8:	31 f0       	breq	.+12     	; 0x30c6 <vfprintf+0x414>
    30ba:	83 37       	cpi	r24, 0x73	; 115
    30bc:	79 f0       	breq	.+30     	; 0x30dc <vfprintf+0x42a>
    30be:	83 35       	cpi	r24, 0x53	; 83
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <vfprintf+0x412>
    30c2:	56 c0       	rjmp	.+172    	; 0x3170 <vfprintf+0x4be>
    30c4:	20 c0       	rjmp	.+64     	; 0x3106 <vfprintf+0x454>
    30c6:	56 01       	movw	r10, r12
    30c8:	32 e0       	ldi	r19, 0x02	; 2
    30ca:	a3 0e       	add	r10, r19
    30cc:	b1 1c       	adc	r11, r1
    30ce:	f6 01       	movw	r30, r12
    30d0:	80 81       	ld	r24, Z
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	01 e0       	ldi	r16, 0x01	; 1
    30d6:	10 e0       	ldi	r17, 0x00	; 0
    30d8:	63 01       	movw	r12, r6
    30da:	12 c0       	rjmp	.+36     	; 0x3100 <vfprintf+0x44e>
    30dc:	56 01       	movw	r10, r12
    30de:	f2 e0       	ldi	r31, 0x02	; 2
    30e0:	af 0e       	add	r10, r31
    30e2:	b1 1c       	adc	r11, r1
    30e4:	f6 01       	movw	r30, r12
    30e6:	c0 80       	ld	r12, Z
    30e8:	d1 80       	ldd	r13, Z+1	; 0x01
    30ea:	96 fe       	sbrs	r9, 6
    30ec:	03 c0       	rjmp	.+6      	; 0x30f4 <vfprintf+0x442>
    30ee:	61 2f       	mov	r22, r17
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	02 c0       	rjmp	.+4      	; 0x30f8 <vfprintf+0x446>
    30f4:	6f ef       	ldi	r22, 0xFF	; 255
    30f6:	7f ef       	ldi	r23, 0xFF	; 255
    30f8:	c6 01       	movw	r24, r12
    30fa:	0e 94 32 1b 	call	0x3664	; 0x3664 <strnlen>
    30fe:	8c 01       	movw	r16, r24
    3100:	f9 2d       	mov	r31, r9
    3102:	ff 77       	andi	r31, 0x7F	; 127
    3104:	14 c0       	rjmp	.+40     	; 0x312e <vfprintf+0x47c>
    3106:	56 01       	movw	r10, r12
    3108:	22 e0       	ldi	r18, 0x02	; 2
    310a:	a2 0e       	add	r10, r18
    310c:	b1 1c       	adc	r11, r1
    310e:	f6 01       	movw	r30, r12
    3110:	c0 80       	ld	r12, Z
    3112:	d1 80       	ldd	r13, Z+1	; 0x01
    3114:	96 fe       	sbrs	r9, 6
    3116:	03 c0       	rjmp	.+6      	; 0x311e <vfprintf+0x46c>
    3118:	61 2f       	mov	r22, r17
    311a:	70 e0       	ldi	r23, 0x00	; 0
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <vfprintf+0x470>
    311e:	6f ef       	ldi	r22, 0xFF	; 255
    3120:	7f ef       	ldi	r23, 0xFF	; 255
    3122:	c6 01       	movw	r24, r12
    3124:	0e 94 1a 1b 	call	0x3634	; 0x3634 <strnlen_P>
    3128:	8c 01       	movw	r16, r24
    312a:	f9 2d       	mov	r31, r9
    312c:	f0 68       	ori	r31, 0x80	; 128
    312e:	9f 2e       	mov	r9, r31
    3130:	f3 fd       	sbrc	r31, 3
    3132:	1a c0       	rjmp	.+52     	; 0x3168 <vfprintf+0x4b6>
    3134:	85 2d       	mov	r24, r5
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	08 17       	cp	r16, r24
    313a:	19 07       	cpc	r17, r25
    313c:	a8 f4       	brcc	.+42     	; 0x3168 <vfprintf+0x4b6>
    313e:	b7 01       	movw	r22, r14
    3140:	80 e2       	ldi	r24, 0x20	; 32
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3148:	5a 94       	dec	r5
    314a:	f4 cf       	rjmp	.-24     	; 0x3134 <vfprintf+0x482>
    314c:	f6 01       	movw	r30, r12
    314e:	97 fc       	sbrc	r9, 7
    3150:	85 91       	lpm	r24, Z+
    3152:	97 fe       	sbrs	r9, 7
    3154:	81 91       	ld	r24, Z+
    3156:	6f 01       	movw	r12, r30
    3158:	b7 01       	movw	r22, r14
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3160:	51 10       	cpse	r5, r1
    3162:	5a 94       	dec	r5
    3164:	01 50       	subi	r16, 0x01	; 1
    3166:	11 09       	sbc	r17, r1
    3168:	01 15       	cp	r16, r1
    316a:	11 05       	cpc	r17, r1
    316c:	79 f7       	brne	.-34     	; 0x314c <vfprintf+0x49a>
    316e:	f7 c0       	rjmp	.+494    	; 0x335e <vfprintf+0x6ac>
    3170:	84 36       	cpi	r24, 0x64	; 100
    3172:	11 f0       	breq	.+4      	; 0x3178 <vfprintf+0x4c6>
    3174:	89 36       	cpi	r24, 0x69	; 105
    3176:	61 f5       	brne	.+88     	; 0x31d0 <vfprintf+0x51e>
    3178:	56 01       	movw	r10, r12
    317a:	97 fe       	sbrs	r9, 7
    317c:	09 c0       	rjmp	.+18     	; 0x3190 <vfprintf+0x4de>
    317e:	24 e0       	ldi	r18, 0x04	; 4
    3180:	a2 0e       	add	r10, r18
    3182:	b1 1c       	adc	r11, r1
    3184:	f6 01       	movw	r30, r12
    3186:	60 81       	ld	r22, Z
    3188:	71 81       	ldd	r23, Z+1	; 0x01
    318a:	82 81       	ldd	r24, Z+2	; 0x02
    318c:	93 81       	ldd	r25, Z+3	; 0x03
    318e:	0a c0       	rjmp	.+20     	; 0x31a4 <vfprintf+0x4f2>
    3190:	f2 e0       	ldi	r31, 0x02	; 2
    3192:	af 0e       	add	r10, r31
    3194:	b1 1c       	adc	r11, r1
    3196:	f6 01       	movw	r30, r12
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	07 2e       	mov	r0, r23
    319e:	00 0c       	add	r0, r0
    31a0:	88 0b       	sbc	r24, r24
    31a2:	99 0b       	sbc	r25, r25
    31a4:	f9 2d       	mov	r31, r9
    31a6:	ff 76       	andi	r31, 0x6F	; 111
    31a8:	9f 2e       	mov	r9, r31
    31aa:	97 ff       	sbrs	r25, 7
    31ac:	09 c0       	rjmp	.+18     	; 0x31c0 <vfprintf+0x50e>
    31ae:	90 95       	com	r25
    31b0:	80 95       	com	r24
    31b2:	70 95       	com	r23
    31b4:	61 95       	neg	r22
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	f0 68       	ori	r31, 0x80	; 128
    31be:	9f 2e       	mov	r9, r31
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	a3 01       	movw	r20, r6
    31c6:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__ultoa_invert>
    31ca:	c8 2e       	mov	r12, r24
    31cc:	c6 18       	sub	r12, r6
    31ce:	3f c0       	rjmp	.+126    	; 0x324e <vfprintf+0x59c>
    31d0:	09 2d       	mov	r16, r9
    31d2:	85 37       	cpi	r24, 0x75	; 117
    31d4:	21 f4       	brne	.+8      	; 0x31de <vfprintf+0x52c>
    31d6:	0f 7e       	andi	r16, 0xEF	; 239
    31d8:	2a e0       	ldi	r18, 0x0A	; 10
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	1d c0       	rjmp	.+58     	; 0x3218 <vfprintf+0x566>
    31de:	09 7f       	andi	r16, 0xF9	; 249
    31e0:	8f 36       	cpi	r24, 0x6F	; 111
    31e2:	91 f0       	breq	.+36     	; 0x3208 <vfprintf+0x556>
    31e4:	18 f4       	brcc	.+6      	; 0x31ec <vfprintf+0x53a>
    31e6:	88 35       	cpi	r24, 0x58	; 88
    31e8:	59 f0       	breq	.+22     	; 0x3200 <vfprintf+0x54e>
    31ea:	c3 c0       	rjmp	.+390    	; 0x3372 <vfprintf+0x6c0>
    31ec:	80 37       	cpi	r24, 0x70	; 112
    31ee:	19 f0       	breq	.+6      	; 0x31f6 <vfprintf+0x544>
    31f0:	88 37       	cpi	r24, 0x78	; 120
    31f2:	11 f0       	breq	.+4      	; 0x31f8 <vfprintf+0x546>
    31f4:	be c0       	rjmp	.+380    	; 0x3372 <vfprintf+0x6c0>
    31f6:	00 61       	ori	r16, 0x10	; 16
    31f8:	04 ff       	sbrs	r16, 4
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <vfprintf+0x55c>
    31fc:	04 60       	ori	r16, 0x04	; 4
    31fe:	07 c0       	rjmp	.+14     	; 0x320e <vfprintf+0x55c>
    3200:	94 fe       	sbrs	r9, 4
    3202:	08 c0       	rjmp	.+16     	; 0x3214 <vfprintf+0x562>
    3204:	06 60       	ori	r16, 0x06	; 6
    3206:	06 c0       	rjmp	.+12     	; 0x3214 <vfprintf+0x562>
    3208:	28 e0       	ldi	r18, 0x08	; 8
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	05 c0       	rjmp	.+10     	; 0x3218 <vfprintf+0x566>
    320e:	20 e1       	ldi	r18, 0x10	; 16
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	02 c0       	rjmp	.+4      	; 0x3218 <vfprintf+0x566>
    3214:	20 e1       	ldi	r18, 0x10	; 16
    3216:	32 e0       	ldi	r19, 0x02	; 2
    3218:	56 01       	movw	r10, r12
    321a:	07 ff       	sbrs	r16, 7
    321c:	09 c0       	rjmp	.+18     	; 0x3230 <vfprintf+0x57e>
    321e:	84 e0       	ldi	r24, 0x04	; 4
    3220:	a8 0e       	add	r10, r24
    3222:	b1 1c       	adc	r11, r1
    3224:	f6 01       	movw	r30, r12
    3226:	60 81       	ld	r22, Z
    3228:	71 81       	ldd	r23, Z+1	; 0x01
    322a:	82 81       	ldd	r24, Z+2	; 0x02
    322c:	93 81       	ldd	r25, Z+3	; 0x03
    322e:	08 c0       	rjmp	.+16     	; 0x3240 <vfprintf+0x58e>
    3230:	f2 e0       	ldi	r31, 0x02	; 2
    3232:	af 0e       	add	r10, r31
    3234:	b1 1c       	adc	r11, r1
    3236:	f6 01       	movw	r30, r12
    3238:	60 81       	ld	r22, Z
    323a:	71 81       	ldd	r23, Z+1	; 0x01
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	a3 01       	movw	r20, r6
    3242:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__ultoa_invert>
    3246:	c8 2e       	mov	r12, r24
    3248:	c6 18       	sub	r12, r6
    324a:	0f 77       	andi	r16, 0x7F	; 127
    324c:	90 2e       	mov	r9, r16
    324e:	96 fe       	sbrs	r9, 6
    3250:	0b c0       	rjmp	.+22     	; 0x3268 <vfprintf+0x5b6>
    3252:	09 2d       	mov	r16, r9
    3254:	0e 7f       	andi	r16, 0xFE	; 254
    3256:	c1 16       	cp	r12, r17
    3258:	50 f4       	brcc	.+20     	; 0x326e <vfprintf+0x5bc>
    325a:	94 fe       	sbrs	r9, 4
    325c:	0a c0       	rjmp	.+20     	; 0x3272 <vfprintf+0x5c0>
    325e:	92 fc       	sbrc	r9, 2
    3260:	08 c0       	rjmp	.+16     	; 0x3272 <vfprintf+0x5c0>
    3262:	09 2d       	mov	r16, r9
    3264:	0e 7e       	andi	r16, 0xEE	; 238
    3266:	05 c0       	rjmp	.+10     	; 0x3272 <vfprintf+0x5c0>
    3268:	dc 2c       	mov	r13, r12
    326a:	09 2d       	mov	r16, r9
    326c:	03 c0       	rjmp	.+6      	; 0x3274 <vfprintf+0x5c2>
    326e:	dc 2c       	mov	r13, r12
    3270:	01 c0       	rjmp	.+2      	; 0x3274 <vfprintf+0x5c2>
    3272:	d1 2e       	mov	r13, r17
    3274:	04 ff       	sbrs	r16, 4
    3276:	0d c0       	rjmp	.+26     	; 0x3292 <vfprintf+0x5e0>
    3278:	fe 01       	movw	r30, r28
    327a:	ec 0d       	add	r30, r12
    327c:	f1 1d       	adc	r31, r1
    327e:	80 81       	ld	r24, Z
    3280:	80 33       	cpi	r24, 0x30	; 48
    3282:	11 f4       	brne	.+4      	; 0x3288 <vfprintf+0x5d6>
    3284:	09 7e       	andi	r16, 0xE9	; 233
    3286:	09 c0       	rjmp	.+18     	; 0x329a <vfprintf+0x5e8>
    3288:	02 ff       	sbrs	r16, 2
    328a:	06 c0       	rjmp	.+12     	; 0x3298 <vfprintf+0x5e6>
    328c:	d3 94       	inc	r13
    328e:	d3 94       	inc	r13
    3290:	04 c0       	rjmp	.+8      	; 0x329a <vfprintf+0x5e8>
    3292:	80 2f       	mov	r24, r16
    3294:	86 78       	andi	r24, 0x86	; 134
    3296:	09 f0       	breq	.+2      	; 0x329a <vfprintf+0x5e8>
    3298:	d3 94       	inc	r13
    329a:	03 fd       	sbrc	r16, 3
    329c:	11 c0       	rjmp	.+34     	; 0x32c0 <vfprintf+0x60e>
    329e:	00 ff       	sbrs	r16, 0
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <vfprintf+0x5fc>
    32a2:	1c 2d       	mov	r17, r12
    32a4:	d5 14       	cp	r13, r5
    32a6:	80 f4       	brcc	.+32     	; 0x32c8 <vfprintf+0x616>
    32a8:	15 0d       	add	r17, r5
    32aa:	1d 19       	sub	r17, r13
    32ac:	0d c0       	rjmp	.+26     	; 0x32c8 <vfprintf+0x616>
    32ae:	d5 14       	cp	r13, r5
    32b0:	58 f4       	brcc	.+22     	; 0x32c8 <vfprintf+0x616>
    32b2:	b7 01       	movw	r22, r14
    32b4:	80 e2       	ldi	r24, 0x20	; 32
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    32bc:	d3 94       	inc	r13
    32be:	f7 cf       	rjmp	.-18     	; 0x32ae <vfprintf+0x5fc>
    32c0:	d5 14       	cp	r13, r5
    32c2:	10 f4       	brcc	.+4      	; 0x32c8 <vfprintf+0x616>
    32c4:	5d 18       	sub	r5, r13
    32c6:	01 c0       	rjmp	.+2      	; 0x32ca <vfprintf+0x618>
    32c8:	51 2c       	mov	r5, r1
    32ca:	04 ff       	sbrs	r16, 4
    32cc:	10 c0       	rjmp	.+32     	; 0x32ee <vfprintf+0x63c>
    32ce:	b7 01       	movw	r22, r14
    32d0:	80 e3       	ldi	r24, 0x30	; 48
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    32d8:	02 ff       	sbrs	r16, 2
    32da:	17 c0       	rjmp	.+46     	; 0x330a <vfprintf+0x658>
    32dc:	01 fd       	sbrc	r16, 1
    32de:	03 c0       	rjmp	.+6      	; 0x32e6 <vfprintf+0x634>
    32e0:	88 e7       	ldi	r24, 0x78	; 120
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	02 c0       	rjmp	.+4      	; 0x32ea <vfprintf+0x638>
    32e6:	88 e5       	ldi	r24, 0x58	; 88
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	b7 01       	movw	r22, r14
    32ec:	0c c0       	rjmp	.+24     	; 0x3306 <vfprintf+0x654>
    32ee:	80 2f       	mov	r24, r16
    32f0:	86 78       	andi	r24, 0x86	; 134
    32f2:	59 f0       	breq	.+22     	; 0x330a <vfprintf+0x658>
    32f4:	01 ff       	sbrs	r16, 1
    32f6:	02 c0       	rjmp	.+4      	; 0x32fc <vfprintf+0x64a>
    32f8:	8b e2       	ldi	r24, 0x2B	; 43
    32fa:	01 c0       	rjmp	.+2      	; 0x32fe <vfprintf+0x64c>
    32fc:	80 e2       	ldi	r24, 0x20	; 32
    32fe:	07 fd       	sbrc	r16, 7
    3300:	8d e2       	ldi	r24, 0x2D	; 45
    3302:	b7 01       	movw	r22, r14
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    330a:	c1 16       	cp	r12, r17
    330c:	38 f4       	brcc	.+14     	; 0x331c <vfprintf+0x66a>
    330e:	b7 01       	movw	r22, r14
    3310:	80 e3       	ldi	r24, 0x30	; 48
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    3318:	11 50       	subi	r17, 0x01	; 1
    331a:	f7 cf       	rjmp	.-18     	; 0x330a <vfprintf+0x658>
    331c:	ca 94       	dec	r12
    331e:	f3 01       	movw	r30, r6
    3320:	ec 0d       	add	r30, r12
    3322:	f1 1d       	adc	r31, r1
    3324:	80 81       	ld	r24, Z
    3326:	b7 01       	movw	r22, r14
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    332e:	c1 10       	cpse	r12, r1
    3330:	f5 cf       	rjmp	.-22     	; 0x331c <vfprintf+0x66a>
    3332:	15 c0       	rjmp	.+42     	; 0x335e <vfprintf+0x6ac>
    3334:	f4 e0       	ldi	r31, 0x04	; 4
    3336:	f5 15       	cp	r31, r5
    3338:	60 f5       	brcc	.+88     	; 0x3392 <vfprintf+0x6e0>
    333a:	84 e0       	ldi	r24, 0x04	; 4
    333c:	58 1a       	sub	r5, r24
    333e:	93 fe       	sbrs	r9, 3
    3340:	1f c0       	rjmp	.+62     	; 0x3380 <vfprintf+0x6ce>
    3342:	01 11       	cpse	r16, r1
    3344:	27 c0       	rjmp	.+78     	; 0x3394 <vfprintf+0x6e2>
    3346:	2c 85       	ldd	r18, Y+12	; 0x0c
    3348:	23 ff       	sbrs	r18, 3
    334a:	2a c0       	rjmp	.+84     	; 0x33a0 <vfprintf+0x6ee>
    334c:	00 e1       	ldi	r16, 0x10	; 16
    334e:	12 e0       	ldi	r17, 0x02	; 2
    3350:	39 2d       	mov	r19, r9
    3352:	30 71       	andi	r19, 0x10	; 16
    3354:	93 2e       	mov	r9, r19
    3356:	f8 01       	movw	r30, r16
    3358:	84 91       	lpm	r24, Z
    335a:	81 11       	cpse	r24, r1
    335c:	24 c0       	rjmp	.+72     	; 0x33a6 <vfprintf+0x6f4>
    335e:	55 20       	and	r5, r5
    3360:	09 f4       	brne	.+2      	; 0x3364 <vfprintf+0x6b2>
    3362:	e4 cc       	rjmp	.-1592   	; 0x2d2c <vfprintf+0x7a>
    3364:	b7 01       	movw	r22, r14
    3366:	80 e2       	ldi	r24, 0x20	; 32
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    336e:	5a 94       	dec	r5
    3370:	f6 cf       	rjmp	.-20     	; 0x335e <vfprintf+0x6ac>
    3372:	f7 01       	movw	r30, r14
    3374:	86 81       	ldd	r24, Z+6	; 0x06
    3376:	97 81       	ldd	r25, Z+7	; 0x07
    3378:	26 c0       	rjmp	.+76     	; 0x33c6 <vfprintf+0x714>
    337a:	8f ef       	ldi	r24, 0xFF	; 255
    337c:	9f ef       	ldi	r25, 0xFF	; 255
    337e:	23 c0       	rjmp	.+70     	; 0x33c6 <vfprintf+0x714>
    3380:	b7 01       	movw	r22, r14
    3382:	80 e2       	ldi	r24, 0x20	; 32
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    338a:	5a 94       	dec	r5
    338c:	51 10       	cpse	r5, r1
    338e:	f8 cf       	rjmp	.-16     	; 0x3380 <vfprintf+0x6ce>
    3390:	d8 cf       	rjmp	.-80     	; 0x3342 <vfprintf+0x690>
    3392:	51 2c       	mov	r5, r1
    3394:	b7 01       	movw	r22, r14
    3396:	80 2f       	mov	r24, r16
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    339e:	d3 cf       	rjmp	.-90     	; 0x3346 <vfprintf+0x694>
    33a0:	04 e1       	ldi	r16, 0x14	; 20
    33a2:	12 e0       	ldi	r17, 0x02	; 2
    33a4:	d5 cf       	rjmp	.-86     	; 0x3350 <vfprintf+0x69e>
    33a6:	91 10       	cpse	r9, r1
    33a8:	80 52       	subi	r24, 0x20	; 32
    33aa:	b7 01       	movw	r22, r14
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <fputc>
    33b2:	0f 5f       	subi	r16, 0xFF	; 255
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	cf cf       	rjmp	.-98     	; 0x3356 <vfprintf+0x6a4>
    33b8:	23 e0       	ldi	r18, 0x03	; 3
    33ba:	25 15       	cp	r18, r5
    33bc:	10 f4       	brcc	.+4      	; 0x33c2 <vfprintf+0x710>
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	bd cf       	rjmp	.-134    	; 0x333c <vfprintf+0x68a>
    33c2:	51 2c       	mov	r5, r1
    33c4:	c0 cf       	rjmp	.-128    	; 0x3346 <vfprintf+0x694>
    33c6:	60 96       	adiw	r28, 0x10	; 16
    33c8:	cd bf       	out	0x3d, r28	; 61
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	cf 90       	pop	r12
    33dc:	bf 90       	pop	r11
    33de:	af 90       	pop	r10
    33e0:	9f 90       	pop	r9
    33e2:	8f 90       	pop	r8
    33e4:	7f 90       	pop	r7
    33e6:	6f 90       	pop	r6
    33e8:	5f 90       	pop	r5
    33ea:	4f 90       	pop	r4
    33ec:	3f 90       	pop	r3
    33ee:	2f 90       	pop	r2
    33f0:	08 95       	ret

000033f2 <__udivmodsi4>:
    33f2:	a1 e2       	ldi	r26, 0x21	; 33
    33f4:	1a 2e       	mov	r1, r26
    33f6:	aa 1b       	sub	r26, r26
    33f8:	bb 1b       	sub	r27, r27
    33fa:	fd 01       	movw	r30, r26
    33fc:	0d c0       	rjmp	.+26     	; 0x3418 <__udivmodsi4_ep>

000033fe <__udivmodsi4_loop>:
    33fe:	aa 1f       	adc	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	ee 1f       	adc	r30, r30
    3404:	ff 1f       	adc	r31, r31
    3406:	a2 17       	cp	r26, r18
    3408:	b3 07       	cpc	r27, r19
    340a:	e4 07       	cpc	r30, r20
    340c:	f5 07       	cpc	r31, r21
    340e:	20 f0       	brcs	.+8      	; 0x3418 <__udivmodsi4_ep>
    3410:	a2 1b       	sub	r26, r18
    3412:	b3 0b       	sbc	r27, r19
    3414:	e4 0b       	sbc	r30, r20
    3416:	f5 0b       	sbc	r31, r21

00003418 <__udivmodsi4_ep>:
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	1a 94       	dec	r1
    3422:	69 f7       	brne	.-38     	; 0x33fe <__udivmodsi4_loop>
    3424:	60 95       	com	r22
    3426:	70 95       	com	r23
    3428:	80 95       	com	r24
    342a:	90 95       	com	r25
    342c:	9b 01       	movw	r18, r22
    342e:	ac 01       	movw	r20, r24
    3430:	bd 01       	movw	r22, r26
    3432:	cf 01       	movw	r24, r30
    3434:	08 95       	ret

00003436 <__ashrdi3>:
    3436:	97 fb       	bst	r25, 7
    3438:	10 f8       	bld	r1, 0

0000343a <__lshrdi3>:
    343a:	16 94       	lsr	r1
    343c:	00 08       	sbc	r0, r0
    343e:	0f 93       	push	r16
    3440:	08 30       	cpi	r16, 0x08	; 8
    3442:	98 f0       	brcs	.+38     	; 0x346a <__lshrdi3+0x30>
    3444:	08 50       	subi	r16, 0x08	; 8
    3446:	23 2f       	mov	r18, r19
    3448:	34 2f       	mov	r19, r20
    344a:	45 2f       	mov	r20, r21
    344c:	56 2f       	mov	r21, r22
    344e:	67 2f       	mov	r22, r23
    3450:	78 2f       	mov	r23, r24
    3452:	89 2f       	mov	r24, r25
    3454:	90 2d       	mov	r25, r0
    3456:	f4 cf       	rjmp	.-24     	; 0x3440 <__lshrdi3+0x6>
    3458:	05 94       	asr	r0
    345a:	97 95       	ror	r25
    345c:	87 95       	ror	r24
    345e:	77 95       	ror	r23
    3460:	67 95       	ror	r22
    3462:	57 95       	ror	r21
    3464:	47 95       	ror	r20
    3466:	37 95       	ror	r19
    3468:	27 95       	ror	r18
    346a:	0a 95       	dec	r16
    346c:	aa f7       	brpl	.-22     	; 0x3458 <__lshrdi3+0x1e>
    346e:	0f 91       	pop	r16
    3470:	08 95       	ret

00003472 <__cmpdi2>:
    3472:	2a 15       	cp	r18, r10
    3474:	3b 05       	cpc	r19, r11
    3476:	4c 05       	cpc	r20, r12
    3478:	5d 05       	cpc	r21, r13
    347a:	6e 05       	cpc	r22, r14
    347c:	7f 05       	cpc	r23, r15
    347e:	80 07       	cpc	r24, r16
    3480:	91 07       	cpc	r25, r17
    3482:	08 95       	ret

00003484 <__ftoa_engine>:
    3484:	28 30       	cpi	r18, 0x08	; 8
    3486:	08 f0       	brcs	.+2      	; 0x348a <__ftoa_engine+0x6>
    3488:	27 e0       	ldi	r18, 0x07	; 7
    348a:	33 27       	eor	r19, r19
    348c:	da 01       	movw	r26, r20
    348e:	99 0f       	add	r25, r25
    3490:	31 1d       	adc	r19, r1
    3492:	87 fd       	sbrc	r24, 7
    3494:	91 60       	ori	r25, 0x01	; 1
    3496:	00 96       	adiw	r24, 0x00	; 0
    3498:	61 05       	cpc	r22, r1
    349a:	71 05       	cpc	r23, r1
    349c:	39 f4       	brne	.+14     	; 0x34ac <__ftoa_engine+0x28>
    349e:	32 60       	ori	r19, 0x02	; 2
    34a0:	2e 5f       	subi	r18, 0xFE	; 254
    34a2:	3d 93       	st	X+, r19
    34a4:	30 e3       	ldi	r19, 0x30	; 48
    34a6:	2a 95       	dec	r18
    34a8:	e1 f7       	brne	.-8      	; 0x34a2 <__ftoa_engine+0x1e>
    34aa:	08 95       	ret
    34ac:	9f 3f       	cpi	r25, 0xFF	; 255
    34ae:	30 f0       	brcs	.+12     	; 0x34bc <__ftoa_engine+0x38>
    34b0:	80 38       	cpi	r24, 0x80	; 128
    34b2:	71 05       	cpc	r23, r1
    34b4:	61 05       	cpc	r22, r1
    34b6:	09 f0       	breq	.+2      	; 0x34ba <__ftoa_engine+0x36>
    34b8:	3c 5f       	subi	r19, 0xFC	; 252
    34ba:	3c 5f       	subi	r19, 0xFC	; 252
    34bc:	3d 93       	st	X+, r19
    34be:	91 30       	cpi	r25, 0x01	; 1
    34c0:	08 f0       	brcs	.+2      	; 0x34c4 <__ftoa_engine+0x40>
    34c2:	80 68       	ori	r24, 0x80	; 128
    34c4:	91 1d       	adc	r25, r1
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	1f 93       	push	r17
    34cc:	0f 93       	push	r16
    34ce:	ff 92       	push	r15
    34d0:	ef 92       	push	r14
    34d2:	19 2f       	mov	r17, r25
    34d4:	98 7f       	andi	r25, 0xF8	; 248
    34d6:	96 95       	lsr	r25
    34d8:	e9 2f       	mov	r30, r25
    34da:	96 95       	lsr	r25
    34dc:	96 95       	lsr	r25
    34de:	e9 0f       	add	r30, r25
    34e0:	ff 27       	eor	r31, r31
    34e2:	ee 58       	subi	r30, 0x8E	; 142
    34e4:	fd 4f       	sbci	r31, 0xFD	; 253
    34e6:	99 27       	eor	r25, r25
    34e8:	33 27       	eor	r19, r19
    34ea:	ee 24       	eor	r14, r14
    34ec:	ff 24       	eor	r15, r15
    34ee:	a7 01       	movw	r20, r14
    34f0:	e7 01       	movw	r28, r14
    34f2:	05 90       	lpm	r0, Z+
    34f4:	08 94       	sec
    34f6:	07 94       	ror	r0
    34f8:	28 f4       	brcc	.+10     	; 0x3504 <__ftoa_engine+0x80>
    34fa:	36 0f       	add	r19, r22
    34fc:	e7 1e       	adc	r14, r23
    34fe:	f8 1e       	adc	r15, r24
    3500:	49 1f       	adc	r20, r25
    3502:	51 1d       	adc	r21, r1
    3504:	66 0f       	add	r22, r22
    3506:	77 1f       	adc	r23, r23
    3508:	88 1f       	adc	r24, r24
    350a:	99 1f       	adc	r25, r25
    350c:	06 94       	lsr	r0
    350e:	a1 f7       	brne	.-24     	; 0x34f8 <__ftoa_engine+0x74>
    3510:	05 90       	lpm	r0, Z+
    3512:	07 94       	ror	r0
    3514:	28 f4       	brcc	.+10     	; 0x3520 <__ftoa_engine+0x9c>
    3516:	e7 0e       	add	r14, r23
    3518:	f8 1e       	adc	r15, r24
    351a:	49 1f       	adc	r20, r25
    351c:	56 1f       	adc	r21, r22
    351e:	c1 1d       	adc	r28, r1
    3520:	77 0f       	add	r23, r23
    3522:	88 1f       	adc	r24, r24
    3524:	99 1f       	adc	r25, r25
    3526:	66 1f       	adc	r22, r22
    3528:	06 94       	lsr	r0
    352a:	a1 f7       	brne	.-24     	; 0x3514 <__ftoa_engine+0x90>
    352c:	05 90       	lpm	r0, Z+
    352e:	07 94       	ror	r0
    3530:	28 f4       	brcc	.+10     	; 0x353c <__ftoa_engine+0xb8>
    3532:	f8 0e       	add	r15, r24
    3534:	49 1f       	adc	r20, r25
    3536:	56 1f       	adc	r21, r22
    3538:	c7 1f       	adc	r28, r23
    353a:	d1 1d       	adc	r29, r1
    353c:	88 0f       	add	r24, r24
    353e:	99 1f       	adc	r25, r25
    3540:	66 1f       	adc	r22, r22
    3542:	77 1f       	adc	r23, r23
    3544:	06 94       	lsr	r0
    3546:	a1 f7       	brne	.-24     	; 0x3530 <__ftoa_engine+0xac>
    3548:	05 90       	lpm	r0, Z+
    354a:	07 94       	ror	r0
    354c:	20 f4       	brcc	.+8      	; 0x3556 <__ftoa_engine+0xd2>
    354e:	49 0f       	add	r20, r25
    3550:	56 1f       	adc	r21, r22
    3552:	c7 1f       	adc	r28, r23
    3554:	d8 1f       	adc	r29, r24
    3556:	99 0f       	add	r25, r25
    3558:	66 1f       	adc	r22, r22
    355a:	77 1f       	adc	r23, r23
    355c:	88 1f       	adc	r24, r24
    355e:	06 94       	lsr	r0
    3560:	a9 f7       	brne	.-22     	; 0x354c <__ftoa_engine+0xc8>
    3562:	84 91       	lpm	r24, Z
    3564:	10 95       	com	r17
    3566:	17 70       	andi	r17, 0x07	; 7
    3568:	41 f0       	breq	.+16     	; 0x357a <__ftoa_engine+0xf6>
    356a:	d6 95       	lsr	r29
    356c:	c7 95       	ror	r28
    356e:	57 95       	ror	r21
    3570:	47 95       	ror	r20
    3572:	f7 94       	ror	r15
    3574:	e7 94       	ror	r14
    3576:	1a 95       	dec	r17
    3578:	c1 f7       	brne	.-16     	; 0x356a <__ftoa_engine+0xe6>
    357a:	e8 e1       	ldi	r30, 0x18	; 24
    357c:	f2 e0       	ldi	r31, 0x02	; 2
    357e:	68 94       	set
    3580:	15 90       	lpm	r1, Z+
    3582:	15 91       	lpm	r17, Z+
    3584:	35 91       	lpm	r19, Z+
    3586:	65 91       	lpm	r22, Z+
    3588:	95 91       	lpm	r25, Z+
    358a:	05 90       	lpm	r0, Z+
    358c:	7f e2       	ldi	r23, 0x2F	; 47
    358e:	73 95       	inc	r23
    3590:	e1 18       	sub	r14, r1
    3592:	f1 0a       	sbc	r15, r17
    3594:	43 0b       	sbc	r20, r19
    3596:	56 0b       	sbc	r21, r22
    3598:	c9 0b       	sbc	r28, r25
    359a:	d0 09       	sbc	r29, r0
    359c:	c0 f7       	brcc	.-16     	; 0x358e <__ftoa_engine+0x10a>
    359e:	e1 0c       	add	r14, r1
    35a0:	f1 1e       	adc	r15, r17
    35a2:	43 1f       	adc	r20, r19
    35a4:	56 1f       	adc	r21, r22
    35a6:	c9 1f       	adc	r28, r25
    35a8:	d0 1d       	adc	r29, r0
    35aa:	7e f4       	brtc	.+30     	; 0x35ca <__ftoa_engine+0x146>
    35ac:	70 33       	cpi	r23, 0x30	; 48
    35ae:	11 f4       	brne	.+4      	; 0x35b4 <__ftoa_engine+0x130>
    35b0:	8a 95       	dec	r24
    35b2:	e6 cf       	rjmp	.-52     	; 0x3580 <__ftoa_engine+0xfc>
    35b4:	e8 94       	clt
    35b6:	01 50       	subi	r16, 0x01	; 1
    35b8:	30 f0       	brcs	.+12     	; 0x35c6 <__ftoa_engine+0x142>
    35ba:	08 0f       	add	r16, r24
    35bc:	0a f4       	brpl	.+2      	; 0x35c0 <__ftoa_engine+0x13c>
    35be:	00 27       	eor	r16, r16
    35c0:	02 17       	cp	r16, r18
    35c2:	08 f4       	brcc	.+2      	; 0x35c6 <__ftoa_engine+0x142>
    35c4:	20 2f       	mov	r18, r16
    35c6:	23 95       	inc	r18
    35c8:	02 2f       	mov	r16, r18
    35ca:	7a 33       	cpi	r23, 0x3A	; 58
    35cc:	28 f0       	brcs	.+10     	; 0x35d8 <__ftoa_engine+0x154>
    35ce:	79 e3       	ldi	r23, 0x39	; 57
    35d0:	7d 93       	st	X+, r23
    35d2:	2a 95       	dec	r18
    35d4:	e9 f7       	brne	.-6      	; 0x35d0 <__ftoa_engine+0x14c>
    35d6:	10 c0       	rjmp	.+32     	; 0x35f8 <__ftoa_engine+0x174>
    35d8:	7d 93       	st	X+, r23
    35da:	2a 95       	dec	r18
    35dc:	89 f6       	brne	.-94     	; 0x3580 <__ftoa_engine+0xfc>
    35de:	06 94       	lsr	r0
    35e0:	97 95       	ror	r25
    35e2:	67 95       	ror	r22
    35e4:	37 95       	ror	r19
    35e6:	17 95       	ror	r17
    35e8:	17 94       	ror	r1
    35ea:	e1 18       	sub	r14, r1
    35ec:	f1 0a       	sbc	r15, r17
    35ee:	43 0b       	sbc	r20, r19
    35f0:	56 0b       	sbc	r21, r22
    35f2:	c9 0b       	sbc	r28, r25
    35f4:	d0 09       	sbc	r29, r0
    35f6:	98 f0       	brcs	.+38     	; 0x361e <__ftoa_engine+0x19a>
    35f8:	23 95       	inc	r18
    35fa:	7e 91       	ld	r23, -X
    35fc:	73 95       	inc	r23
    35fe:	7a 33       	cpi	r23, 0x3A	; 58
    3600:	08 f0       	brcs	.+2      	; 0x3604 <__ftoa_engine+0x180>
    3602:	70 e3       	ldi	r23, 0x30	; 48
    3604:	7c 93       	st	X, r23
    3606:	20 13       	cpse	r18, r16
    3608:	b8 f7       	brcc	.-18     	; 0x35f8 <__ftoa_engine+0x174>
    360a:	7e 91       	ld	r23, -X
    360c:	70 61       	ori	r23, 0x10	; 16
    360e:	7d 93       	st	X+, r23
    3610:	30 f0       	brcs	.+12     	; 0x361e <__ftoa_engine+0x19a>
    3612:	83 95       	inc	r24
    3614:	71 e3       	ldi	r23, 0x31	; 49
    3616:	7d 93       	st	X+, r23
    3618:	70 e3       	ldi	r23, 0x30	; 48
    361a:	2a 95       	dec	r18
    361c:	e1 f7       	brne	.-8      	; 0x3616 <__ftoa_engine+0x192>
    361e:	11 24       	eor	r1, r1
    3620:	ef 90       	pop	r14
    3622:	ff 90       	pop	r15
    3624:	0f 91       	pop	r16
    3626:	1f 91       	pop	r17
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	99 27       	eor	r25, r25
    362e:	87 fd       	sbrc	r24, 7
    3630:	90 95       	com	r25
    3632:	08 95       	ret

00003634 <strnlen_P>:
    3634:	fc 01       	movw	r30, r24
    3636:	05 90       	lpm	r0, Z+
    3638:	61 50       	subi	r22, 0x01	; 1
    363a:	70 40       	sbci	r23, 0x00	; 0
    363c:	01 10       	cpse	r0, r1
    363e:	d8 f7       	brcc	.-10     	; 0x3636 <strnlen_P+0x2>
    3640:	80 95       	com	r24
    3642:	90 95       	com	r25
    3644:	8e 0f       	add	r24, r30
    3646:	9f 1f       	adc	r25, r31
    3648:	08 95       	ret

0000364a <strtok>:
    364a:	48 e5       	ldi	r20, 0x58	; 88
    364c:	53 e2       	ldi	r21, 0x23	; 35
    364e:	0c 94 3d 1b 	jmp	0x367a	; 0x367a <strtok_r>

00003652 <strcmp>:
    3652:	fb 01       	movw	r30, r22
    3654:	dc 01       	movw	r26, r24
    3656:	8d 91       	ld	r24, X+
    3658:	01 90       	ld	r0, Z+
    365a:	80 19       	sub	r24, r0
    365c:	01 10       	cpse	r0, r1
    365e:	d9 f3       	breq	.-10     	; 0x3656 <strcmp+0x4>
    3660:	99 0b       	sbc	r25, r25
    3662:	08 95       	ret

00003664 <strnlen>:
    3664:	fc 01       	movw	r30, r24
    3666:	61 50       	subi	r22, 0x01	; 1
    3668:	70 40       	sbci	r23, 0x00	; 0
    366a:	01 90       	ld	r0, Z+
    366c:	01 10       	cpse	r0, r1
    366e:	d8 f7       	brcc	.-10     	; 0x3666 <strnlen+0x2>
    3670:	80 95       	com	r24
    3672:	90 95       	com	r25
    3674:	8e 0f       	add	r24, r30
    3676:	9f 1f       	adc	r25, r31
    3678:	08 95       	ret

0000367a <strtok_r>:
    367a:	fa 01       	movw	r30, r20
    367c:	a1 91       	ld	r26, Z+
    367e:	b0 81       	ld	r27, Z
    3680:	00 97       	sbiw	r24, 0x00	; 0
    3682:	19 f4       	brne	.+6      	; 0x368a <strtok_r+0x10>
    3684:	10 97       	sbiw	r26, 0x00	; 0
    3686:	e1 f0       	breq	.+56     	; 0x36c0 <strtok_r+0x46>
    3688:	cd 01       	movw	r24, r26
    368a:	dc 01       	movw	r26, r24
    368c:	cd 01       	movw	r24, r26
    368e:	0d 90       	ld	r0, X+
    3690:	00 20       	and	r0, r0
    3692:	11 f4       	brne	.+4      	; 0x3698 <strtok_r+0x1e>
    3694:	c0 01       	movw	r24, r0
    3696:	13 c0       	rjmp	.+38     	; 0x36be <strtok_r+0x44>
    3698:	fb 01       	movw	r30, r22
    369a:	21 91       	ld	r18, Z+
    369c:	22 23       	and	r18, r18
    369e:	19 f0       	breq	.+6      	; 0x36a6 <strtok_r+0x2c>
    36a0:	20 15       	cp	r18, r0
    36a2:	d9 f7       	brne	.-10     	; 0x369a <strtok_r+0x20>
    36a4:	f3 cf       	rjmp	.-26     	; 0x368c <strtok_r+0x12>
    36a6:	fb 01       	movw	r30, r22
    36a8:	21 91       	ld	r18, Z+
    36aa:	20 15       	cp	r18, r0
    36ac:	19 f4       	brne	.+6      	; 0x36b4 <strtok_r+0x3a>
    36ae:	1e 92       	st	-X, r1
    36b0:	11 96       	adiw	r26, 0x01	; 1
    36b2:	06 c0       	rjmp	.+12     	; 0x36c0 <strtok_r+0x46>
    36b4:	22 23       	and	r18, r18
    36b6:	c1 f7       	brne	.-16     	; 0x36a8 <strtok_r+0x2e>
    36b8:	0d 90       	ld	r0, X+
    36ba:	00 20       	and	r0, r0
    36bc:	a1 f7       	brne	.-24     	; 0x36a6 <strtok_r+0x2c>
    36be:	d0 01       	movw	r26, r0
    36c0:	fa 01       	movw	r30, r20
    36c2:	a1 93       	st	Z+, r26
    36c4:	b0 83       	st	Z, r27
    36c6:	08 95       	ret

000036c8 <fputc>:
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	fb 01       	movw	r30, r22
    36d2:	23 81       	ldd	r18, Z+3	; 0x03
    36d4:	21 fd       	sbrc	r18, 1
    36d6:	03 c0       	rjmp	.+6      	; 0x36de <fputc+0x16>
    36d8:	8f ef       	ldi	r24, 0xFF	; 255
    36da:	9f ef       	ldi	r25, 0xFF	; 255
    36dc:	2c c0       	rjmp	.+88     	; 0x3736 <fputc+0x6e>
    36de:	22 ff       	sbrs	r18, 2
    36e0:	16 c0       	rjmp	.+44     	; 0x370e <fputc+0x46>
    36e2:	46 81       	ldd	r20, Z+6	; 0x06
    36e4:	57 81       	ldd	r21, Z+7	; 0x07
    36e6:	24 81       	ldd	r18, Z+4	; 0x04
    36e8:	35 81       	ldd	r19, Z+5	; 0x05
    36ea:	42 17       	cp	r20, r18
    36ec:	53 07       	cpc	r21, r19
    36ee:	44 f4       	brge	.+16     	; 0x3700 <fputc+0x38>
    36f0:	a0 81       	ld	r26, Z
    36f2:	b1 81       	ldd	r27, Z+1	; 0x01
    36f4:	9d 01       	movw	r18, r26
    36f6:	2f 5f       	subi	r18, 0xFF	; 255
    36f8:	3f 4f       	sbci	r19, 0xFF	; 255
    36fa:	20 83       	st	Z, r18
    36fc:	31 83       	std	Z+1, r19	; 0x01
    36fe:	8c 93       	st	X, r24
    3700:	26 81       	ldd	r18, Z+6	; 0x06
    3702:	37 81       	ldd	r19, Z+7	; 0x07
    3704:	2f 5f       	subi	r18, 0xFF	; 255
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	26 83       	std	Z+6, r18	; 0x06
    370a:	37 83       	std	Z+7, r19	; 0x07
    370c:	14 c0       	rjmp	.+40     	; 0x3736 <fputc+0x6e>
    370e:	8b 01       	movw	r16, r22
    3710:	ec 01       	movw	r28, r24
    3712:	fb 01       	movw	r30, r22
    3714:	00 84       	ldd	r0, Z+8	; 0x08
    3716:	f1 85       	ldd	r31, Z+9	; 0x09
    3718:	e0 2d       	mov	r30, r0
    371a:	19 95       	eicall
    371c:	89 2b       	or	r24, r25
    371e:	e1 f6       	brne	.-72     	; 0x36d8 <fputc+0x10>
    3720:	d8 01       	movw	r26, r16
    3722:	16 96       	adiw	r26, 0x06	; 6
    3724:	8d 91       	ld	r24, X+
    3726:	9c 91       	ld	r25, X
    3728:	17 97       	sbiw	r26, 0x07	; 7
    372a:	01 96       	adiw	r24, 0x01	; 1
    372c:	16 96       	adiw	r26, 0x06	; 6
    372e:	8d 93       	st	X+, r24
    3730:	9c 93       	st	X, r25
    3732:	17 97       	sbiw	r26, 0x07	; 7
    3734:	ce 01       	movw	r24, r28
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	0f 91       	pop	r16
    373e:	08 95       	ret

00003740 <sprintf>:
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	2e 97       	sbiw	r28, 0x0e	; 14
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	de bf       	out	0x3e, r29	; 62
    3752:	0e 89       	ldd	r16, Y+22	; 0x16
    3754:	1f 89       	ldd	r17, Y+23	; 0x17
    3756:	86 e0       	ldi	r24, 0x06	; 6
    3758:	8c 83       	std	Y+4, r24	; 0x04
    375a:	09 83       	std	Y+1, r16	; 0x01
    375c:	1a 83       	std	Y+2, r17	; 0x02
    375e:	8f ef       	ldi	r24, 0xFF	; 255
    3760:	9f e7       	ldi	r25, 0x7F	; 127
    3762:	8d 83       	std	Y+5, r24	; 0x05
    3764:	9e 83       	std	Y+6, r25	; 0x06
    3766:	ae 01       	movw	r20, r28
    3768:	46 5e       	subi	r20, 0xE6	; 230
    376a:	5f 4f       	sbci	r21, 0xFF	; 255
    376c:	68 8d       	ldd	r22, Y+24	; 0x18
    376e:	79 8d       	ldd	r23, Y+25	; 0x19
    3770:	ce 01       	movw	r24, r28
    3772:	01 96       	adiw	r24, 0x01	; 1
    3774:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <vfprintf>
    3778:	ef 81       	ldd	r30, Y+7	; 0x07
    377a:	f8 85       	ldd	r31, Y+8	; 0x08
    377c:	e0 0f       	add	r30, r16
    377e:	f1 1f       	adc	r31, r17
    3780:	10 82       	st	Z, r1
    3782:	2e 96       	adiw	r28, 0x0e	; 14
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	08 95       	ret

00003792 <__ultoa_invert>:
    3792:	fa 01       	movw	r30, r20
    3794:	aa 27       	eor	r26, r26
    3796:	28 30       	cpi	r18, 0x08	; 8
    3798:	51 f1       	breq	.+84     	; 0x37ee <__ultoa_invert+0x5c>
    379a:	20 31       	cpi	r18, 0x10	; 16
    379c:	81 f1       	breq	.+96     	; 0x37fe <__ultoa_invert+0x6c>
    379e:	e8 94       	clt
    37a0:	6f 93       	push	r22
    37a2:	6e 7f       	andi	r22, 0xFE	; 254
    37a4:	6e 5f       	subi	r22, 0xFE	; 254
    37a6:	7f 4f       	sbci	r23, 0xFF	; 255
    37a8:	8f 4f       	sbci	r24, 0xFF	; 255
    37aa:	9f 4f       	sbci	r25, 0xFF	; 255
    37ac:	af 4f       	sbci	r26, 0xFF	; 255
    37ae:	b1 e0       	ldi	r27, 0x01	; 1
    37b0:	3e d0       	rcall	.+124    	; 0x382e <__ultoa_invert+0x9c>
    37b2:	b4 e0       	ldi	r27, 0x04	; 4
    37b4:	3c d0       	rcall	.+120    	; 0x382e <__ultoa_invert+0x9c>
    37b6:	67 0f       	add	r22, r23
    37b8:	78 1f       	adc	r23, r24
    37ba:	89 1f       	adc	r24, r25
    37bc:	9a 1f       	adc	r25, r26
    37be:	a1 1d       	adc	r26, r1
    37c0:	68 0f       	add	r22, r24
    37c2:	79 1f       	adc	r23, r25
    37c4:	8a 1f       	adc	r24, r26
    37c6:	91 1d       	adc	r25, r1
    37c8:	a1 1d       	adc	r26, r1
    37ca:	6a 0f       	add	r22, r26
    37cc:	71 1d       	adc	r23, r1
    37ce:	81 1d       	adc	r24, r1
    37d0:	91 1d       	adc	r25, r1
    37d2:	a1 1d       	adc	r26, r1
    37d4:	20 d0       	rcall	.+64     	; 0x3816 <__ultoa_invert+0x84>
    37d6:	09 f4       	brne	.+2      	; 0x37da <__ultoa_invert+0x48>
    37d8:	68 94       	set
    37da:	3f 91       	pop	r19
    37dc:	2a e0       	ldi	r18, 0x0A	; 10
    37de:	26 9f       	mul	r18, r22
    37e0:	11 24       	eor	r1, r1
    37e2:	30 19       	sub	r19, r0
    37e4:	30 5d       	subi	r19, 0xD0	; 208
    37e6:	31 93       	st	Z+, r19
    37e8:	de f6       	brtc	.-74     	; 0x37a0 <__ultoa_invert+0xe>
    37ea:	cf 01       	movw	r24, r30
    37ec:	08 95       	ret
    37ee:	46 2f       	mov	r20, r22
    37f0:	47 70       	andi	r20, 0x07	; 7
    37f2:	40 5d       	subi	r20, 0xD0	; 208
    37f4:	41 93       	st	Z+, r20
    37f6:	b3 e0       	ldi	r27, 0x03	; 3
    37f8:	0f d0       	rcall	.+30     	; 0x3818 <__ultoa_invert+0x86>
    37fa:	c9 f7       	brne	.-14     	; 0x37ee <__ultoa_invert+0x5c>
    37fc:	f6 cf       	rjmp	.-20     	; 0x37ea <__ultoa_invert+0x58>
    37fe:	46 2f       	mov	r20, r22
    3800:	4f 70       	andi	r20, 0x0F	; 15
    3802:	40 5d       	subi	r20, 0xD0	; 208
    3804:	4a 33       	cpi	r20, 0x3A	; 58
    3806:	18 f0       	brcs	.+6      	; 0x380e <__ultoa_invert+0x7c>
    3808:	49 5d       	subi	r20, 0xD9	; 217
    380a:	31 fd       	sbrc	r19, 1
    380c:	40 52       	subi	r20, 0x20	; 32
    380e:	41 93       	st	Z+, r20
    3810:	02 d0       	rcall	.+4      	; 0x3816 <__ultoa_invert+0x84>
    3812:	a9 f7       	brne	.-22     	; 0x37fe <__ultoa_invert+0x6c>
    3814:	ea cf       	rjmp	.-44     	; 0x37ea <__ultoa_invert+0x58>
    3816:	b4 e0       	ldi	r27, 0x04	; 4
    3818:	a6 95       	lsr	r26
    381a:	97 95       	ror	r25
    381c:	87 95       	ror	r24
    381e:	77 95       	ror	r23
    3820:	67 95       	ror	r22
    3822:	ba 95       	dec	r27
    3824:	c9 f7       	brne	.-14     	; 0x3818 <__ultoa_invert+0x86>
    3826:	00 97       	sbiw	r24, 0x00	; 0
    3828:	61 05       	cpc	r22, r1
    382a:	71 05       	cpc	r23, r1
    382c:	08 95       	ret
    382e:	9b 01       	movw	r18, r22
    3830:	ac 01       	movw	r20, r24
    3832:	0a 2e       	mov	r0, r26
    3834:	06 94       	lsr	r0
    3836:	57 95       	ror	r21
    3838:	47 95       	ror	r20
    383a:	37 95       	ror	r19
    383c:	27 95       	ror	r18
    383e:	ba 95       	dec	r27
    3840:	c9 f7       	brne	.-14     	; 0x3834 <__ultoa_invert+0xa2>
    3842:	62 0f       	add	r22, r18
    3844:	73 1f       	adc	r23, r19
    3846:	84 1f       	adc	r24, r20
    3848:	95 1f       	adc	r25, r21
    384a:	a0 1d       	adc	r26, r0
    384c:	08 95       	ret

0000384e <_exit>:
    384e:	f8 94       	cli

00003850 <__stop_program>:
    3850:	ff cf       	rjmp	.-2      	; 0x3850 <__stop_program>
