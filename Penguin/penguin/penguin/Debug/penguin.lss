
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000030c  00802000  00003b2e  00003bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000757d  0080230c  0080230c  00003ece  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ece  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a30  00000000  00000000  00003f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000112c6  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003006  00000000  00000000  00015c62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006e99  00000000  00000000  00018c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c28  00000000  00000000  0001fb04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a06  00000000  00000000  0002172c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000833a  00000000  00000000  00028132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d08  00000000  00000000  0003046c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__ctors_end>
       4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      28:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      38:	0c 94 08 06 	jmp	0xc10	; 0xc10 <__vector_14>
      3c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      58:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      5c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      60:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      64:	0c 94 b5 16 	jmp	0x2d6a	; 0x2d6a <__vector_25>
      68:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__vector_26>
      6c:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <__vector_27>
      70:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__vector_28>
      74:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__vector_29>
      78:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__vector_30>
      7c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      80:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      84:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      88:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      8c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      90:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      94:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      98:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      9c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      ac:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      bc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      cc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      d0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      d4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      d8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      dc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      e0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      e4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      e8:	0c 94 0f 17 	jmp	0x2e1e	; 0x2e1e <__vector_58>
      ec:	0c 94 23 17 	jmp	0x2e46	; 0x2e46 <__vector_59>
      f0:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__vector_60>
      f4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      f8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      fc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     100:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     104:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     108:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     10c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     110:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     114:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     118:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     11c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     120:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     124:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     128:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     12c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     130:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     134:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     138:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     13c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     140:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     144:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     148:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     14c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     150:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     154:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     158:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     15c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     160:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__vector_88>
     164:	0c 94 05 17 	jmp	0x2e0a	; 0x2e0a <__vector_89>
     168:	0c 94 fb 16 	jmp	0x2df6	; 0x2df6 <__vector_90>
     16c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     170:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     174:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     178:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     17c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     180:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     184:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     188:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     18c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     190:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     194:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     198:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     19c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1a0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1a4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1a8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1ac:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1b0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1b4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1b8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1bc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1c0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1c4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1c8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1cc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1d0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1d4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1d8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1dc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1e0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1e4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1e8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1ec:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1f0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1f4:	0c 94 82 11 	jmp	0x2304	; 0x2304 <__vector_125>
     1f8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
     1fc:	5a 0c       	add	r5, r10
     1fe:	85 0c       	add	r8, r5
     200:	5c 0d       	add	r21, r12
     202:	85 0c       	add	r8, r5
     204:	5c 0d       	add	r21, r12
     206:	c0 0c       	add	r12, r0
     208:	d7 0c       	add	r13, r7
     20a:	5c 0d       	add	r21, r12
     20c:	2e 0d       	add	r18, r14
     20e:	3b 0d       	add	r19, r11

00000210 <__trampolines_start>:
     210:	0c 94 85 0c 	jmp	0x190a	; 0x190a <USB_Device_ProcessControlRequest+0xbc>
     214:	0c 94 2e 0d 	jmp	0x1a5c	; 0x1a5c <USB_Device_ProcessControlRequest+0x20e>
     218:	0c 94 3b 0d 	jmp	0x1a76	; 0x1a76 <USB_Device_ProcessControlRequest+0x228>
     21c:	0c 94 5a 0c 	jmp	0x18b4	; 0x18b4 <USB_Device_ProcessControlRequest+0x66>
     220:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <USB_Device_ProcessControlRequest+0x160>
     224:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <prvIdleTask>
     228:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
     22c:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <USBThread>
     230:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <CDC_Device_putchar>
     234:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <USB_Device_ProcessControlRequest+0x132>
     238:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <CDC_Device_getchar>
     23c:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <thread_4>

00000240 <ProductString>:
     240:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     250:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000025e <ManufacturerString>:
     25e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     26e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000278 <LanguageString>:
     278:	04 03 09 04                                         ....

0000027c <ConfigurationDescriptor>:
     27c:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     28c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     29c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2ac:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002ba <DeviceDescriptor>:
     2ba:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2ca:	dc 01                                               ..

000002cc <__c.2242>:
     2cc:	6e 61 6e 00                                         nan.

000002d0 <__c.2240>:
     2d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     300:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     310:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     320:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     330:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     340:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     350:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     360:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     370:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     380:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     390:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ce <__ctors_end>:
     3ce:	11 24       	eor	r1, r1
     3d0:	1f be       	out	0x3f, r1	; 63
     3d2:	cf ef       	ldi	r28, 0xFF	; 255
     3d4:	cd bf       	out	0x3d, r28	; 61
     3d6:	df e9       	ldi	r29, 0x9F	; 159
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	00 e0       	ldi	r16, 0x00	; 0
     3dc:	0c bf       	out	0x3c, r16	; 60

000003de <__do_copy_data>:
     3de:	13 e2       	ldi	r17, 0x23	; 35
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b0 e2       	ldi	r27, 0x20	; 32
     3e4:	ee e2       	ldi	r30, 0x2E	; 46
     3e6:	fb e3       	ldi	r31, 0x3B	; 59
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	0b bf       	out	0x3b, r16	; 59
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x14>
     3ee:	07 90       	elpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	ac 30       	cpi	r26, 0x0C	; 12
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0x10>

000003f8 <__do_clear_bss>:
     3f8:	28 e9       	ldi	r18, 0x98	; 152
     3fa:	ac e0       	ldi	r26, 0x0C	; 12
     3fc:	b3 e2       	ldi	r27, 0x23	; 35
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a9 38       	cpi	r26, 0x89	; 137
     404:	b2 07       	cpc	r27, r18
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <main>
     40c:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000414 <localtime_r>:
     414:	cf 92       	push	r12
     416:	df 92       	push	r13
     418:	ef 92       	push	r14
     41a:	ff 92       	push	r15
     41c:	0f 93       	push	r16
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	00 d0       	rcall	.+0      	; 0x426 <localtime_r+0x12>
     426:	1f 92       	push	r1
     428:	cd b7       	in	r28, 0x3d	; 61
     42a:	de b7       	in	r29, 0x3e	; 62
     42c:	6c 01       	movw	r12, r24
     42e:	7b 01       	movw	r14, r22
     430:	e0 91 87 98 	lds	r30, 0x9887
     434:	f0 91 88 98 	lds	r31, 0x9888
     438:	30 97       	sbiw	r30, 0x00	; 0
     43a:	29 f0       	breq	.+10     	; 0x446 <localtime_r+0x32>
     43c:	63 e8       	ldi	r22, 0x83	; 131
     43e:	78 e9       	ldi	r23, 0x98	; 152
     440:	19 95       	eicall
     442:	8c 01       	movw	r16, r24
     444:	02 c0       	rjmp	.+4      	; 0x44a <localtime_r+0x36>
     446:	0f ef       	ldi	r16, 0xFF	; 255
     448:	1f ef       	ldi	r17, 0xFF	; 255
     44a:	f6 01       	movw	r30, r12
     44c:	40 81       	ld	r20, Z
     44e:	51 81       	ldd	r21, Z+1	; 0x01
     450:	62 81       	ldd	r22, Z+2	; 0x02
     452:	73 81       	ldd	r23, Z+3	; 0x03
     454:	80 91 83 98 	lds	r24, 0x9883
     458:	90 91 84 98 	lds	r25, 0x9884
     45c:	a0 91 85 98 	lds	r26, 0x9885
     460:	b0 91 86 98 	lds	r27, 0x9886
     464:	48 0f       	add	r20, r24
     466:	59 1f       	adc	r21, r25
     468:	6a 1f       	adc	r22, r26
     46a:	7b 1f       	adc	r23, r27
     46c:	10 16       	cp	r1, r16
     46e:	11 06       	cpc	r1, r17
     470:	4c f4       	brge	.+18     	; 0x484 <localtime_r+0x70>
     472:	c8 01       	movw	r24, r16
     474:	01 2e       	mov	r0, r17
     476:	00 0c       	add	r0, r0
     478:	aa 0b       	sbc	r26, r26
     47a:	bb 0b       	sbc	r27, r27
     47c:	48 0f       	add	r20, r24
     47e:	59 1f       	adc	r21, r25
     480:	6a 1f       	adc	r22, r26
     482:	7b 1f       	adc	r23, r27
     484:	49 83       	std	Y+1, r20	; 0x01
     486:	5a 83       	std	Y+2, r21	; 0x02
     488:	6b 83       	std	Y+3, r22	; 0x03
     48a:	7c 83       	std	Y+4, r23	; 0x04
     48c:	b7 01       	movw	r22, r14
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	0e 94 c1 02 	call	0x582	; 0x582 <gmtime_r>
     496:	f7 01       	movw	r30, r14
     498:	02 87       	std	Z+10, r16	; 0x0a
     49a:	13 87       	std	Z+11, r17	; 0x0b
     49c:	24 96       	adiw	r28, 0x04	; 4
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	ff 90       	pop	r15
     4ac:	ef 90       	pop	r14
     4ae:	df 90       	pop	r13
     4b0:	cf 90       	pop	r12
     4b2:	08 95       	ret

000004b4 <mktime>:
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <mktime+0x12>
     4c6:	1f 92       	push	r1
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	8c 01       	movw	r16, r24
     4ce:	0e 94 97 03 	call	0x72e	; 0x72e <mk_gmtime>
     4d2:	69 83       	std	Y+1, r22	; 0x01
     4d4:	7a 83       	std	Y+2, r23	; 0x02
     4d6:	8b 83       	std	Y+3, r24	; 0x03
     4d8:	9c 83       	std	Y+4, r25	; 0x04
     4da:	f8 01       	movw	r30, r16
     4dc:	82 85       	ldd	r24, Z+10	; 0x0a
     4de:	93 85       	ldd	r25, Z+11	; 0x0b
     4e0:	97 ff       	sbrs	r25, 7
     4e2:	0e c0       	rjmp	.+28     	; 0x500 <mktime+0x4c>
     4e4:	e0 91 87 98 	lds	r30, 0x9887
     4e8:	f0 91 88 98 	lds	r31, 0x9888
     4ec:	30 97       	sbiw	r30, 0x00	; 0
     4ee:	41 f0       	breq	.+16     	; 0x500 <mktime+0x4c>
     4f0:	63 e8       	ldi	r22, 0x83	; 131
     4f2:	78 e9       	ldi	r23, 0x98	; 152
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	19 95       	eicall
     4fa:	f8 01       	movw	r30, r16
     4fc:	82 87       	std	Z+10, r24	; 0x0a
     4fe:	93 87       	std	Z+11, r25	; 0x0b
     500:	f8 01       	movw	r30, r16
     502:	82 85       	ldd	r24, Z+10	; 0x0a
     504:	93 85       	ldd	r25, Z+11	; 0x0b
     506:	18 16       	cp	r1, r24
     508:	19 06       	cpc	r1, r25
     50a:	94 f4       	brge	.+36     	; 0x530 <mktime+0x7c>
     50c:	09 2e       	mov	r0, r25
     50e:	00 0c       	add	r0, r0
     510:	aa 0b       	sbc	r26, r26
     512:	bb 0b       	sbc	r27, r27
     514:	49 81       	ldd	r20, Y+1	; 0x01
     516:	5a 81       	ldd	r21, Y+2	; 0x02
     518:	6b 81       	ldd	r22, Y+3	; 0x03
     51a:	7c 81       	ldd	r23, Y+4	; 0x04
     51c:	6a 01       	movw	r12, r20
     51e:	7b 01       	movw	r14, r22
     520:	c8 1a       	sub	r12, r24
     522:	d9 0a       	sbc	r13, r25
     524:	ea 0a       	sbc	r14, r26
     526:	fb 0a       	sbc	r15, r27
     528:	c9 82       	std	Y+1, r12	; 0x01
     52a:	da 82       	std	Y+2, r13	; 0x02
     52c:	eb 82       	std	Y+3, r14	; 0x03
     52e:	fc 82       	std	Y+4, r15	; 0x04
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	9a 81       	ldd	r25, Y+2	; 0x02
     534:	ab 81       	ldd	r26, Y+3	; 0x03
     536:	bc 81       	ldd	r27, Y+4	; 0x04
     538:	40 91 83 98 	lds	r20, 0x9883
     53c:	50 91 84 98 	lds	r21, 0x9884
     540:	60 91 85 98 	lds	r22, 0x9885
     544:	70 91 86 98 	lds	r23, 0x9886
     548:	84 1b       	sub	r24, r20
     54a:	95 0b       	sbc	r25, r21
     54c:	a6 0b       	sbc	r26, r22
     54e:	b7 0b       	sbc	r27, r23
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	9a 83       	std	Y+2, r25	; 0x02
     554:	ab 83       	std	Y+3, r26	; 0x03
     556:	bc 83       	std	Y+4, r27	; 0x04
     558:	b8 01       	movw	r22, r16
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	0e 94 0a 02 	call	0x414	; 0x414 <localtime_r>
     562:	69 81       	ldd	r22, Y+1	; 0x01
     564:	7a 81       	ldd	r23, Y+2	; 0x02
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	24 96       	adiw	r28, 0x04	; 4
     56c:	cd bf       	out	0x3d, r28	; 61
     56e:	de bf       	out	0x3e, r29	; 62
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	08 95       	ret

00000582 <gmtime_r>:
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	28 97       	sbiw	r28, 0x08	; 8
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	8b 01       	movw	r16, r22
     59e:	fc 01       	movw	r30, r24
     5a0:	60 81       	ld	r22, Z
     5a2:	71 81       	ldd	r23, Z+1	; 0x01
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	20 e8       	ldi	r18, 0x80	; 128
     5aa:	31 e5       	ldi	r19, 0x51	; 81
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	0e 94 31 1b 	call	0x3662	; 0x3662 <__udivmodsi4>
     5b4:	69 01       	movw	r12, r18
     5b6:	7a 01       	movw	r14, r20
     5b8:	2c e3       	ldi	r18, 0x3C	; 60
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
     5c4:	29 83       	std	Y+1, r18	; 0x01
     5c6:	3a 83       	std	Y+2, r19	; 0x02
     5c8:	4b 83       	std	Y+3, r20	; 0x03
     5ca:	5c 83       	std	Y+4, r21	; 0x04
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	ab 81       	ldd	r26, Y+3	; 0x03
     5d2:	bc 81       	ldd	r27, Y+4	; 0x04
     5d4:	f8 01       	movw	r30, r16
     5d6:	60 83       	st	Z, r22
     5d8:	6c e3       	ldi	r22, 0x3C	; 60
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	f8 01       	movw	r30, r16
     5e6:	a1 83       	std	Z+1, r26	; 0x01
     5e8:	82 83       	std	Z+2, r24	; 0x02
     5ea:	c6 01       	movw	r24, r12
     5ec:	06 96       	adiw	r24, 0x06	; 6
     5ee:	67 e0       	ldi	r22, 0x07	; 7
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodhi4>
     5f6:	84 83       	std	Z+4, r24	; 0x04
     5f8:	2d ea       	ldi	r18, 0xAD	; 173
     5fa:	3e e8       	ldi	r19, 0x8E	; 142
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	c7 01       	movw	r24, r14
     602:	b6 01       	movw	r22, r12
     604:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
     608:	29 83       	std	Y+1, r18	; 0x01
     60a:	3a 83       	std	Y+2, r19	; 0x02
     60c:	6d 83       	std	Y+5, r22	; 0x05
     60e:	7e 83       	std	Y+6, r23	; 0x06
     610:	8f 83       	std	Y+7, r24	; 0x07
     612:	98 87       	std	Y+8, r25	; 0x08
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	9a 81       	ldd	r25, Y+2	; 0x02
     618:	24 e6       	ldi	r18, 0x64	; 100
     61a:	28 9f       	mul	r18, r24
     61c:	60 01       	movw	r12, r0
     61e:	29 9f       	mul	r18, r25
     620:	d0 0c       	add	r13, r0
     622:	11 24       	eor	r1, r1
     624:	6d 81       	ldd	r22, Y+5	; 0x05
     626:	7e 81       	ldd	r23, Y+6	; 0x06
     628:	8f 81       	ldd	r24, Y+7	; 0x07
     62a:	98 85       	ldd	r25, Y+8	; 0x08
     62c:	25 eb       	ldi	r18, 0xB5	; 181
     62e:	35 e0       	ldi	r19, 0x05	; 5
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <__divmodsi4>
     638:	29 83       	std	Y+1, r18	; 0x01
     63a:	3a 83       	std	Y+2, r19	; 0x02
     63c:	6d 83       	std	Y+5, r22	; 0x05
     63e:	7e 83       	std	Y+6, r23	; 0x06
     640:	e9 80       	ldd	r14, Y+1	; 0x01
     642:	fa 80       	ldd	r15, Y+2	; 0x02
     644:	ee 0c       	add	r14, r14
     646:	ff 1c       	adc	r15, r15
     648:	ee 0c       	add	r14, r14
     64a:	ff 1c       	adc	r15, r15
     64c:	ec 0c       	add	r14, r12
     64e:	fd 1c       	adc	r15, r13
     650:	8d 81       	ldd	r24, Y+5	; 0x05
     652:	9e 81       	ldd	r25, Y+6	; 0x06
     654:	f5 e6       	ldi	r31, 0x65	; 101
     656:	ef 16       	cp	r14, r31
     658:	f1 04       	cpc	r15, r1
     65a:	10 f0       	brcs	.+4      	; 0x660 <gmtime_r+0xde>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	04 c0       	rjmp	.+8      	; 0x668 <gmtime_r+0xe6>
     660:	24 e6       	ldi	r18, 0x64	; 100
     662:	e2 16       	cp	r14, r18
     664:	f1 04       	cpc	r15, r1
     666:	19 f0       	breq	.+6      	; 0x66e <gmtime_r+0xec>
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	02 c0       	rjmp	.+4      	; 0x672 <gmtime_r+0xf0>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	a9 01       	movw	r20, r18
     674:	44 59       	subi	r20, 0x94	; 148
     676:	5e 4f       	sbci	r21, 0xFE	; 254
     678:	48 17       	cp	r20, r24
     67a:	59 07       	cpc	r21, r25
     67c:	68 f4       	brcc	.+26     	; 0x698 <gmtime_r+0x116>
     67e:	6d e6       	ldi	r22, 0x6D	; 109
     680:	71 e0       	ldi	r23, 0x01	; 1
     682:	82 1b       	sub	r24, r18
     684:	93 0b       	sbc	r25, r19
     686:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	e8 0e       	add	r14, r24
     690:	f9 1e       	adc	r15, r25
     692:	cd 01       	movw	r24, r26
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	44 e6       	ldi	r20, 0x64	; 100
     69a:	e4 0e       	add	r14, r20
     69c:	f1 1c       	adc	r15, r1
     69e:	f8 01       	movw	r30, r16
     6a0:	e6 82       	std	Z+6, r14	; 0x06
     6a2:	f7 82       	std	Z+7, r15	; 0x07
     6a4:	80 87       	std	Z+8, r24	; 0x08
     6a6:	91 87       	std	Z+9, r25	; 0x09
     6a8:	25 5c       	subi	r18, 0xC5	; 197
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	82 17       	cp	r24, r18
     6ae:	93 07       	cpc	r25, r19
     6b0:	48 f4       	brcc	.+18     	; 0x6c4 <gmtime_r+0x142>
     6b2:	6f e1       	ldi	r22, 0x1F	; 31
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	f8 01       	movw	r30, r16
     6c0:	85 83       	std	Z+5, r24	; 0x05
     6c2:	22 c0       	rjmp	.+68     	; 0x708 <gmtime_r+0x186>
     6c4:	69 e9       	ldi	r22, 0x99	; 153
     6c6:	70 e0       	ldi	r23, 0x00	; 0
     6c8:	82 1b       	sub	r24, r18
     6ca:	93 0b       	sbc	r25, r19
     6cc:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     6d0:	dc 01       	movw	r26, r24
     6d2:	cb 01       	movw	r24, r22
     6d4:	f8 2e       	mov	r15, r24
     6d6:	ff 0c       	add	r15, r15
     6d8:	ff 0c       	add	r15, r15
     6da:	f8 0e       	add	r15, r24
     6dc:	6d e3       	ldi	r22, 0x3D	; 61
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	cd 01       	movw	r24, r26
     6e2:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     6e6:	dc 01       	movw	r26, r24
     6e8:	cb 01       	movw	r24, r22
     6ea:	e8 2e       	mov	r14, r24
     6ec:	ee 0c       	add	r14, r14
     6ee:	6f e1       	ldi	r22, 0x1F	; 31
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	cd 01       	movw	r24, r26
     6f4:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     6f8:	dc 01       	movw	r26, r24
     6fa:	cb 01       	movw	r24, r22
     6fc:	22 e0       	ldi	r18, 0x02	; 2
     6fe:	28 0f       	add	r18, r24
     700:	f2 0e       	add	r15, r18
     702:	fe 0c       	add	r15, r14
     704:	f8 01       	movw	r30, r16
     706:	f5 82       	std	Z+5, r15	; 0x05
     708:	a3 83       	std	Z+3, r26	; 0x03
     70a:	f8 01       	movw	r30, r16
     70c:	12 86       	std	Z+10, r1	; 0x0a
     70e:	13 86       	std	Z+11, r1	; 0x0b
     710:	83 81       	ldd	r24, Z+3	; 0x03
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	83 83       	std	Z+3, r24	; 0x03
     716:	28 96       	adiw	r28, 0x08	; 8
     718:	cd bf       	out	0x3d, r28	; 61
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	08 95       	ret

0000072e <mk_gmtime>:
     72e:	8f 92       	push	r8
     730:	9f 92       	push	r9
     732:	af 92       	push	r10
     734:	bf 92       	push	r11
     736:	cf 92       	push	r12
     738:	df 92       	push	r13
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	ec 01       	movw	r28, r24
     748:	ee 81       	ldd	r30, Y+6	; 0x06
     74a:	ff 81       	ldd	r31, Y+7	; 0x07
     74c:	8f 01       	movw	r16, r30
     74e:	04 56       	subi	r16, 0x64	; 100
     750:	11 09       	sbc	r17, r1
     752:	b9 f0       	breq	.+46     	; 0x782 <mk_gmtime+0x54>
     754:	cf 01       	movw	r24, r30
     756:	85 56       	subi	r24, 0x65	; 101
     758:	91 09       	sbc	r25, r1
     75a:	6c 01       	movw	r12, r24
     75c:	97 ff       	sbrs	r25, 7
     75e:	03 c0       	rjmp	.+6      	; 0x766 <mk_gmtime+0x38>
     760:	23 e0       	ldi	r18, 0x03	; 3
     762:	c2 0e       	add	r12, r18
     764:	d1 1c       	adc	r13, r1
     766:	d5 94       	asr	r13
     768:	c7 94       	ror	r12
     76a:	d5 94       	asr	r13
     76c:	c7 94       	ror	r12
     76e:	6c e9       	ldi	r22, 0x9C	; 156
     770:	7f ef       	ldi	r23, 0xFF	; 255
     772:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     776:	c6 0e       	add	r12, r22
     778:	d7 1e       	adc	r13, r23
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	c8 1a       	sub	r12, r24
     77e:	d8 0a       	sbc	r13, r24
     780:	02 c0       	rjmp	.+4      	; 0x786 <mk_gmtime+0x58>
     782:	c1 2c       	mov	r12, r1
     784:	d1 2c       	mov	r13, r1
     786:	0d 2c       	mov	r0, r13
     788:	00 0c       	add	r0, r0
     78a:	ee 08       	sbc	r14, r14
     78c:	ff 08       	sbc	r15, r15
     78e:	2d e6       	ldi	r18, 0x6D	; 109
     790:	31 e0       	ldi	r19, 0x01	; 1
     792:	d8 01       	movw	r26, r16
     794:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__usmulhisi3>
     798:	c6 0e       	add	r12, r22
     79a:	d7 1e       	adc	r13, r23
     79c:	e8 1e       	adc	r14, r24
     79e:	f9 1e       	adc	r15, r25
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	08 2e       	mov	r0, r24
     7a4:	00 0c       	add	r0, r0
     7a6:	99 0b       	sbc	r25, r25
     7a8:	8c 01       	movw	r16, r24
     7aa:	01 50       	subi	r16, 0x01	; 1
     7ac:	11 09       	sbc	r17, r1
     7ae:	2d 81       	ldd	r18, Y+5	; 0x05
     7b0:	22 30       	cpi	r18, 0x02	; 2
     7b2:	2c f4       	brge	.+10     	; 0x7be <mk_gmtime+0x90>
     7b4:	22 23       	and	r18, r18
     7b6:	79 f1       	breq	.+94     	; 0x816 <mk_gmtime+0xe8>
     7b8:	01 5e       	subi	r16, 0xE1	; 225
     7ba:	1f 4f       	sbci	r17, 0xFF	; 255
     7bc:	2c c0       	rjmp	.+88     	; 0x816 <mk_gmtime+0xe8>
     7be:	cf 01       	movw	r24, r30
     7c0:	84 59       	subi	r24, 0x94	; 148
     7c2:	98 4f       	sbci	r25, 0xF8	; 248
     7c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <is_leap_year>
     7c8:	e8 2f       	mov	r30, r24
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	fb 96       	adiw	r30, 0x3b	; 59
     7ce:	e0 0f       	add	r30, r16
     7d0:	f1 1f       	adc	r31, r17
     7d2:	8d 81       	ldd	r24, Y+5	; 0x05
     7d4:	08 2e       	mov	r0, r24
     7d6:	00 0c       	add	r0, r0
     7d8:	99 0b       	sbc	r25, r25
     7da:	02 97       	sbiw	r24, 0x02	; 2
     7dc:	85 30       	cpi	r24, 0x05	; 5
     7de:	91 05       	cpc	r25, r1
     7e0:	14 f0       	brlt	.+4      	; 0x7e6 <mk_gmtime+0xb8>
     7e2:	e7 56       	subi	r30, 0x67	; 103
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	65 e0       	ldi	r22, 0x05	; 5
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     7ee:	9c 01       	movw	r18, r24
     7f0:	97 ff       	sbrs	r25, 7
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <mk_gmtime+0xca>
     7f4:	2f 5f       	subi	r18, 0xFF	; 255
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	35 95       	asr	r19
     7fa:	27 95       	ror	r18
     7fc:	9d e3       	ldi	r25, 0x3D	; 61
     7fe:	92 9f       	mul	r25, r18
     800:	a0 01       	movw	r20, r0
     802:	93 9f       	mul	r25, r19
     804:	50 0d       	add	r21, r0
     806:	11 24       	eor	r1, r1
     808:	8f 01       	movw	r16, r30
     80a:	04 0f       	add	r16, r20
     80c:	15 1f       	adc	r17, r21
     80e:	80 ff       	sbrs	r24, 0
     810:	02 c0       	rjmp	.+4      	; 0x816 <mk_gmtime+0xe8>
     812:	01 5e       	subi	r16, 0xE1	; 225
     814:	1f 4f       	sbci	r17, 0xFF	; 255
     816:	a8 01       	movw	r20, r16
     818:	11 0f       	add	r17, r17
     81a:	66 0b       	sbc	r22, r22
     81c:	77 0b       	sbc	r23, r23
     81e:	9a 01       	movw	r18, r20
     820:	ab 01       	movw	r20, r22
     822:	2c 0d       	add	r18, r12
     824:	3d 1d       	adc	r19, r13
     826:	4e 1d       	adc	r20, r14
     828:	5f 1d       	adc	r21, r15
     82a:	60 e8       	ldi	r22, 0x80	; 128
     82c:	71 e5       	ldi	r23, 0x51	; 81
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__mulsi3>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	aa 81       	ldd	r26, Y+2	; 0x02
     83c:	0a 2e       	mov	r0, r26
     83e:	00 0c       	add	r0, r0
     840:	bb 0b       	sbc	r27, r27
     842:	20 e1       	ldi	r18, 0x10	; 16
     844:	3e e0       	ldi	r19, 0x0E	; 14
     846:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__usmulhisi3>
     84a:	4b 01       	movw	r8, r22
     84c:	5c 01       	movw	r10, r24
     84e:	a9 81       	ldd	r26, Y+1	; 0x01
     850:	0a 2e       	mov	r0, r26
     852:	00 0c       	add	r0, r0
     854:	bb 0b       	sbc	r27, r27
     856:	2c e3       	ldi	r18, 0x3C	; 60
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__usmulhisi3>
     85e:	dc 01       	movw	r26, r24
     860:	cb 01       	movw	r24, r22
     862:	88 0d       	add	r24, r8
     864:	99 1d       	adc	r25, r9
     866:	aa 1d       	adc	r26, r10
     868:	bb 1d       	adc	r27, r11
     86a:	48 81       	ld	r20, Y
     86c:	04 2e       	mov	r0, r20
     86e:	00 0c       	add	r0, r0
     870:	55 0b       	sbc	r21, r21
     872:	66 0b       	sbc	r22, r22
     874:	77 0b       	sbc	r23, r23
     876:	84 0f       	add	r24, r20
     878:	95 1f       	adc	r25, r21
     87a:	a6 1f       	adc	r26, r22
     87c:	b7 1f       	adc	r27, r23
     87e:	bc 01       	movw	r22, r24
     880:	cd 01       	movw	r24, r26
     882:	6c 0d       	add	r22, r12
     884:	7d 1d       	adc	r23, r13
     886:	8e 1d       	adc	r24, r14
     888:	9f 1d       	adc	r25, r15
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	df 90       	pop	r13
     898:	cf 90       	pop	r12
     89a:	bf 90       	pop	r11
     89c:	af 90       	pop	r10
     89e:	9f 90       	pop	r9
     8a0:	8f 90       	pop	r8
     8a2:	08 95       	ret

000008a4 <is_leap_year>:
     8a4:	9c 01       	movw	r18, r24
     8a6:	23 70       	andi	r18, 0x03	; 3
     8a8:	33 27       	eor	r19, r19
     8aa:	23 2b       	or	r18, r19
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <is_leap_year+0x20>
     8ae:	64 e6       	ldi	r22, 0x64	; 100
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	0e 94 1d 1b 	call	0x363a	; 0x363a <__divmodhi4>
     8b6:	89 2b       	or	r24, r25
     8b8:	39 f4       	brne	.+14     	; 0x8c8 <is_leap_year+0x24>
     8ba:	63 70       	andi	r22, 0x03	; 3
     8bc:	77 27       	eor	r23, r23
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	67 2b       	or	r22, r23
     8c2:	19 f0       	breq	.+6      	; 0x8ca <is_leap_year+0x26>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	08 95       	ret
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	08 95       	ret

000008cc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     8cc:	29 2f       	mov	r18, r25
     8ce:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     8d0:	22 30       	cpi	r18, 0x02	; 2
     8d2:	31 05       	cpc	r19, r1
     8d4:	59 f0       	breq	.+22     	; 0x8ec <CALLBACK_USB_GetDescriptor+0x20>
     8d6:	23 30       	cpi	r18, 0x03	; 3
     8d8:	31 05       	cpc	r19, r1
     8da:	69 f0       	breq	.+26     	; 0x8f6 <CALLBACK_USB_GetDescriptor+0x2a>
     8dc:	21 30       	cpi	r18, 0x01	; 1
     8de:	31 05       	cpc	r19, r1
     8e0:	29 f5       	brne	.+74     	; 0x92c <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     8e2:	82 e1       	ldi	r24, 0x12	; 18
     8e4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     8e6:	2a eb       	ldi	r18, 0xBA	; 186
     8e8:	32 e0       	ldi	r19, 0x02	; 2
     8ea:	29 c0       	rjmp	.+82     	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     8ec:	8e e3       	ldi	r24, 0x3E	; 62
     8ee:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     8f0:	2c e7       	ldi	r18, 0x7C	; 124
     8f2:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     8f4:	24 c0       	rjmp	.+72     	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
     8f6:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	91 05       	cpc	r25, r1
     8fc:	59 f0       	breq	.+22     	; 0x914 <CALLBACK_USB_GetDescriptor+0x48>
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	91 05       	cpc	r25, r1
     902:	71 f0       	breq	.+28     	; 0x920 <CALLBACK_USB_GetDescriptor+0x54>
     904:	89 2b       	or	r24, r25
     906:	b9 f4       	brne	.+46     	; 0x936 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     908:	e8 e7       	ldi	r30, 0x78	; 120
     90a:	f2 e0       	ldi	r31, 0x02	; 2
     90c:	84 91       	lpm	r24, Z
     90e:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     910:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     912:	15 c0       	rjmp	.+42     	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     914:	ee e5       	ldi	r30, 0x5E	; 94
     916:	f2 e0       	ldi	r31, 0x02	; 2
     918:	84 91       	lpm	r24, Z
     91a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     91c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     91e:	0f c0       	rjmp	.+30     	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     920:	e0 e4       	ldi	r30, 0x40	; 64
     922:	f2 e0       	ldi	r31, 0x02	; 2
     924:	84 91       	lpm	r24, Z
     926:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     928:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     92a:	09 c0       	rjmp	.+18     	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	04 c0       	rjmp	.+8      	; 0x93e <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     93e:	fa 01       	movw	r30, r20
     940:	20 83       	st	Z, r18
     942:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     944:	08 95       	ret

00000946 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     946:	31 e1       	ldi	r19, 0x11	; 17
     948:	fc 01       	movw	r30, r24
     94a:	30 83       	st	Z, r19
     94c:	31 97       	sbiw	r30, 0x01	; 1
     94e:	22 e2       	ldi	r18, 0x22	; 34
     950:	20 83       	st	Z, r18
     952:	31 97       	sbiw	r30, 0x01	; 1
     954:	a3 e3       	ldi	r26, 0x33	; 51
     956:	a0 83       	st	Z, r26
     958:	31 97       	sbiw	r30, 0x01	; 1
     95a:	60 83       	st	Z, r22
     95c:	31 97       	sbiw	r30, 0x01	; 1
     95e:	70 83       	st	Z, r23
     960:	31 97       	sbiw	r30, 0x01	; 1
     962:	10 82       	st	Z, r1
     964:	31 97       	sbiw	r30, 0x01	; 1
     966:	10 82       	st	Z, r1
     968:	31 97       	sbiw	r30, 0x01	; 1
     96a:	60 e8       	ldi	r22, 0x80	; 128
     96c:	60 83       	st	Z, r22
     96e:	31 97       	sbiw	r30, 0x01	; 1
     970:	10 82       	st	Z, r1
     972:	31 97       	sbiw	r30, 0x01	; 1
     974:	62 e0       	ldi	r22, 0x02	; 2
     976:	60 83       	st	Z, r22
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	63 e0       	ldi	r22, 0x03	; 3
     97c:	60 83       	st	Z, r22
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	64 e0       	ldi	r22, 0x04	; 4
     982:	60 83       	st	Z, r22
     984:	31 97       	sbiw	r30, 0x01	; 1
     986:	65 e0       	ldi	r22, 0x05	; 5
     988:	60 83       	st	Z, r22
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	66 e0       	ldi	r22, 0x06	; 6
     98e:	60 83       	st	Z, r22
     990:	31 97       	sbiw	r30, 0x01	; 1
     992:	67 e0       	ldi	r22, 0x07	; 7
     994:	60 83       	st	Z, r22
     996:	31 97       	sbiw	r30, 0x01	; 1
     998:	68 e0       	ldi	r22, 0x08	; 8
     99a:	60 83       	st	Z, r22
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	69 e0       	ldi	r22, 0x09	; 9
     9a0:	60 83       	st	Z, r22
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	60 e1       	ldi	r22, 0x10	; 16
     9a6:	60 83       	st	Z, r22
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	30 83       	st	Z, r19
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	32 e1       	ldi	r19, 0x12	; 18
     9b0:	30 83       	st	Z, r19
     9b2:	31 97       	sbiw	r30, 0x01	; 1
     9b4:	33 e1       	ldi	r19, 0x13	; 19
     9b6:	30 83       	st	Z, r19
     9b8:	31 97       	sbiw	r30, 0x01	; 1
     9ba:	34 e1       	ldi	r19, 0x14	; 20
     9bc:	30 83       	st	Z, r19
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	35 e1       	ldi	r19, 0x15	; 21
     9c2:	30 83       	st	Z, r19
     9c4:	31 97       	sbiw	r30, 0x01	; 1
     9c6:	36 e1       	ldi	r19, 0x16	; 22
     9c8:	30 83       	st	Z, r19
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	37 e1       	ldi	r19, 0x17	; 23
     9ce:	30 83       	st	Z, r19
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	38 e1       	ldi	r19, 0x18	; 24
     9d4:	30 83       	st	Z, r19
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	39 e1       	ldi	r19, 0x19	; 25
     9da:	30 83       	st	Z, r19
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	30 e2       	ldi	r19, 0x20	; 32
     9e0:	30 83       	st	Z, r19
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	31 e2       	ldi	r19, 0x21	; 33
     9e6:	30 83       	st	Z, r19
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	20 83       	st	Z, r18
     9ec:	31 97       	sbiw	r30, 0x01	; 1
     9ee:	23 e2       	ldi	r18, 0x23	; 35
     9f0:	20 83       	st	Z, r18
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	40 83       	st	Z, r20
     9f6:	31 97       	sbiw	r30, 0x01	; 1
     9f8:	50 83       	st	Z, r21
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	26 e2       	ldi	r18, 0x26	; 38
     9fe:	20 83       	st	Z, r18
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	27 e2       	ldi	r18, 0x27	; 39
     a04:	20 83       	st	Z, r18
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	28 e2       	ldi	r18, 0x28	; 40
     a0a:	20 83       	st	Z, r18
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	29 e2       	ldi	r18, 0x29	; 41
     a10:	20 83       	st	Z, r18
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	20 e3       	ldi	r18, 0x30	; 48
     a16:	20 83       	st	Z, r18
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	21 e3       	ldi	r18, 0x31	; 49
     a1c:	20 83       	st	Z, r18
     a1e:	87 97       	sbiw	r24, 0x27	; 39
     a20:	08 95       	ret

00000a22 <xPortStartScheduler>:
     a22:	65 e0       	ldi	r22, 0x05	; 5
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	98 e0       	ldi	r25, 0x08	; 8
     a28:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <TC0_ConfigClockSource>
     a2c:	83 ef       	ldi	r24, 0xF3	; 243
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	80 93 26 08 	sts	0x0826, r24
     a34:	90 93 27 08 	sts	0x0827, r25
     a38:	61 e0       	ldi	r22, 0x01	; 1
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	98 e0       	ldi	r25, 0x08	; 8
     a3e:	0e 94 67 17 	call	0x2ece	; 0x2ece <TC0_SetOverflowIntLevel>
     a42:	e0 ea       	ldi	r30, 0xA0	; 160
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	82 81       	ldd	r24, Z+2	; 0x02
     a48:	81 60       	ori	r24, 0x01	; 1
     a4a:	82 83       	std	Z+2, r24	; 0x02
     a4c:	a0 91 5d 93 	lds	r26, 0x935D
     a50:	b0 91 5e 93 	lds	r27, 0x935E
     a54:	cd 91       	ld	r28, X+
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	dd 91       	ld	r29, X+
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	bf 91       	pop	r27
     a66:	af 91       	pop	r26
     a68:	9f 91       	pop	r25
     a6a:	8f 91       	pop	r24
     a6c:	7f 91       	pop	r23
     a6e:	6f 91       	pop	r22
     a70:	5f 91       	pop	r21
     a72:	4f 91       	pop	r20
     a74:	3f 91       	pop	r19
     a76:	2f 91       	pop	r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	bf 90       	pop	r11
     a86:	af 90       	pop	r10
     a88:	9f 90       	pop	r9
     a8a:	8f 90       	pop	r8
     a8c:	7f 90       	pop	r7
     a8e:	6f 90       	pop	r6
     a90:	5f 90       	pop	r5
     a92:	4f 90       	pop	r4
     a94:	3f 90       	pop	r3
     a96:	2f 90       	pop	r2
     a98:	1f 90       	pop	r1
     a9a:	0f 90       	pop	r0
     a9c:	0f be       	out	0x3f, r0	; 63
     a9e:	0f 90       	pop	r0
     aa0:	08 95       	ret
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	08 95       	ret

00000aa6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     aa6:	0f 92       	push	r0
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	0f 92       	push	r0
     aae:	1f 92       	push	r1
     ab0:	11 24       	eor	r1, r1
     ab2:	2f 92       	push	r2
     ab4:	3f 92       	push	r3
     ab6:	4f 92       	push	r4
     ab8:	5f 92       	push	r5
     aba:	6f 92       	push	r6
     abc:	7f 92       	push	r7
     abe:	8f 92       	push	r8
     ac0:	9f 92       	push	r9
     ac2:	af 92       	push	r10
     ac4:	bf 92       	push	r11
     ac6:	cf 92       	push	r12
     ac8:	df 92       	push	r13
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
     aee:	a0 91 5d 93 	lds	r26, 0x935D
     af2:	b0 91 5e 93 	lds	r27, 0x935E
     af6:	0d b6       	in	r0, 0x3d	; 61
     af8:	0d 92       	st	X+, r0
     afa:	0e b6       	in	r0, 0x3e	; 62
     afc:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     afe:	0e 94 b4 09 	call	0x1368	; 0x1368 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b02:	a0 91 5d 93 	lds	r26, 0x935D
     b06:	b0 91 5e 93 	lds	r27, 0x935E
     b0a:	cd 91       	ld	r28, X+
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	dd 91       	ld	r29, X+
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	ff 91       	pop	r31
     b14:	ef 91       	pop	r30
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	bf 91       	pop	r27
     b1c:	af 91       	pop	r26
     b1e:	9f 91       	pop	r25
     b20:	8f 91       	pop	r24
     b22:	7f 91       	pop	r23
     b24:	6f 91       	pop	r22
     b26:	5f 91       	pop	r21
     b28:	4f 91       	pop	r20
     b2a:	3f 91       	pop	r19
     b2c:	2f 91       	pop	r18
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	5f 90       	pop	r5
     b48:	4f 90       	pop	r4
     b4a:	3f 90       	pop	r3
     b4c:	2f 90       	pop	r2
     b4e:	1f 90       	pop	r1
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b56:	08 95       	ret

00000b58 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b58:	0f 92       	push	r0
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	0f 92       	push	r0
     b60:	1f 92       	push	r1
     b62:	11 24       	eor	r1, r1
     b64:	2f 92       	push	r2
     b66:	3f 92       	push	r3
     b68:	4f 92       	push	r4
     b6a:	5f 92       	push	r5
     b6c:	6f 92       	push	r6
     b6e:	7f 92       	push	r7
     b70:	8f 92       	push	r8
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	cf 93       	push	r28
     b9a:	df 93       	push	r29
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
     ba0:	a0 91 5d 93 	lds	r26, 0x935D
     ba4:	b0 91 5e 93 	lds	r27, 0x935E
     ba8:	0d b6       	in	r0, 0x3d	; 61
     baa:	0d 92       	st	X+, r0
     bac:	0e b6       	in	r0, 0x3e	; 62
     bae:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     bb0:	0e 94 3c 08 	call	0x1078	; 0x1078 <xTaskIncrementTick>
     bb4:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     bb6:	0e 94 b4 09 	call	0x1368	; 0x1368 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     bba:	a0 91 5d 93 	lds	r26, 0x935D
     bbe:	b0 91 5e 93 	lds	r27, 0x935E
     bc2:	cd 91       	ld	r28, X+
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	dd 91       	ld	r29, X+
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	df 90       	pop	r13
     bf0:	cf 90       	pop	r12
     bf2:	bf 90       	pop	r11
     bf4:	af 90       	pop	r10
     bf6:	9f 90       	pop	r9
     bf8:	8f 90       	pop	r8
     bfa:	7f 90       	pop	r7
     bfc:	6f 90       	pop	r6
     bfe:	5f 90       	pop	r5
     c00:	4f 90       	pop	r4
     c02:	3f 90       	pop	r3
     c04:	2f 90       	pop	r2
     c06:	1f 90       	pop	r1
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c0e:	08 95       	ret

00000c10 <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
     c10:	0e 94 ac 05 	call	0xb58	; 0xb58 <vPortYieldFromTick>
		asm volatile ( "reti" );
     c14:	18 95       	reti

00000c16 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
     c1a:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     c1c:	0e 94 36 08 	call	0x106c	; 0x106c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     c20:	80 91 0c 23 	lds	r24, 0x230C
     c24:	90 91 0d 23 	lds	r25, 0x230D
     c28:	89 2b       	or	r24, r25
     c2a:	31 f4       	brne	.+12     	; 0xc38 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     c2c:	81 e1       	ldi	r24, 0x11	; 17
     c2e:	93 e2       	ldi	r25, 0x23	; 35
     c30:	80 93 0c 23 	sts	0x230C, r24
     c34:	90 93 0d 23 	sts	0x230D, r25
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     c38:	20 91 0e 23 	lds	r18, 0x230E
     c3c:	30 91 0f 23 	lds	r19, 0x230F
     c40:	ce 01       	movw	r24, r28
     c42:	82 0f       	add	r24, r18
     c44:	93 1f       	adc	r25, r19
     c46:	8f 3f       	cpi	r24, 0xFF	; 255
     c48:	4f e6       	ldi	r20, 0x6F	; 111
     c4a:	94 07       	cpc	r25, r20
     c4c:	70 f4       	brcc	.+28     	; 0xc6a <pvPortMalloc+0x54>
     c4e:	28 17       	cp	r18, r24
     c50:	39 07       	cpc	r19, r25
     c52:	70 f4       	brcc	.+28     	; 0xc70 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     c54:	c0 91 0c 23 	lds	r28, 0x230C
     c58:	d0 91 0d 23 	lds	r29, 0x230D
     c5c:	c2 0f       	add	r28, r18
     c5e:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     c60:	80 93 0e 23 	sts	0x230E, r24
     c64:	90 93 0f 23 	sts	0x230F, r25
     c68:	05 c0       	rjmp	.+10     	; 0xc74 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <pvPortMalloc+0x5e>
     c70:	c0 e0       	ldi	r28, 0x00	; 0
     c72:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     c74:	0e 94 12 09 	call	0x1224	; 0x1224 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     c78:	ce 01       	movw	r24, r28
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	08 95       	ret

00000c80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     c80:	08 95       	ret

00000c82 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c82:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c84:	03 96       	adiw	r24, 0x03	; 3
     c86:	81 83       	std	Z+1, r24	; 0x01
     c88:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c8a:	2f ef       	ldi	r18, 0xFF	; 255
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	23 83       	std	Z+3, r18	; 0x03
     c90:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c92:	85 83       	std	Z+5, r24	; 0x05
     c94:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c96:	87 83       	std	Z+7, r24	; 0x07
     c98:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c9a:	10 82       	st	Z, r1
     c9c:	08 95       	ret

00000c9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c9e:	fc 01       	movw	r30, r24
     ca0:	10 86       	std	Z+8, r1	; 0x08
     ca2:	11 86       	std	Z+9, r1	; 0x09
     ca4:	08 95       	ret

00000ca6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	9c 01       	movw	r18, r24
     cac:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     cae:	dc 01       	movw	r26, r24
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	cd 91       	ld	r28, X+
     cb4:	dc 91       	ld	r29, X
     cb6:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     cb8:	c2 83       	std	Z+2, r28	; 0x02
     cba:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	84 83       	std	Z+4, r24	; 0x04
     cc2:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     cc4:	8c 81       	ldd	r24, Y+4	; 0x04
     cc6:	9d 81       	ldd	r25, Y+5	; 0x05
     cc8:	dc 01       	movw	r26, r24
     cca:	12 96       	adiw	r26, 0x02	; 2
     ccc:	6d 93       	st	X+, r22
     cce:	7c 93       	st	X, r23
     cd0:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     cd2:	6c 83       	std	Y+4, r22	; 0x04
     cd4:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     cd6:	20 87       	std	Z+8, r18	; 0x08
     cd8:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     cda:	f9 01       	movw	r30, r18
     cdc:	80 81       	ld	r24, Z
     cde:	8f 5f       	subi	r24, 0xFF	; 255
     ce0:	80 83       	st	Z, r24
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     cee:	48 81       	ld	r20, Y
     cf0:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     cf2:	4f 3f       	cpi	r20, 0xFF	; 255
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	52 07       	cpc	r21, r18
     cf8:	21 f4       	brne	.+8      	; 0xd02 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     cfa:	fc 01       	movw	r30, r24
     cfc:	a7 81       	ldd	r26, Z+7	; 0x07
     cfe:	b0 85       	ldd	r27, Z+8	; 0x08
     d00:	0d c0       	rjmp	.+26     	; 0xd1c <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d02:	dc 01       	movw	r26, r24
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <vListInsert+0x22>
     d08:	df 01       	movw	r26, r30
     d0a:	12 96       	adiw	r26, 0x02	; 2
     d0c:	ed 91       	ld	r30, X+
     d0e:	fc 91       	ld	r31, X
     d10:	13 97       	sbiw	r26, 0x03	; 3
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	42 17       	cp	r20, r18
     d18:	53 07       	cpc	r21, r19
     d1a:	b0 f7       	brcc	.-20     	; 0xd08 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	ed 91       	ld	r30, X+
     d20:	fc 91       	ld	r31, X
     d22:	13 97       	sbiw	r26, 0x03	; 3
     d24:	ea 83       	std	Y+2, r30	; 0x02
     d26:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d28:	c4 83       	std	Z+4, r28	; 0x04
     d2a:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     d2c:	ac 83       	std	Y+4, r26	; 0x04
     d2e:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     d30:	12 96       	adiw	r26, 0x02	; 2
     d32:	cd 93       	st	X+, r28
     d34:	dc 93       	st	X, r29
     d36:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d38:	88 87       	std	Y+8, r24	; 0x08
     d3a:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 81       	ld	r18, Z
     d40:	2f 5f       	subi	r18, 0xFF	; 255
     d42:	20 83       	st	Z, r18
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	08 95       	ret

00000d4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d50:	a0 85       	ldd	r26, Z+8	; 0x08
     d52:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d54:	c2 81       	ldd	r28, Z+2	; 0x02
     d56:	d3 81       	ldd	r29, Z+3	; 0x03
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	95 81       	ldd	r25, Z+5	; 0x05
     d5c:	8c 83       	std	Y+4, r24	; 0x04
     d5e:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d60:	c4 81       	ldd	r28, Z+4	; 0x04
     d62:	d5 81       	ldd	r29, Z+5	; 0x05
     d64:	82 81       	ldd	r24, Z+2	; 0x02
     d66:	93 81       	ldd	r25, Z+3	; 0x03
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d6c:	11 96       	adiw	r26, 0x01	; 1
     d6e:	cd 91       	ld	r28, X+
     d70:	dc 91       	ld	r29, X
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	ce 17       	cp	r28, r30
     d76:	df 07       	cpc	r29, r31
     d78:	31 f4       	brne	.+12     	; 0xd86 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	11 96       	adiw	r26, 0x01	; 1
     d80:	8d 93       	st	X+, r24
     d82:	9c 93       	st	X, r25
     d84:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     d86:	10 86       	std	Z+8, r1	; 0x08
     d88:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     d8a:	8c 91       	ld	r24, X
     d8c:	81 50       	subi	r24, 0x01	; 1
     d8e:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     d96:	ff cf       	rjmp	.-2      	; 0xd96 <prvIdleTask>

00000d98 <prvAddCurrentTaskToDelayedList>:
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
     d9e:	e0 91 5d 93 	lds	r30, 0x935D
     da2:	f0 91 5e 93 	lds	r31, 0x935E
     da6:	82 83       	std	Z+2, r24	; 0x02
     da8:	93 83       	std	Z+3, r25	; 0x03
     daa:	80 91 17 93 	lds	r24, 0x9317
     dae:	90 91 18 93 	lds	r25, 0x9318
     db2:	c8 17       	cp	r28, r24
     db4:	d9 07       	cpc	r29, r25
     db6:	68 f4       	brcc	.+26     	; 0xdd2 <prvAddCurrentTaskToDelayedList+0x3a>
     db8:	60 91 5d 93 	lds	r22, 0x935D
     dbc:	70 91 5e 93 	lds	r23, 0x935E
     dc0:	80 91 23 93 	lds	r24, 0x9323
     dc4:	90 91 24 93 	lds	r25, 0x9324
     dc8:	6e 5f       	subi	r22, 0xFE	; 254
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	0e 94 74 06 	call	0xce8	; 0xce8 <vListInsert>
     dd0:	17 c0       	rjmp	.+46     	; 0xe00 <prvAddCurrentTaskToDelayedList+0x68>
     dd2:	60 91 5d 93 	lds	r22, 0x935D
     dd6:	70 91 5e 93 	lds	r23, 0x935E
     dda:	80 91 25 93 	lds	r24, 0x9325
     dde:	90 91 26 93 	lds	r25, 0x9326
     de2:	6e 5f       	subi	r22, 0xFE	; 254
     de4:	7f 4f       	sbci	r23, 0xFF	; 255
     de6:	0e 94 74 06 	call	0xce8	; 0xce8 <vListInsert>
     dea:	80 91 89 22 	lds	r24, 0x2289
     dee:	90 91 8a 22 	lds	r25, 0x228A
     df2:	c8 17       	cp	r28, r24
     df4:	d9 07       	cpc	r29, r25
     df6:	20 f4       	brcc	.+8      	; 0xe00 <prvAddCurrentTaskToDelayedList+0x68>
     df8:	c0 93 89 22 	sts	0x2289, r28
     dfc:	d0 93 8a 22 	sts	0x228A, r29
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <xTaskGenericCreate>:
     e06:	4f 92       	push	r4
     e08:	5f 92       	push	r5
     e0a:	6f 92       	push	r6
     e0c:	7f 92       	push	r7
     e0e:	8f 92       	push	r8
     e10:	9f 92       	push	r9
     e12:	af 92       	push	r10
     e14:	bf 92       	push	r11
     e16:	cf 92       	push	r12
     e18:	df 92       	push	r13
     e1a:	ef 92       	push	r14
     e1c:	ff 92       	push	r15
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	4c 01       	movw	r8, r24
     e28:	eb 01       	movw	r28, r22
     e2a:	5a 01       	movw	r10, r20
     e2c:	29 01       	movw	r4, r18
     e2e:	81 e2       	ldi	r24, 0x21	; 33
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 0b 06 	call	0xc16	; 0xc16 <pvPortMalloc>
     e36:	3c 01       	movw	r6, r24
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <xTaskGenericCreate+0x38>
     e3c:	da c0       	rjmp	.+436    	; 0xff2 <xTaskGenericCreate+0x1ec>
     e3e:	c1 14       	cp	r12, r1
     e40:	d1 04       	cpc	r13, r1
     e42:	09 f0       	breq	.+2      	; 0xe46 <xTaskGenericCreate+0x40>
     e44:	d2 c0       	rjmp	.+420    	; 0xfea <xTaskGenericCreate+0x1e4>
     e46:	c5 01       	movw	r24, r10
     e48:	0e 94 0b 06 	call	0xc16	; 0xc16 <pvPortMalloc>
     e4c:	f3 01       	movw	r30, r6
     e4e:	87 8b       	std	Z+23, r24	; 0x17
     e50:	90 8f       	std	Z+24, r25	; 0x18
     e52:	89 2b       	or	r24, r25
     e54:	21 f4       	brne	.+8      	; 0xe5e <xTaskGenericCreate+0x58>
     e56:	c3 01       	movw	r24, r6
     e58:	0e 94 40 06 	call	0xc80	; 0xc80 <vPortFree>
     e5c:	ca c0       	rjmp	.+404    	; 0xff2 <xTaskGenericCreate+0x1ec>
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	af 1a       	sub	r10, r31
     e62:	b1 08       	sbc	r11, r1
     e64:	f3 01       	movw	r30, r6
     e66:	87 89       	ldd	r24, Z+23	; 0x17
     e68:	90 8d       	ldd	r25, Z+24	; 0x18
     e6a:	a8 0e       	add	r10, r24
     e6c:	b9 1e       	adc	r11, r25
     e6e:	88 81       	ld	r24, Y
     e70:	81 8f       	std	Z+25, r24	; 0x19
     e72:	88 81       	ld	r24, Y
     e74:	88 23       	and	r24, r24
     e76:	81 f0       	breq	.+32     	; 0xe98 <xTaskGenericCreate+0x92>
     e78:	d3 01       	movw	r26, r6
     e7a:	5a 96       	adiw	r26, 0x1a	; 26
     e7c:	fe 01       	movw	r30, r28
     e7e:	31 96       	adiw	r30, 0x01	; 1
     e80:	9e 01       	movw	r18, r28
     e82:	28 5f       	subi	r18, 0xF8	; 248
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	ef 01       	movw	r28, r30
     e88:	81 91       	ld	r24, Z+
     e8a:	8d 93       	st	X+, r24
     e8c:	88 81       	ld	r24, Y
     e8e:	88 23       	and	r24, r24
     e90:	19 f0       	breq	.+6      	; 0xe98 <xTaskGenericCreate+0x92>
     e92:	e2 17       	cp	r30, r18
     e94:	f3 07       	cpc	r31, r19
     e96:	b9 f7       	brne	.-18     	; 0xe86 <xTaskGenericCreate+0x80>
     e98:	f3 01       	movw	r30, r6
     e9a:	10 a2       	std	Z+32, r1	; 0x20
     e9c:	10 2f       	mov	r17, r16
     e9e:	04 30       	cpi	r16, 0x04	; 4
     ea0:	08 f0       	brcs	.+2      	; 0xea4 <xTaskGenericCreate+0x9e>
     ea2:	13 e0       	ldi	r17, 0x03	; 3
     ea4:	f3 01       	movw	r30, r6
     ea6:	16 8b       	std	Z+22, r17	; 0x16
     ea8:	e3 01       	movw	r28, r6
     eaa:	22 96       	adiw	r28, 0x02	; 2
     eac:	ce 01       	movw	r24, r28
     eae:	0e 94 4f 06 	call	0xc9e	; 0xc9e <vListInitialiseItem>
     eb2:	c3 01       	movw	r24, r6
     eb4:	0c 96       	adiw	r24, 0x0c	; 12
     eb6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <vListInitialiseItem>
     eba:	f3 01       	movw	r30, r6
     ebc:	60 86       	std	Z+8, r6	; 0x08
     ebe:	71 86       	std	Z+9, r7	; 0x09
     ec0:	84 e0       	ldi	r24, 0x04	; 4
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	81 1b       	sub	r24, r17
     ec6:	91 09       	sbc	r25, r1
     ec8:	84 87       	std	Z+12, r24	; 0x0c
     eca:	95 87       	std	Z+13, r25	; 0x0d
     ecc:	62 8a       	std	Z+18, r6	; 0x12
     ece:	73 8a       	std	Z+19, r7	; 0x13
     ed0:	a2 01       	movw	r20, r4
     ed2:	b4 01       	movw	r22, r8
     ed4:	c5 01       	movw	r24, r10
     ed6:	0e 94 a3 04 	call	0x946	; 0x946 <pxPortInitialiseStack>
     eda:	f3 01       	movw	r30, r6
     edc:	80 83       	st	Z, r24
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	e1 14       	cp	r14, r1
     ee2:	f1 04       	cpc	r15, r1
     ee4:	19 f0       	breq	.+6      	; 0xeec <xTaskGenericCreate+0xe6>
     ee6:	f7 01       	movw	r30, r14
     ee8:	60 82       	st	Z, r6
     eea:	71 82       	std	Z+1, r7	; 0x01
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	0f 92       	push	r0
     ef2:	80 91 19 93 	lds	r24, 0x9319
     ef6:	8f 5f       	subi	r24, 0xFF	; 255
     ef8:	80 93 19 93 	sts	0x9319, r24
     efc:	80 91 5d 93 	lds	r24, 0x935D
     f00:	90 91 5e 93 	lds	r25, 0x935E
     f04:	89 2b       	or	r24, r25
     f06:	89 f5       	brne	.+98     	; 0xf6a <xTaskGenericCreate+0x164>
     f08:	60 92 5d 93 	sts	0x935D, r6
     f0c:	70 92 5e 93 	sts	0x935E, r7
     f10:	80 91 19 93 	lds	r24, 0x9319
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	c1 f5       	brne	.+112    	; 0xf88 <xTaskGenericCreate+0x182>
     f18:	89 e3       	ldi	r24, 0x39	; 57
     f1a:	93 e9       	ldi	r25, 0x93	; 147
     f1c:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f20:	82 e4       	ldi	r24, 0x42	; 66
     f22:	93 e9       	ldi	r25, 0x93	; 147
     f24:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f28:	8b e4       	ldi	r24, 0x4B	; 75
     f2a:	93 e9       	ldi	r25, 0x93	; 147
     f2c:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f30:	84 e5       	ldi	r24, 0x54	; 84
     f32:	93 e9       	ldi	r25, 0x93	; 147
     f34:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f38:	80 e3       	ldi	r24, 0x30	; 48
     f3a:	93 e9       	ldi	r25, 0x93	; 147
     f3c:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f40:	87 e2       	ldi	r24, 0x27	; 39
     f42:	93 e9       	ldi	r25, 0x93	; 147
     f44:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f48:	8a e1       	ldi	r24, 0x1A	; 26
     f4a:	93 e9       	ldi	r25, 0x93	; 147
     f4c:	0e 94 41 06 	call	0xc82	; 0xc82 <vListInitialise>
     f50:	80 e3       	ldi	r24, 0x30	; 48
     f52:	93 e9       	ldi	r25, 0x93	; 147
     f54:	80 93 25 93 	sts	0x9325, r24
     f58:	90 93 26 93 	sts	0x9326, r25
     f5c:	87 e2       	ldi	r24, 0x27	; 39
     f5e:	93 e9       	ldi	r25, 0x93	; 147
     f60:	80 93 23 93 	sts	0x9323, r24
     f64:	90 93 24 93 	sts	0x9324, r25
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <xTaskGenericCreate+0x182>
     f6a:	80 91 15 93 	lds	r24, 0x9315
     f6e:	81 11       	cpse	r24, r1
     f70:	0b c0       	rjmp	.+22     	; 0xf88 <xTaskGenericCreate+0x182>
     f72:	e0 91 5d 93 	lds	r30, 0x935D
     f76:	f0 91 5e 93 	lds	r31, 0x935E
     f7a:	86 89       	ldd	r24, Z+22	; 0x16
     f7c:	08 17       	cp	r16, r24
     f7e:	20 f0       	brcs	.+8      	; 0xf88 <xTaskGenericCreate+0x182>
     f80:	60 92 5d 93 	sts	0x935D, r6
     f84:	70 92 5e 93 	sts	0x935E, r7
     f88:	80 91 11 93 	lds	r24, 0x9311
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	80 93 11 93 	sts	0x9311, r24
     f92:	f3 01       	movw	r30, r6
     f94:	86 89       	ldd	r24, Z+22	; 0x16
     f96:	90 91 16 93 	lds	r25, 0x9316
     f9a:	98 17       	cp	r25, r24
     f9c:	10 f4       	brcc	.+4      	; 0xfa2 <xTaskGenericCreate+0x19c>
     f9e:	80 93 16 93 	sts	0x9316, r24
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9c 01       	movw	r18, r24
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	22 0f       	add	r18, r18
     fac:	33 1f       	adc	r19, r19
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	82 0f       	add	r24, r18
     fb4:	93 1f       	adc	r25, r19
     fb6:	be 01       	movw	r22, r28
     fb8:	87 5c       	subi	r24, 0xC7	; 199
     fba:	9c 46       	sbci	r25, 0x6C	; 108
     fbc:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	80 91 15 93 	lds	r24, 0x9315
     fc8:	88 23       	and	r24, r24
     fca:	59 f0       	breq	.+22     	; 0xfe2 <xTaskGenericCreate+0x1dc>
     fcc:	e0 91 5d 93 	lds	r30, 0x935D
     fd0:	f0 91 5e 93 	lds	r31, 0x935E
     fd4:	86 89       	ldd	r24, Z+22	; 0x16
     fd6:	80 17       	cp	r24, r16
     fd8:	30 f4       	brcc	.+12     	; 0xfe6 <xTaskGenericCreate+0x1e0>
     fda:	0e 94 53 05 	call	0xaa6	; 0xaa6 <vPortYield>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	09 c0       	rjmp	.+18     	; 0xff4 <xTaskGenericCreate+0x1ee>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	07 c0       	rjmp	.+14     	; 0xff4 <xTaskGenericCreate+0x1ee>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	05 c0       	rjmp	.+10     	; 0xff4 <xTaskGenericCreate+0x1ee>
     fea:	fc 01       	movw	r30, r24
     fec:	c7 8a       	std	Z+23, r12	; 0x17
     fee:	d0 8e       	std	Z+24, r13	; 0x18
     ff0:	36 cf       	rjmp	.-404    	; 0xe5e <xTaskGenericCreate+0x58>
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	ff 90       	pop	r15
     ffe:	ef 90       	pop	r14
    1000:	df 90       	pop	r13
    1002:	cf 90       	pop	r12
    1004:	bf 90       	pop	r11
    1006:	af 90       	pop	r10
    1008:	9f 90       	pop	r9
    100a:	8f 90       	pop	r8
    100c:	7f 90       	pop	r7
    100e:	6f 90       	pop	r6
    1010:	5f 90       	pop	r5
    1012:	4f 90       	pop	r4
    1014:	08 95       	ret

00001016 <vTaskStartScheduler>:
    1016:	af 92       	push	r10
    1018:	bf 92       	push	r11
    101a:	cf 92       	push	r12
    101c:	df 92       	push	r13
    101e:	ef 92       	push	r14
    1020:	ff 92       	push	r15
    1022:	0f 93       	push	r16
    1024:	a1 2c       	mov	r10, r1
    1026:	b1 2c       	mov	r11, r1
    1028:	c1 2c       	mov	r12, r1
    102a:	d1 2c       	mov	r13, r1
    102c:	e1 2c       	mov	r14, r1
    102e:	f1 2c       	mov	r15, r1
    1030:	00 e0       	ldi	r16, 0x00	; 0
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	44 e6       	ldi	r20, 0x64	; 100
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	65 eb       	ldi	r22, 0xB5	; 181
    103c:	72 e2       	ldi	r23, 0x22	; 34
    103e:	8b ec       	ldi	r24, 0xCB	; 203
    1040:	96 e0       	ldi	r25, 0x06	; 6
    1042:	0e 94 03 07 	call	0xe06	; 0xe06 <xTaskGenericCreate>
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	49 f4       	brne	.+18     	; 0x105c <vTaskStartScheduler+0x46>
    104a:	f8 94       	cli
    104c:	80 93 15 93 	sts	0x9315, r24
    1050:	10 92 17 93 	sts	0x9317, r1
    1054:	10 92 18 93 	sts	0x9318, r1
    1058:	0e 94 11 05 	call	0xa22	; 0xa22 <xPortStartScheduler>
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	08 95       	ret

0000106c <vTaskSuspendAll>:
    106c:	80 91 10 93 	lds	r24, 0x9310
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 10 93 	sts	0x9310, r24
    1076:	08 95       	ret

00001078 <xTaskIncrementTick>:
    1078:	df 92       	push	r13
    107a:	ef 92       	push	r14
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	80 91 10 93 	lds	r24, 0x9310
    108a:	81 11       	cpse	r24, r1
    108c:	b6 c0       	rjmp	.+364    	; 0x11fa <xTaskIncrementTick+0x182>
    108e:	80 91 17 93 	lds	r24, 0x9317
    1092:	90 91 18 93 	lds	r25, 0x9318
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	80 93 17 93 	sts	0x9317, r24
    109c:	90 93 18 93 	sts	0x9318, r25
    10a0:	e0 90 17 93 	lds	r14, 0x9317
    10a4:	f0 90 18 93 	lds	r15, 0x9318
    10a8:	e1 14       	cp	r14, r1
    10aa:	f1 04       	cpc	r15, r1
    10ac:	99 f5       	brne	.+102    	; 0x1114 <xTaskIncrementTick+0x9c>
    10ae:	80 91 25 93 	lds	r24, 0x9325
    10b2:	90 91 26 93 	lds	r25, 0x9326
    10b6:	20 91 23 93 	lds	r18, 0x9323
    10ba:	30 91 24 93 	lds	r19, 0x9324
    10be:	20 93 25 93 	sts	0x9325, r18
    10c2:	30 93 26 93 	sts	0x9326, r19
    10c6:	80 93 23 93 	sts	0x9323, r24
    10ca:	90 93 24 93 	sts	0x9324, r25
    10ce:	80 91 12 93 	lds	r24, 0x9312
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 12 93 	sts	0x9312, r24
    10d8:	e0 91 25 93 	lds	r30, 0x9325
    10dc:	f0 91 26 93 	lds	r31, 0x9326
    10e0:	80 81       	ld	r24, Z
    10e2:	81 11       	cpse	r24, r1
    10e4:	07 c0       	rjmp	.+14     	; 0x10f4 <xTaskIncrementTick+0x7c>
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	80 93 89 22 	sts	0x2289, r24
    10ee:	90 93 8a 22 	sts	0x228A, r25
    10f2:	10 c0       	rjmp	.+32     	; 0x1114 <xTaskIncrementTick+0x9c>
    10f4:	e0 91 25 93 	lds	r30, 0x9325
    10f8:	f0 91 26 93 	lds	r31, 0x9326
    10fc:	05 80       	ldd	r0, Z+5	; 0x05
    10fe:	f6 81       	ldd	r31, Z+6	; 0x06
    1100:	e0 2d       	mov	r30, r0
    1102:	06 80       	ldd	r0, Z+6	; 0x06
    1104:	f7 81       	ldd	r31, Z+7	; 0x07
    1106:	e0 2d       	mov	r30, r0
    1108:	82 81       	ldd	r24, Z+2	; 0x02
    110a:	93 81       	ldd	r25, Z+3	; 0x03
    110c:	80 93 89 22 	sts	0x2289, r24
    1110:	90 93 8a 22 	sts	0x228A, r25
    1114:	80 91 89 22 	lds	r24, 0x2289
    1118:	90 91 8a 22 	lds	r25, 0x228A
    111c:	e8 16       	cp	r14, r24
    111e:	f9 06       	cpc	r15, r25
    1120:	10 f4       	brcc	.+4      	; 0x1126 <xTaskIncrementTick+0xae>
    1122:	d1 2c       	mov	r13, r1
    1124:	52 c0       	rjmp	.+164    	; 0x11ca <xTaskIncrementTick+0x152>
    1126:	d1 2c       	mov	r13, r1
    1128:	e0 91 25 93 	lds	r30, 0x9325
    112c:	f0 91 26 93 	lds	r31, 0x9326
    1130:	90 81       	ld	r25, Z
    1132:	91 11       	cpse	r25, r1
    1134:	07 c0       	rjmp	.+14     	; 0x1144 <xTaskIncrementTick+0xcc>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	80 93 89 22 	sts	0x2289, r24
    113e:	90 93 8a 22 	sts	0x228A, r25
    1142:	43 c0       	rjmp	.+134    	; 0x11ca <xTaskIncrementTick+0x152>
    1144:	e0 91 25 93 	lds	r30, 0x9325
    1148:	f0 91 26 93 	lds	r31, 0x9326
    114c:	05 80       	ldd	r0, Z+5	; 0x05
    114e:	f6 81       	ldd	r31, Z+6	; 0x06
    1150:	e0 2d       	mov	r30, r0
    1152:	c6 81       	ldd	r28, Z+6	; 0x06
    1154:	d7 81       	ldd	r29, Z+7	; 0x07
    1156:	2a 81       	ldd	r18, Y+2	; 0x02
    1158:	3b 81       	ldd	r19, Y+3	; 0x03
    115a:	e2 16       	cp	r14, r18
    115c:	f3 06       	cpc	r15, r19
    115e:	28 f4       	brcc	.+10     	; 0x116a <xTaskIncrementTick+0xf2>
    1160:	20 93 89 22 	sts	0x2289, r18
    1164:	30 93 8a 22 	sts	0x228A, r19
    1168:	30 c0       	rjmp	.+96     	; 0x11ca <xTaskIncrementTick+0x152>
    116a:	8e 01       	movw	r16, r28
    116c:	0e 5f       	subi	r16, 0xFE	; 254
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    1170:	c8 01       	movw	r24, r16
    1172:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uxListRemove>
    1176:	8c 89       	ldd	r24, Y+20	; 0x14
    1178:	9d 89       	ldd	r25, Y+21	; 0x15
    117a:	89 2b       	or	r24, r25
    117c:	21 f0       	breq	.+8      	; 0x1186 <xTaskIncrementTick+0x10e>
    117e:	ce 01       	movw	r24, r28
    1180:	0c 96       	adiw	r24, 0x0c	; 12
    1182:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uxListRemove>
    1186:	2e 89       	ldd	r18, Y+22	; 0x16
    1188:	80 91 16 93 	lds	r24, 0x9316
    118c:	82 17       	cp	r24, r18
    118e:	10 f4       	brcc	.+4      	; 0x1194 <xTaskIncrementTick+0x11c>
    1190:	20 93 16 93 	sts	0x9316, r18
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	c9 01       	movw	r24, r18
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	82 0f       	add	r24, r18
    11a6:	93 1f       	adc	r25, r19
    11a8:	b8 01       	movw	r22, r16
    11aa:	87 5c       	subi	r24, 0xC7	; 199
    11ac:	9c 46       	sbci	r25, 0x6C	; 108
    11ae:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    11b2:	e0 91 5d 93 	lds	r30, 0x935D
    11b6:	f0 91 5e 93 	lds	r31, 0x935E
    11ba:	9e 89       	ldd	r25, Y+22	; 0x16
    11bc:	86 89       	ldd	r24, Z+22	; 0x16
    11be:	98 17       	cp	r25, r24
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <xTaskIncrementTick+0x14c>
    11c2:	b2 cf       	rjmp	.-156    	; 0x1128 <xTaskIncrementTick+0xb0>
    11c4:	dd 24       	eor	r13, r13
    11c6:	d3 94       	inc	r13
    11c8:	af cf       	rjmp	.-162    	; 0x1128 <xTaskIncrementTick+0xb0>
    11ca:	e0 91 5d 93 	lds	r30, 0x935D
    11ce:	f0 91 5e 93 	lds	r31, 0x935E
    11d2:	86 89       	ldd	r24, Z+22	; 0x16
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	fc 01       	movw	r30, r24
    11d8:	ee 0f       	add	r30, r30
    11da:	ff 1f       	adc	r31, r31
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ee 0f       	add	r30, r30
    11e2:	ff 1f       	adc	r31, r31
    11e4:	8e 0f       	add	r24, r30
    11e6:	9f 1f       	adc	r25, r31
    11e8:	fc 01       	movw	r30, r24
    11ea:	e7 5c       	subi	r30, 0xC7	; 199
    11ec:	fc 46       	sbci	r31, 0x6C	; 108
    11ee:	80 81       	ld	r24, Z
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	48 f0       	brcs	.+18     	; 0x1206 <xTaskIncrementTick+0x18e>
    11f4:	dd 24       	eor	r13, r13
    11f6:	d3 94       	inc	r13
    11f8:	06 c0       	rjmp	.+12     	; 0x1206 <xTaskIncrementTick+0x18e>
    11fa:	80 91 14 93 	lds	r24, 0x9314
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	80 93 14 93 	sts	0x9314, r24
    1204:	d1 2c       	mov	r13, r1
    1206:	80 91 13 93 	lds	r24, 0x9313
    120a:	88 23       	and	r24, r24
    120c:	11 f0       	breq	.+4      	; 0x1212 <xTaskIncrementTick+0x19a>
    120e:	dd 24       	eor	r13, r13
    1210:	d3 94       	inc	r13
    1212:	8d 2d       	mov	r24, r13
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	ff 90       	pop	r15
    121e:	ef 90       	pop	r14
    1220:	df 90       	pop	r13
    1222:	08 95       	ret

00001224 <xTaskResumeAll>:
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	0f 92       	push	r0
    1238:	80 91 10 93 	lds	r24, 0x9310
    123c:	81 50       	subi	r24, 0x01	; 1
    123e:	80 93 10 93 	sts	0x9310, r24
    1242:	80 91 10 93 	lds	r24, 0x9310
    1246:	81 11       	cpse	r24, r1
    1248:	62 c0       	rjmp	.+196    	; 0x130e <xTaskResumeAll+0xea>
    124a:	80 91 19 93 	lds	r24, 0x9319
    124e:	81 11       	cpse	r24, r1
    1250:	33 c0       	rjmp	.+102    	; 0x12b8 <xTaskResumeAll+0x94>
    1252:	60 c0       	rjmp	.+192    	; 0x1314 <xTaskResumeAll+0xf0>
    1254:	d7 01       	movw	r26, r14
    1256:	15 96       	adiw	r26, 0x05	; 5
    1258:	ed 91       	ld	r30, X+
    125a:	fc 91       	ld	r31, X
    125c:	16 97       	sbiw	r26, 0x06	; 6
    125e:	c6 81       	ldd	r28, Z+6	; 0x06
    1260:	d7 81       	ldd	r29, Z+7	; 0x07
    1262:	ce 01       	movw	r24, r28
    1264:	0c 96       	adiw	r24, 0x0c	; 12
    1266:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uxListRemove>
    126a:	8e 01       	movw	r16, r28
    126c:	0e 5f       	subi	r16, 0xFE	; 254
    126e:	1f 4f       	sbci	r17, 0xFF	; 255
    1270:	c8 01       	movw	r24, r16
    1272:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uxListRemove>
    1276:	2e 89       	ldd	r18, Y+22	; 0x16
    1278:	80 91 16 93 	lds	r24, 0x9316
    127c:	82 17       	cp	r24, r18
    127e:	10 f4       	brcc	.+4      	; 0x1284 <xTaskResumeAll+0x60>
    1280:	20 93 16 93 	sts	0x9316, r18
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	c9 01       	movw	r24, r18
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	82 0f       	add	r24, r18
    1296:	93 1f       	adc	r25, r19
    1298:	b8 01       	movw	r22, r16
    129a:	87 5c       	subi	r24, 0xC7	; 199
    129c:	9c 46       	sbci	r25, 0x6C	; 108
    129e:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    12a2:	e0 91 5d 93 	lds	r30, 0x935D
    12a6:	f0 91 5e 93 	lds	r31, 0x935E
    12aa:	9e 89       	ldd	r25, Y+22	; 0x16
    12ac:	86 89       	ldd	r24, Z+22	; 0x16
    12ae:	98 17       	cp	r25, r24
    12b0:	58 f0       	brcs	.+22     	; 0x12c8 <xTaskResumeAll+0xa4>
    12b2:	d0 92 13 93 	sts	0x9313, r13
    12b6:	08 c0       	rjmp	.+16     	; 0x12c8 <xTaskResumeAll+0xa4>
    12b8:	0f 2e       	mov	r0, r31
    12ba:	fa e1       	ldi	r31, 0x1A	; 26
    12bc:	ef 2e       	mov	r14, r31
    12be:	f3 e9       	ldi	r31, 0x93	; 147
    12c0:	ff 2e       	mov	r15, r31
    12c2:	f0 2d       	mov	r31, r0
    12c4:	dd 24       	eor	r13, r13
    12c6:	d3 94       	inc	r13
    12c8:	f7 01       	movw	r30, r14
    12ca:	80 81       	ld	r24, Z
    12cc:	81 11       	cpse	r24, r1
    12ce:	c2 cf       	rjmp	.-124    	; 0x1254 <xTaskResumeAll+0x30>
    12d0:	80 91 14 93 	lds	r24, 0x9314
    12d4:	88 23       	and	r24, r24
    12d6:	99 f0       	breq	.+38     	; 0x12fe <xTaskResumeAll+0xda>
    12d8:	80 91 14 93 	lds	r24, 0x9314
    12dc:	88 23       	and	r24, r24
    12de:	79 f0       	breq	.+30     	; 0x12fe <xTaskResumeAll+0xda>
    12e0:	c1 e0       	ldi	r28, 0x01	; 1
    12e2:	0e 94 3c 08 	call	0x1078	; 0x1078 <xTaskIncrementTick>
    12e6:	81 11       	cpse	r24, r1
    12e8:	c0 93 13 93 	sts	0x9313, r28
    12ec:	80 91 14 93 	lds	r24, 0x9314
    12f0:	81 50       	subi	r24, 0x01	; 1
    12f2:	80 93 14 93 	sts	0x9314, r24
    12f6:	80 91 14 93 	lds	r24, 0x9314
    12fa:	81 11       	cpse	r24, r1
    12fc:	f2 cf       	rjmp	.-28     	; 0x12e2 <xTaskResumeAll+0xbe>
    12fe:	80 91 13 93 	lds	r24, 0x9313
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	31 f4       	brne	.+12     	; 0x1312 <xTaskResumeAll+0xee>
    1306:	0e 94 53 05 	call	0xaa6	; 0xaa6 <vPortYield>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <xTaskResumeAll+0xf0>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <xTaskResumeAll+0xf0>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	1f 91       	pop	r17
    131e:	0f 91       	pop	r16
    1320:	ff 90       	pop	r15
    1322:	ef 90       	pop	r14
    1324:	df 90       	pop	r13
    1326:	08 95       	ret

00001328 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    132e:	89 2b       	or	r24, r25
    1330:	b1 f0       	breq	.+44     	; 0x135e <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1332:	0e 94 36 08 	call	0x106c	; 0x106c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1336:	80 91 17 93 	lds	r24, 0x9317
    133a:	90 91 18 93 	lds	r25, 0x9318
    133e:	c8 0f       	add	r28, r24
    1340:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1342:	80 91 5d 93 	lds	r24, 0x935D
    1346:	90 91 5e 93 	lds	r25, 0x935E
    134a:	02 96       	adiw	r24, 0x02	; 2
    134c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1350:	ce 01       	movw	r24, r28
    1352:	0e 94 cc 06 	call	0xd98	; 0xd98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1356:	0e 94 12 09 	call	0x1224	; 0x1224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    135a:	81 11       	cpse	r24, r1
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    135e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	08 95       	ret

00001368 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1368:	80 91 10 93 	lds	r24, 0x9310
    136c:	88 23       	and	r24, r24
    136e:	21 f0       	breq	.+8      	; 0x1378 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 13 93 	sts	0x9313, r24
    1376:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1378:	10 92 13 93 	sts	0x9313, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    137c:	80 91 16 93 	lds	r24, 0x9316
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	fc 01       	movw	r30, r24
    1384:	ee 0f       	add	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	8e 0f       	add	r24, r30
    1392:	9f 1f       	adc	r25, r31
    1394:	fc 01       	movw	r30, r24
    1396:	e7 5c       	subi	r30, 0xC7	; 199
    1398:	fc 46       	sbci	r31, 0x6C	; 108
    139a:	80 81       	ld	r24, Z
    139c:	81 11       	cpse	r24, r1
    139e:	17 c0       	rjmp	.+46     	; 0x13ce <vTaskSwitchContext+0x66>
    13a0:	80 91 16 93 	lds	r24, 0x9316
    13a4:	81 50       	subi	r24, 0x01	; 1
    13a6:	80 93 16 93 	sts	0x9316, r24
    13aa:	80 91 16 93 	lds	r24, 0x9316
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	fc 01       	movw	r30, r24
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	ee 0f       	add	r30, r30
    13bc:	ff 1f       	adc	r31, r31
    13be:	8e 0f       	add	r24, r30
    13c0:	9f 1f       	adc	r25, r31
    13c2:	fc 01       	movw	r30, r24
    13c4:	e7 5c       	subi	r30, 0xC7	; 199
    13c6:	fc 46       	sbci	r31, 0x6C	; 108
    13c8:	80 81       	ld	r24, Z
    13ca:	88 23       	and	r24, r24
    13cc:	49 f3       	breq	.-46     	; 0x13a0 <vTaskSwitchContext+0x38>
    13ce:	80 91 16 93 	lds	r24, 0x9316
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	9c 01       	movw	r18, r24
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	28 0f       	add	r18, r24
    13e4:	39 1f       	adc	r19, r25
    13e6:	d9 01       	movw	r26, r18
    13e8:	a7 5c       	subi	r26, 0xC7	; 199
    13ea:	bc 46       	sbci	r27, 0x6C	; 108
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	12 97       	sbiw	r26, 0x02	; 2
    13f4:	02 80       	ldd	r0, Z+2	; 0x02
    13f6:	f3 81       	ldd	r31, Z+3	; 0x03
    13f8:	e0 2d       	mov	r30, r0
    13fa:	11 96       	adiw	r26, 0x01	; 1
    13fc:	ed 93       	st	X+, r30
    13fe:	fc 93       	st	X, r31
    1400:	12 97       	sbiw	r26, 0x02	; 2
    1402:	24 5c       	subi	r18, 0xC4	; 196
    1404:	3c 46       	sbci	r19, 0x6C	; 108
    1406:	e2 17       	cp	r30, r18
    1408:	f3 07       	cpc	r31, r19
    140a:	29 f4       	brne	.+10     	; 0x1416 <vTaskSwitchContext+0xae>
    140c:	22 81       	ldd	r18, Z+2	; 0x02
    140e:	33 81       	ldd	r19, Z+3	; 0x03
    1410:	fd 01       	movw	r30, r26
    1412:	21 83       	std	Z+1, r18	; 0x01
    1414:	32 83       	std	Z+2, r19	; 0x02
    1416:	fc 01       	movw	r30, r24
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	8e 0f       	add	r24, r30
    1426:	9f 1f       	adc	r25, r31
    1428:	fc 01       	movw	r30, r24
    142a:	e7 5c       	subi	r30, 0xC7	; 199
    142c:	fc 46       	sbci	r31, 0x6C	; 108
    142e:	01 80       	ldd	r0, Z+1	; 0x01
    1430:	f2 81       	ldd	r31, Z+2	; 0x02
    1432:	e0 2d       	mov	r30, r0
    1434:	86 81       	ldd	r24, Z+6	; 0x06
    1436:	97 81       	ldd	r25, Z+7	; 0x07
    1438:	80 93 5d 93 	sts	0x935D, r24
    143c:	90 93 5e 93 	sts	0x935E, r25
    1440:	08 95       	ret

00001442 <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    1448:	fc 01       	movw	r30, r24
    144a:	70 96       	adiw	r30, 0x10	; 16
    144c:	8b e0       	ldi	r24, 0x0B	; 11
    144e:	df 01       	movw	r26, r30
    1450:	1d 92       	st	X+, r1
    1452:	8a 95       	dec	r24
    1454:	e9 f7       	brne	.-6      	; 0x1450 <CDC_Device_ConfigureEndpoints+0xe>
    1456:	82 e0       	ldi	r24, 0x02	; 2
    1458:	8c 83       	std	Y+4, r24	; 0x04
    145a:	89 87       	std	Y+9, r24	; 0x09
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	8e 87       	std	Y+14, r24	; 0x0e
    1460:	61 e0       	ldi	r22, 0x01	; 1
    1462:	ce 01       	movw	r24, r28
    1464:	01 96       	adiw	r24, 0x01	; 1
    1466:	0e 94 17 10 	call	0x202e	; 0x202e <Endpoint_ConfigureEndpointTable>
    146a:	88 23       	and	r24, r24
    146c:	61 f0       	breq	.+24     	; 0x1486 <CDC_Device_ConfigureEndpoints+0x44>
    146e:	61 e0       	ldi	r22, 0x01	; 1
    1470:	ce 01       	movw	r24, r28
    1472:	06 96       	adiw	r24, 0x06	; 6
    1474:	0e 94 17 10 	call	0x202e	; 0x202e <Endpoint_ConfigureEndpointTable>
    1478:	88 23       	and	r24, r24
    147a:	29 f0       	breq	.+10     	; 0x1486 <CDC_Device_ConfigureEndpoints+0x44>
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	ce 01       	movw	r24, r28
    1480:	0b 96       	adiw	r24, 0x0b	; 11
    1482:	0e 94 17 10 	call	0x202e	; 0x202e <Endpoint_ConfigureEndpointTable>
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <CDC_Device_SendByte>:
    148c:	cf 93       	push	r28
    148e:	fc 01       	movw	r30, r24
    1490:	90 91 8e 95 	lds	r25, 0x958E
    1494:	94 30       	cpi	r25, 0x04	; 4
    1496:	19 f5       	brne	.+70     	; 0x14de <CDC_Device_SendByte+0x52>
    1498:	84 89       	ldd	r24, Z+20	; 0x14
    149a:	95 89       	ldd	r25, Z+21	; 0x15
    149c:	a6 89       	ldd	r26, Z+22	; 0x16
    149e:	b7 89       	ldd	r27, Z+23	; 0x17
    14a0:	89 2b       	or	r24, r25
    14a2:	8a 2b       	or	r24, r26
    14a4:	8b 2b       	or	r24, r27
    14a6:	e9 f0       	breq	.+58     	; 0x14e2 <CDC_Device_SendByte+0x56>
    14a8:	c6 2f       	mov	r28, r22
    14aa:	81 81       	ldd	r24, Z+1	; 0x01
    14ac:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
    14b0:	80 91 97 95 	lds	r24, 0x9597
    14b4:	90 91 98 95 	lds	r25, 0x9598
    14b8:	fc 01       	movw	r30, r24
    14ba:	ef 5b       	subi	r30, 0xBF	; 191
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	20 81       	ld	r18, Z
    14c0:	31 97       	sbiw	r30, 0x01	; 1
    14c2:	80 81       	ld	r24, Z
    14c4:	28 17       	cp	r18, r24
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <CDC_Device_SendByte+0x48>
    14c8:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    14cc:	0e 94 c6 10 	call	0x218c	; 0x218c <Endpoint_WaitUntilReady>
    14d0:	81 11       	cpse	r24, r1
    14d2:	08 c0       	rjmp	.+16     	; 0x14e4 <CDC_Device_SendByte+0x58>
    14d4:	8c 2f       	mov	r24, r28
    14d6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <CDC_Device_SendByte+0x58>
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <CDC_Device_SendByte+0x58>
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	cf 91       	pop	r28
    14e6:	08 95       	ret

000014e8 <CDC_Device_putchar>:
    14e8:	fb 01       	movw	r30, r22
    14ea:	68 2f       	mov	r22, r24
    14ec:	84 85       	ldd	r24, Z+12	; 0x0c
    14ee:	95 85       	ldd	r25, Z+13	; 0x0d
    14f0:	0e 94 46 0a 	call	0x148c	; 0x148c <CDC_Device_SendByte>
    14f4:	21 e0       	ldi	r18, 0x01	; 1
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 11       	cpse	r24, r1
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <CDC_Device_putchar+0x18>
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	88 27       	eor	r24, r24
    1502:	99 27       	eor	r25, r25
    1504:	82 1b       	sub	r24, r18
    1506:	93 0b       	sbc	r25, r19
    1508:	08 95       	ret

0000150a <CDC_Device_Flush>:
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	fc 01       	movw	r30, r24
    1510:	90 91 8e 95 	lds	r25, 0x958E
    1514:	94 30       	cpi	r25, 0x04	; 4
    1516:	f1 f5       	brne	.+124    	; 0x1594 <CDC_Device_Flush+0x8a>
    1518:	84 89       	ldd	r24, Z+20	; 0x14
    151a:	95 89       	ldd	r25, Z+21	; 0x15
    151c:	a6 89       	ldd	r26, Z+22	; 0x16
    151e:	b7 89       	ldd	r27, Z+23	; 0x17
    1520:	89 2b       	or	r24, r25
    1522:	8a 2b       	or	r24, r26
    1524:	8b 2b       	or	r24, r27
    1526:	c1 f1       	breq	.+112    	; 0x1598 <CDC_Device_Flush+0x8e>
    1528:	81 81       	ldd	r24, Z+1	; 0x01
    152a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
    152e:	80 91 9b 95 	lds	r24, 0x959B
    1532:	88 23       	and	r24, r24
    1534:	4c f4       	brge	.+18     	; 0x1548 <CDC_Device_Flush+0x3e>
    1536:	e0 91 97 95 	lds	r30, 0x9597
    153a:	f0 91 98 95 	lds	r31, 0x9598
    153e:	ef 5b       	subi	r30, 0xBF	; 191
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	0d c0       	rjmp	.+26     	; 0x1562 <CDC_Device_Flush+0x58>
    1548:	20 91 97 95 	lds	r18, 0x9597
    154c:	30 91 98 95 	lds	r19, 0x9598
    1550:	f9 01       	movw	r30, r18
    1552:	e0 5c       	subi	r30, 0xC0	; 192
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	31 96       	adiw	r30, 0x01	; 1
    155a:	20 81       	ld	r18, Z
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	82 1b       	sub	r24, r18
    1560:	91 09       	sbc	r25, r1
    1562:	89 2b       	or	r24, r25
    1564:	d9 f0       	breq	.+54     	; 0x159c <CDC_Device_Flush+0x92>
    1566:	80 91 97 95 	lds	r24, 0x9597
    156a:	90 91 98 95 	lds	r25, 0x9598
    156e:	fc 01       	movw	r30, r24
    1570:	ef 5b       	subi	r30, 0xBF	; 191
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	d0 81       	ld	r29, Z
    1576:	31 97       	sbiw	r30, 0x01	; 1
    1578:	c0 81       	ld	r28, Z
    157a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    157e:	dc 17       	cp	r29, r28
    1580:	78 f0       	brcs	.+30     	; 0x15a0 <CDC_Device_Flush+0x96>
    1582:	0e 94 c6 10 	call	0x218c	; 0x218c <Endpoint_WaitUntilReady>
    1586:	c8 2f       	mov	r28, r24
    1588:	81 11       	cpse	r24, r1
    158a:	0c c0       	rjmp	.+24     	; 0x15a4 <CDC_Device_Flush+0x9a>
    158c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    1590:	8c 2f       	mov	r24, r28
    1592:	08 c0       	rjmp	.+16     	; 0x15a4 <CDC_Device_Flush+0x9a>
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	06 c0       	rjmp	.+12     	; 0x15a4 <CDC_Device_Flush+0x9a>
    1598:	82 e0       	ldi	r24, 0x02	; 2
    159a:	04 c0       	rjmp	.+8      	; 0x15a4 <CDC_Device_Flush+0x9a>
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <CDC_Device_Flush+0x9a>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	00 c0       	rjmp	.+0      	; 0x15a4 <CDC_Device_Flush+0x9a>
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	08 95       	ret

000015aa <CDC_Device_USBTask>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	fc 01       	movw	r30, r24
    15b0:	90 91 8e 95 	lds	r25, 0x958E
    15b4:	94 30       	cpi	r25, 0x04	; 4
    15b6:	99 f4       	brne	.+38     	; 0x15de <CDC_Device_USBTask+0x34>
    15b8:	84 89       	ldd	r24, Z+20	; 0x14
    15ba:	95 89       	ldd	r25, Z+21	; 0x15
    15bc:	a6 89       	ldd	r26, Z+22	; 0x16
    15be:	b7 89       	ldd	r27, Z+23	; 0x17
    15c0:	89 2b       	or	r24, r25
    15c2:	8a 2b       	or	r24, r26
    15c4:	8b 2b       	or	r24, r27
    15c6:	59 f0       	breq	.+22     	; 0x15de <CDC_Device_USBTask+0x34>
    15c8:	ef 01       	movw	r28, r30
    15ca:	81 81       	ldd	r24, Z+1	; 0x01
    15cc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
    15d0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    15d4:	88 23       	and	r24, r24
    15d6:	19 f0       	breq	.+6      	; 0x15de <CDC_Device_USBTask+0x34>
    15d8:	ce 01       	movw	r24, r28
    15da:	0e 94 85 0a 	call	0x150a	; 0x150a <CDC_Device_Flush>
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <CDC_Device_ReceiveByte>:
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	20 91 8e 95 	lds	r18, 0x958E
    15ec:	24 30       	cpi	r18, 0x04	; 4
    15ee:	09 f0       	breq	.+2      	; 0x15f2 <CDC_Device_ReceiveByte+0xe>
    15f0:	56 c0       	rjmp	.+172    	; 0x169e <CDC_Device_ReceiveByte+0xba>
    15f2:	fc 01       	movw	r30, r24
    15f4:	44 89       	ldd	r20, Z+20	; 0x14
    15f6:	55 89       	ldd	r21, Z+21	; 0x15
    15f8:	66 89       	ldd	r22, Z+22	; 0x16
    15fa:	77 89       	ldd	r23, Z+23	; 0x17
    15fc:	45 2b       	or	r20, r21
    15fe:	46 2b       	or	r20, r22
    1600:	47 2b       	or	r20, r23
    1602:	09 f4       	brne	.+2      	; 0x1606 <CDC_Device_ReceiveByte+0x22>
    1604:	4f c0       	rjmp	.+158    	; 0x16a4 <CDC_Device_ReceiveByte+0xc0>
    1606:	86 81       	ldd	r24, Z+6	; 0x06
    1608:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
    160c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    1610:	88 23       	and	r24, r24
    1612:	09 f4       	brne	.+2      	; 0x1616 <CDC_Device_ReceiveByte+0x32>
    1614:	4a c0       	rjmp	.+148    	; 0x16aa <CDC_Device_ReceiveByte+0xc6>
    1616:	80 91 9b 95 	lds	r24, 0x959B
    161a:	88 23       	and	r24, r24
    161c:	4c f4       	brge	.+18     	; 0x1630 <CDC_Device_ReceiveByte+0x4c>
    161e:	e0 91 97 95 	lds	r30, 0x9597
    1622:	f0 91 98 95 	lds	r31, 0x9598
    1626:	ef 5b       	subi	r30, 0xBF	; 191
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0d c0       	rjmp	.+26     	; 0x164a <CDC_Device_ReceiveByte+0x66>
    1630:	20 91 97 95 	lds	r18, 0x9597
    1634:	30 91 98 95 	lds	r19, 0x9598
    1638:	f9 01       	movw	r30, r18
    163a:	e0 5c       	subi	r30, 0xC0	; 192
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	80 81       	ld	r24, Z
    1640:	31 96       	adiw	r30, 0x01	; 1
    1642:	20 81       	ld	r18, Z
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	82 1b       	sub	r24, r18
    1648:	91 09       	sbc	r25, r1
    164a:	89 2b       	or	r24, r25
    164c:	29 f0       	breq	.+10     	; 0x1658 <CDC_Device_ReceiveByte+0x74>
    164e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    1652:	c8 2f       	mov	r28, r24
    1654:	d0 e0       	ldi	r29, 0x00	; 0
    1656:	02 c0       	rjmp	.+4      	; 0x165c <CDC_Device_ReceiveByte+0x78>
    1658:	cf ef       	ldi	r28, 0xFF	; 255
    165a:	df ef       	ldi	r29, 0xFF	; 255
    165c:	80 91 9b 95 	lds	r24, 0x959B
    1660:	88 23       	and	r24, r24
    1662:	4c f4       	brge	.+18     	; 0x1676 <CDC_Device_ReceiveByte+0x92>
    1664:	e0 91 97 95 	lds	r30, 0x9597
    1668:	f0 91 98 95 	lds	r31, 0x9598
    166c:	ef 5b       	subi	r30, 0xBF	; 191
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	20 81       	ld	r18, Z
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <CDC_Device_ReceiveByte+0xac>
    1676:	40 91 97 95 	lds	r20, 0x9597
    167a:	50 91 98 95 	lds	r21, 0x9598
    167e:	fa 01       	movw	r30, r20
    1680:	e0 5c       	subi	r30, 0xC0	; 192
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	20 81       	ld	r18, Z
    1686:	31 96       	adiw	r30, 0x01	; 1
    1688:	80 81       	ld	r24, Z
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	28 1b       	sub	r18, r24
    168e:	31 09       	sbc	r19, r1
    1690:	23 2b       	or	r18, r19
    1692:	71 f4       	brne	.+28     	; 0x16b0 <CDC_Device_ReceiveByte+0xcc>
    1694:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Endpoint_ClearOUT>
    1698:	8c 2f       	mov	r24, r28
    169a:	9d 2f       	mov	r25, r29
    169c:	0b c0       	rjmp	.+22     	; 0x16b4 <CDC_Device_ReceiveByte+0xd0>
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	9f ef       	ldi	r25, 0xFF	; 255
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <CDC_Device_ReceiveByte+0xd0>
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    16a8:	05 c0       	rjmp	.+10     	; 0x16b4 <CDC_Device_ReceiveByte+0xd0>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <CDC_Device_ReceiveByte+0xd0>
    16b0:	8c 2f       	mov	r24, r28
    16b2:	9d 2f       	mov	r25, r29
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <CDC_Device_getchar>:
    16ba:	fc 01       	movw	r30, r24
    16bc:	84 85       	ldd	r24, Z+12	; 0x0c
    16be:	95 85       	ldd	r25, Z+13	; 0x0d
    16c0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <CDC_Device_ReceiveByte>
    16c4:	99 23       	and	r25, r25
    16c6:	14 f4       	brge	.+4      	; 0x16cc <CDC_Device_getchar+0x12>
    16c8:	8e ef       	ldi	r24, 0xFE	; 254
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	08 95       	ret

000016ce <CDC_Device_CreateStream>:
    16ce:	fb 01       	movw	r30, r22
    16d0:	2e e0       	ldi	r18, 0x0E	; 14
    16d2:	db 01       	movw	r26, r22
    16d4:	1d 92       	st	X+, r1
    16d6:	2a 95       	dec	r18
    16d8:	e9 f7       	brne	.-6      	; 0x16d4 <CDC_Device_CreateStream+0x6>
    16da:	23 e0       	ldi	r18, 0x03	; 3
    16dc:	23 83       	std	Z+3, r18	; 0x03
    16de:	24 e7       	ldi	r18, 0x74	; 116
    16e0:	3a e0       	ldi	r19, 0x0A	; 10
    16e2:	20 87       	std	Z+8, r18	; 0x08
    16e4:	31 87       	std	Z+9, r19	; 0x09
    16e6:	2d e5       	ldi	r18, 0x5D	; 93
    16e8:	3b e0       	ldi	r19, 0x0B	; 11
    16ea:	22 87       	std	Z+10, r18	; 0x0a
    16ec:	33 87       	std	Z+11, r19	; 0x0b
    16ee:	84 87       	std	Z+12, r24	; 0x0c
    16f0:	95 87       	std	Z+13, r25	; 0x0d
    16f2:	08 95       	ret

000016f4 <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    16f4:	08 95       	ret

000016f6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    16f6:	ff 92       	push	r15
    16f8:	0f 93       	push	r16
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    1702:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1706:	88 23       	and	r24, r24
    1708:	09 f4       	brne	.+2      	; 0x170c <CDC_Device_ProcessControlRequest+0x16>
    170a:	9b c0       	rjmp	.+310    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    170c:	28 81       	ld	r18, Y
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	80 91 93 95 	lds	r24, 0x9593
    1714:	90 91 94 95 	lds	r25, 0x9594
    1718:	82 17       	cp	r24, r18
    171a:	93 07       	cpc	r25, r19
    171c:	09 f0       	breq	.+2      	; 0x1720 <CDC_Device_ProcessControlRequest+0x2a>
    171e:	91 c0       	rjmp	.+290    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1720:	80 91 90 95 	lds	r24, 0x9590
    1724:	81 32       	cpi	r24, 0x21	; 33
    1726:	59 f0       	breq	.+22     	; 0x173e <CDC_Device_ProcessControlRequest+0x48>
    1728:	18 f4       	brcc	.+6      	; 0x1730 <CDC_Device_ProcessControlRequest+0x3a>
    172a:	80 32       	cpi	r24, 0x20	; 32
    172c:	81 f1       	breq	.+96     	; 0x178e <CDC_Device_ProcessControlRequest+0x98>
    172e:	89 c0       	rjmp	.+274    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
    1730:	82 32       	cpi	r24, 0x22	; 34
    1732:	09 f4       	brne	.+2      	; 0x1736 <CDC_Device_ProcessControlRequest+0x40>
    1734:	67 c0       	rjmp	.+206    	; 0x1804 <CDC_Device_ProcessControlRequest+0x10e>
    1736:	83 32       	cpi	r24, 0x23	; 35
    1738:	09 f4       	brne	.+2      	; 0x173c <CDC_Device_ProcessControlRequest+0x46>
    173a:	76 c0       	rjmp	.+236    	; 0x1828 <CDC_Device_ProcessControlRequest+0x132>
    173c:	82 c0       	rjmp	.+260    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    173e:	80 91 8f 95 	lds	r24, 0x958F
    1742:	81 3a       	cpi	r24, 0xA1	; 161
    1744:	09 f0       	breq	.+2      	; 0x1748 <CDC_Device_ProcessControlRequest+0x52>
    1746:	7d c0       	rjmp	.+250    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1748:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    174c:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    1750:	88 23       	and	r24, r24
    1752:	e1 f3       	breq	.-8      	; 0x174c <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1754:	8c 89       	ldd	r24, Y+20	; 0x14
    1756:	fd 88       	ldd	r15, Y+21	; 0x15
    1758:	0e 89       	ldd	r16, Y+22	; 0x16
    175a:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    175c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1760:	8f 2d       	mov	r24, r15
    1762:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    1766:	80 2f       	mov	r24, r16
    1768:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    176c:	81 2f       	mov	r24, r17
    176e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1772:	88 8d       	ldd	r24, Y+24	; 0x18
    1774:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1778:	89 8d       	ldd	r24, Y+25	; 0x19
    177a:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    177e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1780:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>

				Endpoint_ClearIN();
    1784:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    1788:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>
    178c:	5a c0       	rjmp	.+180    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    178e:	80 91 8f 95 	lds	r24, 0x958F
    1792:	81 32       	cpi	r24, 0x21	; 33
    1794:	09 f0       	breq	.+2      	; 0x1798 <CDC_Device_ProcessControlRequest+0xa2>
    1796:	55 c0       	rjmp	.+170    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1798:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <CDC_Device_ProcessControlRequest+0xb2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    179e:	80 91 8e 95 	lds	r24, 0x958E
    17a2:	88 23       	and	r24, r24
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <CDC_Device_ProcessControlRequest+0xb2>
    17a6:	4d c0       	rjmp	.+154    	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    17a8:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    17ac:	88 23       	and	r24, r24
    17ae:	b9 f3       	breq	.-18     	; 0x179e <CDC_Device_ProcessControlRequest+0xa8>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    17b0:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17b4:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    17b6:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17ba:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    17bc:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17c0:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    17c2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    17c6:	40 2f       	mov	r20, r16
    17c8:	50 e0       	ldi	r21, 0x00	; 0
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    17ce:	ba 01       	movw	r22, r20
    17d0:	55 27       	eor	r21, r21
    17d2:	44 27       	eor	r20, r20
    17d4:	78 2b       	or	r23, r24
    17d6:	4f 29       	or	r20, r15
    17d8:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    17da:	4c 8b       	std	Y+20, r20	; 0x14
    17dc:	5d 8b       	std	Y+21, r21	; 0x15
    17de:	6e 8b       	std	Y+22, r22	; 0x16
    17e0:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    17e2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17e6:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    17e8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17ec:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    17ee:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    17f2:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    17f4:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    17f8:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    17fc:	ce 01       	movw	r24, r28
    17fe:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <CDC_Device_Event_Stub>
    1802:	1f c0       	rjmp	.+62     	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1804:	80 91 8f 95 	lds	r24, 0x958F
    1808:	81 32       	cpi	r24, 0x21	; 33
    180a:	d9 f4       	brne	.+54     	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    180c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    1810:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1814:	80 91 91 95 	lds	r24, 0x9591
    1818:	90 91 92 95 	lds	r25, 0x9592
    181c:	88 8b       	std	Y+16, r24	; 0x10
    181e:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1820:	ce 01       	movw	r24, r28
    1822:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <EVENT_CDC_Device_ControLineStateChanged>
    1826:	0d c0       	rjmp	.+26     	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1828:	80 91 8f 95 	lds	r24, 0x958F
    182c:	81 32       	cpi	r24, 0x21	; 33
    182e:	49 f4       	brne	.+18     	; 0x1842 <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1830:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    1834:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1838:	60 91 91 95 	lds	r22, 0x9591
    183c:	ce 01       	movw	r24, r28
    183e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	08 95       	ret

0000184e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	ea 97       	sbiw	r28, 0x3a	; 58
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f e8       	ldi	r16, 0x8F	; 143
    1866:	15 e9       	ldi	r17, 0x95	; 149
    1868:	0f 2e       	mov	r0, r31
    186a:	f7 e9       	ldi	r31, 0x97	; 151
    186c:	ef 2e       	mov	r14, r31
    186e:	f5 e9       	ldi	r31, 0x95	; 149
    1870:	ff 2e       	mov	r15, r31
    1872:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1874:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <Endpoint_Read_8>
    1878:	f8 01       	movw	r30, r16
    187a:	81 93       	st	Z+, r24
    187c:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    187e:	ee 15       	cp	r30, r14
    1880:	ff 05       	cpc	r31, r15
    1882:	c1 f7       	brne	.-16     	; 0x1874 <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1884:	0e 94 40 16 	call	0x2c80	; 0x2c80 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1888:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    188c:	88 23       	and	r24, r24
    188e:	09 f4       	brne	.+2      	; 0x1892 <USB_Device_ProcessControlRequest+0x44>
    1890:	13 c1       	rjmp	.+550    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1892:	ef e8       	ldi	r30, 0x8F	; 143
    1894:	f5 e9       	ldi	r31, 0x95	; 149
    1896:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    1898:	31 81       	ldd	r19, Z+1	; 0x01
    189a:	83 2f       	mov	r24, r19
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	8a 30       	cpi	r24, 0x0A	; 10
    18a0:	91 05       	cpc	r25, r1
    18a2:	08 f0       	brcs	.+2      	; 0x18a6 <USB_Device_ProcessControlRequest+0x58>
    18a4:	09 c1       	rjmp	.+530    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
    18a6:	fc 01       	movw	r30, r24
    18a8:	88 27       	eor	r24, r24
    18aa:	e2 50       	subi	r30, 0x02	; 2
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	8f 4f       	sbci	r24, 0xFF	; 255
    18b0:	0c 94 53 1b 	jmp	0x36a6	; 0x36a6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    18b4:	20 38       	cpi	r18, 0x80	; 128
    18b6:	21 f0       	breq	.+8      	; 0x18c0 <USB_Device_ProcessControlRequest+0x72>
    18b8:	22 38       	cpi	r18, 0x82	; 130
    18ba:	09 f0       	breq	.+2      	; 0x18be <USB_Device_ProcessControlRequest+0x70>
    18bc:	fd c0       	rjmp	.+506    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    18c0:	10 91 8b 95 	lds	r17, 0x958B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    18c4:	80 91 8c 95 	lds	r24, 0x958C
    18c8:	88 23       	and	r24, r24
    18ca:	91 f0       	breq	.+36     	; 0x18f0 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    18cc:	12 60       	ori	r17, 0x02	; 2
    18ce:	10 c0       	rjmp	.+32     	; 0x18f0 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    18d0:	80 91 93 95 	lds	r24, 0x9593
    18d4:	8f 70       	andi	r24, 0x0F	; 15
    18d6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    18da:	e0 91 99 95 	lds	r30, 0x9599
    18de:	f0 91 9a 95 	lds	r31, 0x959A
    18e2:	11 81       	ldd	r17, Z+1	; 0x01
    18e4:	12 fb       	bst	r17, 2
    18e6:	11 27       	eor	r17, r17
    18e8:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    18f0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    18f4:	81 2f       	mov	r24, r17
    18f6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    1900:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1904:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>
    1908:	d7 c0       	rjmp	.+430    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    190a:	22 23       	and	r18, r18
    190c:	09 f4       	brne	.+2      	; 0x1910 <USB_Device_ProcessControlRequest+0xc2>
    190e:	dd c0       	rjmp	.+442    	; 0x1aca <USB_Device_ProcessControlRequest+0x27c>
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	09 f0       	breq	.+2      	; 0x1916 <USB_Device_ProcessControlRequest+0xc8>
    1914:	d1 c0       	rjmp	.+418    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
    1916:	de c0       	rjmp	.+444    	; 0x1ad4 <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	33 30       	cpi	r19, 0x03	; 3
    191c:	09 f0       	breq	.+2      	; 0x1920 <USB_Device_ProcessControlRequest+0xd2>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	80 93 8c 95 	sts	0x958C, r24
    1924:	25 c0       	rjmp	.+74     	; 0x1970 <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1926:	e0 91 93 95 	lds	r30, 0x9593
    192a:	1e 2f       	mov	r17, r30
    192c:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    192e:	09 f4       	brne	.+2      	; 0x1932 <USB_Device_ProcessControlRequest+0xe4>
    1930:	c3 c0       	rjmp	.+390    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    1932:	81 2f       	mov	r24, r17
    1934:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1938:	80 91 90 95 	lds	r24, 0x9590
    193c:	83 30       	cpi	r24, 0x03	; 3
    193e:	19 f4       	brne	.+6      	; 0x1946 <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    1940:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Endpoint_StallTransaction>
    1944:	15 c0       	rjmp	.+42     	; 0x1970 <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1946:	e0 91 99 95 	lds	r30, 0x9599
    194a:	f0 91 9a 95 	lds	r31, 0x959A
    194e:	81 81       	ldd	r24, Z+1	; 0x01
    1950:	8b 7f       	andi	r24, 0xFB	; 251
    1952:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    1954:	24 e8       	ldi	r18, 0x84	; 132
    1956:	12 9f       	mul	r17, r18
    1958:	f0 01       	movw	r30, r0
    195a:	11 24       	eor	r1, r1
    195c:	e3 52       	subi	r30, 0x23	; 35
    195e:	fa 46       	sbci	r31, 0x6A	; 106
    1960:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    1962:	e0 91 99 95 	lds	r30, 0x9599
    1966:	f0 91 9a 95 	lds	r31, 0x959A
    196a:	80 81       	ld	r24, Z
    196c:	8e 7f       	andi	r24, 0xFE	; 254
    196e:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1976:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    197a:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>
    197e:	9c c0       	rjmp	.+312    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1980:	21 11       	cpse	r18, r1
    1982:	9a c0       	rjmp	.+308    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1984:	10 91 91 95 	lds	r17, 0x9591
    1988:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    198a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    198e:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    1992:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    1996:	88 23       	and	r24, r24
    1998:	e1 f3       	breq	.-8      	; 0x1992 <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    199a:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    199e:	11 11       	cpse	r17, r1
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <USB_Device_ProcessControlRequest+0x158>
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	01 c0       	rjmp	.+2      	; 0x19a8 <USB_Device_ProcessControlRequest+0x15a>
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	80 93 8e 95 	sts	0x958E, r24
    19ac:	85 c0       	rjmp	.+266    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19ae:	20 58       	subi	r18, 0x80	; 128
    19b0:	22 30       	cpi	r18, 0x02	; 2
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <USB_Device_ProcessControlRequest+0x168>
    19b4:	81 c0       	rjmp	.+258    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    19b6:	80 91 91 95 	lds	r24, 0x9591
    19ba:	90 91 92 95 	lds	r25, 0x9592
    19be:	8c 3d       	cpi	r24, 0xDC	; 220
    19c0:	e3 e0       	ldi	r30, 0x03	; 3
    19c2:	9e 07       	cpc	r25, r30
    19c4:	b9 f5       	brne	.+110    	; 0x1a34 <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    19ca:	8a e3       	ldi	r24, 0x3A	; 58
    19cc:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    19ce:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    19d0:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    19d2:	ae 01       	movw	r20, r28
    19d4:	4d 5f       	subi	r20, 0xFD	; 253
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    19d8:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    19da:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    19dc:	a0 ec       	ldi	r26, 0xC0	; 192
    19de:	b1 e0       	ldi	r27, 0x01	; 1
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	1a 96       	adiw	r26, 0x0a	; 10
    19e4:	6c 93       	st	X, r22
    19e6:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    19e8:	e3 2f       	mov	r30, r19
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    19ee:	1a 96       	adiw	r26, 0x0a	; 10
    19f0:	1c 92       	st	X, r1
    19f2:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    19f4:	20 ff       	sbrs	r18, 0
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    19f8:	82 95       	swap	r24
    19fa:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    19fc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    19fe:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1a00:	8a 30       	cpi	r24, 0x0A	; 10
    1a02:	18 f0       	brcs	.+6      	; 0x1a0a <USB_Device_ProcessControlRequest+0x1bc>
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	c7 96       	adiw	r24, 0x37	; 55
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <USB_Device_ProcessControlRequest+0x1c0>
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	c0 96       	adiw	r24, 0x30	; 48
    1a0e:	fa 01       	movw	r30, r20
    1a10:	81 93       	st	Z+, r24
    1a12:	91 93       	st	Z+, r25
    1a14:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	2c 31       	cpi	r18, 0x1C	; 28
    1a1a:	19 f7       	brne	.-58     	; 0x19e2 <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1a1c:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1a1e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1a22:	6a e3       	ldi	r22, 0x3A	; 58
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	ce 01       	movw	r24, r28
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1a2e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Endpoint_ClearOUT>
    1a32:	42 c0       	rjmp	.+132    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1a34:	ae 01       	movw	r20, r28
    1a36:	4f 5f       	subi	r20, 0xFF	; 255
    1a38:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3a:	60 91 93 95 	lds	r22, 0x9593
    1a3e:	0e 94 66 04 	call	0x8cc	; 0x8cc <CALLBACK_USB_GetDescriptor>
    1a42:	8c 01       	movw	r16, r24
    1a44:	89 2b       	or	r24, r25
    1a46:	c1 f1       	breq	.+112    	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1a48:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1a4c:	b8 01       	movw	r22, r16
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1a56:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Endpoint_ClearOUT>
    1a5a:	2e c0       	rjmp	.+92     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1a5c:	20 38       	cpi	r18, 0x80	; 128
    1a5e:	61 f5       	brne	.+88     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1a60:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1a64:	80 91 8a 95 	lds	r24, 0x958A
    1a68:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
	Endpoint_ClearIN();
    1a6c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1a70:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>
    1a74:	21 c0       	rjmp	.+66     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1a76:	21 11       	cpse	r18, r1
    1a78:	1f c0       	rjmp	.+62     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1a7a:	80 91 91 95 	lds	r24, 0x9591
    1a7e:	82 30       	cpi	r24, 0x02	; 2
    1a80:	d8 f4       	brcc	.+54     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1a82:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1a86:	80 91 91 95 	lds	r24, 0x9591
    1a8a:	80 93 8a 95 	sts	0x958A, r24

	Endpoint_ClearStatusStage();
    1a8e:	0e 94 ab 10 	call	0x2156	; 0x2156 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1a92:	80 91 8a 95 	lds	r24, 0x958A
    1a96:	88 23       	and	r24, r24
    1a98:	21 f0       	breq	.+8      	; 0x1aa2 <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1a9a:	84 e0       	ldi	r24, 0x04	; 4
    1a9c:	80 93 8e 95 	sts	0x958E, r24
    1aa0:	09 c0       	rjmp	.+18     	; 0x1ab4 <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1aa2:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1aa6:	81 11       	cpse	r24, r1
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <USB_Device_ProcessControlRequest+0x260>
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <USB_Device_ProcessControlRequest+0x262>
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	80 93 8e 95 	sts	0x958E, r24

	EVENT_USB_Device_ConfigurationChanged();
    1ab4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1ab8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1abc:	88 23       	and	r24, r24
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    1ac0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    1ac4:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <Endpoint_StallTransaction>
    1ac8:	0b c0       	rjmp	.+22     	; 0x1ae0 <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1aca:	80 91 91 95 	lds	r24, 0x9591
    1ace:	81 30       	cpi	r24, 0x01	; 1
    1ad0:	99 f7       	brne	.-26     	; 0x1ab8 <USB_Device_ProcessControlRequest+0x26a>
    1ad2:	22 cf       	rjmp	.-444    	; 0x1918 <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ad4:	80 91 91 95 	lds	r24, 0x9591
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <USB_Device_ProcessControlRequest+0x290>
    1adc:	24 cf       	rjmp	.-440    	; 0x1926 <USB_Device_ProcessControlRequest+0xd8>
    1ade:	48 cf       	rjmp	.-368    	; 0x1970 <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1ae0:	ea 96       	adiw	r28, 0x3a	; 58
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	ef 90       	pop	r14
    1af2:	08 95       	ret

00001af4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1af4:	08 95       	ret

00001af6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1af6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1af8:	80 91 8e 95 	lds	r24, 0x958E
    1afc:	88 23       	and	r24, r24
    1afe:	69 f0       	breq	.+26     	; 0x1b1a <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    1b00:	c0 91 9b 95 	lds	r28, 0x959B
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    1b0a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1b0e:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    1b10:	0e 94 27 0c 	call	0x184e	; 0x184e <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    1b14:	8c 2f       	mov	r24, r28
    1b16:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	c8 2e       	mov	r12, r24
    1b30:	d9 2e       	mov	r13, r25
    1b32:	8b 01       	movw	r16, r22
    1b34:	80 91 9b 95 	lds	r24, 0x959B
    1b38:	80 68       	ori	r24, 0x80	; 128
    1b3a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
    1b3e:	c0 91 95 95 	lds	r28, 0x9595
    1b42:	d0 91 96 95 	lds	r29, 0x9596
    1b46:	c0 17       	cp	r28, r16
    1b48:	d1 07       	cpc	r29, r17
    1b4a:	40 f0       	brcs	.+16     	; 0x1b5c <Endpoint_Write_Control_Stream_LE+0x3e>
    1b4c:	01 15       	cp	r16, r1
    1b4e:	11 05       	cpc	r17, r1
    1b50:	21 f4       	brne	.+8      	; 0x1b5a <Endpoint_Write_Control_Stream_LE+0x3c>
    1b52:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    1b56:	e8 01       	movw	r28, r16
    1b58:	01 c0       	rjmp	.+2      	; 0x1b5c <Endpoint_Write_Control_Stream_LE+0x3e>
    1b5a:	e8 01       	movw	r28, r16
    1b5c:	ec 2c       	mov	r14, r12
    1b5e:	fd 2c       	mov	r15, r13
    1b60:	d1 2c       	mov	r13, r1
    1b62:	49 c0       	rjmp	.+146    	; 0x1bf6 <Endpoint_Write_Control_Stream_LE+0xd8>
    1b64:	80 91 8e 95 	lds	r24, 0x958E
    1b68:	88 23       	and	r24, r24
    1b6a:	09 f4       	brne	.+2      	; 0x1b6e <Endpoint_Write_Control_Stream_LE+0x50>
    1b6c:	5a c0       	rjmp	.+180    	; 0x1c22 <Endpoint_Write_Control_Stream_LE+0x104>
    1b6e:	85 30       	cpi	r24, 0x05	; 5
    1b70:	09 f4       	brne	.+2      	; 0x1b74 <Endpoint_Write_Control_Stream_LE+0x56>
    1b72:	59 c0       	rjmp	.+178    	; 0x1c26 <Endpoint_Write_Control_Stream_LE+0x108>
    1b74:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1b78:	81 11       	cpse	r24, r1
    1b7a:	57 c0       	rjmp	.+174    	; 0x1c2a <Endpoint_Write_Control_Stream_LE+0x10c>
    1b7c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    1b80:	81 11       	cpse	r24, r1
    1b82:	49 c0       	rjmp	.+146    	; 0x1c16 <Endpoint_Write_Control_Stream_LE+0xf8>
    1b84:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    1b88:	88 23       	and	r24, r24
    1b8a:	a9 f1       	breq	.+106    	; 0x1bf6 <Endpoint_Write_Control_Stream_LE+0xd8>
    1b8c:	80 91 9b 95 	lds	r24, 0x959B
    1b90:	88 23       	and	r24, r24
    1b92:	74 f4       	brge	.+28     	; 0x1bb0 <Endpoint_Write_Control_Stream_LE+0x92>
    1b94:	e0 91 97 95 	lds	r30, 0x9597
    1b98:	f0 91 98 95 	lds	r31, 0x9598
    1b9c:	ef 5b       	subi	r30, 0xBF	; 191
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	00 81       	ld	r16, Z
    1ba2:	10 e0       	ldi	r17, 0x00	; 0
    1ba4:	20 97       	sbiw	r28, 0x00	; 0
    1ba6:	f9 f0       	breq	.+62     	; 0x1be6 <Endpoint_Write_Control_Stream_LE+0xc8>
    1ba8:	08 30       	cpi	r16, 0x08	; 8
    1baa:	11 05       	cpc	r17, r1
    1bac:	78 f0       	brcs	.+30     	; 0x1bcc <Endpoint_Write_Control_Stream_LE+0xae>
    1bae:	1b c0       	rjmp	.+54     	; 0x1be6 <Endpoint_Write_Control_Stream_LE+0xc8>
    1bb0:	80 91 97 95 	lds	r24, 0x9597
    1bb4:	90 91 98 95 	lds	r25, 0x9598
    1bb8:	fc 01       	movw	r30, r24
    1bba:	e0 5c       	subi	r30, 0xC0	; 192
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	00 81       	ld	r16, Z
    1bc0:	31 96       	adiw	r30, 0x01	; 1
    1bc2:	80 81       	ld	r24, Z
    1bc4:	10 e0       	ldi	r17, 0x00	; 0
    1bc6:	08 1b       	sub	r16, r24
    1bc8:	11 09       	sbc	r17, r1
    1bca:	ec cf       	rjmp	.-40     	; 0x1ba4 <Endpoint_Write_Control_Stream_LE+0x86>
    1bcc:	f7 01       	movw	r30, r14
    1bce:	81 91       	ld	r24, Z+
    1bd0:	7f 01       	movw	r14, r30
    1bd2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
    1bd6:	21 97       	sbiw	r28, 0x01	; 1
    1bd8:	0f 5f       	subi	r16, 0xFF	; 255
    1bda:	1f 4f       	sbci	r17, 0xFF	; 255
    1bdc:	20 97       	sbiw	r28, 0x00	; 0
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <Endpoint_Write_Control_Stream_LE+0xc8>
    1be0:	08 30       	cpi	r16, 0x08	; 8
    1be2:	11 05       	cpc	r17, r1
    1be4:	99 f7       	brne	.-26     	; 0x1bcc <Endpoint_Write_Control_Stream_LE+0xae>
    1be6:	dd 24       	eor	r13, r13
    1be8:	d3 94       	inc	r13
    1bea:	08 30       	cpi	r16, 0x08	; 8
    1bec:	11 05       	cpc	r17, r1
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <Endpoint_Write_Control_Stream_LE+0xd4>
    1bf0:	d1 2c       	mov	r13, r1
    1bf2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    1bf6:	20 97       	sbiw	r28, 0x00	; 0
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <Endpoint_Write_Control_Stream_LE+0xde>
    1bfa:	b4 cf       	rjmp	.-152    	; 0x1b64 <Endpoint_Write_Control_Stream_LE+0x46>
    1bfc:	d1 10       	cpse	r13, r1
    1bfe:	b2 cf       	rjmp	.-156    	; 0x1b64 <Endpoint_Write_Control_Stream_LE+0x46>
    1c00:	0a c0       	rjmp	.+20     	; 0x1c16 <Endpoint_Write_Control_Stream_LE+0xf8>
    1c02:	80 91 8e 95 	lds	r24, 0x958E
    1c06:	88 23       	and	r24, r24
    1c08:	91 f0       	breq	.+36     	; 0x1c2e <Endpoint_Write_Control_Stream_LE+0x110>
    1c0a:	85 30       	cpi	r24, 0x05	; 5
    1c0c:	91 f0       	breq	.+36     	; 0x1c32 <Endpoint_Write_Control_Stream_LE+0x114>
    1c0e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1c12:	81 11       	cpse	r24, r1
    1c14:	10 c0       	rjmp	.+32     	; 0x1c36 <Endpoint_Write_Control_Stream_LE+0x118>
    1c16:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    1c1a:	88 23       	and	r24, r24
    1c1c:	91 f3       	breq	.-28     	; 0x1c02 <Endpoint_Write_Control_Stream_LE+0xe4>
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	0b c0       	rjmp	.+22     	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c22:	82 e0       	ldi	r24, 0x02	; 2
    1c24:	09 c0       	rjmp	.+18     	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c26:	83 e0       	ldi	r24, 0x03	; 3
    1c28:	07 c0       	rjmp	.+14     	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	03 c0       	rjmp	.+6      	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	08 95       	ret

00001c4a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1c4a:	df 92       	push	r13
    1c4c:	ef 92       	push	r14
    1c4e:	ff 92       	push	r15
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	e8 2e       	mov	r14, r24
    1c5a:	f9 2e       	mov	r15, r25
    1c5c:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1c5e:	80 91 9b 95 	lds	r24, 0x959B
    1c62:	80 68       	ori	r24, 0x80	; 128
    1c64:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    1c68:	c0 91 95 95 	lds	r28, 0x9595
    1c6c:	d0 91 96 95 	lds	r29, 0x9596
    1c70:	c0 17       	cp	r28, r16
    1c72:	d1 07       	cpc	r29, r17
    1c74:	40 f0       	brcs	.+16     	; 0x1c86 <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1c76:	01 15       	cp	r16, r1
    1c78:	11 05       	cpc	r17, r1
    1c7a:	21 f4       	brne	.+8      	; 0x1c84 <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    1c7c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    1c80:	e8 01       	movw	r28, r16
    1c82:	01 c0       	rjmp	.+2      	; 0x1c86 <Endpoint_Write_Control_PStream_LE+0x3c>
    1c84:	e8 01       	movw	r28, r16
    1c86:	0e 2d       	mov	r16, r14
    1c88:	1f 2d       	mov	r17, r15
    1c8a:	d1 2c       	mov	r13, r1
    1c8c:	4e c0       	rjmp	.+156    	; 0x1d2a <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c8e:	80 91 8e 95 	lds	r24, 0x958E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c92:	88 23       	and	r24, r24
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <Endpoint_Write_Control_PStream_LE+0x4e>
    1c96:	5f c0       	rjmp	.+190    	; 0x1d56 <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c98:	85 30       	cpi	r24, 0x05	; 5
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <Endpoint_Write_Control_PStream_LE+0x54>
    1c9c:	5e c0       	rjmp	.+188    	; 0x1d5a <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1c9e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1ca2:	81 11       	cpse	r24, r1
    1ca4:	5c c0       	rjmp	.+184    	; 0x1d5e <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1ca6:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    1caa:	81 11       	cpse	r24, r1
    1cac:	4e c0       	rjmp	.+156    	; 0x1d4a <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    1cae:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    1cb2:	88 23       	and	r24, r24
    1cb4:	d1 f1       	breq	.+116    	; 0x1d2a <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1cb6:	80 91 9b 95 	lds	r24, 0x959B
    1cba:	88 23       	and	r24, r24
    1cbc:	7c f4       	brge	.+30     	; 0x1cdc <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1cbe:	e0 91 97 95 	lds	r30, 0x9597
    1cc2:	f0 91 98 95 	lds	r31, 0x9598
    1cc6:	ef 5b       	subi	r30, 0xBF	; 191
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	e0 80       	ld	r14, Z
    1ccc:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1cce:	20 97       	sbiw	r28, 0x00	; 0
    1cd0:	19 f1       	breq	.+70     	; 0x1d18 <Endpoint_Write_Control_PStream_LE+0xce>
    1cd2:	88 e0       	ldi	r24, 0x08	; 8
    1cd4:	e8 16       	cp	r14, r24
    1cd6:	f1 04       	cpc	r15, r1
    1cd8:	78 f0       	brcs	.+30     	; 0x1cf8 <Endpoint_Write_Control_PStream_LE+0xae>
    1cda:	1e c0       	rjmp	.+60     	; 0x1d18 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1cdc:	80 91 97 95 	lds	r24, 0x9597
    1ce0:	90 91 98 95 	lds	r25, 0x9598
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	e0 5c       	subi	r30, 0xC0	; 192
    1ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cea:	e0 80       	ld	r14, Z
    1cec:	31 96       	adiw	r30, 0x01	; 1
    1cee:	80 81       	ld	r24, Z
    1cf0:	f1 2c       	mov	r15, r1
    1cf2:	e8 1a       	sub	r14, r24
    1cf4:	f1 08       	sbc	r15, r1
    1cf6:	eb cf       	rjmp	.-42     	; 0x1cce <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	84 91       	lpm	r24, Z
    1cfc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1d04:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1d06:	ff ef       	ldi	r31, 0xFF	; 255
    1d08:	ef 1a       	sub	r14, r31
    1d0a:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d0c:	20 97       	sbiw	r28, 0x00	; 0
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <Endpoint_Write_Control_PStream_LE+0xce>
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	e8 16       	cp	r14, r24
    1d14:	f1 04       	cpc	r15, r1
    1d16:	81 f7       	brne	.-32     	; 0x1cf8 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d18:	dd 24       	eor	r13, r13
    1d1a:	d3 94       	inc	r13
    1d1c:	e8 e0       	ldi	r30, 0x08	; 8
    1d1e:	ee 16       	cp	r14, r30
    1d20:	f1 04       	cpc	r15, r1
    1d22:	09 f0       	breq	.+2      	; 0x1d26 <Endpoint_Write_Control_PStream_LE+0xdc>
    1d24:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1d26:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d2a:	20 97       	sbiw	r28, 0x00	; 0
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <Endpoint_Write_Control_PStream_LE+0xe6>
    1d2e:	af cf       	rjmp	.-162    	; 0x1c8e <Endpoint_Write_Control_PStream_LE+0x44>
    1d30:	d1 10       	cpse	r13, r1
    1d32:	ad cf       	rjmp	.-166    	; 0x1c8e <Endpoint_Write_Control_PStream_LE+0x44>
    1d34:	0a c0       	rjmp	.+20     	; 0x1d4a <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d36:	80 91 8e 95 	lds	r24, 0x958E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d3a:	88 23       	and	r24, r24
    1d3c:	91 f0       	breq	.+36     	; 0x1d62 <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d3e:	85 30       	cpi	r24, 0x05	; 5
    1d40:	91 f0       	breq	.+36     	; 0x1d66 <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d42:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <Endpoint_IsSETUPReceived>
    1d46:	81 11       	cpse	r24, r1
    1d48:	10 c0       	rjmp	.+32     	; 0x1d6a <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d4a:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    1d4e:	88 23       	and	r24, r24
    1d50:	91 f3       	breq	.-28     	; 0x1d36 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	0b c0       	rjmp	.+22     	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d56:	82 e0       	ldi	r24, 0x02	; 2
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	07 c0       	rjmp	.+14     	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	03 c0       	rjmp	.+6      	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	08 95       	ret

00001d7c <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1d7c:	e0 91 99 95 	lds	r30, 0x9599
    1d80:	f0 91 9a 95 	lds	r31, 0x959A
    1d84:	a0 91 97 95 	lds	r26, 0x9597
    1d88:	b0 91 98 95 	lds	r27, 0x9598
    1d8c:	af 5b       	subi	r26, 0xBF	; 191
    1d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d90:	8c 91       	ld	r24, X
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	82 83       	std	Z+2, r24	; 0x02
    1d96:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1d98:	80 81       	ld	r24, Z
    1d9a:	8d 79       	andi	r24, 0x9D	; 157
    1d9c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1d9e:	e0 91 97 95 	lds	r30, 0x9597
    1da2:	f0 91 98 95 	lds	r31, 0x9598
    1da6:	ef 5b       	subi	r30, 0xBF	; 191
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	10 82       	st	Z, r1
    1dac:	08 95       	ret

00001dae <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1dae:	e0 91 99 95 	lds	r30, 0x9599
    1db2:	f0 91 9a 95 	lds	r31, 0x959A
    1db6:	80 81       	ld	r24, Z
    1db8:	8d 79       	andi	r24, 0x9D	; 157
    1dba:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1dbc:	e0 91 97 95 	lds	r30, 0x9597
    1dc0:	f0 91 98 95 	lds	r31, 0x9598
    1dc4:	ef 5b       	subi	r30, 0xBF	; 191
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	10 82       	st	Z, r1
    1dca:	08 95       	ret

00001dcc <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1dcc:	80 91 97 95 	lds	r24, 0x9597
    1dd0:	90 91 98 95 	lds	r25, 0x9598
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	ef 5b       	subi	r30, 0xBF	; 191
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	20 81       	ld	r18, Z
    1ddc:	31 e0       	ldi	r19, 0x01	; 1
    1dde:	32 0f       	add	r19, r18
    1de0:	30 83       	st	Z, r19
    1de2:	fc 01       	movw	r30, r24
    1de4:	e2 0f       	add	r30, r18
    1de6:	f1 1d       	adc	r31, r1
    1de8:	80 81       	ld	r24, Z
}
    1dea:	08 95       	ret

00001dec <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1dec:	20 91 97 95 	lds	r18, 0x9597
    1df0:	30 91 98 95 	lds	r19, 0x9598
    1df4:	f9 01       	movw	r30, r18
    1df6:	ef 5b       	subi	r30, 0xBF	; 191
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	90 81       	ld	r25, Z
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	49 0f       	add	r20, r25
    1e00:	40 83       	st	Z, r20
    1e02:	f9 01       	movw	r30, r18
    1e04:	e9 0f       	add	r30, r25
    1e06:	f1 1d       	adc	r31, r1
    1e08:	80 83       	st	Z, r24
    1e0a:	08 95       	ret

00001e0c <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1e0c:	80 93 9b 95 	sts	0x959B, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1e10:	28 2f       	mov	r18, r24
    1e12:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1e14:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1e16:	40 91 c6 04 	lds	r20, 0x04C6
    1e1a:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1e1e:	88 23       	and	r24, r24
    1e20:	e4 f4       	brge	.+56     	; 0x1e5a <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1e22:	64 e8       	ldi	r22, 0x84	; 132
    1e24:	62 9f       	mul	r22, r18
    1e26:	c0 01       	movw	r24, r0
    1e28:	63 9f       	mul	r22, r19
    1e2a:	90 0d       	add	r25, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	82 52       	subi	r24, 0x22	; 34
    1e30:	9a 46       	sbci	r25, 0x6A	; 106
    1e32:	80 93 97 95 	sts	0x9597, r24
    1e36:	90 93 98 95 	sts	0x9598, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	82 95       	swap	r24
    1e3e:	92 95       	swap	r25
    1e40:	90 7f       	andi	r25, 0xF0	; 240
    1e42:	98 27       	eor	r25, r24
    1e44:	80 7f       	andi	r24, 0xF0	; 240
    1e46:	98 27       	eor	r25, r24
    1e48:	08 96       	adiw	r24, 0x08	; 8
    1e4a:	9a 01       	movw	r18, r20
    1e4c:	28 0f       	add	r18, r24
    1e4e:	39 1f       	adc	r19, r25
    1e50:	20 93 99 95 	sts	0x9599, r18
    1e54:	30 93 9a 95 	sts	0x959A, r19
    1e58:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1e5a:	64 e8       	ldi	r22, 0x84	; 132
    1e5c:	62 9f       	mul	r22, r18
    1e5e:	c0 01       	movw	r24, r0
    1e60:	63 9f       	mul	r22, r19
    1e62:	90 0d       	add	r25, r0
    1e64:	11 24       	eor	r1, r1
    1e66:	84 56       	subi	r24, 0x64	; 100
    1e68:	9a 46       	sbci	r25, 0x6A	; 106
    1e6a:	80 93 97 95 	sts	0x9597, r24
    1e6e:	90 93 98 95 	sts	0x9598, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1e72:	22 95       	swap	r18
    1e74:	32 95       	swap	r19
    1e76:	30 7f       	andi	r19, 0xF0	; 240
    1e78:	32 27       	eor	r19, r18
    1e7a:	20 7f       	andi	r18, 0xF0	; 240
    1e7c:	32 27       	eor	r19, r18
    1e7e:	24 0f       	add	r18, r20
    1e80:	35 1f       	adc	r19, r21
    1e82:	20 93 99 95 	sts	0x9599, r18
    1e86:	30 93 9a 95 	sts	0x959A, r19
    1e8a:	08 95       	ret

00001e8c <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1e8c:	80 91 9b 95 	lds	r24, 0x959B
    1e90:	80 68       	ori	r24, 0x80	; 128
    1e92:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1e96:	e0 91 99 95 	lds	r30, 0x9599
    1e9a:	f0 91 9a 95 	lds	r31, 0x959A
    1e9e:	80 81       	ld	r24, Z
}
    1ea0:	86 95       	lsr	r24
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	08 95       	ret

00001ea6 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1ea6:	80 91 9b 95 	lds	r24, 0x959B
    1eaa:	8f 77       	andi	r24, 0x7F	; 127
    1eac:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1eb0:	e0 91 99 95 	lds	r30, 0x9599
    1eb4:	f0 91 9a 95 	lds	r31, 0x959A
    1eb8:	80 81       	ld	r24, Z
    1eba:	85 ff       	sbrs	r24, 5
    1ebc:	0c c0       	rjmp	.+24     	; 0x1ed6 <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1ebe:	80 91 97 95 	lds	r24, 0x9597
    1ec2:	90 91 98 95 	lds	r25, 0x9598
    1ec6:	22 81       	ldd	r18, Z+2	; 0x02
    1ec8:	33 81       	ldd	r19, Z+3	; 0x03
    1eca:	fc 01       	movw	r30, r24
    1ecc:	e0 5c       	subi	r30, 0xC0	; 192
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	20 83       	st	Z, r18
		return true;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	08 95       	ret
	}

	return false;
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
}
    1ed8:	08 95       	ret

00001eda <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1eda:	80 91 9b 95 	lds	r24, 0x959B
    1ede:	8f 77       	andi	r24, 0x7F	; 127
    1ee0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1ee4:	e0 91 99 95 	lds	r30, 0x9599
    1ee8:	f0 91 9a 95 	lds	r31, 0x959A
    1eec:	80 81       	ld	r24, Z
    1eee:	84 ff       	sbrs	r24, 4
    1ef0:	0c c0       	rjmp	.+24     	; 0x1f0a <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1ef2:	80 91 97 95 	lds	r24, 0x9597
    1ef6:	90 91 98 95 	lds	r25, 0x9598
    1efa:	22 81       	ldd	r18, Z+2	; 0x02
    1efc:	33 81       	ldd	r19, Z+3	; 0x03
    1efe:	fc 01       	movw	r30, r24
    1f00:	e0 5c       	subi	r30, 0xC0	; 192
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	20 83       	st	Z, r18
		return true;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	08 95       	ret
	}

	return false;
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
}
    1f0c:	08 95       	ret

00001f0e <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1f0e:	80 91 9b 95 	lds	r24, 0x959B
    1f12:	8f 77       	andi	r24, 0x7F	; 127
    1f14:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1f18:	e0 91 99 95 	lds	r30, 0x9599
    1f1c:	f0 91 9a 95 	lds	r31, 0x959A
    1f20:	80 81       	ld	r24, Z
    1f22:	8d 78       	andi	r24, 0x8D	; 141
    1f24:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1f26:	e0 91 99 95 	lds	r30, 0x9599
    1f2a:	f0 91 9a 95 	lds	r31, 0x959A
    1f2e:	80 81       	ld	r24, Z
    1f30:	81 60       	ori	r24, 0x01	; 1
    1f32:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f34:	e0 91 97 95 	lds	r30, 0x9597
    1f38:	f0 91 98 95 	lds	r31, 0x9598
    1f3c:	ef 5b       	subi	r30, 0xBF	; 191
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1f42:	80 91 9b 95 	lds	r24, 0x959B
    1f46:	80 68       	ori	r24, 0x80	; 128
    1f48:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1f4c:	e0 91 99 95 	lds	r30, 0x9599
    1f50:	f0 91 9a 95 	lds	r31, 0x959A
    1f54:	80 81       	ld	r24, Z
    1f56:	81 60       	ori	r24, 0x01	; 1
    1f58:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f5a:	e0 91 97 95 	lds	r30, 0x9597
    1f5e:	f0 91 98 95 	lds	r31, 0x9598
    1f62:	ef 5b       	subi	r30, 0xBF	; 191
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	10 82       	st	Z, r1
    1f68:	08 95       	ret

00001f6a <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1f6a:	e0 91 99 95 	lds	r30, 0x9599
    1f6e:	f0 91 9a 95 	lds	r31, 0x959A
    1f72:	81 81       	ldd	r24, Z+1	; 0x01
    1f74:	84 60       	ori	r24, 0x04	; 4
    1f76:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    1f78:	e0 91 99 95 	lds	r30, 0x9599
    1f7c:	f0 91 9a 95 	lds	r31, 0x959A
    1f80:	81 81       	ldd	r24, Z+1	; 0x01
    1f82:	80 7c       	andi	r24, 0xC0	; 192
    1f84:	80 34       	cpi	r24, 0x40	; 64
    1f86:	61 f4       	brne	.+24     	; 0x1fa0 <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1f88:	80 91 9b 95 	lds	r24, 0x959B
    1f8c:	80 58       	subi	r24, 0x80	; 128
    1f8e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1f92:	e0 91 99 95 	lds	r30, 0x9599
    1f96:	f0 91 9a 95 	lds	r31, 0x959A
    1f9a:	81 81       	ldd	r24, Z+1	; 0x01
    1f9c:	84 60       	ori	r24, 0x04	; 4
    1f9e:	81 83       	std	Z+1, r24	; 0x01
    1fa0:	08 95       	ret

00001fa2 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    1fa2:	1f 93       	push	r17
    1fa4:	cf 93       	push	r28
    1fa6:	df 93       	push	r29
    1fa8:	d8 2f       	mov	r29, r24
    1faa:	16 2f       	mov	r17, r22
    1fac:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    1fae:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    1fb2:	e0 91 99 95 	lds	r30, 0x9599
    1fb6:	f0 91 9a 95 	lds	r31, 0x959A
    1fba:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1fbc:	e0 91 99 95 	lds	r30, 0x9599
    1fc0:	f0 91 9a 95 	lds	r31, 0x959A
    1fc4:	dd 23       	and	r29, r29
    1fc6:	a4 f0       	brlt	.+40     	; 0x1ff0 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    1fc8:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1fca:	e0 91 99 95 	lds	r30, 0x9599
    1fce:	f0 91 9a 95 	lds	r31, 0x959A
    1fd2:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1fd4:	e0 91 99 95 	lds	r30, 0x9599
    1fd8:	f0 91 9a 95 	lds	r31, 0x959A
    1fdc:	12 82       	std	Z+2, r1	; 0x02
    1fde:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1fe0:	80 91 97 95 	lds	r24, 0x9597
    1fe4:	90 91 98 95 	lds	r25, 0x9598
    1fe8:	84 83       	std	Z+4, r24	; 0x04
    1fea:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	14 c0       	rjmp	.+40     	; 0x2018 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1ff0:	82 e0       	ldi	r24, 0x02	; 2
    1ff2:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1ff4:	e0 91 99 95 	lds	r30, 0x9599
    1ff8:	f0 91 9a 95 	lds	r31, 0x959A
    1ffc:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1ffe:	e0 91 99 95 	lds	r30, 0x9599
    2002:	f0 91 9a 95 	lds	r31, 0x959A
    2006:	12 82       	std	Z+2, r1	; 0x02
    2008:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    200a:	80 91 97 95 	lds	r24, 0x9597
    200e:	90 91 98 95 	lds	r25, 0x9598
    2012:	84 83       	std	Z+4, r24	; 0x04
    2014:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    2016:	4c 2f       	mov	r20, r28
    2018:	fc 01       	movw	r30, r24
    201a:	e0 5c       	subi	r30, 0xC0	; 192
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    2020:	31 96       	adiw	r30, 0x01	; 1
    2022:	10 82       	st	Z, r1

	return true;
}
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	1f 91       	pop	r17
    202c:	08 95       	ret

0000202e <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    202e:	af 92       	push	r10
    2030:	bf 92       	push	r11
    2032:	cf 92       	push	r12
    2034:	df 92       	push	r13
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    2042:	66 23       	and	r22, r22
    2044:	09 f4       	brne	.+2      	; 0x2048 <Endpoint_ConfigureEndpointTable+0x1a>
    2046:	57 c0       	rjmp	.+174    	; 0x20f6 <Endpoint_ConfigureEndpointTable+0xc8>
    2048:	a6 2e       	mov	r10, r22
    204a:	7c 01       	movw	r14, r24
    204c:	8c 01       	movw	r16, r24
    204e:	84 e0       	ldi	r24, 0x04	; 4
    2050:	e8 0e       	add	r14, r24
    2052:	f1 1c       	adc	r15, r1
    2054:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    2056:	f8 01       	movw	r30, r16
    2058:	c0 80       	ld	r12, Z
    205a:	cc 20       	and	r12, r12
    205c:	09 f4       	brne	.+2      	; 0x2060 <Endpoint_ConfigureEndpointTable+0x32>
    205e:	41 c0       	rjmp	.+130    	; 0x20e2 <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    2060:	c1 81       	ldd	r28, Z+1	; 0x01
    2062:	d2 81       	ldd	r29, Z+2	; 0x02
    2064:	f7 01       	movw	r30, r14
    2066:	31 97       	sbiw	r30, 0x01	; 1
    2068:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    206a:	f7 01       	movw	r30, r14
    206c:	90 81       	ld	r25, Z
    206e:	92 30       	cpi	r25, 0x02	; 2
    2070:	10 f4       	brcc	.+4      	; 0x2076 <Endpoint_ConfigureEndpointTable+0x48>
    2072:	48 e0       	ldi	r20, 0x08	; 8
    2074:	01 c0       	rjmp	.+2      	; 0x2078 <Endpoint_ConfigureEndpointTable+0x4a>
    2076:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    2078:	c9 30       	cpi	r28, 0x09	; 9
    207a:	d1 05       	cpc	r29, r1
    207c:	50 f0       	brcs	.+20     	; 0x2092 <Endpoint_ConfigureEndpointTable+0x64>
    207e:	28 e0       	ldi	r18, 0x08	; 8
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    2084:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    2086:	22 0f       	add	r18, r18
    2088:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    208a:	2c 17       	cp	r18, r28
    208c:	3d 07       	cpc	r19, r29
    208e:	d0 f3       	brcs	.-12     	; 0x2084 <Endpoint_ConfigureEndpointTable+0x56>
    2090:	01 c0       	rjmp	.+2      	; 0x2094 <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    2092:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    2094:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    2096:	2c 2d       	mov	r18, r12
    2098:	2f 70       	andi	r18, 0x0F	; 15
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	25 30       	cpi	r18, 0x05	; 5
    209e:	31 05       	cpc	r19, r1
    20a0:	64 f5       	brge	.+88     	; 0x20fa <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    20a2:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    20a4:	c1 34       	cpi	r28, 0x41	; 65
    20a6:	d1 05       	cpc	r29, r1
    20a8:	50 f5       	brcc	.+84     	; 0x20fe <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    20aa:	88 23       	and	r24, r24
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <Endpoint_ConfigureEndpointTable+0x86>
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	21 f0       	breq	.+8      	; 0x20ba <Endpoint_ConfigureEndpointTable+0x8c>
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    20b4:	90 64       	ori	r25, 0x40	; 64
    20b6:	d9 2e       	mov	r13, r25
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    20ba:	90 6c       	ori	r25, 0xC0	; 192
    20bc:	d9 2e       	mov	r13, r25
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    20c0:	90 68       	ori	r25, 0x80	; 128
    20c2:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    20c4:	81 11       	cpse	r24, r1
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    20c8:	4c 2f       	mov	r20, r28
    20ca:	6d 2d       	mov	r22, r13
    20cc:	80 e8       	ldi	r24, 0x80	; 128
    20ce:	8c 0d       	add	r24, r12
    20d0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    20d4:	4c 2f       	mov	r20, r28
    20d6:	6d 2d       	mov	r22, r13
    20d8:	8c 2d       	mov	r24, r12
    20da:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>
    20de:	88 23       	and	r24, r24
    20e0:	79 f0       	breq	.+30     	; 0x2100 <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    20e2:	b3 94       	inc	r11
    20e4:	0b 5f       	subi	r16, 0xFB	; 251
    20e6:	1f 4f       	sbci	r17, 0xFF	; 255
    20e8:	f5 e0       	ldi	r31, 0x05	; 5
    20ea:	ef 0e       	add	r14, r31
    20ec:	f1 1c       	adc	r15, r1
    20ee:	ba 10       	cpse	r11, r10
    20f0:	b2 cf       	rjmp	.-156    	; 0x2056 <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <Endpoint_ConfigureEndpointTable+0xd2>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <Endpoint_ConfigureEndpointTable+0xd2>
    20fe:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	1f 91       	pop	r17
    2106:	0f 91       	pop	r16
    2108:	ff 90       	pop	r15
    210a:	ef 90       	pop	r14
    210c:	df 90       	pop	r13
    210e:	cf 90       	pop	r12
    2110:	bf 90       	pop	r11
    2112:	af 90       	pop	r10
    2114:	08 95       	ret

00002116 <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    211a:	a0 ec       	ldi	r26, 0xC0	; 192
    211c:	b4 e0       	ldi	r27, 0x04	; 4
    211e:	16 96       	adiw	r26, 0x06	; 6
    2120:	ed 91       	ld	r30, X+
    2122:	fc 91       	ld	r31, X
    2124:	17 97       	sbiw	r26, 0x07	; 7
    2126:	c9 01       	movw	r24, r18
    2128:	82 95       	swap	r24
    212a:	92 95       	swap	r25
    212c:	90 7f       	andi	r25, 0xF0	; 240
    212e:	98 27       	eor	r25, r24
    2130:	80 7f       	andi	r24, 0xF0	; 240
    2132:	98 27       	eor	r25, r24
    2134:	e8 0f       	add	r30, r24
    2136:	f9 1f       	adc	r31, r25
    2138:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    213a:	16 96       	adiw	r26, 0x06	; 6
    213c:	4d 91       	ld	r20, X+
    213e:	5c 91       	ld	r21, X
    2140:	17 97       	sbiw	r26, 0x07	; 7
    2142:	fa 01       	movw	r30, r20
    2144:	e8 0f       	add	r30, r24
    2146:	f9 1f       	adc	r31, r25
    2148:	11 82       	std	Z+1, r1	; 0x01
    214a:	2f 5f       	subi	r18, 0xFF	; 255
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    214e:	25 30       	cpi	r18, 0x05	; 5
    2150:	31 05       	cpc	r19, r1
    2152:	29 f7       	brne	.-54     	; 0x211e <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    2154:	08 95       	ret

00002156 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2156:	80 91 8f 95 	lds	r24, 0x958F
    215a:	88 23       	and	r24, r24
    215c:	84 f4       	brge	.+32     	; 0x217e <Endpoint_ClearStatusStage+0x28>
    215e:	04 c0       	rjmp	.+8      	; 0x2168 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2160:	80 91 8e 95 	lds	r24, 0x958E
    2164:	88 23       	and	r24, r24
    2166:	89 f0       	breq	.+34     	; 0x218a <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2168:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    216c:	88 23       	and	r24, r24
    216e:	c1 f3       	breq	.-16     	; 0x2160 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    2170:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <Endpoint_ClearOUT>
    2174:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2176:	80 91 8e 95 	lds	r24, 0x958E
    217a:	88 23       	and	r24, r24
    217c:	31 f0       	breq	.+12     	; 0x218a <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    217e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    2182:	88 23       	and	r24, r24
    2184:	c1 f3       	breq	.-16     	; 0x2176 <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    2186:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <Endpoint_ClearIN>
    218a:	08 95       	ret

0000218c <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    2196:	e0 91 c6 04 	lds	r30, 0x04C6
    219a:	f0 91 c7 04 	lds	r31, 0x04C7
    219e:	e0 5b       	subi	r30, 0xB0	; 176
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	c0 81       	ld	r28, Z
    21a4:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    21a6:	0f 2e       	mov	r0, r31
    21a8:	f4 e6       	ldi	r31, 0x64	; 100
    21aa:	ff 2e       	mov	r15, r31
    21ac:	f0 2d       	mov	r31, r0
    21ae:	00 ec       	ldi	r16, 0xC0	; 192
    21b0:	14 e0       	ldi	r17, 0x04	; 4
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <Endpoint_WaitUntilReady+0x2c>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    21b4:	f2 2e       	mov	r15, r18
    21b6:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    21b8:	80 91 9b 95 	lds	r24, 0x959B

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <Endpoint_WaitUntilReady+0x3e>
		{
			if (Endpoint_IsINReady())
    21c0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Endpoint_IsINReady>
    21c4:	88 23       	and	r24, r24
    21c6:	29 f0       	breq	.+10     	; 0x21d2 <Endpoint_WaitUntilReady+0x46>
    21c8:	23 c0       	rjmp	.+70     	; 0x2210 <Endpoint_WaitUntilReady+0x84>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    21ca:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Endpoint_IsOUTReceived>
    21ce:	81 11       	cpse	r24, r1
    21d0:	21 c0       	rjmp	.+66     	; 0x2214 <Endpoint_WaitUntilReady+0x88>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21d2:	80 91 8e 95 	lds	r24, 0x958E

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21d6:	88 23       	and	r24, r24
    21d8:	f9 f0       	breq	.+62     	; 0x2218 <Endpoint_WaitUntilReady+0x8c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21da:	85 30       	cpi	r24, 0x05	; 5
    21dc:	f9 f0       	breq	.+62     	; 0x221c <Endpoint_WaitUntilReady+0x90>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    21de:	e0 91 99 95 	lds	r30, 0x9599
    21e2:	f0 91 9a 95 	lds	r31, 0x959A
    21e6:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    21e8:	82 fd       	sbrc	r24, 2
    21ea:	1a c0       	rjmp	.+52     	; 0x2220 <Endpoint_WaitUntilReady+0x94>
    21ec:	d8 01       	movw	r26, r16
    21ee:	16 96       	adiw	r26, 0x06	; 6
    21f0:	ed 91       	ld	r30, X+
    21f2:	fc 91       	ld	r31, X
    21f4:	17 97       	sbiw	r26, 0x07	; 7
    21f6:	e0 5b       	subi	r30, 0xB0	; 176
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	80 81       	ld	r24, Z
    21fc:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    21fe:	c8 17       	cp	r28, r24
    2200:	d9 07       	cpc	r29, r25
    2202:	c9 f2       	breq	.-78     	; 0x21b6 <Endpoint_WaitUntilReady+0x2a>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2204:	2f ef       	ldi	r18, 0xFF	; 255
    2206:	2f 0d       	add	r18, r15
    2208:	f1 10       	cpse	r15, r1
    220a:	d4 cf       	rjmp	.-88     	; 0x21b4 <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_Timeout;
    220c:	84 e0       	ldi	r24, 0x04	; 4
    220e:	09 c0       	rjmp	.+18     	; 0x2222 <Endpoint_WaitUntilReady+0x96>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	07 c0       	rjmp	.+14     	; 0x2222 <Endpoint_WaitUntilReady+0x96>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <Endpoint_WaitUntilReady+0x96>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <Endpoint_WaitUntilReady+0x96>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	01 c0       	rjmp	.+2      	; 0x2222 <Endpoint_WaitUntilReady+0x96>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2220:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	08 95       	ret

0000222e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    2232:	e0 e4       	ldi	r30, 0x40	; 64
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    2238:	84 81       	ldd	r24, Z+4	; 0x04
    223a:	83 60       	ori	r24, 0x03	; 3
    223c:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    223e:	0e 94 75 11 	call	0x22ea	; 0x22ea <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    2242:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    2246:	c0 ec       	ldi	r28, 0xC0	; 192
    2248:	d4 e0       	ldi	r29, 0x04	; 4
    224a:	88 81       	ld	r24, Y
    224c:	8f 77       	andi	r24, 0x7F	; 127
    224e:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    2250:	88 81       	ld	r24, Y
    2252:	80 68       	ori	r24, 0x80	; 128
    2254:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2256:	10 92 8e 95 	sts	0x958E, r1
	USB_Device_ConfigurationNumber  = 0;
    225a:	10 92 8a 95 	sts	0x958A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    225e:	10 92 8c 95 	sts	0x958C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    2262:	10 92 8b 95 	sts	0x958B, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    2266:	88 81       	ld	r24, Y
    2268:	80 64       	ori	r24, 0x40	; 64
    226a:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    226c:	48 e0       	ldi	r20, 0x08	; 8
    226e:	68 e4       	ldi	r22, 0x48	; 72
    2270:	80 e8       	ldi	r24, 0x80	; 128
    2272:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    2276:	48 e0       	ldi	r20, 0x08	; 8
    2278:	68 e4       	ldi	r22, 0x48	; 72
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    2280:	88 85       	ldd	r24, Y+8	; 0x08
    2282:	80 64       	ori	r24, 0x40	; 64
    2284:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	81 60       	ori	r24, 0x01	; 1
    228a:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    2296:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2298:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    229a:	c0 ec       	ldi	r28, 0xC0	; 192
    229c:	d1 e0       	ldi	r29, 0x01	; 1
    229e:	82 e0       	ldi	r24, 0x02	; 2
    22a0:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    22a2:	ea e1       	ldi	r30, 0x1A	; 26
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	e4 91       	lpm	r30, Z
    22a8:	a0 ec       	ldi	r26, 0xC0	; 192
    22aa:	b4 e0       	ldi	r27, 0x04	; 4
    22ac:	da 96       	adiw	r26, 0x3a	; 58
    22ae:	ec 93       	st	X, r30
    22b0:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    22b2:	eb e1       	ldi	r30, 0x1B	; 27
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	e4 91       	lpm	r30, Z
    22b8:	db 96       	adiw	r26, 0x3b	; 59
    22ba:	ec 93       	st	X, r30
    22bc:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    22be:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    22c0:	81 e3       	ldi	r24, 0x31	; 49
    22c2:	98 e9       	ldi	r25, 0x98	; 152
    22c4:	8e 7f       	andi	r24, 0xFE	; 254
    22c6:	16 96       	adiw	r26, 0x06	; 6
    22c8:	8d 93       	st	X+, r24
    22ca:	9c 93       	st	X, r25
    22cc:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    22ce:	84 e1       	ldi	r24, 0x14	; 20
    22d0:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	18 96       	adiw	r26, 0x08	; 8
    22d6:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    22d8:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	80 93 8d 95 	sts	0x958D, r24

	USB_ResetInterface();
    22e0:	0e 94 17 11 	call	0x222e	; 0x222e <USB_ResetInterface>
}
    22e4:	df 91       	pop	r29
    22e6:	cf 91       	pop	r28
    22e8:	08 95       	ret

000022ea <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    22ea:	e0 ec       	ldi	r30, 0xC0	; 192
    22ec:	f4 e0       	ldi	r31, 0x04	; 4
    22ee:	80 85       	ldd	r24, Z+8	; 0x08
    22f0:	83 70       	andi	r24, 0x03	; 3
    22f2:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    22f4:	11 86       	std	Z+9, r1	; 0x09
    22f6:	08 95       	ret

000022f8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    22f8:	e0 ec       	ldi	r30, 0xC0	; 192
    22fa:	f4 e0       	ldi	r31, 0x04	; 4
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    2300:	84 87       	std	Z+12, r24	; 0x0c
    2302:	08 95       	ret

00002304 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    2304:	1f 92       	push	r1
    2306:	0f 92       	push	r0
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	0f 92       	push	r0
    230c:	11 24       	eor	r1, r1
    230e:	0b b6       	in	r0, 0x3b	; 59
    2310:	0f 92       	push	r0
    2312:	2f 93       	push	r18
    2314:	3f 93       	push	r19
    2316:	4f 93       	push	r20
    2318:	5f 93       	push	r21
    231a:	6f 93       	push	r22
    231c:	7f 93       	push	r23
    231e:	8f 93       	push	r24
    2320:	9f 93       	push	r25
    2322:	af 93       	push	r26
    2324:	bf 93       	push	r27
    2326:	ef 93       	push	r30
    2328:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    232a:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    232e:	88 23       	and	r24, r24
    2330:	4c f4       	brge	.+18     	; 0x2344 <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    2332:	80 91 c8 04 	lds	r24, 0x04C8
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    233a:	80 e8       	ldi	r24, 0x80	; 128
    233c:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2340:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    2344:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    2348:	86 ff       	sbrs	r24, 6
    234a:	07 c0       	rjmp	.+14     	; 0x235a <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    234c:	80 e4       	ldi	r24, 0x40	; 64
    234e:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    2352:	10 92 8e 95 	sts	0x958E, r1
		EVENT_USB_Device_Disconnect();
    2356:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    235a:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    235e:	85 ff       	sbrs	r24, 5
    2360:	16 c0       	rjmp	.+44     	; 0x238e <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    2362:	80 e2       	ldi	r24, 0x20	; 32
    2364:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    2368:	80 91 8a 95 	lds	r24, 0x958A
    236c:	88 23       	and	r24, r24
    236e:	21 f0       	breq	.+8      	; 0x2378 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2370:	84 e0       	ldi	r24, 0x04	; 4
    2372:	80 93 8e 95 	sts	0x958E, r24
    2376:	09 c0       	rjmp	.+18     	; 0x238a <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    2378:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    237c:	81 11       	cpse	r24, r1
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <__vector_125+0x80>
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <__vector_125+0x82>
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	80 93 8e 95 	sts	0x958E, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    238a:	0e 94 10 16 	call	0x2c20	; 0x2c20 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    238e:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    2392:	84 ff       	sbrs	r24, 4
    2394:	18 c0       	rjmp	.+48     	; 0x23c6 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    2396:	e0 ec       	ldi	r30, 0xC0	; 192
    2398:	f4 e0       	ldi	r31, 0x04	; 4
    239a:	80 e1       	ldi	r24, 0x10	; 16
    239c:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	80 93 8e 95 	sts	0x958E, r24
		USB_Device_ConfigurationNumber = 0;
    23a4:	10 92 8a 95 	sts	0x958A, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    23a8:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    23aa:	0e 94 8b 10 	call	0x2116	; 0x2116 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    23ae:	48 e0       	ldi	r20, 0x08	; 8
    23b0:	68 e4       	ldi	r22, 0x48	; 72
    23b2:	80 e8       	ldi	r24, 0x80	; 128
    23b4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    23b8:	48 e0       	ldi	r20, 0x08	; 8
    23ba:	68 e4       	ldi	r22, 0x48	; 72
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    23c2:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <USB_Event_Stub>
	}
}
    23c6:	ff 91       	pop	r31
    23c8:	ef 91       	pop	r30
    23ca:	bf 91       	pop	r27
    23cc:	af 91       	pop	r26
    23ce:	9f 91       	pop	r25
    23d0:	8f 91       	pop	r24
    23d2:	7f 91       	pop	r23
    23d4:	6f 91       	pop	r22
    23d6:	5f 91       	pop	r21
    23d8:	4f 91       	pop	r20
    23da:	3f 91       	pop	r19
    23dc:	2f 91       	pop	r18
    23de:	0f 90       	pop	r0
    23e0:	0b be       	out	0x3b, r0	; 59
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	0f 90       	pop	r0
    23e8:	1f 90       	pop	r1
    23ea:	18 95       	reti

000023ec <USBThread>:
		
		
		//int retval = _nrf24l01p_send_to_address_ack(0x4C4C4C4C31, (uint8_t*)txData,strlen(txData));
		vTaskDelay(10);
		
	}
    23ec:	0e 94 36 08 	call	0x106c	; 0x106c <vTaskSuspendAll>
    23f0:	8b e8       	ldi	r24, 0x8B	; 139
    23f2:	92 e2       	ldi	r25, 0x22	; 34
    23f4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <CDC_Device_USBTask>
    23f8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <USB_USBTask>
    23fc:	0e 94 12 09 	call	0x1224	; 0x1224 <xTaskResumeAll>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    2408:	f1 cf       	rjmp	.-30     	; 0x23ec <USBThread>

0000240a <usart_spi_transmit_receive>:
    240a:	fc 01       	movw	r30, r24
    240c:	81 81       	ldd	r24, Z+1	; 0x01
    240e:	85 ff       	sbrs	r24, 5
    2410:	fd cf       	rjmp	.-6      	; 0x240c <usart_spi_transmit_receive+0x2>
    2412:	60 83       	st	Z, r22
    2414:	81 81       	ldd	r24, Z+1	; 0x01
    2416:	86 ff       	sbrs	r24, 6
    2418:	fd cf       	rjmp	.-6      	; 0x2414 <usart_spi_transmit_receive+0xa>
    241a:	80 e4       	ldi	r24, 0x40	; 64
    241c:	81 83       	std	Z+1, r24	; 0x01
    241e:	80 81       	ld	r24, Z
    2420:	08 95       	ret

00002422 <ssd1306_write_command>:
    2422:	1f 93       	push	r17
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	c0 ea       	ldi	r28, 0xA0	; 160
    242a:	d6 e0       	ldi	r29, 0x06	; 6
    242c:	18 e0       	ldi	r17, 0x08	; 8
    242e:	1e 83       	std	Y+6, r17	; 0x06
    2430:	e0 e6       	ldi	r30, 0x60	; 96
    2432:	f6 e0       	ldi	r31, 0x06	; 6
    2434:	91 e0       	ldi	r25, 0x01	; 1
    2436:	96 83       	std	Z+6, r25	; 0x06
    2438:	96 83       	std	Z+6, r25	; 0x06
    243a:	68 2f       	mov	r22, r24
    243c:	80 ea       	ldi	r24, 0xA0	; 160
    243e:	99 e0       	ldi	r25, 0x09	; 9
    2440:	0e 94 05 12 	call	0x240a	; 0x240a <usart_spi_transmit_receive>
    2444:	1d 83       	std	Y+5, r17	; 0x05
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	08 95       	ret

0000244e <ssd1306_write_data>:
    244e:	ef 92       	push	r14
    2450:	ff 92       	push	r15
    2452:	0f 93       	push	r16
    2454:	1f 93       	push	r17
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	c0 ea       	ldi	r28, 0xA0	; 160
    245c:	d6 e0       	ldi	r29, 0x06	; 6
    245e:	18 e0       	ldi	r17, 0x08	; 8
    2460:	1e 83       	std	Y+6, r17	; 0x06
    2462:	0f 2e       	mov	r0, r31
    2464:	f0 e6       	ldi	r31, 0x60	; 96
    2466:	ef 2e       	mov	r14, r31
    2468:	f6 e0       	ldi	r31, 0x06	; 6
    246a:	ff 2e       	mov	r15, r31
    246c:	f0 2d       	mov	r31, r0
    246e:	01 e0       	ldi	r16, 0x01	; 1
    2470:	f7 01       	movw	r30, r14
    2472:	05 83       	std	Z+5, r16	; 0x05
    2474:	68 2f       	mov	r22, r24
    2476:	80 ea       	ldi	r24, 0xA0	; 160
    2478:	99 e0       	ldi	r25, 0x09	; 9
    247a:	0e 94 05 12 	call	0x240a	; 0x240a <usart_spi_transmit_receive>
    247e:	f7 01       	movw	r30, r14
    2480:	06 83       	std	Z+6, r16	; 0x06
    2482:	1d 83       	std	Y+5, r17	; 0x05
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	ef 90       	pop	r14
    2490:	08 95       	ret

00002492 <ssd1306_set_page_address>:
    2492:	87 70       	andi	r24, 0x07	; 7
    2494:	80 6b       	ori	r24, 0xB0	; 176
    2496:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    249a:	08 95       	ret

0000249c <ssd1306_set_column_address>:
    249c:	cf 93       	push	r28
    249e:	c8 2f       	mov	r28, r24
    24a0:	98 2f       	mov	r25, r24
    24a2:	9f 77       	andi	r25, 0x7F	; 127
    24a4:	89 2f       	mov	r24, r25
    24a6:	82 95       	swap	r24
    24a8:	8f 70       	andi	r24, 0x0F	; 15
    24aa:	80 61       	ori	r24, 0x10	; 16
    24ac:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    24b0:	8c 2f       	mov	r24, r28
    24b2:	8f 70       	andi	r24, 0x0F	; 15
    24b4:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    24b8:	cf 91       	pop	r28
    24ba:	08 95       	ret

000024bc <usart_init_spi>:
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	ec 01       	movw	r28, r24
    24c2:	fb 01       	movw	r30, r22
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	8f 7e       	andi	r24, 0xEF	; 239
    24c8:	8c 83       	std	Y+4, r24	; 0x04
    24ca:	a0 e6       	ldi	r26, 0x60	; 96
    24cc:	b6 e0       	ldi	r27, 0x06	; 6
    24ce:	82 e0       	ldi	r24, 0x02	; 2
    24d0:	11 96       	adiw	r26, 0x01	; 1
    24d2:	8c 93       	st	X, r24
    24d4:	11 97       	sbiw	r26, 0x01	; 1
    24d6:	15 96       	adiw	r26, 0x05	; 5
    24d8:	8c 93       	st	X, r24
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	80 6c       	ori	r24, 0xC0	; 192
    24de:	8d 83       	std	Y+5, r24	; 0x05
    24e0:	84 81       	ldd	r24, Z+4	; 0x04
    24e2:	8d 7f       	andi	r24, 0xFD	; 253
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	21 f4       	brne	.+8      	; 0x24f0 <usart_init_spi+0x34>
    24e8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ea:	82 60       	ori	r24, 0x02	; 2
    24ec:	8d 83       	std	Y+5, r24	; 0x05
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <usart_init_spi+0x3a>
    24f0:	8d 81       	ldd	r24, Y+5	; 0x05
    24f2:	8d 7f       	andi	r24, 0xFD	; 253
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	85 81       	ldd	r24, Z+5	; 0x05
    24f8:	88 23       	and	r24, r24
    24fa:	21 f0       	breq	.+8      	; 0x2504 <usart_init_spi+0x48>
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	84 60       	ori	r24, 0x04	; 4
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	03 c0       	rjmp	.+6      	; 0x250a <usart_init_spi+0x4e>
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	8b 7f       	andi	r24, 0xFB	; 251
    2508:	8d 83       	std	Y+5, r24	; 0x05
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	a2 81       	ldd	r26, Z+2	; 0x02
    2510:	b3 81       	ldd	r27, Z+3	; 0x03
    2512:	9c 01       	movw	r18, r24
    2514:	ad 01       	movw	r20, r26
    2516:	22 0f       	add	r18, r18
    2518:	33 1f       	adc	r19, r19
    251a:	44 1f       	adc	r20, r20
    251c:	55 1f       	adc	r21, r21
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	78 e4       	ldi	r23, 0x48	; 72
    2522:	88 ee       	ldi	r24, 0xE8	; 232
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 31 1b 	call	0x3662	; 0x3662 <__udivmodsi4>
    252a:	21 50       	subi	r18, 0x01	; 1
    252c:	31 09       	sbc	r19, r1
    252e:	83 2f       	mov	r24, r19
    2530:	8f 70       	andi	r24, 0x0F	; 15
    2532:	8f 83       	std	Y+7, r24	; 0x07
    2534:	2e 83       	std	Y+6, r18	; 0x06
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	88 60       	ori	r24, 0x08	; 8
    253a:	8c 83       	std	Y+4, r24	; 0x04
    253c:	df 91       	pop	r29
    253e:	cf 91       	pop	r28
    2540:	08 95       	ret

00002542 <ssd1306_init>:
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	00 d0       	rcall	.+0      	; 0x2548 <ssd1306_init+0x6>
    2548:	00 d0       	rcall	.+0      	; 0x254a <ssd1306_init+0x8>
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	20 ea       	ldi	r18, 0xA0	; 160
    2550:	36 e0       	ldi	r19, 0x06	; 6
    2552:	88 e0       	ldi	r24, 0x08	; 8
    2554:	d9 01       	movw	r26, r18
    2556:	11 96       	adiw	r26, 0x01	; 1
    2558:	8c 93       	st	X, r24
    255a:	a0 e6       	ldi	r26, 0x60	; 96
    255c:	b6 e0       	ldi	r27, 0x06	; 6
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	9c 93       	st	X, r25
    2564:	11 97       	sbiw	r26, 0x01	; 1
    2566:	e0 e0       	ldi	r30, 0x00	; 0
    2568:	f6 e0       	ldi	r31, 0x06	; 6
    256a:	81 83       	std	Z+1, r24	; 0x01
    256c:	92 e0       	ldi	r25, 0x02	; 2
    256e:	11 96       	adiw	r26, 0x01	; 1
    2570:	9c 93       	st	X, r25
    2572:	11 97       	sbiw	r26, 0x01	; 1
    2574:	11 96       	adiw	r26, 0x01	; 1
    2576:	8c 93       	st	X, r24
    2578:	d9 01       	movw	r26, r18
    257a:	15 96       	adiw	r26, 0x05	; 5
    257c:	8c 93       	st	X, r24
    257e:	86 83       	std	Z+6, r24	; 0x06
    2580:	ba e6       	ldi	r27, 0x6A	; 106
    2582:	ba 95       	dec	r27
    2584:	f1 f7       	brne	.-4      	; 0x2582 <ssd1306_init+0x40>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <ssd1306_init+0x46>
    2588:	85 83       	std	Z+5, r24	; 0x05
    258a:	ea e6       	ldi	r30, 0x6A	; 106
    258c:	ea 95       	dec	r30
    258e:	f1 f7       	brne	.-4      	; 0x258c <ssd1306_init+0x4a>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <ssd1306_init+0x50>
    2592:	e0 e7       	ldi	r30, 0x70	; 112
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	84 81       	ldd	r24, Z+4	; 0x04
    2598:	8f 7e       	andi	r24, 0xEF	; 239
    259a:	84 83       	std	Z+4, r24	; 0x04
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	9b e1       	ldi	r25, 0x1B	; 27
    25a0:	a7 eb       	ldi	r26, 0xB7	; 183
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	89 83       	std	Y+1, r24	; 0x01
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	ab 83       	std	Y+3, r26	; 0x03
    25aa:	bc 83       	std	Y+4, r27	; 0x04
    25ac:	1d 82       	std	Y+5, r1	; 0x05
    25ae:	1e 82       	std	Y+6, r1	; 0x06
    25b0:	be 01       	movw	r22, r28
    25b2:	6f 5f       	subi	r22, 0xFF	; 255
    25b4:	7f 4f       	sbci	r23, 0xFF	; 255
    25b6:	80 ea       	ldi	r24, 0xA0	; 160
    25b8:	99 e0       	ldi	r25, 0x09	; 9
    25ba:	0e 94 5e 12 	call	0x24bc	; 0x24bc <usart_init_spi>
    25be:	88 ea       	ldi	r24, 0xA8	; 168
    25c0:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25c4:	8f e1       	ldi	r24, 0x1F	; 31
    25c6:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25ca:	83 ed       	ldi	r24, 0xD3	; 211
    25cc:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25d6:	80 e4       	ldi	r24, 0x40	; 64
    25d8:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25dc:	81 ea       	ldi	r24, 0xA1	; 161
    25de:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25e2:	88 ec       	ldi	r24, 0xC8	; 200
    25e4:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25e8:	8a ed       	ldi	r24, 0xDA	; 218
    25ea:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25ee:	82 e0       	ldi	r24, 0x02	; 2
    25f0:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25f4:	81 e8       	ldi	r24, 0x81	; 129
    25f6:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    25fa:	8f e8       	ldi	r24, 0x8F	; 143
    25fc:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2600:	84 ea       	ldi	r24, 0xA4	; 164
    2602:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2606:	86 ea       	ldi	r24, 0xA6	; 166
    2608:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    260c:	85 ed       	ldi	r24, 0xD5	; 213
    260e:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2612:	80 e8       	ldi	r24, 0x80	; 128
    2614:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2618:	8d e8       	ldi	r24, 0x8D	; 141
    261a:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    261e:	84 e1       	ldi	r24, 0x14	; 20
    2620:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2624:	8b ed       	ldi	r24, 0xDB	; 219
    2626:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    262a:	80 e4       	ldi	r24, 0x40	; 64
    262c:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2630:	89 ed       	ldi	r24, 0xD9	; 217
    2632:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2636:	81 ef       	ldi	r24, 0xF1	; 241
    2638:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    263c:	8f ea       	ldi	r24, 0xAF	; 175
    263e:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
    2642:	26 96       	adiw	r28, 0x06	; 6
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	08 95       	ret

0000264e <ssd1306_write_text>:
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	dc 01       	movw	r26, r24
    265a:	ec 91       	ld	r30, X
    265c:	ee 23       	and	r30, r30
    265e:	29 f1       	breq	.+74     	; 0x26aa <ssd1306_write_text+0x5c>
    2660:	7c 01       	movw	r14, r24
    2662:	bf ef       	ldi	r27, 0xFF	; 255
    2664:	eb 1a       	sub	r14, r27
    2666:	fb 0a       	sbc	r15, r27
    2668:	ef 37       	cpi	r30, 0x7F	; 127
    266a:	d0 f4       	brcc	.+52     	; 0x26a0 <ssd1306_write_text+0x52>
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	ee 0f       	add	r30, r30
    2670:	ff 1f       	adc	r31, r31
    2672:	e5 57       	subi	r30, 0x75	; 117
    2674:	fe 4d       	sbci	r31, 0xDE	; 222
    2676:	00 81       	ld	r16, Z
    2678:	11 81       	ldd	r17, Z+1	; 0x01
    267a:	f8 01       	movw	r30, r16
    267c:	80 81       	ld	r24, Z
    267e:	88 23       	and	r24, r24
    2680:	61 f0       	breq	.+24     	; 0x269a <ssd1306_write_text+0x4c>
    2682:	c1 e0       	ldi	r28, 0x01	; 1
    2684:	f8 01       	movw	r30, r16
    2686:	ec 0f       	add	r30, r28
    2688:	f1 1d       	adc	r31, r1
    268a:	80 81       	ld	r24, Z
    268c:	0e 94 27 12 	call	0x244e	; 0x244e <ssd1306_write_data>
    2690:	cf 5f       	subi	r28, 0xFF	; 255
    2692:	d8 01       	movw	r26, r16
    2694:	9c 91       	ld	r25, X
    2696:	9c 17       	cp	r25, r28
    2698:	a8 f7       	brcc	.-22     	; 0x2684 <ssd1306_write_text+0x36>
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	0e 94 27 12 	call	0x244e	; 0x244e <ssd1306_write_data>
    26a0:	d7 01       	movw	r26, r14
    26a2:	ed 91       	ld	r30, X+
    26a4:	7d 01       	movw	r14, r26
    26a6:	e1 11       	cpse	r30, r1
    26a8:	df cf       	rjmp	.-66     	; 0x2668 <ssd1306_write_text+0x1a>
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	08 95       	ret

000026b6 <gfx_mono_framebuffer_put_byte>:
    26b6:	20 e8       	ldi	r18, 0x80	; 128
    26b8:	82 9f       	mul	r24, r18
    26ba:	c0 01       	movw	r24, r0
    26bc:	11 24       	eor	r1, r1
    26be:	86 0f       	add	r24, r22
    26c0:	91 1d       	adc	r25, r1
    26c2:	e0 91 6d 93 	lds	r30, 0x936D
    26c6:	f0 91 6e 93 	lds	r31, 0x936E
    26ca:	e8 0f       	add	r30, r24
    26cc:	f9 1f       	adc	r31, r25
    26ce:	40 83       	st	Z, r20
    26d0:	08 95       	ret

000026d2 <gfx_mono_framebuffer_get_byte>:
    26d2:	20 e8       	ldi	r18, 0x80	; 128
    26d4:	82 9f       	mul	r24, r18
    26d6:	c0 01       	movw	r24, r0
    26d8:	11 24       	eor	r1, r1
    26da:	86 0f       	add	r24, r22
    26dc:	91 1d       	adc	r25, r1
    26de:	e0 91 6d 93 	lds	r30, 0x936D
    26e2:	f0 91 6e 93 	lds	r31, 0x936E
    26e6:	e8 0f       	add	r30, r24
    26e8:	f9 1f       	adc	r31, r25
    26ea:	80 81       	ld	r24, Z
    26ec:	08 95       	ret

000026ee <gfx_mono_ssd1306_put_byte>:
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	18 2f       	mov	r17, r24
    26f6:	d6 2f       	mov	r29, r22
    26f8:	c4 2f       	mov	r28, r20
    26fa:	21 11       	cpse	r18, r1
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <gfx_mono_ssd1306_put_byte+0x18>
    26fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <gfx_mono_framebuffer_get_byte>
    2702:	8c 17       	cp	r24, r28
    2704:	71 f0       	breq	.+28     	; 0x2722 <gfx_mono_ssd1306_put_byte+0x34>
    2706:	4c 2f       	mov	r20, r28
    2708:	6d 2f       	mov	r22, r29
    270a:	81 2f       	mov	r24, r17
    270c:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <gfx_mono_framebuffer_put_byte>
    2710:	81 2f       	mov	r24, r17
    2712:	0e 94 49 12 	call	0x2492	; 0x2492 <ssd1306_set_page_address>
    2716:	8d 2f       	mov	r24, r29
    2718:	0e 94 4e 12 	call	0x249c	; 0x249c <ssd1306_set_column_address>
    271c:	8c 2f       	mov	r24, r28
    271e:	0e 94 27 12 	call	0x244e	; 0x244e <ssd1306_write_data>
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	1f 91       	pop	r17
    2728:	08 95       	ret

0000272a <ds1302_arch_initialize>:
    272a:	0f 93       	push	r16
    272c:	07 e0       	ldi	r16, 0x07	; 7
    272e:	20 e1       	ldi	r18, 0x10	; 16
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	8f ea       	ldi	r24, 0xAF	; 175
    2736:	92 e2       	ldi	r25, 0x22	; 34
    2738:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <DigitalPin_Config>
    273c:	0f 91       	pop	r16
    273e:	08 95       	ret

00002740 <ds1302_initialize>:
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	8f ea       	ldi	r24, 0xAF	; 175
    2744:	92 e2       	ldi	r25, 0x22	; 34
    2746:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	8f ea       	ldi	r24, 0xAF	; 175
    274e:	92 e2       	ldi	r25, 0x22	; 34
    2750:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	82 eb       	ldi	r24, 0xB2	; 178
    2758:	92 e2       	ldi	r25, 0x22	; 34
    275a:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    275e:	61 e0       	ldi	r22, 0x01	; 1
    2760:	8c ea       	ldi	r24, 0xAC	; 172
    2762:	92 e2       	ldi	r25, 0x22	; 34
    2764:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    2768:	0e 94 95 13 	call	0x272a	; 0x272a <ds1302_arch_initialize>
    276c:	08 95       	ret

0000276e <ds1302_writeByte>:
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	18 2f       	mov	r17, r24
    2776:	61 e0       	ldi	r22, 0x01	; 1
    2778:	8f ea       	ldi	r24, 0xAF	; 175
    277a:	92 e2       	ldi	r25, 0x22	; 34
    277c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    2780:	c8 e0       	ldi	r28, 0x08	; 8
    2782:	d0 e0       	ldi	r29, 0x00	; 0
    2784:	10 ff       	sbrs	r17, 0
    2786:	05 c0       	rjmp	.+10     	; 0x2792 <ds1302_writeByte+0x24>
    2788:	8f ea       	ldi	r24, 0xAF	; 175
    278a:	92 e2       	ldi	r25, 0x22	; 34
    278c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <DigitalPin_SetValue>
    2790:	04 c0       	rjmp	.+8      	; 0x279a <ds1302_writeByte+0x2c>
    2792:	8f ea       	ldi	r24, 0xAF	; 175
    2794:	92 e2       	ldi	r25, 0x22	; 34
    2796:	0e 94 94 16 	call	0x2d28	; 0x2d28 <DigitalPin_ClearValue>
    279a:	81 e0       	ldi	r24, 0x01	; 1
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    27a2:	82 eb       	ldi	r24, 0xB2	; 178
    27a4:	92 e2       	ldi	r25, 0x22	; 34
    27a6:	0e 94 84 16 	call	0x2d08	; 0x2d08 <DigitalPin_SetValue>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    27b2:	82 eb       	ldi	r24, 0xB2	; 178
    27b4:	92 e2       	ldi	r25, 0x22	; 34
    27b6:	0e 94 94 16 	call	0x2d28	; 0x2d28 <DigitalPin_ClearValue>
    27ba:	16 95       	lsr	r17
    27bc:	21 97       	sbiw	r28, 0x01	; 1
    27be:	11 f7       	brne	.-60     	; 0x2784 <ds1302_writeByte+0x16>
    27c0:	60 e0       	ldi	r22, 0x00	; 0
    27c2:	8f ea       	ldi	r24, 0xAF	; 175
    27c4:	92 e2       	ldi	r25, 0x22	; 34
    27c6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	08 95       	ret

000027d2 <ds1302_readByte>:
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	8f ea       	ldi	r24, 0xAF	; 175
    27dc:	92 e2       	ldi	r25, 0x22	; 34
    27de:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
    27e2:	c0 e0       	ldi	r28, 0x00	; 0
    27e4:	d0 e0       	ldi	r29, 0x00	; 0
    27e6:	10 e0       	ldi	r17, 0x00	; 0
    27e8:	8f ea       	ldi	r24, 0xAF	; 175
    27ea:	92 e2       	ldi	r25, 0x22	; 34
    27ec:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <DigitalPin_GetValue>
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	0c 2e       	mov	r0, r28
    27f6:	02 c0       	rjmp	.+4      	; 0x27fc <ds1302_readByte+0x2a>
    27f8:	22 0f       	add	r18, r18
    27fa:	33 1f       	adc	r19, r19
    27fc:	0a 94       	dec	r0
    27fe:	e2 f7       	brpl	.-8      	; 0x27f8 <ds1302_readByte+0x26>
    2800:	12 2b       	or	r17, r18
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    280a:	82 eb       	ldi	r24, 0xB2	; 178
    280c:	92 e2       	ldi	r25, 0x22	; 34
    280e:	0e 94 84 16 	call	0x2d08	; 0x2d08 <DigitalPin_SetValue>
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    281a:	82 eb       	ldi	r24, 0xB2	; 178
    281c:	92 e2       	ldi	r25, 0x22	; 34
    281e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <DigitalPin_ClearValue>
    2822:	21 96       	adiw	r28, 0x01	; 1
    2824:	c8 30       	cpi	r28, 0x08	; 8
    2826:	d1 05       	cpc	r29, r1
    2828:	f9 f6       	brne	.-66     	; 0x27e8 <ds1302_readByte+0x16>
    282a:	81 2f       	mov	r24, r17
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	08 95       	ret

00002834 <ds1302_readReg>:
    2834:	cf 93       	push	r28
    2836:	c8 2f       	mov	r28, r24
    2838:	8c ea       	ldi	r24, 0xAC	; 172
    283a:	92 e2       	ldi	r25, 0x22	; 34
    283c:	0e 94 84 16 	call	0x2d08	; 0x2d08 <DigitalPin_SetValue>
    2840:	84 e0       	ldi	r24, 0x04	; 4
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    2848:	8c 2f       	mov	r24, r28
    284a:	0e 94 b7 13 	call	0x276e	; 0x276e <ds1302_writeByte>
    284e:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <ds1302_readByte>
    2852:	c8 2f       	mov	r28, r24
    2854:	84 e0       	ldi	r24, 0x04	; 4
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    285c:	8c ea       	ldi	r24, 0xAC	; 172
    285e:	92 e2       	ldi	r25, 0x22	; 34
    2860:	0e 94 94 16 	call	0x2d28	; 0x2d28 <DigitalPin_ClearValue>
    2864:	8c 2f       	mov	r24, r28
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <ds1302_time>:
    286a:	ef 92       	push	r14
    286c:	ff 92       	push	r15
    286e:	0f 93       	push	r16
    2870:	1f 93       	push	r17
    2872:	cf 93       	push	r28
    2874:	df 93       	push	r29
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	63 97       	sbiw	r28, 0x13	; 19
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	de bf       	out	0x3e, r29	; 62
    2880:	8c ea       	ldi	r24, 0xAC	; 172
    2882:	92 e2       	ldi	r25, 0x22	; 34
    2884:	0e 94 84 16 	call	0x2d08	; 0x2d08 <DigitalPin_SetValue>
    2888:	84 e0       	ldi	r24, 0x04	; 4
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    2890:	8f eb       	ldi	r24, 0xBF	; 191
    2892:	0e 94 b7 13 	call	0x276e	; 0x276e <ds1302_writeByte>
    2896:	8e 01       	movw	r16, r28
    2898:	0f 5f       	subi	r16, 0xFF	; 255
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	7e 01       	movw	r14, r28
    289e:	88 e0       	ldi	r24, 0x08	; 8
    28a0:	e8 0e       	add	r14, r24
    28a2:	f1 1c       	adc	r15, r1
    28a4:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <ds1302_readByte>
    28a8:	f8 01       	movw	r30, r16
    28aa:	81 93       	st	Z+, r24
    28ac:	8f 01       	movw	r16, r30
    28ae:	ee 15       	cp	r30, r14
    28b0:	ff 05       	cpc	r31, r15
    28b2:	c1 f7       	brne	.-16     	; 0x28a4 <ds1302_time+0x3a>
    28b4:	8c ea       	ldi	r24, 0xAC	; 172
    28b6:	92 e2       	ldi	r25, 0x22	; 34
    28b8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <DigitalPin_ClearValue>
    28bc:	00 00       	nop
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	98 2f       	mov	r25, r24
    28c2:	92 95       	swap	r25
    28c4:	9f 70       	andi	r25, 0x0F	; 15
    28c6:	99 0f       	add	r25, r25
    28c8:	29 2f       	mov	r18, r25
    28ca:	22 0f       	add	r18, r18
    28cc:	22 0f       	add	r18, r18
    28ce:	92 0f       	add	r25, r18
    28d0:	8f 70       	andi	r24, 0x0F	; 15
    28d2:	89 0f       	add	r24, r25
    28d4:	88 87       	std	Y+8, r24	; 0x08
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	98 2f       	mov	r25, r24
    28da:	92 95       	swap	r25
    28dc:	9f 70       	andi	r25, 0x0F	; 15
    28de:	99 0f       	add	r25, r25
    28e0:	29 2f       	mov	r18, r25
    28e2:	22 0f       	add	r18, r18
    28e4:	22 0f       	add	r18, r18
    28e6:	92 0f       	add	r25, r18
    28e8:	8f 70       	andi	r24, 0x0F	; 15
    28ea:	89 0f       	add	r24, r25
    28ec:	89 87       	std	Y+9, r24	; 0x09
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	98 2f       	mov	r25, r24
    28f2:	92 95       	swap	r25
    28f4:	9f 70       	andi	r25, 0x0F	; 15
    28f6:	99 0f       	add	r25, r25
    28f8:	29 2f       	mov	r18, r25
    28fa:	22 0f       	add	r18, r18
    28fc:	22 0f       	add	r18, r18
    28fe:	92 0f       	add	r25, r18
    2900:	8f 70       	andi	r24, 0x0F	; 15
    2902:	89 0f       	add	r24, r25
    2904:	8a 87       	std	Y+10, r24	; 0x0a
    2906:	8c 81       	ldd	r24, Y+4	; 0x04
    2908:	98 2f       	mov	r25, r24
    290a:	92 95       	swap	r25
    290c:	9f 70       	andi	r25, 0x0F	; 15
    290e:	99 0f       	add	r25, r25
    2910:	29 2f       	mov	r18, r25
    2912:	22 0f       	add	r18, r18
    2914:	22 0f       	add	r18, r18
    2916:	92 0f       	add	r25, r18
    2918:	8f 70       	andi	r24, 0x0F	; 15
    291a:	89 0f       	add	r24, r25
    291c:	8b 87       	std	Y+11, r24	; 0x0b
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	28 2f       	mov	r18, r24
    2922:	2f 70       	andi	r18, 0x0F	; 15
    2924:	21 50       	subi	r18, 0x01	; 1
    2926:	82 95       	swap	r24
    2928:	8f 70       	andi	r24, 0x0F	; 15
    292a:	88 0f       	add	r24, r24
    292c:	98 2f       	mov	r25, r24
    292e:	99 0f       	add	r25, r25
    2930:	99 0f       	add	r25, r25
    2932:	89 0f       	add	r24, r25
    2934:	82 0f       	add	r24, r18
    2936:	8d 87       	std	Y+13, r24	; 0x0d
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	28 2f       	mov	r18, r24
    293c:	2f 70       	andi	r18, 0x0F	; 15
    293e:	82 95       	swap	r24
    2940:	8f 70       	andi	r24, 0x0F	; 15
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	ac 01       	movw	r20, r24
    2946:	44 0f       	add	r20, r20
    2948:	55 1f       	adc	r21, r21
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	88 0f       	add	r24, r24
    2954:	99 1f       	adc	r25, r25
    2956:	84 0f       	add	r24, r20
    2958:	95 1f       	adc	r25, r21
    295a:	82 0f       	add	r24, r18
    295c:	91 1d       	adc	r25, r1
    295e:	8c 59       	subi	r24, 0x9C	; 156
    2960:	9f 4f       	sbci	r25, 0xFF	; 255
    2962:	8e 87       	std	Y+14, r24	; 0x0e
    2964:	9f 87       	std	Y+15, r25	; 0x0f
    2966:	ce 01       	movw	r24, r28
    2968:	08 96       	adiw	r24, 0x08	; 8
    296a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <mktime>
    296e:	63 96       	adiw	r28, 0x13	; 19
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	08 95       	ret

00002982 <thread_4>:
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <thread_4+0x6>
    2988:	1f 92       	push	r1
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	0e 94 a0 13 	call	0x2740	; 0x2740 <ds1302_initialize>
    2992:	0f 2e       	mov	r0, r31
    2994:	ff e5       	ldi	r31, 0x5F	; 95
    2996:	ef 2e       	mov	r14, r31
    2998:	f3 e9       	ldi	r31, 0x93	; 147
    299a:	ff 2e       	mov	r15, r31
    299c:	f0 2d       	mov	r31, r0
    299e:	01 e8       	ldi	r16, 0x81	; 129
    29a0:	0f 2e       	mov	r0, r31
    29a2:	f5 ec       	ldi	r31, 0xC5	; 197
    29a4:	cf 2e       	mov	r12, r31
    29a6:	f2 e2       	ldi	r31, 0x22	; 34
    29a8:	df 2e       	mov	r13, r31
    29aa:	f0 2d       	mov	r31, r0
    29ac:	0f 2e       	mov	r0, r31
    29ae:	f9 ec       	ldi	r31, 0xC9	; 201
    29b0:	af 2e       	mov	r10, r31
    29b2:	f2 e2       	ldi	r31, 0x22	; 34
    29b4:	bf 2e       	mov	r11, r31
    29b6:	f0 2d       	mov	r31, r0
    29b8:	97 01       	movw	r18, r14
    29ba:	4a e0       	ldi	r20, 0x0A	; 10
    29bc:	50 e0       	ldi	r21, 0x00	; 0
    29be:	61 e0       	ldi	r22, 0x01	; 1
    29c0:	70 e0       	ldi	r23, 0x00	; 0
    29c2:	8a eb       	ldi	r24, 0xBA	; 186
    29c4:	92 e2       	ldi	r25, 0x22	; 34
    29c6:	0e 94 bf 1c 	call	0x397e	; 0x397e <fwrite>
    29ca:	10 2f       	mov	r17, r16
    29cc:	81 2f       	mov	r24, r17
    29ce:	0e 94 1a 14 	call	0x2834	; 0x2834 <ds1302_readReg>
    29d2:	1f 92       	push	r1
    29d4:	8f 93       	push	r24
    29d6:	df 92       	push	r13
    29d8:	cf 92       	push	r12
    29da:	ff 92       	push	r15
    29dc:	ef 92       	push	r14
    29de:	0e 94 77 1c 	call	0x38ee	; 0x38ee <fprintf>
    29e2:	1e 5f       	subi	r17, 0xFE	; 254
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	13 39       	cpi	r17, 0x93	; 147
    29f2:	61 f7       	brne	.-40     	; 0x29cc <thread_4+0x4a>
    29f4:	97 01       	movw	r18, r14
    29f6:	42 e0       	ldi	r20, 0x02	; 2
    29f8:	50 e0       	ldi	r21, 0x00	; 0
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	87 ed       	ldi	r24, 0xD7	; 215
    2a00:	92 e2       	ldi	r25, 0x22	; 34
    2a02:	0e 94 bf 1c 	call	0x397e	; 0x397e <fwrite>
    2a06:	ce 01       	movw	r24, r28
    2a08:	01 96       	adiw	r24, 0x01	; 1
    2a0a:	0e 94 35 14 	call	0x286a	; 0x286a <ds1302_time>
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	8f 93       	push	r24
    2a12:	8b 81       	ldd	r24, Y+3	; 0x03
    2a14:	8f 93       	push	r24
    2a16:	8a 81       	ldd	r24, Y+2	; 0x02
    2a18:	8f 93       	push	r24
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	8f 93       	push	r24
    2a1e:	bf 92       	push	r11
    2a20:	af 92       	push	r10
    2a22:	ff 92       	push	r15
    2a24:	ef 92       	push	r14
    2a26:	0e 94 77 1c 	call	0x38ee	; 0x38ee <fprintf>
    2a2a:	88 ee       	ldi	r24, 0xE8	; 232
    2a2c:	93 e0       	ldi	r25, 0x03	; 3
    2a2e:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	c0 cf       	rjmp	.-128    	; 0x29b8 <thread_4+0x36>

00002a38 <SetupHardware>:
}


/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
    2a3c:	e0 e5       	ldi	r30, 0x50	; 80
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	80 e1       	ldi	r24, 0x10	; 16
    2a42:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
    2a44:	80 81       	ld	r24, Z
    2a46:	80 61       	ori	r24, 0x10	; 16
    2a48:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
    2a4a:	81 81       	ldd	r24, Z+1	; 0x01
    2a4c:	84 ff       	sbrs	r24, 4
    2a4e:	fd cf       	rjmp	.-6      	; 0x2a4a <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    2a50:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2a52:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
    2a54:	a0 e4       	ldi	r26, 0x40	; 64
    2a56:	b0 e0       	ldi	r27, 0x00	; 0
    2a58:	94 e0       	ldi	r25, 0x04	; 4
    2a5a:	28 ed       	ldi	r18, 0xD8	; 216
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	1b be       	out	0x3b, r1	; 59
    2a60:	fd 01       	movw	r30, r26
    2a62:	24 bf       	out	0x34, r18	; 52
    2a64:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2a66:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a68:	8f e3       	ldi	r24, 0x3F	; 63
    2a6a:	9f e1       	ldi	r25, 0x1F	; 31
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <SetupHardware+0x34>
    2a70:	00 c0       	rjmp	.+0      	; 0x2a72 <SetupHardware+0x3a>
    2a72:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
    2a74:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
    2a76:	e0 e5       	ldi	r30, 0x50	; 80
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	82 60       	ori	r24, 0x02	; 2
    2a7e:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    2a80:	81 81       	ldd	r24, Z+1	; 0x01
    2a82:	81 ff       	sbrs	r24, 1
    2a84:	fd cf       	rjmp	.-6      	; 0x2a80 <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
    2a86:	e0 e5       	ldi	r30, 0x50	; 80
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	86 81       	ldd	r24, Z+6	; 0x06
    2a8c:	84 60       	ori	r24, 0x04	; 4
    2a8e:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
    2a90:	a0 e6       	ldi	r26, 0x60	; 96
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	8b e1       	ldi	r24, 0x1B	; 27
    2a96:	15 96       	adiw	r26, 0x05	; 5
    2a98:	8c 93       	st	X, r24
    2a9a:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
    2a9c:	87 eb       	ldi	r24, 0xB7	; 183
    2a9e:	16 96       	adiw	r26, 0x06	; 6
    2aa0:	8c 93       	st	X, r24
    2aa2:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
    2aa4:	c0 ec       	ldi	r28, 0xC0	; 192
    2aa6:	d1 e0       	ldi	r29, 0x01	; 1
    2aa8:	82 e0       	ldi	r24, 0x02	; 2
    2aaa:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
    2aac:	ed e1       	ldi	r30, 0x1D	; 29
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	e4 91       	lpm	r30, Z
    2ab2:	12 96       	adiw	r26, 0x02	; 2
    2ab4:	ec 93       	st	X, r30
    2ab6:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
    2ab8:	ec e1       	ldi	r30, 0x1C	; 28
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	e4 91       	lpm	r30, Z
    2abe:	13 96       	adiw	r26, 0x03	; 3
    2ac0:	ec 93       	st	X, r30
    2ac2:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
    2ac4:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2aca:	87 e0       	ldi	r24, 0x07	; 7
    2acc:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
    2ad0:	e0 ee       	ldi	r30, 0xE0	; 224
    2ad2:	f7 e0       	ldi	r31, 0x07	; 7
    2ad4:	83 e0       	ldi	r24, 0x03	; 3
    2ad6:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
    2ad8:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
    2ada:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
    2ade:	80 e4       	ldi	r24, 0x40	; 64
    2ae0:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
    2ae2:	e0 e6       	ldi	r30, 0x60	; 96
    2ae4:	f6 e0       	ldi	r31, 0x06	; 6
    2ae6:	90 e3       	ldi	r25, 0x30	; 48
    2ae8:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
    2aea:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
    2aec:	84 8b       	std	Z+20, r24	; 0x14
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    2aee:	0e 94 49 11 	call	0x2292	; 0x2292 <USB_Init>
}
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	08 95       	ret

00002af8 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	DigitalPin_SetDIr(&led,1);
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	89 ea       	ldi	r24, 0xA9	; 169
    2afc:	92 e2       	ldi	r25, 0x22	; 34
    2afe:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2b02:	61 e0       	ldi	r22, 0x01	; 1
    2b04:	86 ea       	ldi	r24, 0xA6	; 166
    2b06:	92 e2       	ldi	r25, 0x22	; 34
    2b08:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
	
	SetupHardware();
    2b0c:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <SetupHardware>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    2b10:	8f e6       	ldi	r24, 0x6F	; 111
    2b12:	93 e9       	ldi	r25, 0x93	; 147
    2b14:	80 93 6d 93 	sts	0x936D, r24
    2b18:	90 93 6e 93 	sts	0x936E, r25

	uint8_t page;
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
    2b1c:	0e 94 a1 12 	call	0x2542	; 0x2542 <ssd1306_init>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2b20:	d0 e0       	ldi	r29, 0x00	; 0
    2b22:	0f c0       	rjmp	.+30     	; 0x2b42 <main+0x4a>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
    2b24:	8d 2f       	mov	r24, r29
    2b26:	0e 94 49 12 	call	0x2492	; 0x2492 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
    2b2a:	8c 2f       	mov	r24, r28
    2b2c:	0e 94 4e 12 	call	0x249c	; 0x249c <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0e 94 27 12 	call	0x244e	; 0x244e <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    2b36:	cf 5f       	subi	r28, 0xFF	; 255
    2b38:	c0 38       	cpi	r28, 0x80	; 128
    2b3a:	a1 f7       	brne	.-24     	; 0x2b24 <main+0x2c>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2b3c:	df 5f       	subi	r29, 0xFF	; 255
    2b3e:	d4 30       	cpi	r29, 0x04	; 4
    2b40:	11 f0       	breq	.+4      	; 0x2b46 <main+0x4e>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    2b42:	c0 e0       	ldi	r28, 0x00	; 0
    2b44:	ef cf       	rjmp	.-34     	; 0x2b24 <main+0x2c>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    2b46:	80 e4       	ldi	r24, 0x40	; 64
    2b48:	0e 94 11 12 	call	0x2422	; 0x2422 <ssd1306_write_command>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2b4c:	d0 e0       	ldi	r29, 0x00	; 0
    2b4e:	0c c0       	rjmp	.+24     	; 0x2b68 <main+0x70>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    2b50:	21 e0       	ldi	r18, 0x01	; 1
    2b52:	40 e0       	ldi	r20, 0x00	; 0
    2b54:	6c 2f       	mov	r22, r28
    2b56:	8d 2f       	mov	r24, r29
    2b58:	0e 94 77 13 	call	0x26ee	; 0x26ee <gfx_mono_ssd1306_put_byte>
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    2b5c:	cf 5f       	subi	r28, 0xFF	; 255
    2b5e:	c0 38       	cpi	r28, 0x80	; 128
    2b60:	b9 f7       	brne	.-18     	; 0x2b50 <main+0x58>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2b62:	df 5f       	subi	r29, 0xFF	; 255
    2b64:	d4 30       	cpi	r29, 0x04	; 4
    2b66:	11 f0       	breq	.+4      	; 0x2b6c <main+0x74>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2b68:	c0 e0       	ldi	r28, 0x00	; 0
    2b6a:	f2 cf       	rjmp	.-28     	; 0x2b50 <main+0x58>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
    2b6c:	00 00       	nop
	ssd1306_set_page_address(0);
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	0e 94 49 12 	call	0x2492	; 0x2492 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	92 e2       	ldi	r25, 0x22	; 34
    2b78:	0e 94 27 13 	call	0x264e	; 0x264e <ssd1306_write_text>


	DigitalPin_SetDIr(&led,1);
    2b7c:	61 e0       	ldi	r22, 0x01	; 1
    2b7e:	89 ea       	ldi	r24, 0xA9	; 169
    2b80:	92 e2       	ldi	r25, 0x22	; 34
    2b82:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2b86:	61 e0       	ldi	r22, 0x01	; 1
    2b88:	86 ea       	ldi	r24, 0xA6	; 166
    2b8a:	92 e2       	ldi	r25, 0x22	; 34
    2b8c:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
    2b90:	e0 e5       	ldi	r30, 0x50	; 80
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	80 81       	ld	r24, Z
    2b96:	82 60       	ori	r24, 0x02	; 2
    2b98:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    2b9a:	81 81       	ldd	r24, Z+1	; 0x01
    2b9c:	81 ff       	sbrs	r24, 1
    2b9e:	fd cf       	rjmp	.-6      	; 0x2b9a <main+0xa2>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	0e 94 42 17 	call	0x2e84	; 0x2e84 <CLKSYS_Disable>

	char time_string[20];
	uint8_t rxData[33];


	PORTR.DIRSET = (1<<0);
    2bac:	e0 ee       	ldi	r30, 0xE0	; 224
    2bae:	f7 e0       	ldi	r31, 0x07	; 7
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = (1<<1);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = (1<<4);
    2bb8:	80 e1       	ldi	r24, 0x10	; 16
    2bba:	80 93 61 06 	sts	0x0661, r24

	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2bbe:	6f e5       	ldi	r22, 0x5F	; 95
    2bc0:	73 e9       	ldi	r23, 0x93	; 147
    2bc2:	8b e8       	ldi	r24, 0x8B	; 139
    2bc4:	92 e2       	ldi	r25, 0x22	; 34
    2bc6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <CDC_Device_CreateStream>
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
    2bca:	78 94       	sei
	GlobalInterruptEnable();

	asm("nop");
    2bcc:	00 00       	nop

	TWI_MasterInit(&lcd03i2c,
    2bce:	2b e9       	ldi	r18, 0x9B	; 155
    2bd0:	40 e0       	ldi	r20, 0x00	; 0
    2bd2:	60 ea       	ldi	r22, 0xA0	; 160
    2bd4:	74 e0       	ldi	r23, 0x04	; 4
    2bd6:	8f e6       	ldi	r24, 0x6F	; 111
    2bd8:	95 e9       	ldi	r25, 0x95	; 149
    2bda:	0e 94 6d 17 	call	0x2eda	; 0x2eda <TWI_MasterInit>
	&TWIE,
	TWI_MASTER_INTLVL_OFF_gc,
	TWI_BAUD(F_CPU, 100000));
	
	asm("nop");
    2bde:	00 00       	nop
// 		while(!(TWIE.MASTER.STATUS&TWI_MASTER_WIF_bm));
// 	}
	


	asm("nop");
    2be0:	00 00       	nop





	asm("nop");
    2be2:	00 00       	nop

	
	//xTaskCreate(thread_1,(signed portCHAR *) "t1", 100, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_2,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_3,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
	xTaskCreate(thread_4,(signed portCHAR *) "t4", 500, NULL, tskIDLE_PRIORITY, NULL );
    2be4:	a1 2c       	mov	r10, r1
    2be6:	b1 2c       	mov	r11, r1
    2be8:	c1 2c       	mov	r12, r1
    2bea:	d1 2c       	mov	r13, r1
    2bec:	e1 2c       	mov	r14, r1
    2bee:	f1 2c       	mov	r15, r1
    2bf0:	00 e0       	ldi	r16, 0x00	; 0
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	44 ef       	ldi	r20, 0xF4	; 244
    2bf8:	51 e0       	ldi	r21, 0x01	; 1
    2bfa:	64 e0       	ldi	r22, 0x04	; 4
    2bfc:	73 e2       	ldi	r23, 0x23	; 35
    2bfe:	81 ec       	ldi	r24, 0xC1	; 193
    2c00:	94 e1       	ldi	r25, 0x14	; 20
    2c02:	0e 94 03 07 	call	0xe06	; 0xe06 <xTaskGenericCreate>
	xTaskCreate(USBThread,(signed portCHAR *) "usb", 200, NULL, tskIDLE_PRIORITY, NULL );
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	48 ec       	ldi	r20, 0xC8	; 200
    2c0c:	50 e0       	ldi	r21, 0x00	; 0
    2c0e:	67 e0       	ldi	r22, 0x07	; 7
    2c10:	73 e2       	ldi	r23, 0x23	; 35
    2c12:	86 ef       	ldi	r24, 0xF6	; 246
    2c14:	91 e1       	ldi	r25, 0x11	; 17
    2c16:	0e 94 03 07 	call	0xe06	; 0xe06 <xTaskGenericCreate>
	

	//starting the scheduler
	vTaskStartScheduler();
    2c1a:	0e 94 0b 08 	call	0x1016	; 0x1016 <vTaskStartScheduler>

	for (;;)
	{
// 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
// 		USB_USBTask();
	}
    2c1e:	ff cf       	rjmp	.-2      	; 0x2c1e <main+0x126>

00002c20 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2c20:	83 e0       	ldi	r24, 0x03	; 3
    2c22:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2c26:	80 e3       	ldi	r24, 0x30	; 48
    2c28:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2c2c:	82 e0       	ldi	r24, 0x02	; 2
    2c2e:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2c32:	80 e1       	ldi	r24, 0x10	; 16
    2c34:	80 93 65 06 	sts	0x0665, r24
    2c38:	08 95       	ret

00002c3a <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2c40:	80 e3       	ldi	r24, 0x30	; 48
    2c42:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2c4c:	10 92 65 06 	sts	0x0665, r1
    2c50:	08 95       	ret

00002c52 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    2c52:	8b e8       	ldi	r24, 0x8B	; 139
    2c54:	92 e2       	ldi	r25, 0x22	; 34
    2c56:	0e 94 21 0a 	call	0x1442	; 0x1442 <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <EVENT_USB_Device_ConfigurationChanged+0x10>
    2c5e:	81 e1       	ldi	r24, 0x11	; 17
    2c60:	01 c0       	rjmp	.+2      	; 0x2c64 <EVENT_USB_Device_ConfigurationChanged+0x12>
    2c62:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2c64:	93 e0       	ldi	r25, 0x03	; 3
    2c66:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2c6a:	90 e3       	ldi	r25, 0x30	; 48
    2c6c:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2c70:	98 2f       	mov	r25, r24
    2c72:	93 70       	andi	r25, 0x03	; 3
    2c74:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2c78:	80 73       	andi	r24, 0x30	; 48
    2c7a:	80 93 65 06 	sts	0x0665, r24
    2c7e:	08 95       	ret

00002c80 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    2c80:	8b e8       	ldi	r24, 0x8B	; 139
    2c82:	92 e2       	ldi	r25, 0x22	; 34
    2c84:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <CDC_Device_ProcessControlRequest>
    2c88:	08 95       	ret

00002c8a <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    2c8a:	08 95       	ret

00002c8c <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    2c8c:	0f 93       	push	r16
    2c8e:	20 2b       	or	r18, r16
    2c90:	61 11       	cpse	r22, r1
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <DigitalPin_Config+0xc>
    2c94:	00 e0       	ldi	r16, 0x00	; 0
    2c96:	01 c0       	rjmp	.+2      	; 0x2c9a <DigitalPin_Config+0xe>
    2c98:	00 e8       	ldi	r16, 0x80	; 128
    2c9a:	20 2b       	or	r18, r16
    2c9c:	41 11       	cpse	r20, r1
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <DigitalPin_Config+0x18>
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	01 c0       	rjmp	.+2      	; 0x2ca6 <DigitalPin_Config+0x1a>
    2ca4:	00 e4       	ldi	r16, 0x40	; 64
    2ca6:	20 2b       	or	r18, r16
    2ca8:	3f b7       	in	r19, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	dc 01       	movw	r26, r24
    2cae:	12 96       	adiw	r26, 0x02	; 2
    2cb0:	4c 91       	ld	r20, X
    2cb2:	12 97       	sbiw	r26, 0x02	; 2
    2cb4:	40 93 b0 00 	sts	0x00B0, r20
    2cb8:	ed 91       	ld	r30, X+
    2cba:	fc 91       	ld	r31, X
    2cbc:	20 8b       	std	Z+16, r18	; 0x10
    2cbe:	3f bf       	out	0x3f, r19	; 63
    2cc0:	0f 91       	pop	r16
    2cc2:	08 95       	ret

00002cc4 <DigitalPin_SetDIr>:
    2cc4:	66 23       	and	r22, r22
    2cc6:	81 f0       	breq	.+32     	; 0x2ce8 <DigitalPin_SetDIr+0x24>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	ed 91       	ld	r30, X+
    2ccc:	fc 91       	ld	r31, X
    2cce:	11 97       	sbiw	r26, 0x01	; 1
    2cd0:	21 e0       	ldi	r18, 0x01	; 1
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	a9 01       	movw	r20, r18
    2cd6:	12 96       	adiw	r26, 0x02	; 2
    2cd8:	0c 90       	ld	r0, X
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <DigitalPin_SetDIr+0x1c>
    2cdc:	44 0f       	add	r20, r20
    2cde:	55 1f       	adc	r21, r21
    2ce0:	0a 94       	dec	r0
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <DigitalPin_SetDIr+0x18>
    2ce4:	41 83       	std	Z+1, r20	; 0x01
    2ce6:	08 95       	ret
    2ce8:	dc 01       	movw	r26, r24
    2cea:	ed 91       	ld	r30, X+
    2cec:	fc 91       	ld	r31, X
    2cee:	11 97       	sbiw	r26, 0x01	; 1
    2cf0:	21 e0       	ldi	r18, 0x01	; 1
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	a9 01       	movw	r20, r18
    2cf6:	12 96       	adiw	r26, 0x02	; 2
    2cf8:	0c 90       	ld	r0, X
    2cfa:	02 c0       	rjmp	.+4      	; 0x2d00 <DigitalPin_SetDIr+0x3c>
    2cfc:	44 0f       	add	r20, r20
    2cfe:	55 1f       	adc	r21, r21
    2d00:	0a 94       	dec	r0
    2d02:	e2 f7       	brpl	.-8      	; 0x2cfc <DigitalPin_SetDIr+0x38>
    2d04:	42 83       	std	Z+2, r20	; 0x02
    2d06:	08 95       	ret

00002d08 <DigitalPin_SetValue>:
    2d08:	dc 01       	movw	r26, r24
    2d0a:	ed 91       	ld	r30, X+
    2d0c:	fc 91       	ld	r31, X
    2d0e:	11 97       	sbiw	r26, 0x01	; 1
    2d10:	21 e0       	ldi	r18, 0x01	; 1
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	a9 01       	movw	r20, r18
    2d16:	12 96       	adiw	r26, 0x02	; 2
    2d18:	0c 90       	ld	r0, X
    2d1a:	02 c0       	rjmp	.+4      	; 0x2d20 <DigitalPin_SetValue+0x18>
    2d1c:	44 0f       	add	r20, r20
    2d1e:	55 1f       	adc	r21, r21
    2d20:	0a 94       	dec	r0
    2d22:	e2 f7       	brpl	.-8      	; 0x2d1c <DigitalPin_SetValue+0x14>
    2d24:	45 83       	std	Z+5, r20	; 0x05
    2d26:	08 95       	ret

00002d28 <DigitalPin_ClearValue>:
    2d28:	dc 01       	movw	r26, r24
    2d2a:	ed 91       	ld	r30, X+
    2d2c:	fc 91       	ld	r31, X
    2d2e:	11 97       	sbiw	r26, 0x01	; 1
    2d30:	21 e0       	ldi	r18, 0x01	; 1
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	a9 01       	movw	r20, r18
    2d36:	12 96       	adiw	r26, 0x02	; 2
    2d38:	0c 90       	ld	r0, X
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DigitalPin_ClearValue+0x18>
    2d3c:	44 0f       	add	r20, r20
    2d3e:	55 1f       	adc	r21, r21
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DigitalPin_ClearValue+0x14>
    2d44:	46 83       	std	Z+6, r20	; 0x06
    2d46:	08 95       	ret

00002d48 <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    2d48:	dc 01       	movw	r26, r24
    2d4a:	ed 91       	ld	r30, X+
    2d4c:	fc 91       	ld	r31, X
    2d4e:	11 97       	sbiw	r26, 0x01	; 1
    2d50:	20 85       	ldd	r18, Z+8	; 0x08
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	f9 01       	movw	r30, r18
    2d56:	12 96       	adiw	r26, 0x02	; 2
    2d58:	0c 90       	ld	r0, X
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <DigitalPin_GetValue+0x18>
    2d5c:	f5 95       	asr	r31
    2d5e:	e7 95       	ror	r30
    2d60:	0a 94       	dec	r0
    2d62:	e2 f7       	brpl	.-8      	; 0x2d5c <DigitalPin_GetValue+0x14>
    2d64:	cf 01       	movw	r24, r30
	else pinValue = 0;
	return pinValue;
    2d66:	81 70       	andi	r24, 0x01	; 1
    2d68:	08 95       	ret

00002d6a <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    2d6a:	1f 92       	push	r1
    2d6c:	0f 92       	push	r0
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	0f 92       	push	r0
    2d72:	11 24       	eor	r1, r1

}
    2d74:	0f 90       	pop	r0
    2d76:	0f be       	out	0x3f, r0	; 63
    2d78:	0f 90       	pop	r0
    2d7a:	1f 90       	pop	r1
    2d7c:	18 95       	reti

00002d7e <__vector_27>:

ISR(USARTC0_TXC_vect){
    2d7e:	1f 92       	push	r1
    2d80:	0f 92       	push	r0
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	0f 92       	push	r0
    2d86:	11 24       	eor	r1, r1
	
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	0f 90       	pop	r0
    2d8e:	1f 90       	pop	r1
    2d90:	18 95       	reti

00002d92 <__vector_26>:

ISR(USARTC0_DRE_vect){
    2d92:	1f 92       	push	r1
    2d94:	0f 92       	push	r0
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	0f 92       	push	r0
    2d9a:	11 24       	eor	r1, r1
	
}
    2d9c:	0f 90       	pop	r0
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	0f 90       	pop	r0
    2da2:	1f 90       	pop	r1
    2da4:	18 95       	reti

00002da6 <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    2da6:	1f 92       	push	r1
    2da8:	0f 92       	push	r0
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	0f 92       	push	r0
    2dae:	11 24       	eor	r1, r1
	
}
    2db0:	0f 90       	pop	r0
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	0f 90       	pop	r0
    2db6:	1f 90       	pop	r1
    2db8:	18 95       	reti

00002dba <__vector_30>:

ISR(USARTC1_TXC_vect){
    2dba:	1f 92       	push	r1
    2dbc:	0f 92       	push	r0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	0f 92       	push	r0
    2dc2:	11 24       	eor	r1, r1
	
}
    2dc4:	0f 90       	pop	r0
    2dc6:	0f be       	out	0x3f, r0	; 63
    2dc8:	0f 90       	pop	r0
    2dca:	1f 90       	pop	r1
    2dcc:	18 95       	reti

00002dce <__vector_29>:

ISR(USARTC1_DRE_vect){
    2dce:	1f 92       	push	r1
    2dd0:	0f 92       	push	r0
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	0f 92       	push	r0
    2dd6:	11 24       	eor	r1, r1
	
}
    2dd8:	0f 90       	pop	r0
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	0f 90       	pop	r0
    2dde:	1f 90       	pop	r1
    2de0:	18 95       	reti

00002de2 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    2de2:	1f 92       	push	r1
    2de4:	0f 92       	push	r0
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	0f 92       	push	r0
    2dea:	11 24       	eor	r1, r1
	
}
    2dec:	0f 90       	pop	r0
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	0f 90       	pop	r0
    2df2:	1f 90       	pop	r1
    2df4:	18 95       	reti

00002df6 <__vector_90>:

ISR(USARTD0_TXC_vect){
    2df6:	1f 92       	push	r1
    2df8:	0f 92       	push	r0
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	0f 92       	push	r0
    2dfe:	11 24       	eor	r1, r1
	
}
    2e00:	0f 90       	pop	r0
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	0f 90       	pop	r0
    2e06:	1f 90       	pop	r1
    2e08:	18 95       	reti

00002e0a <__vector_89>:

ISR(USARTD0_DRE_vect){
    2e0a:	1f 92       	push	r1
    2e0c:	0f 92       	push	r0
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	0f 92       	push	r0
    2e12:	11 24       	eor	r1, r1
	
}
    2e14:	0f 90       	pop	r0
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	0f 90       	pop	r0
    2e1a:	1f 90       	pop	r1
    2e1c:	18 95       	reti

00002e1e <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    2e1e:	1f 92       	push	r1
    2e20:	0f 92       	push	r0
    2e22:	0f b6       	in	r0, 0x3f	; 63
    2e24:	0f 92       	push	r0
    2e26:	11 24       	eor	r1, r1
	
}
    2e28:	0f 90       	pop	r0
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	0f 90       	pop	r0
    2e2e:	1f 90       	pop	r1
    2e30:	18 95       	reti

00002e32 <__vector_60>:

ISR(USARTE0_TXC_vect){
    2e32:	1f 92       	push	r1
    2e34:	0f 92       	push	r0
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	0f 92       	push	r0
    2e3a:	11 24       	eor	r1, r1
	
}
    2e3c:	0f 90       	pop	r0
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	0f 90       	pop	r0
    2e42:	1f 90       	pop	r1
    2e44:	18 95       	reti

00002e46 <__vector_59>:

ISR(USARTE0_DRE_vect){
    2e46:	1f 92       	push	r1
    2e48:	0f 92       	push	r0
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	0f 92       	push	r0
    2e4e:	11 24       	eor	r1, r1
	
}
    2e50:	0f 90       	pop	r0
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	0f 90       	pop	r0
    2e56:	1f 90       	pop	r1
    2e58:	18 95       	reti

00002e5a <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    2e5a:	0f 93       	push	r16
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	1f 92       	push	r1
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	2f b7       	in	r18, 0x3f	; 63
    2e68:	29 83       	std	Y+1, r18	; 0x01
    2e6a:	f8 94       	cli
    2e6c:	1b be       	out	0x3b, r1	; 59
    2e6e:	fc 01       	movw	r30, r24
    2e70:	08 ed       	ldi	r16, 0xD8	; 216
    2e72:	04 bf       	out	0x34, r16	; 52
    2e74:	60 83       	st	Z, r22
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	8f bf       	out	0x3f, r24	; 63
    2e7a:	0f 90       	pop	r0
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	0f 91       	pop	r16
    2e82:	08 95       	ret

00002e84 <CLKSYS_Disable>:
    2e84:	e0 e5       	ldi	r30, 0x50	; 80
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	90 81       	ld	r25, Z
    2e8a:	28 2f       	mov	r18, r24
    2e8c:	20 95       	com	r18
    2e8e:	92 23       	and	r25, r18
    2e90:	90 83       	st	Z, r25
    2e92:	90 81       	ld	r25, Z
    2e94:	89 23       	and	r24, r25
    2e96:	08 95       	ret

00002e98 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2ea0:	00 e4       	ldi	r16, 0x40	; 64
    2ea2:	10 e0       	ldi	r17, 0x00	; 0
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	60 81       	ld	r22, Z
    2ea8:	68 7f       	andi	r22, 0xF8	; 248
    2eaa:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    2eac:	80 e4       	ldi	r24, 0x40	; 64
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	80 81       	ld	r24, Z
	return clkCtrl;
}
    2eb8:	8c 23       	and	r24, r28
    2eba:	cf 91       	pop	r28
    2ebc:	1f 91       	pop	r17
    2ebe:	0f 91       	pop	r16
    2ec0:	08 95       	ret

00002ec2 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	90 81       	ld	r25, Z
    2ec6:	90 7f       	andi	r25, 0xF0	; 240
    2ec8:	69 2b       	or	r22, r25
    2eca:	60 83       	st	Z, r22
    2ecc:	08 95       	ret

00002ece <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    2ece:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    2ed0:	96 81       	ldd	r25, Z+6	; 0x06
    2ed2:	9c 7f       	andi	r25, 0xFC	; 252
    2ed4:	69 2b       	or	r22, r25
    2ed6:	66 83       	std	Z+6, r22	; 0x06
    2ed8:	08 95       	ret

00002eda <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    2eda:	fc 01       	movw	r30, r24
	twi->interface = module;
    2edc:	60 83       	st	Z, r22
    2ede:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    2ee0:	48 63       	ori	r20, 0x38	; 56
    2ee2:	db 01       	movw	r26, r22
    2ee4:	11 96       	adiw	r26, 0x01	; 1
    2ee6:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    2ee8:	a0 81       	ld	r26, Z
    2eea:	b1 81       	ldd	r27, Z+1	; 0x01
    2eec:	15 96       	adiw	r26, 0x05	; 5
    2eee:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2ef0:	01 90       	ld	r0, Z+
    2ef2:	f0 81       	ld	r31, Z
    2ef4:	e0 2d       	mov	r30, r0
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	84 83       	std	Z+4, r24	; 0x04
    2efa:	08 95       	ret

00002efc <vfprintf>:
    2efc:	2f 92       	push	r2
    2efe:	3f 92       	push	r3
    2f00:	4f 92       	push	r4
    2f02:	5f 92       	push	r5
    2f04:	6f 92       	push	r6
    2f06:	7f 92       	push	r7
    2f08:	8f 92       	push	r8
    2f0a:	9f 92       	push	r9
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	63 97       	sbiw	r28, 0x13	; 19
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	6c 01       	movw	r12, r24
    2f2c:	4b 01       	movw	r8, r22
    2f2e:	2a 01       	movw	r4, r20
    2f30:	fc 01       	movw	r30, r24
    2f32:	16 82       	std	Z+6, r1	; 0x06
    2f34:	17 82       	std	Z+7, r1	; 0x07
    2f36:	83 81       	ldd	r24, Z+3	; 0x03
    2f38:	81 ff       	sbrs	r24, 1
    2f3a:	43 c3       	rjmp	.+1670   	; 0x35c2 <vfprintf+0x6c6>
    2f3c:	ae 01       	movw	r20, r28
    2f3e:	4f 5f       	subi	r20, 0xFF	; 255
    2f40:	5f 4f       	sbci	r21, 0xFF	; 255
    2f42:	3a 01       	movw	r6, r20
    2f44:	f6 01       	movw	r30, r12
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	f4 01       	movw	r30, r8
    2f4a:	93 fd       	sbrc	r25, 3
    2f4c:	85 91       	lpm	r24, Z+
    2f4e:	93 ff       	sbrs	r25, 3
    2f50:	81 91       	ld	r24, Z+
    2f52:	4f 01       	movw	r8, r30
    2f54:	88 23       	and	r24, r24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <vfprintf+0x5e>
    2f58:	30 c3       	rjmp	.+1632   	; 0x35ba <vfprintf+0x6be>
    2f5a:	85 32       	cpi	r24, 0x25	; 37
    2f5c:	39 f4       	brne	.+14     	; 0x2f6c <vfprintf+0x70>
    2f5e:	93 fd       	sbrc	r25, 3
    2f60:	85 91       	lpm	r24, Z+
    2f62:	93 ff       	sbrs	r25, 3
    2f64:	81 91       	ld	r24, Z+
    2f66:	4f 01       	movw	r8, r30
    2f68:	85 32       	cpi	r24, 0x25	; 37
    2f6a:	39 f4       	brne	.+14     	; 0x2f7a <vfprintf+0x7e>
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    2f74:	52 01       	movw	r10, r4
    2f76:	25 01       	movw	r4, r10
    2f78:	e5 cf       	rjmp	.-54     	; 0x2f44 <vfprintf+0x48>
    2f7a:	10 e0       	ldi	r17, 0x00	; 0
    2f7c:	f1 2c       	mov	r15, r1
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	20 32       	cpi	r18, 0x20	; 32
    2f82:	a0 f4       	brcc	.+40     	; 0x2fac <vfprintf+0xb0>
    2f84:	8b 32       	cpi	r24, 0x2B	; 43
    2f86:	69 f0       	breq	.+26     	; 0x2fa2 <vfprintf+0xa6>
    2f88:	30 f4       	brcc	.+12     	; 0x2f96 <vfprintf+0x9a>
    2f8a:	80 32       	cpi	r24, 0x20	; 32
    2f8c:	59 f0       	breq	.+22     	; 0x2fa4 <vfprintf+0xa8>
    2f8e:	83 32       	cpi	r24, 0x23	; 35
    2f90:	69 f4       	brne	.+26     	; 0x2fac <vfprintf+0xb0>
    2f92:	20 61       	ori	r18, 0x10	; 16
    2f94:	2c c0       	rjmp	.+88     	; 0x2fee <vfprintf+0xf2>
    2f96:	8d 32       	cpi	r24, 0x2D	; 45
    2f98:	39 f0       	breq	.+14     	; 0x2fa8 <vfprintf+0xac>
    2f9a:	80 33       	cpi	r24, 0x30	; 48
    2f9c:	39 f4       	brne	.+14     	; 0x2fac <vfprintf+0xb0>
    2f9e:	21 60       	ori	r18, 0x01	; 1
    2fa0:	26 c0       	rjmp	.+76     	; 0x2fee <vfprintf+0xf2>
    2fa2:	22 60       	ori	r18, 0x02	; 2
    2fa4:	24 60       	ori	r18, 0x04	; 4
    2fa6:	23 c0       	rjmp	.+70     	; 0x2fee <vfprintf+0xf2>
    2fa8:	28 60       	ori	r18, 0x08	; 8
    2faa:	21 c0       	rjmp	.+66     	; 0x2fee <vfprintf+0xf2>
    2fac:	27 fd       	sbrc	r18, 7
    2fae:	27 c0       	rjmp	.+78     	; 0x2ffe <vfprintf+0x102>
    2fb0:	30 ed       	ldi	r19, 0xD0	; 208
    2fb2:	38 0f       	add	r19, r24
    2fb4:	3a 30       	cpi	r19, 0x0A	; 10
    2fb6:	78 f4       	brcc	.+30     	; 0x2fd6 <vfprintf+0xda>
    2fb8:	26 ff       	sbrs	r18, 6
    2fba:	06 c0       	rjmp	.+12     	; 0x2fc8 <vfprintf+0xcc>
    2fbc:	fa e0       	ldi	r31, 0x0A	; 10
    2fbe:	1f 9f       	mul	r17, r31
    2fc0:	30 0d       	add	r19, r0
    2fc2:	11 24       	eor	r1, r1
    2fc4:	13 2f       	mov	r17, r19
    2fc6:	13 c0       	rjmp	.+38     	; 0x2fee <vfprintf+0xf2>
    2fc8:	4a e0       	ldi	r20, 0x0A	; 10
    2fca:	f4 9e       	mul	r15, r20
    2fcc:	30 0d       	add	r19, r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	f3 2e       	mov	r15, r19
    2fd2:	20 62       	ori	r18, 0x20	; 32
    2fd4:	0c c0       	rjmp	.+24     	; 0x2fee <vfprintf+0xf2>
    2fd6:	8e 32       	cpi	r24, 0x2E	; 46
    2fd8:	21 f4       	brne	.+8      	; 0x2fe2 <vfprintf+0xe6>
    2fda:	26 fd       	sbrc	r18, 6
    2fdc:	ee c2       	rjmp	.+1500   	; 0x35ba <vfprintf+0x6be>
    2fde:	20 64       	ori	r18, 0x40	; 64
    2fe0:	06 c0       	rjmp	.+12     	; 0x2fee <vfprintf+0xf2>
    2fe2:	8c 36       	cpi	r24, 0x6C	; 108
    2fe4:	11 f4       	brne	.+4      	; 0x2fea <vfprintf+0xee>
    2fe6:	20 68       	ori	r18, 0x80	; 128
    2fe8:	02 c0       	rjmp	.+4      	; 0x2fee <vfprintf+0xf2>
    2fea:	88 36       	cpi	r24, 0x68	; 104
    2fec:	41 f4       	brne	.+16     	; 0x2ffe <vfprintf+0x102>
    2fee:	f4 01       	movw	r30, r8
    2ff0:	93 fd       	sbrc	r25, 3
    2ff2:	85 91       	lpm	r24, Z+
    2ff4:	93 ff       	sbrs	r25, 3
    2ff6:	81 91       	ld	r24, Z+
    2ff8:	4f 01       	movw	r8, r30
    2ffa:	81 11       	cpse	r24, r1
    2ffc:	c1 cf       	rjmp	.-126    	; 0x2f80 <vfprintf+0x84>
    2ffe:	9b eb       	ldi	r25, 0xBB	; 187
    3000:	98 0f       	add	r25, r24
    3002:	93 30       	cpi	r25, 0x03	; 3
    3004:	18 f4       	brcc	.+6      	; 0x300c <vfprintf+0x110>
    3006:	20 61       	ori	r18, 0x10	; 16
    3008:	80 5e       	subi	r24, 0xE0	; 224
    300a:	06 c0       	rjmp	.+12     	; 0x3018 <vfprintf+0x11c>
    300c:	9b e9       	ldi	r25, 0x9B	; 155
    300e:	98 0f       	add	r25, r24
    3010:	93 30       	cpi	r25, 0x03	; 3
    3012:	08 f0       	brcs	.+2      	; 0x3016 <vfprintf+0x11a>
    3014:	71 c1       	rjmp	.+738    	; 0x32f8 <vfprintf+0x3fc>
    3016:	2f 7e       	andi	r18, 0xEF	; 239
    3018:	26 ff       	sbrs	r18, 6
    301a:	16 e0       	ldi	r17, 0x06	; 6
    301c:	2f 73       	andi	r18, 0x3F	; 63
    301e:	32 2e       	mov	r3, r18
    3020:	85 36       	cpi	r24, 0x65	; 101
    3022:	19 f4       	brne	.+6      	; 0x302a <vfprintf+0x12e>
    3024:	20 64       	ori	r18, 0x40	; 64
    3026:	32 2e       	mov	r3, r18
    3028:	08 c0       	rjmp	.+16     	; 0x303a <vfprintf+0x13e>
    302a:	86 36       	cpi	r24, 0x66	; 102
    302c:	21 f4       	brne	.+8      	; 0x3036 <vfprintf+0x13a>
    302e:	f2 2f       	mov	r31, r18
    3030:	f0 68       	ori	r31, 0x80	; 128
    3032:	3f 2e       	mov	r3, r31
    3034:	02 c0       	rjmp	.+4      	; 0x303a <vfprintf+0x13e>
    3036:	11 11       	cpse	r17, r1
    3038:	11 50       	subi	r17, 0x01	; 1
    303a:	37 fe       	sbrs	r3, 7
    303c:	07 c0       	rjmp	.+14     	; 0x304c <vfprintf+0x150>
    303e:	1c 33       	cpi	r17, 0x3C	; 60
    3040:	50 f4       	brcc	.+20     	; 0x3056 <vfprintf+0x15a>
    3042:	ee 24       	eor	r14, r14
    3044:	e3 94       	inc	r14
    3046:	e1 0e       	add	r14, r17
    3048:	27 e0       	ldi	r18, 0x07	; 7
    304a:	0b c0       	rjmp	.+22     	; 0x3062 <vfprintf+0x166>
    304c:	18 30       	cpi	r17, 0x08	; 8
    304e:	38 f0       	brcs	.+14     	; 0x305e <vfprintf+0x162>
    3050:	27 e0       	ldi	r18, 0x07	; 7
    3052:	17 e0       	ldi	r17, 0x07	; 7
    3054:	05 c0       	rjmp	.+10     	; 0x3060 <vfprintf+0x164>
    3056:	27 e0       	ldi	r18, 0x07	; 7
    3058:	4c e3       	ldi	r20, 0x3C	; 60
    305a:	e4 2e       	mov	r14, r20
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <vfprintf+0x166>
    305e:	21 2f       	mov	r18, r17
    3060:	e1 2c       	mov	r14, r1
    3062:	52 01       	movw	r10, r4
    3064:	44 e0       	ldi	r20, 0x04	; 4
    3066:	a4 0e       	add	r10, r20
    3068:	b1 1c       	adc	r11, r1
    306a:	f2 01       	movw	r30, r4
    306c:	60 81       	ld	r22, Z
    306e:	71 81       	ldd	r23, Z+1	; 0x01
    3070:	82 81       	ldd	r24, Z+2	; 0x02
    3072:	93 81       	ldd	r25, Z+3	; 0x03
    3074:	0e 2d       	mov	r16, r14
    3076:	a3 01       	movw	r20, r6
    3078:	0e 94 89 1b 	call	0x3712	; 0x3712 <__ftoa_engine>
    307c:	2c 01       	movw	r4, r24
    307e:	09 81       	ldd	r16, Y+1	; 0x01
    3080:	00 ff       	sbrs	r16, 0
    3082:	02 c0       	rjmp	.+4      	; 0x3088 <vfprintf+0x18c>
    3084:	03 ff       	sbrs	r16, 3
    3086:	07 c0       	rjmp	.+14     	; 0x3096 <vfprintf+0x19a>
    3088:	31 fc       	sbrc	r3, 1
    308a:	08 c0       	rjmp	.+16     	; 0x309c <vfprintf+0x1a0>
    308c:	32 fe       	sbrs	r3, 2
    308e:	09 c0       	rjmp	.+18     	; 0x30a2 <vfprintf+0x1a6>
    3090:	30 e2       	ldi	r19, 0x20	; 32
    3092:	23 2e       	mov	r2, r19
    3094:	07 c0       	rjmp	.+14     	; 0x30a4 <vfprintf+0x1a8>
    3096:	2d e2       	ldi	r18, 0x2D	; 45
    3098:	22 2e       	mov	r2, r18
    309a:	04 c0       	rjmp	.+8      	; 0x30a4 <vfprintf+0x1a8>
    309c:	9b e2       	ldi	r25, 0x2B	; 43
    309e:	29 2e       	mov	r2, r25
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <vfprintf+0x1a8>
    30a2:	21 2c       	mov	r2, r1
    30a4:	80 2f       	mov	r24, r16
    30a6:	8c 70       	andi	r24, 0x0C	; 12
    30a8:	19 f0       	breq	.+6      	; 0x30b0 <vfprintf+0x1b4>
    30aa:	21 10       	cpse	r2, r1
    30ac:	68 c2       	rjmp	.+1232   	; 0x357e <vfprintf+0x682>
    30ae:	a8 c2       	rjmp	.+1360   	; 0x3600 <vfprintf+0x704>
    30b0:	37 fe       	sbrs	r3, 7
    30b2:	0f c0       	rjmp	.+30     	; 0x30d2 <vfprintf+0x1d6>
    30b4:	e4 0c       	add	r14, r4
    30b6:	04 ff       	sbrs	r16, 4
    30b8:	04 c0       	rjmp	.+8      	; 0x30c2 <vfprintf+0x1c6>
    30ba:	8a 81       	ldd	r24, Y+2	; 0x02
    30bc:	81 33       	cpi	r24, 0x31	; 49
    30be:	09 f4       	brne	.+2      	; 0x30c2 <vfprintf+0x1c6>
    30c0:	ea 94       	dec	r14
    30c2:	1e 14       	cp	r1, r14
    30c4:	74 f5       	brge	.+92     	; 0x3122 <vfprintf+0x226>
    30c6:	f8 e0       	ldi	r31, 0x08	; 8
    30c8:	fe 15       	cp	r31, r14
    30ca:	78 f5       	brcc	.+94     	; 0x312a <vfprintf+0x22e>
    30cc:	88 e0       	ldi	r24, 0x08	; 8
    30ce:	e8 2e       	mov	r14, r24
    30d0:	2c c0       	rjmp	.+88     	; 0x312a <vfprintf+0x22e>
    30d2:	36 fc       	sbrc	r3, 6
    30d4:	2a c0       	rjmp	.+84     	; 0x312a <vfprintf+0x22e>
    30d6:	81 2f       	mov	r24, r17
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	84 15       	cp	r24, r4
    30dc:	95 05       	cpc	r25, r5
    30de:	9c f0       	brlt	.+38     	; 0x3106 <vfprintf+0x20a>
    30e0:	2c ef       	ldi	r18, 0xFC	; 252
    30e2:	42 16       	cp	r4, r18
    30e4:	2f ef       	ldi	r18, 0xFF	; 255
    30e6:	52 06       	cpc	r5, r18
    30e8:	74 f0       	brlt	.+28     	; 0x3106 <vfprintf+0x20a>
    30ea:	43 2d       	mov	r20, r3
    30ec:	40 68       	ori	r20, 0x80	; 128
    30ee:	34 2e       	mov	r3, r20
    30f0:	0a c0       	rjmp	.+20     	; 0x3106 <vfprintf+0x20a>
    30f2:	e2 e0       	ldi	r30, 0x02	; 2
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	ec 0f       	add	r30, r28
    30f8:	fd 1f       	adc	r31, r29
    30fa:	e1 0f       	add	r30, r17
    30fc:	f1 1d       	adc	r31, r1
    30fe:	80 81       	ld	r24, Z
    3100:	80 33       	cpi	r24, 0x30	; 48
    3102:	19 f4       	brne	.+6      	; 0x310a <vfprintf+0x20e>
    3104:	11 50       	subi	r17, 0x01	; 1
    3106:	11 11       	cpse	r17, r1
    3108:	f4 cf       	rjmp	.-24     	; 0x30f2 <vfprintf+0x1f6>
    310a:	37 fe       	sbrs	r3, 7
    310c:	0e c0       	rjmp	.+28     	; 0x312a <vfprintf+0x22e>
    310e:	ee 24       	eor	r14, r14
    3110:	e3 94       	inc	r14
    3112:	e1 0e       	add	r14, r17
    3114:	81 2f       	mov	r24, r17
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	48 16       	cp	r4, r24
    311a:	59 06       	cpc	r5, r25
    311c:	2c f4       	brge	.+10     	; 0x3128 <vfprintf+0x22c>
    311e:	14 19       	sub	r17, r4
    3120:	04 c0       	rjmp	.+8      	; 0x312a <vfprintf+0x22e>
    3122:	ee 24       	eor	r14, r14
    3124:	e3 94       	inc	r14
    3126:	01 c0       	rjmp	.+2      	; 0x312a <vfprintf+0x22e>
    3128:	10 e0       	ldi	r17, 0x00	; 0
    312a:	37 fe       	sbrs	r3, 7
    312c:	06 c0       	rjmp	.+12     	; 0x313a <vfprintf+0x23e>
    312e:	14 14       	cp	r1, r4
    3130:	15 04       	cpc	r1, r5
    3132:	34 f4       	brge	.+12     	; 0x3140 <vfprintf+0x244>
    3134:	c2 01       	movw	r24, r4
    3136:	01 96       	adiw	r24, 0x01	; 1
    3138:	05 c0       	rjmp	.+10     	; 0x3144 <vfprintf+0x248>
    313a:	85 e0       	ldi	r24, 0x05	; 5
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <vfprintf+0x248>
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	21 10       	cpse	r2, r1
    3146:	01 96       	adiw	r24, 0x01	; 1
    3148:	11 23       	and	r17, r17
    314a:	31 f0       	breq	.+12     	; 0x3158 <vfprintf+0x25c>
    314c:	21 2f       	mov	r18, r17
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	2f 5f       	subi	r18, 0xFF	; 255
    3152:	3f 4f       	sbci	r19, 0xFF	; 255
    3154:	82 0f       	add	r24, r18
    3156:	93 1f       	adc	r25, r19
    3158:	2f 2d       	mov	r18, r15
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	82 17       	cp	r24, r18
    315e:	93 07       	cpc	r25, r19
    3160:	14 f4       	brge	.+4      	; 0x3166 <vfprintf+0x26a>
    3162:	f8 1a       	sub	r15, r24
    3164:	01 c0       	rjmp	.+2      	; 0x3168 <vfprintf+0x26c>
    3166:	f1 2c       	mov	r15, r1
    3168:	83 2d       	mov	r24, r3
    316a:	89 70       	andi	r24, 0x09	; 9
    316c:	49 f4       	brne	.+18     	; 0x3180 <vfprintf+0x284>
    316e:	ff 20       	and	r15, r15
    3170:	39 f0       	breq	.+14     	; 0x3180 <vfprintf+0x284>
    3172:	b6 01       	movw	r22, r12
    3174:	80 e2       	ldi	r24, 0x20	; 32
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    317c:	fa 94       	dec	r15
    317e:	f7 cf       	rjmp	.-18     	; 0x316e <vfprintf+0x272>
    3180:	22 20       	and	r2, r2
    3182:	29 f0       	breq	.+10     	; 0x318e <vfprintf+0x292>
    3184:	b6 01       	movw	r22, r12
    3186:	82 2d       	mov	r24, r2
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    318e:	33 fc       	sbrc	r3, 3
    3190:	09 c0       	rjmp	.+18     	; 0x31a4 <vfprintf+0x2a8>
    3192:	ff 20       	and	r15, r15
    3194:	39 f0       	breq	.+14     	; 0x31a4 <vfprintf+0x2a8>
    3196:	b6 01       	movw	r22, r12
    3198:	80 e3       	ldi	r24, 0x30	; 48
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    31a0:	fa 94       	dec	r15
    31a2:	f7 cf       	rjmp	.-18     	; 0x3192 <vfprintf+0x296>
    31a4:	37 fe       	sbrs	r3, 7
    31a6:	5a c0       	rjmp	.+180    	; 0x325c <vfprintf+0x360>
    31a8:	94 2d       	mov	r25, r4
    31aa:	85 2d       	mov	r24, r5
    31ac:	57 fe       	sbrs	r5, 7
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x2b8>
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	29 2e       	mov	r2, r25
    31b6:	38 2e       	mov	r3, r24
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	a2 01       	movw	r20, r4
    31be:	4e 19       	sub	r20, r14
    31c0:	51 09       	sbc	r21, r1
    31c2:	4c 87       	std	Y+12, r20	; 0x0c
    31c4:	5d 87       	std	Y+13, r21	; 0x0d
    31c6:	a2 01       	movw	r20, r4
    31c8:	42 19       	sub	r20, r2
    31ca:	53 09       	sbc	r21, r3
    31cc:	4e 87       	std	Y+14, r20	; 0x0e
    31ce:	5f 87       	std	Y+15, r21	; 0x0f
    31d0:	61 2f       	mov	r22, r17
    31d2:	70 e0       	ldi	r23, 0x00	; 0
    31d4:	44 27       	eor	r20, r20
    31d6:	55 27       	eor	r21, r21
    31d8:	46 1b       	sub	r20, r22
    31da:	57 0b       	sbc	r21, r23
    31dc:	48 8b       	std	Y+16, r20	; 0x10
    31de:	59 8b       	std	Y+17, r21	; 0x11
    31e0:	5f ef       	ldi	r21, 0xFF	; 255
    31e2:	25 16       	cp	r2, r21
    31e4:	35 06       	cpc	r3, r21
    31e6:	49 f4       	brne	.+18     	; 0x31fa <vfprintf+0x2fe>
    31e8:	b6 01       	movw	r22, r12
    31ea:	8e e2       	ldi	r24, 0x2E	; 46
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	2a 8b       	std	Y+18, r18	; 0x12
    31f0:	3b 8b       	std	Y+19, r19	; 0x13
    31f2:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    31f6:	3b 89       	ldd	r19, Y+19	; 0x13
    31f8:	2a 89       	ldd	r18, Y+18	; 0x12
    31fa:	42 14       	cp	r4, r2
    31fc:	53 04       	cpc	r5, r3
    31fe:	6c f0       	brlt	.+26     	; 0x321a <vfprintf+0x31e>
    3200:	4c 85       	ldd	r20, Y+12	; 0x0c
    3202:	5d 85       	ldd	r21, Y+13	; 0x0d
    3204:	42 15       	cp	r20, r2
    3206:	53 05       	cpc	r21, r3
    3208:	44 f4       	brge	.+16     	; 0x321a <vfprintf+0x31e>
    320a:	ee 85       	ldd	r30, Y+14	; 0x0e
    320c:	ff 85       	ldd	r31, Y+15	; 0x0f
    320e:	e2 0f       	add	r30, r18
    3210:	f3 1f       	adc	r31, r19
    3212:	e6 0d       	add	r30, r6
    3214:	f7 1d       	adc	r31, r7
    3216:	81 81       	ldd	r24, Z+1	; 0x01
    3218:	01 c0       	rjmp	.+2      	; 0x321c <vfprintf+0x320>
    321a:	80 e3       	ldi	r24, 0x30	; 48
    321c:	51 e0       	ldi	r21, 0x01	; 1
    321e:	25 1a       	sub	r2, r21
    3220:	31 08       	sbc	r3, r1
    3222:	2f 5f       	subi	r18, 0xFF	; 255
    3224:	3f 4f       	sbci	r19, 0xFF	; 255
    3226:	48 89       	ldd	r20, Y+16	; 0x10
    3228:	59 89       	ldd	r21, Y+17	; 0x11
    322a:	24 16       	cp	r2, r20
    322c:	35 06       	cpc	r3, r21
    322e:	4c f0       	brlt	.+18     	; 0x3242 <vfprintf+0x346>
    3230:	b6 01       	movw	r22, r12
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	2a 8b       	std	Y+18, r18	; 0x12
    3236:	3b 8b       	std	Y+19, r19	; 0x13
    3238:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    323c:	2a 89       	ldd	r18, Y+18	; 0x12
    323e:	3b 89       	ldd	r19, Y+19	; 0x13
    3240:	cf cf       	rjmp	.-98     	; 0x31e0 <vfprintf+0x2e4>
    3242:	24 14       	cp	r2, r4
    3244:	35 04       	cpc	r3, r5
    3246:	39 f4       	brne	.+14     	; 0x3256 <vfprintf+0x35a>
    3248:	9a 81       	ldd	r25, Y+2	; 0x02
    324a:	96 33       	cpi	r25, 0x36	; 54
    324c:	18 f4       	brcc	.+6      	; 0x3254 <vfprintf+0x358>
    324e:	95 33       	cpi	r25, 0x35	; 53
    3250:	11 f4       	brne	.+4      	; 0x3256 <vfprintf+0x35a>
    3252:	04 ff       	sbrs	r16, 4
    3254:	81 e3       	ldi	r24, 0x31	; 49
    3256:	b6 01       	movw	r22, r12
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	4b c0       	rjmp	.+150    	; 0x32f2 <vfprintf+0x3f6>
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	81 33       	cpi	r24, 0x31	; 49
    3260:	09 f0       	breq	.+2      	; 0x3264 <vfprintf+0x368>
    3262:	0f 7e       	andi	r16, 0xEF	; 239
    3264:	b6 01       	movw	r22, r12
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    326c:	11 11       	cpse	r17, r1
    326e:	05 c0       	rjmp	.+10     	; 0x327a <vfprintf+0x37e>
    3270:	34 fc       	sbrc	r3, 4
    3272:	18 c0       	rjmp	.+48     	; 0x32a4 <vfprintf+0x3a8>
    3274:	85 e6       	ldi	r24, 0x65	; 101
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	17 c0       	rjmp	.+46     	; 0x32a8 <vfprintf+0x3ac>
    327a:	b6 01       	movw	r22, r12
    327c:	8e e2       	ldi	r24, 0x2E	; 46
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	ee 24       	eor	r14, r14
    3288:	e3 94       	inc	r14
    328a:	e8 0e       	add	r14, r24
    328c:	f3 01       	movw	r30, r6
    328e:	e8 0f       	add	r30, r24
    3290:	f1 1d       	adc	r31, r1
    3292:	80 81       	ld	r24, Z
    3294:	b6 01       	movw	r22, r12
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    329c:	11 50       	subi	r17, 0x01	; 1
    329e:	8e 2d       	mov	r24, r14
    32a0:	91 f7       	brne	.-28     	; 0x3286 <vfprintf+0x38a>
    32a2:	e6 cf       	rjmp	.-52     	; 0x3270 <vfprintf+0x374>
    32a4:	85 e4       	ldi	r24, 0x45	; 69
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	b6 01       	movw	r22, r12
    32aa:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    32ae:	57 fc       	sbrc	r5, 7
    32b0:	05 c0       	rjmp	.+10     	; 0x32bc <vfprintf+0x3c0>
    32b2:	41 14       	cp	r4, r1
    32b4:	51 04       	cpc	r5, r1
    32b6:	39 f4       	brne	.+14     	; 0x32c6 <vfprintf+0x3ca>
    32b8:	04 ff       	sbrs	r16, 4
    32ba:	05 c0       	rjmp	.+10     	; 0x32c6 <vfprintf+0x3ca>
    32bc:	51 94       	neg	r5
    32be:	41 94       	neg	r4
    32c0:	51 08       	sbc	r5, r1
    32c2:	8d e2       	ldi	r24, 0x2D	; 45
    32c4:	01 c0       	rjmp	.+2      	; 0x32c8 <vfprintf+0x3cc>
    32c6:	8b e2       	ldi	r24, 0x2B	; 43
    32c8:	b6 01       	movw	r22, r12
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    32d0:	80 e3       	ldi	r24, 0x30	; 48
    32d2:	9a e0       	ldi	r25, 0x0A	; 10
    32d4:	49 16       	cp	r4, r25
    32d6:	51 04       	cpc	r5, r1
    32d8:	2c f0       	brlt	.+10     	; 0x32e4 <vfprintf+0x3e8>
    32da:	8f 5f       	subi	r24, 0xFF	; 255
    32dc:	5a e0       	ldi	r21, 0x0A	; 10
    32de:	45 1a       	sub	r4, r21
    32e0:	51 08       	sbc	r5, r1
    32e2:	f7 cf       	rjmp	.-18     	; 0x32d2 <vfprintf+0x3d6>
    32e4:	b6 01       	movw	r22, r12
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    32ec:	b6 01       	movw	r22, r12
    32ee:	c2 01       	movw	r24, r4
    32f0:	c0 96       	adiw	r24, 0x30	; 48
    32f2:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    32f6:	57 c1       	rjmp	.+686    	; 0x35a6 <vfprintf+0x6aa>
    32f8:	83 36       	cpi	r24, 0x63	; 99
    32fa:	31 f0       	breq	.+12     	; 0x3308 <vfprintf+0x40c>
    32fc:	83 37       	cpi	r24, 0x73	; 115
    32fe:	79 f0       	breq	.+30     	; 0x331e <vfprintf+0x422>
    3300:	83 35       	cpi	r24, 0x53	; 83
    3302:	09 f0       	breq	.+2      	; 0x3306 <vfprintf+0x40a>
    3304:	58 c0       	rjmp	.+176    	; 0x33b6 <vfprintf+0x4ba>
    3306:	21 c0       	rjmp	.+66     	; 0x334a <vfprintf+0x44e>
    3308:	52 01       	movw	r10, r4
    330a:	e2 e0       	ldi	r30, 0x02	; 2
    330c:	ae 0e       	add	r10, r30
    330e:	b1 1c       	adc	r11, r1
    3310:	f2 01       	movw	r30, r4
    3312:	80 81       	ld	r24, Z
    3314:	89 83       	std	Y+1, r24	; 0x01
    3316:	01 e0       	ldi	r16, 0x01	; 1
    3318:	10 e0       	ldi	r17, 0x00	; 0
    331a:	23 01       	movw	r4, r6
    331c:	14 c0       	rjmp	.+40     	; 0x3346 <vfprintf+0x44a>
    331e:	52 01       	movw	r10, r4
    3320:	f2 e0       	ldi	r31, 0x02	; 2
    3322:	af 0e       	add	r10, r31
    3324:	b1 1c       	adc	r11, r1
    3326:	f2 01       	movw	r30, r4
    3328:	40 80       	ld	r4, Z
    332a:	51 80       	ldd	r5, Z+1	; 0x01
    332c:	26 ff       	sbrs	r18, 6
    332e:	03 c0       	rjmp	.+6      	; 0x3336 <vfprintf+0x43a>
    3330:	61 2f       	mov	r22, r17
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	02 c0       	rjmp	.+4      	; 0x333a <vfprintf+0x43e>
    3336:	6f ef       	ldi	r22, 0xFF	; 255
    3338:	7f ef       	ldi	r23, 0xFF	; 255
    333a:	c2 01       	movw	r24, r4
    333c:	2a 8b       	std	Y+18, r18	; 0x12
    333e:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <strnlen>
    3342:	8c 01       	movw	r16, r24
    3344:	2a 89       	ldd	r18, Y+18	; 0x12
    3346:	2f 77       	andi	r18, 0x7F	; 127
    3348:	15 c0       	rjmp	.+42     	; 0x3374 <vfprintf+0x478>
    334a:	52 01       	movw	r10, r4
    334c:	f2 e0       	ldi	r31, 0x02	; 2
    334e:	af 0e       	add	r10, r31
    3350:	b1 1c       	adc	r11, r1
    3352:	f2 01       	movw	r30, r4
    3354:	40 80       	ld	r4, Z
    3356:	51 80       	ldd	r5, Z+1	; 0x01
    3358:	26 ff       	sbrs	r18, 6
    335a:	03 c0       	rjmp	.+6      	; 0x3362 <vfprintf+0x466>
    335c:	61 2f       	mov	r22, r17
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	02 c0       	rjmp	.+4      	; 0x3366 <vfprintf+0x46a>
    3362:	6f ef       	ldi	r22, 0xFF	; 255
    3364:	7f ef       	ldi	r23, 0xFF	; 255
    3366:	c2 01       	movw	r24, r4
    3368:	2a 8b       	std	Y+18, r18	; 0x12
    336a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <strnlen_P>
    336e:	8c 01       	movw	r16, r24
    3370:	2a 89       	ldd	r18, Y+18	; 0x12
    3372:	20 68       	ori	r18, 0x80	; 128
    3374:	32 2e       	mov	r3, r18
    3376:	23 fd       	sbrc	r18, 3
    3378:	1a c0       	rjmp	.+52     	; 0x33ae <vfprintf+0x4b2>
    337a:	8f 2d       	mov	r24, r15
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	08 17       	cp	r16, r24
    3380:	19 07       	cpc	r17, r25
    3382:	a8 f4       	brcc	.+42     	; 0x33ae <vfprintf+0x4b2>
    3384:	b6 01       	movw	r22, r12
    3386:	80 e2       	ldi	r24, 0x20	; 32
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    338e:	fa 94       	dec	r15
    3390:	f4 cf       	rjmp	.-24     	; 0x337a <vfprintf+0x47e>
    3392:	f2 01       	movw	r30, r4
    3394:	37 fc       	sbrc	r3, 7
    3396:	85 91       	lpm	r24, Z+
    3398:	37 fe       	sbrs	r3, 7
    339a:	81 91       	ld	r24, Z+
    339c:	2f 01       	movw	r4, r30
    339e:	b6 01       	movw	r22, r12
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    33a6:	f1 10       	cpse	r15, r1
    33a8:	fa 94       	dec	r15
    33aa:	01 50       	subi	r16, 0x01	; 1
    33ac:	11 09       	sbc	r17, r1
    33ae:	01 15       	cp	r16, r1
    33b0:	11 05       	cpc	r17, r1
    33b2:	79 f7       	brne	.-34     	; 0x3392 <vfprintf+0x496>
    33b4:	f8 c0       	rjmp	.+496    	; 0x35a6 <vfprintf+0x6aa>
    33b6:	84 36       	cpi	r24, 0x64	; 100
    33b8:	11 f0       	breq	.+4      	; 0x33be <vfprintf+0x4c2>
    33ba:	89 36       	cpi	r24, 0x69	; 105
    33bc:	59 f5       	brne	.+86     	; 0x3414 <vfprintf+0x518>
    33be:	52 01       	movw	r10, r4
    33c0:	27 ff       	sbrs	r18, 7
    33c2:	09 c0       	rjmp	.+18     	; 0x33d6 <vfprintf+0x4da>
    33c4:	f4 e0       	ldi	r31, 0x04	; 4
    33c6:	af 0e       	add	r10, r31
    33c8:	b1 1c       	adc	r11, r1
    33ca:	f2 01       	movw	r30, r4
    33cc:	60 81       	ld	r22, Z
    33ce:	71 81       	ldd	r23, Z+1	; 0x01
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	93 81       	ldd	r25, Z+3	; 0x03
    33d4:	0a c0       	rjmp	.+20     	; 0x33ea <vfprintf+0x4ee>
    33d6:	f2 e0       	ldi	r31, 0x02	; 2
    33d8:	af 0e       	add	r10, r31
    33da:	b1 1c       	adc	r11, r1
    33dc:	f2 01       	movw	r30, r4
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	07 2e       	mov	r0, r23
    33e4:	00 0c       	add	r0, r0
    33e6:	88 0b       	sbc	r24, r24
    33e8:	99 0b       	sbc	r25, r25
    33ea:	2f 76       	andi	r18, 0x6F	; 111
    33ec:	32 2e       	mov	r3, r18
    33ee:	97 ff       	sbrs	r25, 7
    33f0:	09 c0       	rjmp	.+18     	; 0x3404 <vfprintf+0x508>
    33f2:	90 95       	com	r25
    33f4:	80 95       	com	r24
    33f6:	70 95       	com	r23
    33f8:	61 95       	neg	r22
    33fa:	7f 4f       	sbci	r23, 0xFF	; 255
    33fc:	8f 4f       	sbci	r24, 0xFF	; 255
    33fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3400:	20 68       	ori	r18, 0x80	; 128
    3402:	32 2e       	mov	r3, r18
    3404:	2a e0       	ldi	r18, 0x0A	; 10
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	a3 01       	movw	r20, r6
    340a:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__ultoa_invert>
    340e:	e8 2e       	mov	r14, r24
    3410:	e6 18       	sub	r14, r6
    3412:	3f c0       	rjmp	.+126    	; 0x3492 <vfprintf+0x596>
    3414:	02 2f       	mov	r16, r18
    3416:	85 37       	cpi	r24, 0x75	; 117
    3418:	21 f4       	brne	.+8      	; 0x3422 <vfprintf+0x526>
    341a:	0f 7e       	andi	r16, 0xEF	; 239
    341c:	2a e0       	ldi	r18, 0x0A	; 10
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	1d c0       	rjmp	.+58     	; 0x345c <vfprintf+0x560>
    3422:	09 7f       	andi	r16, 0xF9	; 249
    3424:	8f 36       	cpi	r24, 0x6F	; 111
    3426:	91 f0       	breq	.+36     	; 0x344c <vfprintf+0x550>
    3428:	18 f4       	brcc	.+6      	; 0x3430 <vfprintf+0x534>
    342a:	88 35       	cpi	r24, 0x58	; 88
    342c:	59 f0       	breq	.+22     	; 0x3444 <vfprintf+0x548>
    342e:	c5 c0       	rjmp	.+394    	; 0x35ba <vfprintf+0x6be>
    3430:	80 37       	cpi	r24, 0x70	; 112
    3432:	19 f0       	breq	.+6      	; 0x343a <vfprintf+0x53e>
    3434:	88 37       	cpi	r24, 0x78	; 120
    3436:	11 f0       	breq	.+4      	; 0x343c <vfprintf+0x540>
    3438:	c0 c0       	rjmp	.+384    	; 0x35ba <vfprintf+0x6be>
    343a:	00 61       	ori	r16, 0x10	; 16
    343c:	04 ff       	sbrs	r16, 4
    343e:	09 c0       	rjmp	.+18     	; 0x3452 <vfprintf+0x556>
    3440:	04 60       	ori	r16, 0x04	; 4
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <vfprintf+0x556>
    3444:	24 ff       	sbrs	r18, 4
    3446:	08 c0       	rjmp	.+16     	; 0x3458 <vfprintf+0x55c>
    3448:	06 60       	ori	r16, 0x06	; 6
    344a:	06 c0       	rjmp	.+12     	; 0x3458 <vfprintf+0x55c>
    344c:	28 e0       	ldi	r18, 0x08	; 8
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	05 c0       	rjmp	.+10     	; 0x345c <vfprintf+0x560>
    3452:	20 e1       	ldi	r18, 0x10	; 16
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	02 c0       	rjmp	.+4      	; 0x345c <vfprintf+0x560>
    3458:	20 e1       	ldi	r18, 0x10	; 16
    345a:	32 e0       	ldi	r19, 0x02	; 2
    345c:	52 01       	movw	r10, r4
    345e:	07 ff       	sbrs	r16, 7
    3460:	09 c0       	rjmp	.+18     	; 0x3474 <vfprintf+0x578>
    3462:	f4 e0       	ldi	r31, 0x04	; 4
    3464:	af 0e       	add	r10, r31
    3466:	b1 1c       	adc	r11, r1
    3468:	f2 01       	movw	r30, r4
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <vfprintf+0x588>
    3474:	f2 e0       	ldi	r31, 0x02	; 2
    3476:	af 0e       	add	r10, r31
    3478:	b1 1c       	adc	r11, r1
    347a:	f2 01       	movw	r30, r4
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	80 e0       	ldi	r24, 0x00	; 0
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	a3 01       	movw	r20, r6
    3486:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__ultoa_invert>
    348a:	e8 2e       	mov	r14, r24
    348c:	e6 18       	sub	r14, r6
    348e:	0f 77       	andi	r16, 0x7F	; 127
    3490:	30 2e       	mov	r3, r16
    3492:	36 fe       	sbrs	r3, 6
    3494:	0b c0       	rjmp	.+22     	; 0x34ac <vfprintf+0x5b0>
    3496:	33 2d       	mov	r19, r3
    3498:	3e 7f       	andi	r19, 0xFE	; 254
    349a:	e1 16       	cp	r14, r17
    349c:	50 f4       	brcc	.+20     	; 0x34b2 <vfprintf+0x5b6>
    349e:	34 fe       	sbrs	r3, 4
    34a0:	0a c0       	rjmp	.+20     	; 0x34b6 <vfprintf+0x5ba>
    34a2:	32 fc       	sbrc	r3, 2
    34a4:	08 c0       	rjmp	.+16     	; 0x34b6 <vfprintf+0x5ba>
    34a6:	33 2d       	mov	r19, r3
    34a8:	3e 7e       	andi	r19, 0xEE	; 238
    34aa:	05 c0       	rjmp	.+10     	; 0x34b6 <vfprintf+0x5ba>
    34ac:	0e 2d       	mov	r16, r14
    34ae:	33 2d       	mov	r19, r3
    34b0:	03 c0       	rjmp	.+6      	; 0x34b8 <vfprintf+0x5bc>
    34b2:	0e 2d       	mov	r16, r14
    34b4:	01 c0       	rjmp	.+2      	; 0x34b8 <vfprintf+0x5bc>
    34b6:	01 2f       	mov	r16, r17
    34b8:	34 ff       	sbrs	r19, 4
    34ba:	0c c0       	rjmp	.+24     	; 0x34d4 <vfprintf+0x5d8>
    34bc:	fe 01       	movw	r30, r28
    34be:	ee 0d       	add	r30, r14
    34c0:	f1 1d       	adc	r31, r1
    34c2:	80 81       	ld	r24, Z
    34c4:	80 33       	cpi	r24, 0x30	; 48
    34c6:	11 f4       	brne	.+4      	; 0x34cc <vfprintf+0x5d0>
    34c8:	39 7e       	andi	r19, 0xE9	; 233
    34ca:	08 c0       	rjmp	.+16     	; 0x34dc <vfprintf+0x5e0>
    34cc:	32 ff       	sbrs	r19, 2
    34ce:	05 c0       	rjmp	.+10     	; 0x34da <vfprintf+0x5de>
    34d0:	0e 5f       	subi	r16, 0xFE	; 254
    34d2:	04 c0       	rjmp	.+8      	; 0x34dc <vfprintf+0x5e0>
    34d4:	83 2f       	mov	r24, r19
    34d6:	86 78       	andi	r24, 0x86	; 134
    34d8:	09 f0       	breq	.+2      	; 0x34dc <vfprintf+0x5e0>
    34da:	0f 5f       	subi	r16, 0xFF	; 255
    34dc:	33 fd       	sbrc	r19, 3
    34de:	13 c0       	rjmp	.+38     	; 0x3506 <vfprintf+0x60a>
    34e0:	30 ff       	sbrs	r19, 0
    34e2:	06 c0       	rjmp	.+12     	; 0x34f0 <vfprintf+0x5f4>
    34e4:	1e 2d       	mov	r17, r14
    34e6:	0f 15       	cp	r16, r15
    34e8:	18 f4       	brcc	.+6      	; 0x34f0 <vfprintf+0x5f4>
    34ea:	1f 0d       	add	r17, r15
    34ec:	10 1b       	sub	r17, r16
    34ee:	0f 2d       	mov	r16, r15
    34f0:	0f 15       	cp	r16, r15
    34f2:	68 f4       	brcc	.+26     	; 0x350e <vfprintf+0x612>
    34f4:	b6 01       	movw	r22, r12
    34f6:	80 e2       	ldi	r24, 0x20	; 32
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	3b 8b       	std	Y+19, r19	; 0x13
    34fc:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3500:	0f 5f       	subi	r16, 0xFF	; 255
    3502:	3b 89       	ldd	r19, Y+19	; 0x13
    3504:	f5 cf       	rjmp	.-22     	; 0x34f0 <vfprintf+0x5f4>
    3506:	0f 15       	cp	r16, r15
    3508:	10 f4       	brcc	.+4      	; 0x350e <vfprintf+0x612>
    350a:	f0 1a       	sub	r15, r16
    350c:	01 c0       	rjmp	.+2      	; 0x3510 <vfprintf+0x614>
    350e:	f1 2c       	mov	r15, r1
    3510:	34 ff       	sbrs	r19, 4
    3512:	12 c0       	rjmp	.+36     	; 0x3538 <vfprintf+0x63c>
    3514:	b6 01       	movw	r22, r12
    3516:	80 e3       	ldi	r24, 0x30	; 48
    3518:	90 e0       	ldi	r25, 0x00	; 0
    351a:	3b 8b       	std	Y+19, r19	; 0x13
    351c:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3520:	3b 89       	ldd	r19, Y+19	; 0x13
    3522:	32 ff       	sbrs	r19, 2
    3524:	17 c0       	rjmp	.+46     	; 0x3554 <vfprintf+0x658>
    3526:	31 fd       	sbrc	r19, 1
    3528:	03 c0       	rjmp	.+6      	; 0x3530 <vfprintf+0x634>
    352a:	88 e7       	ldi	r24, 0x78	; 120
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	02 c0       	rjmp	.+4      	; 0x3534 <vfprintf+0x638>
    3530:	88 e5       	ldi	r24, 0x58	; 88
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	b6 01       	movw	r22, r12
    3536:	0c c0       	rjmp	.+24     	; 0x3550 <vfprintf+0x654>
    3538:	83 2f       	mov	r24, r19
    353a:	86 78       	andi	r24, 0x86	; 134
    353c:	59 f0       	breq	.+22     	; 0x3554 <vfprintf+0x658>
    353e:	31 ff       	sbrs	r19, 1
    3540:	02 c0       	rjmp	.+4      	; 0x3546 <vfprintf+0x64a>
    3542:	8b e2       	ldi	r24, 0x2B	; 43
    3544:	01 c0       	rjmp	.+2      	; 0x3548 <vfprintf+0x64c>
    3546:	80 e2       	ldi	r24, 0x20	; 32
    3548:	37 fd       	sbrc	r19, 7
    354a:	8d e2       	ldi	r24, 0x2D	; 45
    354c:	b6 01       	movw	r22, r12
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3554:	e1 16       	cp	r14, r17
    3556:	38 f4       	brcc	.+14     	; 0x3566 <vfprintf+0x66a>
    3558:	b6 01       	movw	r22, r12
    355a:	80 e3       	ldi	r24, 0x30	; 48
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3562:	11 50       	subi	r17, 0x01	; 1
    3564:	f7 cf       	rjmp	.-18     	; 0x3554 <vfprintf+0x658>
    3566:	ea 94       	dec	r14
    3568:	f3 01       	movw	r30, r6
    356a:	ee 0d       	add	r30, r14
    356c:	f1 1d       	adc	r31, r1
    356e:	80 81       	ld	r24, Z
    3570:	b6 01       	movw	r22, r12
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    3578:	e1 10       	cpse	r14, r1
    357a:	f5 cf       	rjmp	.-22     	; 0x3566 <vfprintf+0x66a>
    357c:	14 c0       	rjmp	.+40     	; 0x35a6 <vfprintf+0x6aa>
    357e:	f4 e0       	ldi	r31, 0x04	; 4
    3580:	ff 15       	cp	r31, r15
    3582:	58 f5       	brcc	.+86     	; 0x35da <vfprintf+0x6de>
    3584:	84 e0       	ldi	r24, 0x04	; 4
    3586:	f8 1a       	sub	r15, r24
    3588:	33 fe       	sbrs	r3, 3
    358a:	1e c0       	rjmp	.+60     	; 0x35c8 <vfprintf+0x6cc>
    358c:	21 10       	cpse	r2, r1
    358e:	26 c0       	rjmp	.+76     	; 0x35dc <vfprintf+0x6e0>
    3590:	03 ff       	sbrs	r16, 3
    3592:	2a c0       	rjmp	.+84     	; 0x35e8 <vfprintf+0x6ec>
    3594:	0c ec       	ldi	r16, 0xCC	; 204
    3596:	12 e0       	ldi	r17, 0x02	; 2
    3598:	f3 2d       	mov	r31, r3
    359a:	f0 71       	andi	r31, 0x10	; 16
    359c:	3f 2e       	mov	r3, r31
    359e:	f8 01       	movw	r30, r16
    35a0:	84 91       	lpm	r24, Z
    35a2:	81 11       	cpse	r24, r1
    35a4:	24 c0       	rjmp	.+72     	; 0x35ee <vfprintf+0x6f2>
    35a6:	ff 20       	and	r15, r15
    35a8:	09 f4       	brne	.+2      	; 0x35ac <vfprintf+0x6b0>
    35aa:	e5 cc       	rjmp	.-1590   	; 0x2f76 <vfprintf+0x7a>
    35ac:	b6 01       	movw	r22, r12
    35ae:	80 e2       	ldi	r24, 0x20	; 32
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    35b6:	fa 94       	dec	r15
    35b8:	f6 cf       	rjmp	.-20     	; 0x35a6 <vfprintf+0x6aa>
    35ba:	f6 01       	movw	r30, r12
    35bc:	86 81       	ldd	r24, Z+6	; 0x06
    35be:	97 81       	ldd	r25, Z+7	; 0x07
    35c0:	26 c0       	rjmp	.+76     	; 0x360e <vfprintf+0x712>
    35c2:	8f ef       	ldi	r24, 0xFF	; 255
    35c4:	9f ef       	ldi	r25, 0xFF	; 255
    35c6:	23 c0       	rjmp	.+70     	; 0x360e <vfprintf+0x712>
    35c8:	b6 01       	movw	r22, r12
    35ca:	80 e2       	ldi	r24, 0x20	; 32
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    35d2:	fa 94       	dec	r15
    35d4:	f1 10       	cpse	r15, r1
    35d6:	f8 cf       	rjmp	.-16     	; 0x35c8 <vfprintf+0x6cc>
    35d8:	d9 cf       	rjmp	.-78     	; 0x358c <vfprintf+0x690>
    35da:	f1 2c       	mov	r15, r1
    35dc:	b6 01       	movw	r22, r12
    35de:	82 2d       	mov	r24, r2
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    35e6:	d4 cf       	rjmp	.-88     	; 0x3590 <vfprintf+0x694>
    35e8:	00 ed       	ldi	r16, 0xD0	; 208
    35ea:	12 e0       	ldi	r17, 0x02	; 2
    35ec:	d5 cf       	rjmp	.-86     	; 0x3598 <vfprintf+0x69c>
    35ee:	31 10       	cpse	r3, r1
    35f0:	80 52       	subi	r24, 0x20	; 32
    35f2:	b6 01       	movw	r22, r12
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 87 1c 	call	0x390e	; 0x390e <fputc>
    35fa:	0f 5f       	subi	r16, 0xFF	; 255
    35fc:	1f 4f       	sbci	r17, 0xFF	; 255
    35fe:	cf cf       	rjmp	.-98     	; 0x359e <vfprintf+0x6a2>
    3600:	23 e0       	ldi	r18, 0x03	; 3
    3602:	2f 15       	cp	r18, r15
    3604:	10 f4       	brcc	.+4      	; 0x360a <vfprintf+0x70e>
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	be cf       	rjmp	.-132    	; 0x3586 <vfprintf+0x68a>
    360a:	f1 2c       	mov	r15, r1
    360c:	c1 cf       	rjmp	.-126    	; 0x3590 <vfprintf+0x694>
    360e:	63 96       	adiw	r28, 0x13	; 19
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	ff 90       	pop	r15
    361e:	ef 90       	pop	r14
    3620:	df 90       	pop	r13
    3622:	cf 90       	pop	r12
    3624:	bf 90       	pop	r11
    3626:	af 90       	pop	r10
    3628:	9f 90       	pop	r9
    362a:	8f 90       	pop	r8
    362c:	7f 90       	pop	r7
    362e:	6f 90       	pop	r6
    3630:	5f 90       	pop	r5
    3632:	4f 90       	pop	r4
    3634:	3f 90       	pop	r3
    3636:	2f 90       	pop	r2
    3638:	08 95       	ret

0000363a <__divmodhi4>:
    363a:	97 fb       	bst	r25, 7
    363c:	07 2e       	mov	r0, r23
    363e:	16 f4       	brtc	.+4      	; 0x3644 <__divmodhi4+0xa>
    3640:	00 94       	com	r0
    3642:	07 d0       	rcall	.+14     	; 0x3652 <__divmodhi4_neg1>
    3644:	77 fd       	sbrc	r23, 7
    3646:	09 d0       	rcall	.+18     	; 0x365a <__divmodhi4_neg2>
    3648:	0e 94 5b 1b 	call	0x36b6	; 0x36b6 <__udivmodhi4>
    364c:	07 fc       	sbrc	r0, 7
    364e:	05 d0       	rcall	.+10     	; 0x365a <__divmodhi4_neg2>
    3650:	3e f4       	brtc	.+14     	; 0x3660 <__divmodhi4_exit>

00003652 <__divmodhi4_neg1>:
    3652:	90 95       	com	r25
    3654:	81 95       	neg	r24
    3656:	9f 4f       	sbci	r25, 0xFF	; 255
    3658:	08 95       	ret

0000365a <__divmodhi4_neg2>:
    365a:	70 95       	com	r23
    365c:	61 95       	neg	r22
    365e:	7f 4f       	sbci	r23, 0xFF	; 255

00003660 <__divmodhi4_exit>:
    3660:	08 95       	ret

00003662 <__udivmodsi4>:
    3662:	a1 e2       	ldi	r26, 0x21	; 33
    3664:	1a 2e       	mov	r1, r26
    3666:	aa 1b       	sub	r26, r26
    3668:	bb 1b       	sub	r27, r27
    366a:	fd 01       	movw	r30, r26
    366c:	0d c0       	rjmp	.+26     	; 0x3688 <__udivmodsi4_ep>

0000366e <__udivmodsi4_loop>:
    366e:	aa 1f       	adc	r26, r26
    3670:	bb 1f       	adc	r27, r27
    3672:	ee 1f       	adc	r30, r30
    3674:	ff 1f       	adc	r31, r31
    3676:	a2 17       	cp	r26, r18
    3678:	b3 07       	cpc	r27, r19
    367a:	e4 07       	cpc	r30, r20
    367c:	f5 07       	cpc	r31, r21
    367e:	20 f0       	brcs	.+8      	; 0x3688 <__udivmodsi4_ep>
    3680:	a2 1b       	sub	r26, r18
    3682:	b3 0b       	sbc	r27, r19
    3684:	e4 0b       	sbc	r30, r20
    3686:	f5 0b       	sbc	r31, r21

00003688 <__udivmodsi4_ep>:
    3688:	66 1f       	adc	r22, r22
    368a:	77 1f       	adc	r23, r23
    368c:	88 1f       	adc	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	1a 94       	dec	r1
    3692:	69 f7       	brne	.-38     	; 0x366e <__udivmodsi4_loop>
    3694:	60 95       	com	r22
    3696:	70 95       	com	r23
    3698:	80 95       	com	r24
    369a:	90 95       	com	r25
    369c:	9b 01       	movw	r18, r22
    369e:	ac 01       	movw	r20, r24
    36a0:	bd 01       	movw	r22, r26
    36a2:	cf 01       	movw	r24, r30
    36a4:	08 95       	ret

000036a6 <__tablejump2__>:
    36a6:	ee 0f       	add	r30, r30
    36a8:	ff 1f       	adc	r31, r31
    36aa:	88 1f       	adc	r24, r24
    36ac:	8b bf       	out	0x3b, r24	; 59
    36ae:	07 90       	elpm	r0, Z+
    36b0:	f6 91       	elpm	r31, Z
    36b2:	e0 2d       	mov	r30, r0
    36b4:	19 94       	eijmp

000036b6 <__udivmodhi4>:
    36b6:	aa 1b       	sub	r26, r26
    36b8:	bb 1b       	sub	r27, r27
    36ba:	51 e1       	ldi	r21, 0x11	; 17
    36bc:	07 c0       	rjmp	.+14     	; 0x36cc <__udivmodhi4_ep>

000036be <__udivmodhi4_loop>:
    36be:	aa 1f       	adc	r26, r26
    36c0:	bb 1f       	adc	r27, r27
    36c2:	a6 17       	cp	r26, r22
    36c4:	b7 07       	cpc	r27, r23
    36c6:	10 f0       	brcs	.+4      	; 0x36cc <__udivmodhi4_ep>
    36c8:	a6 1b       	sub	r26, r22
    36ca:	b7 0b       	sbc	r27, r23

000036cc <__udivmodhi4_ep>:
    36cc:	88 1f       	adc	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	5a 95       	dec	r21
    36d2:	a9 f7       	brne	.-22     	; 0x36be <__udivmodhi4_loop>
    36d4:	80 95       	com	r24
    36d6:	90 95       	com	r25
    36d8:	bc 01       	movw	r22, r24
    36da:	cd 01       	movw	r24, r26
    36dc:	08 95       	ret

000036de <__muluhisi3>:
    36de:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__umulhisi3>
    36e2:	a5 9f       	mul	r26, r21
    36e4:	90 0d       	add	r25, r0
    36e6:	b4 9f       	mul	r27, r20
    36e8:	90 0d       	add	r25, r0
    36ea:	a4 9f       	mul	r26, r20
    36ec:	80 0d       	add	r24, r0
    36ee:	91 1d       	adc	r25, r1
    36f0:	11 24       	eor	r1, r1
    36f2:	08 95       	ret

000036f4 <__umulhisi3>:
    36f4:	a2 9f       	mul	r26, r18
    36f6:	b0 01       	movw	r22, r0
    36f8:	b3 9f       	mul	r27, r19
    36fa:	c0 01       	movw	r24, r0
    36fc:	a3 9f       	mul	r26, r19
    36fe:	70 0d       	add	r23, r0
    3700:	81 1d       	adc	r24, r1
    3702:	11 24       	eor	r1, r1
    3704:	91 1d       	adc	r25, r1
    3706:	b2 9f       	mul	r27, r18
    3708:	70 0d       	add	r23, r0
    370a:	81 1d       	adc	r24, r1
    370c:	11 24       	eor	r1, r1
    370e:	91 1d       	adc	r25, r1
    3710:	08 95       	ret

00003712 <__ftoa_engine>:
    3712:	28 30       	cpi	r18, 0x08	; 8
    3714:	08 f0       	brcs	.+2      	; 0x3718 <__ftoa_engine+0x6>
    3716:	27 e0       	ldi	r18, 0x07	; 7
    3718:	33 27       	eor	r19, r19
    371a:	da 01       	movw	r26, r20
    371c:	99 0f       	add	r25, r25
    371e:	31 1d       	adc	r19, r1
    3720:	87 fd       	sbrc	r24, 7
    3722:	91 60       	ori	r25, 0x01	; 1
    3724:	00 96       	adiw	r24, 0x00	; 0
    3726:	61 05       	cpc	r22, r1
    3728:	71 05       	cpc	r23, r1
    372a:	39 f4       	brne	.+14     	; 0x373a <__ftoa_engine+0x28>
    372c:	32 60       	ori	r19, 0x02	; 2
    372e:	2e 5f       	subi	r18, 0xFE	; 254
    3730:	3d 93       	st	X+, r19
    3732:	30 e3       	ldi	r19, 0x30	; 48
    3734:	2a 95       	dec	r18
    3736:	e1 f7       	brne	.-8      	; 0x3730 <__ftoa_engine+0x1e>
    3738:	08 95       	ret
    373a:	9f 3f       	cpi	r25, 0xFF	; 255
    373c:	30 f0       	brcs	.+12     	; 0x374a <__ftoa_engine+0x38>
    373e:	80 38       	cpi	r24, 0x80	; 128
    3740:	71 05       	cpc	r23, r1
    3742:	61 05       	cpc	r22, r1
    3744:	09 f0       	breq	.+2      	; 0x3748 <__ftoa_engine+0x36>
    3746:	3c 5f       	subi	r19, 0xFC	; 252
    3748:	3c 5f       	subi	r19, 0xFC	; 252
    374a:	3d 93       	st	X+, r19
    374c:	91 30       	cpi	r25, 0x01	; 1
    374e:	08 f0       	brcs	.+2      	; 0x3752 <__ftoa_engine+0x40>
    3750:	80 68       	ori	r24, 0x80	; 128
    3752:	91 1d       	adc	r25, r1
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	1f 93       	push	r17
    375a:	0f 93       	push	r16
    375c:	ff 92       	push	r15
    375e:	ef 92       	push	r14
    3760:	19 2f       	mov	r17, r25
    3762:	98 7f       	andi	r25, 0xF8	; 248
    3764:	96 95       	lsr	r25
    3766:	e9 2f       	mov	r30, r25
    3768:	96 95       	lsr	r25
    376a:	96 95       	lsr	r25
    376c:	e9 0f       	add	r30, r25
    376e:	ff 27       	eor	r31, r31
    3770:	e2 5d       	subi	r30, 0xD2	; 210
    3772:	fc 4f       	sbci	r31, 0xFC	; 252
    3774:	99 27       	eor	r25, r25
    3776:	33 27       	eor	r19, r19
    3778:	ee 24       	eor	r14, r14
    377a:	ff 24       	eor	r15, r15
    377c:	a7 01       	movw	r20, r14
    377e:	e7 01       	movw	r28, r14
    3780:	05 90       	lpm	r0, Z+
    3782:	08 94       	sec
    3784:	07 94       	ror	r0
    3786:	28 f4       	brcc	.+10     	; 0x3792 <__ftoa_engine+0x80>
    3788:	36 0f       	add	r19, r22
    378a:	e7 1e       	adc	r14, r23
    378c:	f8 1e       	adc	r15, r24
    378e:	49 1f       	adc	r20, r25
    3790:	51 1d       	adc	r21, r1
    3792:	66 0f       	add	r22, r22
    3794:	77 1f       	adc	r23, r23
    3796:	88 1f       	adc	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	06 94       	lsr	r0
    379c:	a1 f7       	brne	.-24     	; 0x3786 <__ftoa_engine+0x74>
    379e:	05 90       	lpm	r0, Z+
    37a0:	07 94       	ror	r0
    37a2:	28 f4       	brcc	.+10     	; 0x37ae <__ftoa_engine+0x9c>
    37a4:	e7 0e       	add	r14, r23
    37a6:	f8 1e       	adc	r15, r24
    37a8:	49 1f       	adc	r20, r25
    37aa:	56 1f       	adc	r21, r22
    37ac:	c1 1d       	adc	r28, r1
    37ae:	77 0f       	add	r23, r23
    37b0:	88 1f       	adc	r24, r24
    37b2:	99 1f       	adc	r25, r25
    37b4:	66 1f       	adc	r22, r22
    37b6:	06 94       	lsr	r0
    37b8:	a1 f7       	brne	.-24     	; 0x37a2 <__ftoa_engine+0x90>
    37ba:	05 90       	lpm	r0, Z+
    37bc:	07 94       	ror	r0
    37be:	28 f4       	brcc	.+10     	; 0x37ca <__ftoa_engine+0xb8>
    37c0:	f8 0e       	add	r15, r24
    37c2:	49 1f       	adc	r20, r25
    37c4:	56 1f       	adc	r21, r22
    37c6:	c7 1f       	adc	r28, r23
    37c8:	d1 1d       	adc	r29, r1
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	66 1f       	adc	r22, r22
    37d0:	77 1f       	adc	r23, r23
    37d2:	06 94       	lsr	r0
    37d4:	a1 f7       	brne	.-24     	; 0x37be <__ftoa_engine+0xac>
    37d6:	05 90       	lpm	r0, Z+
    37d8:	07 94       	ror	r0
    37da:	20 f4       	brcc	.+8      	; 0x37e4 <__ftoa_engine+0xd2>
    37dc:	49 0f       	add	r20, r25
    37de:	56 1f       	adc	r21, r22
    37e0:	c7 1f       	adc	r28, r23
    37e2:	d8 1f       	adc	r29, r24
    37e4:	99 0f       	add	r25, r25
    37e6:	66 1f       	adc	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	88 1f       	adc	r24, r24
    37ec:	06 94       	lsr	r0
    37ee:	a9 f7       	brne	.-22     	; 0x37da <__ftoa_engine+0xc8>
    37f0:	84 91       	lpm	r24, Z
    37f2:	10 95       	com	r17
    37f4:	17 70       	andi	r17, 0x07	; 7
    37f6:	41 f0       	breq	.+16     	; 0x3808 <__ftoa_engine+0xf6>
    37f8:	d6 95       	lsr	r29
    37fa:	c7 95       	ror	r28
    37fc:	57 95       	ror	r21
    37fe:	47 95       	ror	r20
    3800:	f7 94       	ror	r15
    3802:	e7 94       	ror	r14
    3804:	1a 95       	dec	r17
    3806:	c1 f7       	brne	.-16     	; 0x37f8 <__ftoa_engine+0xe6>
    3808:	e4 ed       	ldi	r30, 0xD4	; 212
    380a:	f2 e0       	ldi	r31, 0x02	; 2
    380c:	68 94       	set
    380e:	15 90       	lpm	r1, Z+
    3810:	15 91       	lpm	r17, Z+
    3812:	35 91       	lpm	r19, Z+
    3814:	65 91       	lpm	r22, Z+
    3816:	95 91       	lpm	r25, Z+
    3818:	05 90       	lpm	r0, Z+
    381a:	7f e2       	ldi	r23, 0x2F	; 47
    381c:	73 95       	inc	r23
    381e:	e1 18       	sub	r14, r1
    3820:	f1 0a       	sbc	r15, r17
    3822:	43 0b       	sbc	r20, r19
    3824:	56 0b       	sbc	r21, r22
    3826:	c9 0b       	sbc	r28, r25
    3828:	d0 09       	sbc	r29, r0
    382a:	c0 f7       	brcc	.-16     	; 0x381c <__ftoa_engine+0x10a>
    382c:	e1 0c       	add	r14, r1
    382e:	f1 1e       	adc	r15, r17
    3830:	43 1f       	adc	r20, r19
    3832:	56 1f       	adc	r21, r22
    3834:	c9 1f       	adc	r28, r25
    3836:	d0 1d       	adc	r29, r0
    3838:	7e f4       	brtc	.+30     	; 0x3858 <__ftoa_engine+0x146>
    383a:	70 33       	cpi	r23, 0x30	; 48
    383c:	11 f4       	brne	.+4      	; 0x3842 <__ftoa_engine+0x130>
    383e:	8a 95       	dec	r24
    3840:	e6 cf       	rjmp	.-52     	; 0x380e <__ftoa_engine+0xfc>
    3842:	e8 94       	clt
    3844:	01 50       	subi	r16, 0x01	; 1
    3846:	30 f0       	brcs	.+12     	; 0x3854 <__ftoa_engine+0x142>
    3848:	08 0f       	add	r16, r24
    384a:	0a f4       	brpl	.+2      	; 0x384e <__ftoa_engine+0x13c>
    384c:	00 27       	eor	r16, r16
    384e:	02 17       	cp	r16, r18
    3850:	08 f4       	brcc	.+2      	; 0x3854 <__ftoa_engine+0x142>
    3852:	20 2f       	mov	r18, r16
    3854:	23 95       	inc	r18
    3856:	02 2f       	mov	r16, r18
    3858:	7a 33       	cpi	r23, 0x3A	; 58
    385a:	28 f0       	brcs	.+10     	; 0x3866 <__ftoa_engine+0x154>
    385c:	79 e3       	ldi	r23, 0x39	; 57
    385e:	7d 93       	st	X+, r23
    3860:	2a 95       	dec	r18
    3862:	e9 f7       	brne	.-6      	; 0x385e <__ftoa_engine+0x14c>
    3864:	10 c0       	rjmp	.+32     	; 0x3886 <__ftoa_engine+0x174>
    3866:	7d 93       	st	X+, r23
    3868:	2a 95       	dec	r18
    386a:	89 f6       	brne	.-94     	; 0x380e <__ftoa_engine+0xfc>
    386c:	06 94       	lsr	r0
    386e:	97 95       	ror	r25
    3870:	67 95       	ror	r22
    3872:	37 95       	ror	r19
    3874:	17 95       	ror	r17
    3876:	17 94       	ror	r1
    3878:	e1 18       	sub	r14, r1
    387a:	f1 0a       	sbc	r15, r17
    387c:	43 0b       	sbc	r20, r19
    387e:	56 0b       	sbc	r21, r22
    3880:	c9 0b       	sbc	r28, r25
    3882:	d0 09       	sbc	r29, r0
    3884:	98 f0       	brcs	.+38     	; 0x38ac <__ftoa_engine+0x19a>
    3886:	23 95       	inc	r18
    3888:	7e 91       	ld	r23, -X
    388a:	73 95       	inc	r23
    388c:	7a 33       	cpi	r23, 0x3A	; 58
    388e:	08 f0       	brcs	.+2      	; 0x3892 <__ftoa_engine+0x180>
    3890:	70 e3       	ldi	r23, 0x30	; 48
    3892:	7c 93       	st	X, r23
    3894:	20 13       	cpse	r18, r16
    3896:	b8 f7       	brcc	.-18     	; 0x3886 <__ftoa_engine+0x174>
    3898:	7e 91       	ld	r23, -X
    389a:	70 61       	ori	r23, 0x10	; 16
    389c:	7d 93       	st	X+, r23
    389e:	30 f0       	brcs	.+12     	; 0x38ac <__ftoa_engine+0x19a>
    38a0:	83 95       	inc	r24
    38a2:	71 e3       	ldi	r23, 0x31	; 49
    38a4:	7d 93       	st	X+, r23
    38a6:	70 e3       	ldi	r23, 0x30	; 48
    38a8:	2a 95       	dec	r18
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <__ftoa_engine+0x192>
    38ac:	11 24       	eor	r1, r1
    38ae:	ef 90       	pop	r14
    38b0:	ff 90       	pop	r15
    38b2:	0f 91       	pop	r16
    38b4:	1f 91       	pop	r17
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	99 27       	eor	r25, r25
    38bc:	87 fd       	sbrc	r24, 7
    38be:	90 95       	com	r25
    38c0:	08 95       	ret

000038c2 <strnlen_P>:
    38c2:	fc 01       	movw	r30, r24
    38c4:	05 90       	lpm	r0, Z+
    38c6:	61 50       	subi	r22, 0x01	; 1
    38c8:	70 40       	sbci	r23, 0x00	; 0
    38ca:	01 10       	cpse	r0, r1
    38cc:	d8 f7       	brcc	.-10     	; 0x38c4 <strnlen_P+0x2>
    38ce:	80 95       	com	r24
    38d0:	90 95       	com	r25
    38d2:	8e 0f       	add	r24, r30
    38d4:	9f 1f       	adc	r25, r31
    38d6:	08 95       	ret

000038d8 <strnlen>:
    38d8:	fc 01       	movw	r30, r24
    38da:	61 50       	subi	r22, 0x01	; 1
    38dc:	70 40       	sbci	r23, 0x00	; 0
    38de:	01 90       	ld	r0, Z+
    38e0:	01 10       	cpse	r0, r1
    38e2:	d8 f7       	brcc	.-10     	; 0x38da <strnlen+0x2>
    38e4:	80 95       	com	r24
    38e6:	90 95       	com	r25
    38e8:	8e 0f       	add	r24, r30
    38ea:	9f 1f       	adc	r25, r31
    38ec:	08 95       	ret

000038ee <fprintf>:
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	ae 01       	movw	r20, r28
    38f8:	46 5f       	subi	r20, 0xF6	; 246
    38fa:	5f 4f       	sbci	r21, 0xFF	; 255
    38fc:	68 85       	ldd	r22, Y+8	; 0x08
    38fe:	79 85       	ldd	r23, Y+9	; 0x09
    3900:	8e 81       	ldd	r24, Y+6	; 0x06
    3902:	9f 81       	ldd	r25, Y+7	; 0x07
    3904:	0e 94 7e 17 	call	0x2efc	; 0x2efc <vfprintf>
    3908:	df 91       	pop	r29
    390a:	cf 91       	pop	r28
    390c:	08 95       	ret

0000390e <fputc>:
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
    3916:	fb 01       	movw	r30, r22
    3918:	23 81       	ldd	r18, Z+3	; 0x03
    391a:	21 fd       	sbrc	r18, 1
    391c:	03 c0       	rjmp	.+6      	; 0x3924 <fputc+0x16>
    391e:	8f ef       	ldi	r24, 0xFF	; 255
    3920:	9f ef       	ldi	r25, 0xFF	; 255
    3922:	28 c0       	rjmp	.+80     	; 0x3974 <fputc+0x66>
    3924:	22 ff       	sbrs	r18, 2
    3926:	16 c0       	rjmp	.+44     	; 0x3954 <fputc+0x46>
    3928:	46 81       	ldd	r20, Z+6	; 0x06
    392a:	57 81       	ldd	r21, Z+7	; 0x07
    392c:	24 81       	ldd	r18, Z+4	; 0x04
    392e:	35 81       	ldd	r19, Z+5	; 0x05
    3930:	42 17       	cp	r20, r18
    3932:	53 07       	cpc	r21, r19
    3934:	44 f4       	brge	.+16     	; 0x3946 <fputc+0x38>
    3936:	a0 81       	ld	r26, Z
    3938:	b1 81       	ldd	r27, Z+1	; 0x01
    393a:	9d 01       	movw	r18, r26
    393c:	2f 5f       	subi	r18, 0xFF	; 255
    393e:	3f 4f       	sbci	r19, 0xFF	; 255
    3940:	20 83       	st	Z, r18
    3942:	31 83       	std	Z+1, r19	; 0x01
    3944:	8c 93       	st	X, r24
    3946:	26 81       	ldd	r18, Z+6	; 0x06
    3948:	37 81       	ldd	r19, Z+7	; 0x07
    394a:	2f 5f       	subi	r18, 0xFF	; 255
    394c:	3f 4f       	sbci	r19, 0xFF	; 255
    394e:	26 83       	std	Z+6, r18	; 0x06
    3950:	37 83       	std	Z+7, r19	; 0x07
    3952:	10 c0       	rjmp	.+32     	; 0x3974 <fputc+0x66>
    3954:	eb 01       	movw	r28, r22
    3956:	09 2f       	mov	r16, r25
    3958:	18 2f       	mov	r17, r24
    395a:	00 84       	ldd	r0, Z+8	; 0x08
    395c:	f1 85       	ldd	r31, Z+9	; 0x09
    395e:	e0 2d       	mov	r30, r0
    3960:	19 95       	eicall
    3962:	89 2b       	or	r24, r25
    3964:	e1 f6       	brne	.-72     	; 0x391e <fputc+0x10>
    3966:	8e 81       	ldd	r24, Y+6	; 0x06
    3968:	9f 81       	ldd	r25, Y+7	; 0x07
    396a:	01 96       	adiw	r24, 0x01	; 1
    396c:	8e 83       	std	Y+6, r24	; 0x06
    396e:	9f 83       	std	Y+7, r25	; 0x07
    3970:	81 2f       	mov	r24, r17
    3972:	90 2f       	mov	r25, r16
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <fwrite>:
    397e:	8f 92       	push	r8
    3980:	9f 92       	push	r9
    3982:	af 92       	push	r10
    3984:	bf 92       	push	r11
    3986:	cf 92       	push	r12
    3988:	df 92       	push	r13
    398a:	ef 92       	push	r14
    398c:	ff 92       	push	r15
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	5b 01       	movw	r10, r22
    3998:	4a 01       	movw	r8, r20
    399a:	79 01       	movw	r14, r18
    399c:	d9 01       	movw	r26, r18
    399e:	13 96       	adiw	r26, 0x03	; 3
    39a0:	2c 91       	ld	r18, X
    39a2:	21 ff       	sbrs	r18, 1
    39a4:	1d c0       	rjmp	.+58     	; 0x39e0 <fwrite+0x62>
    39a6:	c0 e0       	ldi	r28, 0x00	; 0
    39a8:	d0 e0       	ldi	r29, 0x00	; 0
    39aa:	c8 15       	cp	r28, r8
    39ac:	d9 05       	cpc	r29, r9
    39ae:	d9 f0       	breq	.+54     	; 0x39e6 <fwrite+0x68>
    39b0:	8c 01       	movw	r16, r24
    39b2:	6c 01       	movw	r12, r24
    39b4:	ca 0c       	add	r12, r10
    39b6:	db 1c       	adc	r13, r11
    39b8:	c8 01       	movw	r24, r16
    39ba:	0c 15       	cp	r16, r12
    39bc:	1d 05       	cpc	r17, r13
    39be:	71 f0       	breq	.+28     	; 0x39dc <fwrite+0x5e>
    39c0:	0f 5f       	subi	r16, 0xFF	; 255
    39c2:	1f 4f       	sbci	r17, 0xFF	; 255
    39c4:	d7 01       	movw	r26, r14
    39c6:	18 96       	adiw	r26, 0x08	; 8
    39c8:	ed 91       	ld	r30, X+
    39ca:	fc 91       	ld	r31, X
    39cc:	19 97       	sbiw	r26, 0x09	; 9
    39ce:	b7 01       	movw	r22, r14
    39d0:	dc 01       	movw	r26, r24
    39d2:	8c 91       	ld	r24, X
    39d4:	19 95       	eicall
    39d6:	89 2b       	or	r24, r25
    39d8:	79 f3       	breq	.-34     	; 0x39b8 <fwrite+0x3a>
    39da:	05 c0       	rjmp	.+10     	; 0x39e6 <fwrite+0x68>
    39dc:	21 96       	adiw	r28, 0x01	; 1
    39de:	e5 cf       	rjmp	.-54     	; 0x39aa <fwrite+0x2c>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	01 c0       	rjmp	.+2      	; 0x39e8 <fwrite+0x6a>
    39e6:	ce 01       	movw	r24, r28
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	1f 91       	pop	r17
    39ee:	0f 91       	pop	r16
    39f0:	ff 90       	pop	r15
    39f2:	ef 90       	pop	r14
    39f4:	df 90       	pop	r13
    39f6:	cf 90       	pop	r12
    39f8:	bf 90       	pop	r11
    39fa:	af 90       	pop	r10
    39fc:	9f 90       	pop	r9
    39fe:	8f 90       	pop	r8
    3a00:	08 95       	ret

00003a02 <__ultoa_invert>:
    3a02:	fa 01       	movw	r30, r20
    3a04:	aa 27       	eor	r26, r26
    3a06:	28 30       	cpi	r18, 0x08	; 8
    3a08:	51 f1       	breq	.+84     	; 0x3a5e <__ultoa_invert+0x5c>
    3a0a:	20 31       	cpi	r18, 0x10	; 16
    3a0c:	81 f1       	breq	.+96     	; 0x3a6e <__ultoa_invert+0x6c>
    3a0e:	e8 94       	clt
    3a10:	6f 93       	push	r22
    3a12:	6e 7f       	andi	r22, 0xFE	; 254
    3a14:	6e 5f       	subi	r22, 0xFE	; 254
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	8f 4f       	sbci	r24, 0xFF	; 255
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	af 4f       	sbci	r26, 0xFF	; 255
    3a1e:	b1 e0       	ldi	r27, 0x01	; 1
    3a20:	3e d0       	rcall	.+124    	; 0x3a9e <__ultoa_invert+0x9c>
    3a22:	b4 e0       	ldi	r27, 0x04	; 4
    3a24:	3c d0       	rcall	.+120    	; 0x3a9e <__ultoa_invert+0x9c>
    3a26:	67 0f       	add	r22, r23
    3a28:	78 1f       	adc	r23, r24
    3a2a:	89 1f       	adc	r24, r25
    3a2c:	9a 1f       	adc	r25, r26
    3a2e:	a1 1d       	adc	r26, r1
    3a30:	68 0f       	add	r22, r24
    3a32:	79 1f       	adc	r23, r25
    3a34:	8a 1f       	adc	r24, r26
    3a36:	91 1d       	adc	r25, r1
    3a38:	a1 1d       	adc	r26, r1
    3a3a:	6a 0f       	add	r22, r26
    3a3c:	71 1d       	adc	r23, r1
    3a3e:	81 1d       	adc	r24, r1
    3a40:	91 1d       	adc	r25, r1
    3a42:	a1 1d       	adc	r26, r1
    3a44:	20 d0       	rcall	.+64     	; 0x3a86 <__ultoa_invert+0x84>
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <__ultoa_invert+0x48>
    3a48:	68 94       	set
    3a4a:	3f 91       	pop	r19
    3a4c:	2a e0       	ldi	r18, 0x0A	; 10
    3a4e:	26 9f       	mul	r18, r22
    3a50:	11 24       	eor	r1, r1
    3a52:	30 19       	sub	r19, r0
    3a54:	30 5d       	subi	r19, 0xD0	; 208
    3a56:	31 93       	st	Z+, r19
    3a58:	de f6       	brtc	.-74     	; 0x3a10 <__ultoa_invert+0xe>
    3a5a:	cf 01       	movw	r24, r30
    3a5c:	08 95       	ret
    3a5e:	46 2f       	mov	r20, r22
    3a60:	47 70       	andi	r20, 0x07	; 7
    3a62:	40 5d       	subi	r20, 0xD0	; 208
    3a64:	41 93       	st	Z+, r20
    3a66:	b3 e0       	ldi	r27, 0x03	; 3
    3a68:	0f d0       	rcall	.+30     	; 0x3a88 <__ultoa_invert+0x86>
    3a6a:	c9 f7       	brne	.-14     	; 0x3a5e <__ultoa_invert+0x5c>
    3a6c:	f6 cf       	rjmp	.-20     	; 0x3a5a <__ultoa_invert+0x58>
    3a6e:	46 2f       	mov	r20, r22
    3a70:	4f 70       	andi	r20, 0x0F	; 15
    3a72:	40 5d       	subi	r20, 0xD0	; 208
    3a74:	4a 33       	cpi	r20, 0x3A	; 58
    3a76:	18 f0       	brcs	.+6      	; 0x3a7e <__ultoa_invert+0x7c>
    3a78:	49 5d       	subi	r20, 0xD9	; 217
    3a7a:	31 fd       	sbrc	r19, 1
    3a7c:	40 52       	subi	r20, 0x20	; 32
    3a7e:	41 93       	st	Z+, r20
    3a80:	02 d0       	rcall	.+4      	; 0x3a86 <__ultoa_invert+0x84>
    3a82:	a9 f7       	brne	.-22     	; 0x3a6e <__ultoa_invert+0x6c>
    3a84:	ea cf       	rjmp	.-44     	; 0x3a5a <__ultoa_invert+0x58>
    3a86:	b4 e0       	ldi	r27, 0x04	; 4
    3a88:	a6 95       	lsr	r26
    3a8a:	97 95       	ror	r25
    3a8c:	87 95       	ror	r24
    3a8e:	77 95       	ror	r23
    3a90:	67 95       	ror	r22
    3a92:	ba 95       	dec	r27
    3a94:	c9 f7       	brne	.-14     	; 0x3a88 <__ultoa_invert+0x86>
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	61 05       	cpc	r22, r1
    3a9a:	71 05       	cpc	r23, r1
    3a9c:	08 95       	ret
    3a9e:	9b 01       	movw	r18, r22
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	0a 2e       	mov	r0, r26
    3aa4:	06 94       	lsr	r0
    3aa6:	57 95       	ror	r21
    3aa8:	47 95       	ror	r20
    3aaa:	37 95       	ror	r19
    3aac:	27 95       	ror	r18
    3aae:	ba 95       	dec	r27
    3ab0:	c9 f7       	brne	.-14     	; 0x3aa4 <__ultoa_invert+0xa2>
    3ab2:	62 0f       	add	r22, r18
    3ab4:	73 1f       	adc	r23, r19
    3ab6:	84 1f       	adc	r24, r20
    3ab8:	95 1f       	adc	r25, r21
    3aba:	a0 1d       	adc	r26, r0
    3abc:	08 95       	ret

00003abe <__mulsi3>:
    3abe:	db 01       	movw	r26, r22
    3ac0:	8f 93       	push	r24
    3ac2:	9f 93       	push	r25
    3ac4:	0e 94 6f 1b 	call	0x36de	; 0x36de <__muluhisi3>
    3ac8:	bf 91       	pop	r27
    3aca:	af 91       	pop	r26
    3acc:	a2 9f       	mul	r26, r18
    3ace:	80 0d       	add	r24, r0
    3ad0:	91 1d       	adc	r25, r1
    3ad2:	a3 9f       	mul	r26, r19
    3ad4:	90 0d       	add	r25, r0
    3ad6:	b2 9f       	mul	r27, r18
    3ad8:	90 0d       	add	r25, r0
    3ada:	11 24       	eor	r1, r1
    3adc:	08 95       	ret

00003ade <__divmodsi4>:
    3ade:	05 2e       	mov	r0, r21
    3ae0:	97 fb       	bst	r25, 7
    3ae2:	1e f4       	brtc	.+6      	; 0x3aea <__divmodsi4+0xc>
    3ae4:	00 94       	com	r0
    3ae6:	0e 94 86 1d 	call	0x3b0c	; 0x3b0c <__negsi2>
    3aea:	57 fd       	sbrc	r21, 7
    3aec:	07 d0       	rcall	.+14     	; 0x3afc <__divmodsi4_neg2>
    3aee:	0e 94 31 1b 	call	0x3662	; 0x3662 <__udivmodsi4>
    3af2:	07 fc       	sbrc	r0, 7
    3af4:	03 d0       	rcall	.+6      	; 0x3afc <__divmodsi4_neg2>
    3af6:	4e f4       	brtc	.+18     	; 0x3b0a <__divmodsi4_exit>
    3af8:	0c 94 86 1d 	jmp	0x3b0c	; 0x3b0c <__negsi2>

00003afc <__divmodsi4_neg2>:
    3afc:	50 95       	com	r21
    3afe:	40 95       	com	r20
    3b00:	30 95       	com	r19
    3b02:	21 95       	neg	r18
    3b04:	3f 4f       	sbci	r19, 0xFF	; 255
    3b06:	4f 4f       	sbci	r20, 0xFF	; 255
    3b08:	5f 4f       	sbci	r21, 0xFF	; 255

00003b0a <__divmodsi4_exit>:
    3b0a:	08 95       	ret

00003b0c <__negsi2>:
    3b0c:	90 95       	com	r25
    3b0e:	80 95       	com	r24
    3b10:	70 95       	com	r23
    3b12:	61 95       	neg	r22
    3b14:	7f 4f       	sbci	r23, 0xFF	; 255
    3b16:	8f 4f       	sbci	r24, 0xFF	; 255
    3b18:	9f 4f       	sbci	r25, 0xFF	; 255
    3b1a:	08 95       	ret

00003b1c <__usmulhisi3>:
    3b1c:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <__umulhisi3>

00003b20 <__usmulhisi3_tail>:
    3b20:	b7 ff       	sbrs	r27, 7
    3b22:	08 95       	ret
    3b24:	82 1b       	sub	r24, r18
    3b26:	93 0b       	sbc	r25, r19
    3b28:	08 95       	ret

00003b2a <_exit>:
    3b2a:	f8 94       	cli

00003b2c <__stop_program>:
    3b2c:	ff cf       	rjmp	.-2      	; 0x3b2c <__stop_program>
