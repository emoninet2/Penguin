
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003034  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00802000  00003034  000030c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000735b  00802326  00802326  000033ee  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000033ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000347c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  000034bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e467  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025bb  00000000  00000000  0001229b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005421  00000000  00000000  00014856  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019e4  00000000  00000000  00019c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005029  00000000  00000000  0001b65c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000667a  00000000  00000000  00020685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  00026cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__ctors_end>
       4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      1c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      34:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      38:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_14>
      3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      40:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      54:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      5c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      60:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      64:	0c 94 9f 11 	jmp	0x233e	; 0x233e <__vector_25>
      68:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__vector_26>
      6c:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__vector_27>
      70:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__vector_28>
      74:	0c 94 d1 11 	jmp	0x23a2	; 0x23a2 <__vector_29>
      78:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__vector_30>
      7c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      80:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      84:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      88:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      8c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      90:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      94:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      98:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      9c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e8:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__vector_58>
      ec:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__vector_59>
      f0:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_60>
      f4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      fc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     100:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     104:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     108:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     10c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     110:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     114:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     118:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     11c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     120:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     124:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     128:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     12c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     130:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     134:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     138:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     13c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     140:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     144:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     148:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     14c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     150:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     154:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     158:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     15c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     160:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <__vector_88>
     164:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__vector_89>
     168:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <__vector_90>
     16c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     170:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     174:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     178:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     17c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     180:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     184:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     188:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     18c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     190:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     194:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     198:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     19c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ec:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f4:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_125>
     1f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <glcd_thread>
     200:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <relay_thread>
     204:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <radio_thread>
     208:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <prvIdleTask>

0000020c <__trampolines_end>:
     20c:	6e 61       	ori	r22, 0x1E	; 30
     20e:	6e 00       	.word	0x006e	; ????

00000210 <__c.2240>:
     210:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     220:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     230:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     240:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     250:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     260:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     270:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     280:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     290:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     300:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030e <__ctors_end>:
     30e:	11 24       	eor	r1, r1
     310:	1f be       	out	0x3f, r1	; 63
     312:	cf ef       	ldi	r28, 0xFF	; 255
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df e9       	ldi	r29, 0x9F	; 159
     318:	de bf       	out	0x3e, r29	; 62
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	0c bf       	out	0x3c, r16	; 60

0000031e <__do_copy_data>:
     31e:	13 e2       	ldi	r17, 0x23	; 35
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e2       	ldi	r27, 0x20	; 32
     324:	e4 e3       	ldi	r30, 0x34	; 52
     326:	f0 e3       	ldi	r31, 0x30	; 48
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	0b bf       	out	0x3b, r16	; 59
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x14>
     32e:	07 90       	elpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a6 32       	cpi	r26, 0x26	; 38
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0x10>

00000338 <__do_clear_bss>:
     338:	26 e9       	ldi	r18, 0x96	; 150
     33a:	a6 e2       	ldi	r26, 0x26	; 38
     33c:	b3 e2       	ldi	r27, 0x23	; 35
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	a1 38       	cpi	r26, 0x81	; 129
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	0e 94 06 11 	call	0x220c	; 0x220c <main>
     34c:	0c 94 18 18 	jmp	0x3030	; 0x3030 <_exit>

00000350 <__bad_interrupt>:
     350:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000354 <RadioMode>:
    }
}

ErrorStatus_t writeAckPayload(Payload_t *payload){
    write_ack_payload(payload->pipe, payload->data, payload->length);
}
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	99 f0       	breq	.+38     	; 0x37e <RadioMode+0x2a>
     358:	18 f4       	brcc	.+6      	; 0x360 <RadioMode+0xc>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	31 f0       	breq	.+12     	; 0x36a <RadioMode+0x16>
     35e:	08 95       	ret
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	11 f1       	breq	.+68     	; 0x3a8 <RadioMode+0x54>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	c1 f1       	breq	.+112    	; 0x3d8 <RadioMode+0x84>
     368:	08 95       	ret
     36a:	0e 94 87 04 	call	0x90e	; 0x90e <power_down>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e2       	ldi	r25, 0x20	; 32
     372:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     37c:	08 95       	ret
     37e:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	49 f4       	brne	.+18     	; 0x398 <RadioMode+0x44>
     386:	0e 94 7e 04 	call	0x8fc	; 0x8fc <power_up>
     38a:	8f e9       	ldi	r24, 0x9F	; 159
     38c:	9c e8       	ldi	r25, 0x8C	; 140
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <RadioMode+0x3a>
     392:	00 c0       	rjmp	.+0      	; 0x394 <RadioMode+0x40>
     394:	00 00       	nop
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <RadioMode+0x4c>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e2       	ldi	r25, 0x20	; 32
     39c:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     3a6:	08 95       	ret
     3a8:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	59 f1       	breq	.+86     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e2       	ldi	r25, 0x20	; 32
     3b4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     3b8:	0e 94 90 04 	call	0x920	; 0x920 <rx_mode>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e2       	ldi	r25, 0x20	; 32
     3c0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     3c4:	8f e0       	ldi	r24, 0x0F	; 15
     3c6:	94 e0       	ldi	r25, 0x04	; 4
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <RadioMode+0x74>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <RadioMode+0x7a>
     3ce:	00 00       	nop
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     3d6:	08 95       	ret
     3d8:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     3dc:	84 30       	cpi	r24, 0x04	; 4
     3de:	99 f0       	breq	.+38     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e2       	ldi	r25, 0x20	; 32
     3e4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     3e8:	0e 94 99 04 	call	0x932	; 0x932 <tx_mode>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e2       	ldi	r25, 0x20	; 32
     3f0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     3f4:	8f e0       	ldi	r24, 0x0F	; 15
     3f6:	94 e0       	ldi	r25, 0x04	; 4
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <RadioMode+0xa4>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <RadioMode+0xaa>
     3fe:	00 00       	nop
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     406:	08 95       	ret

00000408 <ResetConfigValues>:
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	7c 01       	movw	r14, r24
     424:	8b 01       	movw	r16, r22
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f6 e0       	ldi	r31, 0x06	; 6
     42a:	80 eb       	ldi	r24, 0xB0	; 176
     42c:	81 83       	std	Z+1, r24	; 0x01
     42e:	80 e4       	ldi	r24, 0x40	; 64
     430:	82 83       	std	Z+2, r24	; 0x02
     432:	80 e5       	ldi	r24, 0x50	; 80
     434:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	81 83       	std	Z+1, r24	; 0x01
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e2       	ldi	r25, 0x20	; 32
     446:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	90 e2       	ldi	r25, 0x20	; 32
     44e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	83 ec       	ldi	r24, 0xC3	; 195
     456:	99 e0       	ldi	r25, 0x09	; 9
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	80 40       	sbci	r24, 0x00	; 0
     45c:	90 40       	sbci	r25, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <ResetConfigValues+0x50>
     460:	00 c0       	rjmp	.+0      	; 0x462 <ResetConfigValues+0x5a>
     462:	00 00       	nop
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 aa 01 	call	0x354	; 0x354 <RadioMode>
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 aa 01 	call	0x354	; 0x354 <RadioMode>
     470:	0e 94 22 05 	call	0xa44	; 0xa44 <clear_data_ready_flag>
     474:	0e 94 29 04 	call	0x852	; 0x852 <flush_rx>
     478:	0e 94 10 04 	call	0x820	; 0x820 <flush_tx>
     47c:	80 e7       	ldi	r24, 0x70	; 112
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	be 01       	movw	r22, r28
     486:	6f 5f       	subi	r22, 0xFF	; 255
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	0e 94 be 03 	call	0x77c	; 0x77c <write_register_buffer>
     490:	8b e0       	ldi	r24, 0x0B	; 11
     492:	8a 83       	std	Y+2, r24	; 0x02
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	be 01       	movw	r22, r28
     49a:	6e 5f       	subi	r22, 0xFE	; 254
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0e 94 be 03 	call	0x77c	; 0x77c <write_register_buffer>
     4a4:	d7 01       	movw	r26, r14
     4a6:	8c 91       	ld	r24, X
     4a8:	ed e7       	ldi	r30, 0x7D	; 125
     4aa:	f3 e9       	ldi	r31, 0x93	; 147
     4ac:	80 83       	st	Z, r24
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	8c 91       	ld	r24, X
     4b2:	11 97       	sbiw	r26, 0x01	; 1
     4b4:	81 83       	std	Z+1, r24	; 0x01
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	8c 91       	ld	r24, X
     4ba:	12 97       	sbiw	r26, 0x02	; 2
     4bc:	82 83       	std	Z+2, r24	; 0x02
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	8c 91       	ld	r24, X
     4c2:	13 97       	sbiw	r26, 0x03	; 3
     4c4:	83 83       	std	Z+3, r24	; 0x03
     4c6:	14 96       	adiw	r26, 0x04	; 4
     4c8:	8c 91       	ld	r24, X
     4ca:	14 97       	sbiw	r26, 0x04	; 4
     4cc:	84 83       	std	Z+4, r24	; 0x04
     4ce:	15 96       	adiw	r26, 0x05	; 5
     4d0:	8c 91       	ld	r24, X
     4d2:	15 97       	sbiw	r26, 0x05	; 5
     4d4:	85 83       	std	Z+5, r24	; 0x05
     4d6:	16 96       	adiw	r26, 0x06	; 6
     4d8:	8c 91       	ld	r24, X
     4da:	16 97       	sbiw	r26, 0x06	; 6
     4dc:	86 83       	std	Z+6, r24	; 0x06
     4de:	17 96       	adiw	r26, 0x07	; 7
     4e0:	8c 91       	ld	r24, X
     4e2:	17 97       	sbiw	r26, 0x07	; 7
     4e4:	87 83       	std	Z+7, r24	; 0x07
     4e6:	18 96       	adiw	r26, 0x08	; 8
     4e8:	8c 91       	ld	r24, X
     4ea:	18 97       	sbiw	r26, 0x08	; 8
     4ec:	80 87       	std	Z+8, r24	; 0x08
     4ee:	19 96       	adiw	r26, 0x09	; 9
     4f0:	8c 91       	ld	r24, X
     4f2:	19 97       	sbiw	r26, 0x09	; 9
     4f4:	81 87       	std	Z+9, r24	; 0x09
     4f6:	1a 96       	adiw	r26, 0x0a	; 10
     4f8:	8c 91       	ld	r24, X
     4fa:	1a 97       	sbiw	r26, 0x0a	; 10
     4fc:	82 87       	std	Z+10, r24	; 0x0a
     4fe:	1b 96       	adiw	r26, 0x0b	; 11
     500:	8c 91       	ld	r24, X
     502:	1b 97       	sbiw	r26, 0x0b	; 11
     504:	83 87       	std	Z+11, r24	; 0x0b
     506:	1c 96       	adiw	r26, 0x0c	; 12
     508:	9c 91       	ld	r25, X
     50a:	1c 97       	sbiw	r26, 0x0c	; 12
     50c:	94 87       	std	Z+12, r25	; 0x0c
     50e:	1d 96       	adiw	r26, 0x0d	; 13
     510:	9c 91       	ld	r25, X
     512:	95 87       	std	Z+13, r25	; 0x0d
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	9c e0       	ldi	r25, 0x0C	; 12
     51a:	d9 01       	movw	r26, r18
     51c:	ad 56       	subi	r26, 0x6D	; 109
     51e:	bc 46       	sbci	r27, 0x6C	; 108
     520:	f8 01       	movw	r30, r16
     522:	e2 0f       	add	r30, r18
     524:	f3 1f       	adc	r31, r19
     526:	49 2f       	mov	r20, r25
     528:	01 90       	ld	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	4a 95       	dec	r20
     52e:	e1 f7       	brne	.-8      	; 0x528 <ResetConfigValues+0x120>
     530:	24 5f       	subi	r18, 0xF4	; 244
     532:	3f 4f       	sbci	r19, 0xFF	; 255
     534:	28 34       	cpi	r18, 0x48	; 72
     536:	31 05       	cpc	r19, r1
     538:	81 f7       	brne	.-32     	; 0x51a <ResetConfigValues+0x112>
     53a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <enable_dynamic_payload>
     53e:	0d e7       	ldi	r16, 0x7D	; 125
     540:	13 e9       	ldi	r17, 0x93	; 147
     542:	f8 01       	movw	r30, r16
     544:	84 85       	ldd	r24, Z+12	; 0x0c
     546:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <enable_payload_with_ack>
     54a:	d8 01       	movw	r26, r16
     54c:	1d 96       	adiw	r26, 0x0d	; 13
     54e:	8c 91       	ld	r24, X
     550:	0e 94 0e 06 	call	0xc1c	; 0xc1c <enable_dynamic_payload_with_no_ack>
     554:	f8 01       	movw	r30, r16
     556:	84 81       	ldd	r24, Z+4	; 0x04
     558:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <set_auto_retransmission_count>
     55c:	d8 01       	movw	r26, r16
     55e:	15 96       	adiw	r26, 0x05	; 5
     560:	8c 91       	ld	r24, X
     562:	0e 94 f7 04 	call	0x9ee	; 0x9ee <set_auto_retransmission_delay>
     566:	f8 01       	movw	r30, r16
     568:	87 81       	ldd	r24, Z+7	; 0x07
     56a:	0e 94 08 05 	call	0xa10	; 0xa10 <set_DataRate>
     56e:	0f 2e       	mov	r0, r31
     570:	f3 e9       	ldi	r31, 0x93	; 147
     572:	ef 2e       	mov	r14, r31
     574:	f3 e9       	ldi	r31, 0x93	; 147
     576:	ff 2e       	mov	r15, r31
     578:	f0 2d       	mov	r31, r0
     57a:	0f 2e       	mov	r0, r31
     57c:	fe e9       	ldi	r31, 0x9E	; 158
     57e:	af 2e       	mov	r10, r31
     580:	f3 e9       	ldi	r31, 0x93	; 147
     582:	bf 2e       	mov	r11, r31
     584:	f0 2d       	mov	r31, r0
     586:	d1 2c       	mov	r13, r1
     588:	d7 01       	movw	r26, r14
     58a:	6c 91       	ld	r22, X
     58c:	8d 2d       	mov	r24, r13
     58e:	0e 94 c6 04 	call	0x98c	; 0x98c <enable_rx_on_pipe>
     592:	f5 01       	movw	r30, r10
     594:	3a 97       	sbiw	r30, 0x0a	; 10
     596:	60 81       	ld	r22, Z
     598:	8d 2d       	mov	r24, r13
     59a:	0e 94 a2 04 	call	0x944	; 0x944 <enable_auto_ack>
     59e:	f5 01       	movw	r30, r10
     5a0:	60 81       	ld	r22, Z
     5a2:	8d 2d       	mov	r24, r13
     5a4:	0e 94 c2 05 	call	0xb84	; 0xb84 <enable_dynamic_payload_pipe>
     5a8:	d7 01       	movw	r26, r14
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	0c 91       	ld	r16, X
     5ae:	12 97       	sbiw	r26, 0x02	; 2
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	1c 91       	ld	r17, X
     5b4:	13 97       	sbiw	r26, 0x03	; 3
     5b6:	14 96       	adiw	r26, 0x04	; 4
     5b8:	2c 91       	ld	r18, X
     5ba:	14 97       	sbiw	r26, 0x04	; 4
     5bc:	15 96       	adiw	r26, 0x05	; 5
     5be:	3c 91       	ld	r19, X
     5c0:	15 97       	sbiw	r26, 0x05	; 5
     5c2:	16 96       	adiw	r26, 0x06	; 6
     5c4:	4c 91       	ld	r20, X
     5c6:	16 97       	sbiw	r26, 0x06	; 6
     5c8:	17 96       	adiw	r26, 0x07	; 7
     5ca:	5c 91       	ld	r21, X
     5cc:	17 97       	sbiw	r26, 0x07	; 7
     5ce:	18 96       	adiw	r26, 0x08	; 8
     5d0:	6c 91       	ld	r22, X
     5d2:	18 97       	sbiw	r26, 0x08	; 8
     5d4:	19 96       	adiw	r26, 0x09	; 9
     5d6:	7c 91       	ld	r23, X
     5d8:	8d 2d       	mov	r24, r13
     5da:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_RX_pipe_address>
     5de:	bc e0       	ldi	r27, 0x0C	; 12
     5e0:	eb 0e       	add	r14, r27
     5e2:	f1 1c       	adc	r15, r1
     5e4:	d3 94       	inc	r13
     5e6:	ec e0       	ldi	r30, 0x0C	; 12
     5e8:	ae 0e       	add	r10, r30
     5ea:	b1 1c       	adc	r11, r1
     5ec:	f6 e0       	ldi	r31, 0x06	; 6
     5ee:	df 12       	cpse	r13, r31
     5f0:	cb cf       	rjmp	.-106    	; 0x588 <ResetConfigValues+0x180>
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	08 95       	ret

0000060a <readable>:
     60a:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_data_ready_flag>
     60e:	81 11       	cpse	r24, r1
     610:	05 c0       	rjmp	.+10     	; 0x61c <readable+0x12>
     612:	0e 94 bd 05 	call	0xb7a	; 0xb7a <get_fifo_flag_rx_empty>
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	89 27       	eor	r24, r25
     61a:	02 c0       	rjmp	.+4      	; 0x620 <readable+0x16>
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	81 70       	andi	r24, 0x01	; 1
     622:	08 95       	ret

00000624 <readPayload>:
ErrorStatus_t readPayload(Payload_t *payload){
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	ec 01       	movw	r28, r24
    ErrorStatus_t error;
    payload->pipe = get_rx_payload_pipe();
     62a:	0e 94 35 05 	call	0xa6a	; 0xa6a <get_rx_payload_pipe>
     62e:	88 87       	std	Y+8, r24	; 0x08
    
    if(payload->pipe>=0 && payload->pipe<=5){
     630:	86 30       	cpi	r24, 0x06	; 6
     632:	a0 f4       	brcc	.+40     	; 0x65c <readPayload+0x38>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
     634:	90 91 88 93 	lds	r25, 0x9388	; 0x809388 <RadioConfig+0xb>
     638:	99 23       	and	r25, r25
     63a:	29 f0       	breq	.+10     	; 0x646 <readPayload+0x22>
            payload->length = read_rx_payload_width();
     63c:	0e 94 42 04 	call	0x884	; 0x884 <read_rx_payload_width>
     640:	8c 87       	std	Y+12, r24	; 0x0c
     642:	9d 87       	std	Y+13, r25	; 0x0d
     644:	05 c0       	rjmp	.+10     	; 0x650 <readPayload+0x2c>
        }else{
            payload->length = get_RX_pipe_width(payload->pipe);
     646:	0e 94 aa 05 	call	0xb54	; 0xb54 <get_RX_pipe_width>
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	8c 87       	std	Y+12, r24	; 0x0c
     64e:	9d 87       	std	Y+13, r25	; 0x0d
        }
        read_rx_payload(payload->data,payload->length);
     650:	6c 85       	ldd	r22, Y+12	; 0x0c
     652:	7d 85       	ldd	r23, Y+13	; 0x0d
     654:	8a 85       	ldd	r24, Y+10	; 0x0a
     656:	9b 85       	ldd	r25, Y+11	; 0x0b
     658:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <read_rx_payload>
        error = SUCCESS;
    }
    return error;
}
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <port_SPI_Transcieve>:
    else return 0;      
}
bool get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	61 15       	cp	r22, r1
     66a:	71 05       	cpc	r23, r1
     66c:	89 f0       	breq	.+34     	; 0x690 <port_SPI_Transcieve+0x2c>
     66e:	dc 01       	movw	r26, r24
     670:	68 0f       	add	r22, r24
     672:	79 1f       	adc	r23, r25
     674:	e0 ec       	ldi	r30, 0xC0	; 192
     676:	f8 e0       	ldi	r31, 0x08	; 8
     678:	ed 01       	movw	r28, r26
     67a:	9c 91       	ld	r25, X
     67c:	93 83       	std	Z+3, r25	; 0x03
     67e:	92 81       	ldd	r25, Z+2	; 0x02
     680:	99 23       	and	r25, r25
     682:	ec f7       	brge	.-6      	; 0x67e <port_SPI_Transcieve+0x1a>
     684:	93 81       	ldd	r25, Z+3	; 0x03
     686:	98 83       	st	Y, r25
     688:	11 96       	adiw	r26, 0x01	; 1
     68a:	a6 17       	cp	r26, r22
     68c:	b7 07       	cpc	r27, r23
     68e:	a1 f7       	brne	.-24     	; 0x678 <port_SPI_Transcieve+0x14>
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <read_register>:
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	1f 92       	push	r1
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	18 2f       	mov	r17, r24
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	90 e2       	ldi	r25, 0x20	; 32
     6a8:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     6ac:	1f 71       	andi	r17, 0x1F	; 31
     6ae:	19 83       	std	Y+1, r17	; 0x01
     6b0:	61 e0       	ldi	r22, 0x01	; 1
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	ce 01       	movw	r24, r28
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     6c8:	86 e0       	ldi	r24, 0x06	; 6
     6ca:	90 e2       	ldi	r25, 0x20	; 32
     6cc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	0f 90       	pop	r0
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	08 95       	ret

000006dc <read_register_buffer>:
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	1f 93       	push	r17
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	1f 92       	push	r1
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	18 2f       	mov	r17, r24
     6f2:	7b 01       	movw	r14, r22
     6f4:	6a 01       	movw	r12, r20
     6f6:	86 e0       	ldi	r24, 0x06	; 6
     6f8:	90 e2       	ldi	r25, 0x20	; 32
     6fa:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     6fe:	1f 71       	andi	r17, 0x1F	; 31
     700:	19 83       	std	Y+1, r17	; 0x01
     702:	61 e0       	ldi	r22, 0x01	; 1
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     70e:	b6 01       	movw	r22, r12
     710:	c7 01       	movw	r24, r14
     712:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     716:	86 e0       	ldi	r24, 0x06	; 6
     718:	90 e2       	ldi	r25, 0x20	; 32
     71a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     71e:	0f 90       	pop	r0
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	08 95       	ret

00000730 <write_register>:
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	18 2f       	mov	r17, r24
     740:	6a 83       	std	Y+2, r22	; 0x02
     742:	86 e0       	ldi	r24, 0x06	; 6
     744:	90 e2       	ldi	r25, 0x20	; 32
     746:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     74a:	1f 71       	andi	r17, 0x1F	; 31
     74c:	10 62       	ori	r17, 0x20	; 32
     74e:	19 83       	std	Y+1, r17	; 0x01
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	ce 01       	movw	r24, r28
     762:	02 96       	adiw	r24, 0x02	; 2
     764:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	90 e2       	ldi	r25, 0x20	; 32
     76c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	08 95       	ret

0000077c <write_register_buffer>:
     77c:	cf 92       	push	r12
     77e:	df 92       	push	r13
     780:	ef 92       	push	r14
     782:	ff 92       	push	r15
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	1f 92       	push	r1
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	18 2f       	mov	r17, r24
     792:	7b 01       	movw	r14, r22
     794:	6a 01       	movw	r12, r20
     796:	86 e0       	ldi	r24, 0x06	; 6
     798:	90 e2       	ldi	r25, 0x20	; 32
     79a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     79e:	1f 71       	andi	r17, 0x1F	; 31
     7a0:	10 62       	ori	r17, 0x20	; 32
     7a2:	19 83       	std	Y+1, r17	; 0x01
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     7b0:	b6 01       	movw	r22, r12
     7b2:	c7 01       	movw	r24, r14
     7b4:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     7b8:	86 e0       	ldi	r24, 0x06	; 6
     7ba:	90 e2       	ldi	r25, 0x20	; 32
     7bc:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <read_rx_payload>:
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	1f 92       	push	r1
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	8c 01       	movw	r16, r24
     7e6:	7b 01       	movw	r14, r22
     7e8:	86 e0       	ldi	r24, 0x06	; 6
     7ea:	90 e2       	ldi	r25, 0x20	; 32
     7ec:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     7f0:	81 e6       	ldi	r24, 0x61	; 97
     7f2:	89 83       	std	Y+1, r24	; 0x01
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	ce 01       	movw	r24, r28
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     800:	b7 01       	movw	r22, r14
     802:	c8 01       	movw	r24, r16
     804:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     808:	86 e0       	ldi	r24, 0x06	; 6
     80a:	90 e2       	ldi	r25, 0x20	; 32
     80c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     810:	0f 90       	pop	r0
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	1f 91       	pop	r17
     818:	0f 91       	pop	r16
     81a:	ff 90       	pop	r15
     81c:	ef 90       	pop	r14
     81e:	08 95       	ret

00000820 <flush_tx>:
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	1f 92       	push	r1
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	86 e0       	ldi	r24, 0x06	; 6
     82c:	90 e2       	ldi	r25, 0x20	; 32
     82e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     832:	81 ee       	ldi	r24, 0xE1	; 225
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	ce 01       	movw	r24, r28
     83c:	01 96       	adiw	r24, 0x01	; 1
     83e:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	90 e2       	ldi	r25, 0x20	; 32
     846:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     84a:	0f 90       	pop	r0
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <flush_rx>:
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	1f 92       	push	r1
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	86 e0       	ldi	r24, 0x06	; 6
     85e:	90 e2       	ldi	r25, 0x20	; 32
     860:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     864:	82 ee       	ldi	r24, 0xE2	; 226
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	61 e0       	ldi	r22, 0x01	; 1
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	ce 01       	movw	r24, r28
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     874:	86 e0       	ldi	r24, 0x06	; 6
     876:	90 e2       	ldi	r25, 0x20	; 32
     878:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     87c:	0f 90       	pop	r0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <read_rx_payload_width>:
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	1f 92       	push	r1
     88a:	cd b7       	in	r28, 0x3d	; 61
     88c:	de b7       	in	r29, 0x3e	; 62
     88e:	86 e0       	ldi	r24, 0x06	; 6
     890:	90 e2       	ldi	r25, 0x20	; 32
     892:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     896:	80 e6       	ldi	r24, 0x60	; 96
     898:	89 83       	std	Y+1, r24	; 0x01
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	ce 01       	movw	r24, r28
     8a0:	01 96       	adiw	r24, 0x01	; 1
     8a2:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     8b2:	86 e0       	ldi	r24, 0x06	; 6
     8b4:	90 e2       	ldi	r25, 0x20	; 32
     8b6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <get_status>:
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	1f 92       	push	r1
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	86 e0       	ldi	r24, 0x06	; 6
     8d2:	90 e2       	ldi	r25, 0x20	; 32
     8d4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
     8d8:	8f ef       	ldi	r24, 0xFF	; 255
     8da:	89 83       	std	Y+1, r24	; 0x01
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	ce 01       	movw	r24, r28
     8e2:	01 96       	adiw	r24, 0x01	; 1
     8e4:	0e 94 32 03 	call	0x664	; 0x664 <port_SPI_Transcieve>
     8e8:	86 e0       	ldi	r24, 0x06	; 6
     8ea:	90 e2       	ldi	r25, 0x20	; 32
     8ec:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <power_up>:
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     902:	68 2f       	mov	r22, r24
     904:	62 60       	ori	r22, 0x02	; 2
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     90c:	08 95       	ret

0000090e <power_down>:
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     914:	68 2f       	mov	r22, r24
     916:	6d 7f       	andi	r22, 0xFD	; 253
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     91e:	08 95       	ret

00000920 <rx_mode>:
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     926:	68 2f       	mov	r22, r24
     928:	61 60       	ori	r22, 0x01	; 1
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     930:	08 95       	ret

00000932 <tx_mode>:
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     938:	68 2f       	mov	r22, r24
     93a:	6e 7f       	andi	r22, 0xFE	; 254
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     942:	08 95       	ret

00000944 <enable_auto_ack>:
     944:	cf 93       	push	r28
     946:	c8 2f       	mov	r28, r24
     948:	66 23       	and	r22, r22
     94a:	79 f0       	breq	.+30     	; 0x96a <enable_auto_ack+0x26>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	02 c0       	rjmp	.+4      	; 0x95c <enable_auto_ack+0x18>
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	ca 95       	dec	r28
     95e:	e2 f7       	brpl	.-8      	; 0x958 <enable_auto_ack+0x14>
     960:	68 2b       	or	r22, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     968:	0f c0       	rjmp	.+30     	; 0x988 <enable_auto_ack+0x44>
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <enable_auto_ack+0x36>
     976:	66 0f       	add	r22, r22
     978:	77 1f       	adc	r23, r23
     97a:	ca 95       	dec	r28
     97c:	e2 f7       	brpl	.-8      	; 0x976 <enable_auto_ack+0x32>
     97e:	60 95       	com	r22
     980:	68 23       	and	r22, r24
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <enable_rx_on_pipe>:
     98c:	cf 93       	push	r28
     98e:	c8 2f       	mov	r28, r24
     990:	66 23       	and	r22, r22
     992:	79 f0       	breq	.+30     	; 0x9b2 <enable_rx_on_pipe+0x26>
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <enable_rx_on_pipe+0x18>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	ca 95       	dec	r28
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <enable_rx_on_pipe+0x14>
     9a8:	68 2b       	or	r22, r24
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     9b0:	0f c0       	rjmp	.+30     	; 0x9d0 <enable_rx_on_pipe+0x44>
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     9b8:	61 e0       	ldi	r22, 0x01	; 1
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <enable_rx_on_pipe+0x36>
     9be:	66 0f       	add	r22, r22
     9c0:	77 1f       	adc	r23, r23
     9c2:	ca 95       	dec	r28
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <enable_rx_on_pipe+0x32>
     9c6:	60 95       	com	r22
     9c8:	68 23       	and	r22, r24
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <set_auto_retransmission_count>:
     9d4:	cf 93       	push	r28
     9d6:	c8 2f       	mov	r28, r24
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     9de:	80 7f       	andi	r24, 0xF0	; 240
     9e0:	68 2f       	mov	r22, r24
     9e2:	6c 2b       	or	r22, r28
     9e4:	84 e0       	ldi	r24, 0x04	; 4
     9e6:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <set_auto_retransmission_delay>:
     9ee:	cf 93       	push	r28
     9f0:	c8 2f       	mov	r28, r24
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     9f8:	8f 70       	andi	r24, 0x0F	; 15
     9fa:	90 e1       	ldi	r25, 0x10	; 16
     9fc:	c9 9f       	mul	r28, r25
     9fe:	90 01       	movw	r18, r0
     a00:	11 24       	eor	r1, r1
     a02:	68 2f       	mov	r22, r24
     a04:	62 2b       	or	r22, r18
     a06:	84 e0       	ldi	r24, 0x04	; 4
     a08:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <set_DataRate>:
     a10:	cf 93       	push	r28
     a12:	c8 2f       	mov	r28, r24
     a14:	86 e0       	ldi	r24, 0x06	; 6
     a16:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     a1a:	87 7d       	andi	r24, 0xD7	; 215
     a1c:	68 2f       	mov	r22, r24
     a1e:	6c 2b       	or	r22, r28
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <get_data_ready_flag>:
     a2a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <get_status>
     a2e:	00 24       	eor	r0, r0
     a30:	88 0f       	add	r24, r24
     a32:	99 1f       	adc	r25, r25
     a34:	00 1c       	adc	r0, r0
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	00 1c       	adc	r0, r0
     a3c:	89 2f       	mov	r24, r25
     a3e:	90 2d       	mov	r25, r0
     a40:	81 70       	andi	r24, 0x01	; 1
     a42:	08 95       	ret

00000a44 <clear_data_ready_flag>:
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	1f 92       	push	r1
     a4a:	cd b7       	in	r28, 0x3d	; 61
     a4c:	de b7       	in	r29, 0x3e	; 62
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	be 01       	movw	r22, r28
     a58:	6f 5f       	subi	r22, 0xFF	; 255
     a5a:	7f 4f       	sbci	r23, 0xFF	; 255
     a5c:	87 e0       	ldi	r24, 0x07	; 7
     a5e:	0e 94 be 03 	call	0x77c	; 0x77c <write_register_buffer>
     a62:	0f 90       	pop	r0
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <get_rx_payload_pipe>:
     a6a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <get_status>
     a6e:	8e 70       	andi	r24, 0x0E	; 14
     a70:	99 27       	eor	r25, r25
     a72:	95 95       	asr	r25
     a74:	87 95       	ror	r24
     a76:	08 95       	ret

00000a78 <set_RX_pipe_address>:
     a78:	2f 92       	push	r2
     a7a:	3f 92       	push	r3
     a7c:	4f 92       	push	r4
     a7e:	5f 92       	push	r5
     a80:	6f 92       	push	r6
     a82:	7f 92       	push	r7
     a84:	8f 92       	push	r8
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	25 97       	sbiw	r28, 0x05	; 5
     aa2:	cd bf       	out	0x3d, r28	; 61
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	48 2e       	mov	r4, r24
     aa8:	b0 2e       	mov	r11, r16
     aaa:	a2 2e       	mov	r10, r18
     aac:	93 2e       	mov	r9, r19
     aae:	84 2e       	mov	r8, r20
     ab0:	75 2e       	mov	r7, r21
     ab2:	66 2e       	mov	r6, r22
     ab4:	57 2e       	mov	r5, r23
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	84 15       	cp	r24, r4
     aba:	68 f4       	brcc	.+26     	; 0xad6 <set_RX_pipe_address+0x5e>
     abc:	21 e0       	ldi	r18, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e ef       	ldi	r24, 0xFE	; 254
     ac2:	84 0d       	add	r24, r4
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	08 f0       	brcs	.+2      	; 0xaca <set_RX_pipe_address+0x52>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	c2 2e       	mov	r12, r18
     acc:	d9 2e       	mov	r13, r25
     ace:	1c 14       	cp	r1, r12
     ad0:	1d 04       	cpc	r1, r13
     ad2:	34 f0       	brlt	.+12     	; 0xae0 <set_RX_pipe_address+0x68>
     ad4:	21 c0       	rjmp	.+66     	; 0xb18 <set_RX_pipe_address+0xa0>
     ad6:	0f 2e       	mov	r0, r31
     ad8:	f5 e0       	ldi	r31, 0x05	; 5
     ada:	cf 2e       	mov	r12, r31
     adc:	d1 2c       	mov	r13, r1
     ade:	f0 2d       	mov	r31, r0
     ae0:	de 01       	movw	r26, r28
     ae2:	11 96       	adiw	r26, 0x01	; 1
     ae4:	7d 01       	movw	r14, r26
     ae6:	21 2c       	mov	r2, r1
     ae8:	31 2c       	mov	r3, r1
     aea:	e0 e0       	ldi	r30, 0x00	; 0
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	2b 2d       	mov	r18, r11
     af0:	31 2f       	mov	r19, r17
     af2:	4a 2d       	mov	r20, r10
     af4:	59 2d       	mov	r21, r9
     af6:	68 2d       	mov	r22, r8
     af8:	77 2d       	mov	r23, r7
     afa:	86 2d       	mov	r24, r6
     afc:	95 2d       	mov	r25, r5
     afe:	02 2d       	mov	r16, r2
     b00:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__lshrdi3>
     b04:	d7 01       	movw	r26, r14
     b06:	2d 93       	st	X+, r18
     b08:	7d 01       	movw	r14, r26
     b0a:	31 96       	adiw	r30, 0x01	; 1
     b0c:	b8 e0       	ldi	r27, 0x08	; 8
     b0e:	2b 0e       	add	r2, r27
     b10:	31 1c       	adc	r3, r1
     b12:	ec 15       	cp	r30, r12
     b14:	fd 05       	cpc	r31, r13
     b16:	5c f3       	brlt	.-42     	; 0xaee <set_RX_pipe_address+0x76>
     b18:	a6 01       	movw	r20, r12
     b1a:	be 01       	movw	r22, r28
     b1c:	6f 5f       	subi	r22, 0xFF	; 255
     b1e:	7f 4f       	sbci	r23, 0xFF	; 255
     b20:	8a e0       	ldi	r24, 0x0A	; 10
     b22:	84 0d       	add	r24, r4
     b24:	0e 94 be 03 	call	0x77c	; 0x77c <write_register_buffer>
     b28:	25 96       	adiw	r28, 0x05	; 5
     b2a:	cd bf       	out	0x3d, r28	; 61
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	6f 90       	pop	r6
     b4a:	5f 90       	pop	r5
     b4c:	4f 90       	pop	r4
     b4e:	3f 90       	pop	r3
     b50:	2f 90       	pop	r2
     b52:	08 95       	ret

00000b54 <get_RX_pipe_width>:
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	1f 92       	push	r1
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	be 01       	movw	r22, r28
     b64:	6f 5f       	subi	r22, 0xFF	; 255
     b66:	7f 4f       	sbci	r23, 0xFF	; 255
     b68:	8f 5e       	subi	r24, 0xEF	; 239
     b6a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <read_register_buffer>
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	8f 73       	andi	r24, 0x3F	; 63
     b72:	0f 90       	pop	r0
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <get_fifo_flag_rx_empty>:
     b7a:	87 e1       	ldi	r24, 0x17	; 23
     b7c:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
     b80:	81 70       	andi	r24, 0x01	; 1
     b82:	08 95       	ret

00000b84 <enable_dynamic_payload_pipe>:

void enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
     b84:	cf 93       	push	r28
     b86:	c8 2f       	mov	r28, r24
    if(sel){
     b88:	66 23       	and	r22, r22
     b8a:	79 f0       	breq	.+30     	; 0xbaa <enable_dynamic_payload_pipe+0x26>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     b8c:	8c e1       	ldi	r24, 0x1C	; 28
     b8e:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp |= (1<<pipe);
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <enable_dynamic_payload_pipe+0x18>
     b98:	66 0f       	add	r22, r22
     b9a:	77 1f       	adc	r23, r23
     b9c:	ca 95       	dec	r28
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <enable_dynamic_payload_pipe+0x14>
     ba0:	68 2b       	or	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);   
     ba2:	8c e1       	ldi	r24, 0x1C	; 28
     ba4:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     ba8:	0f c0       	rjmp	.+30     	; 0xbc8 <enable_dynamic_payload_pipe+0x44>
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     baa:	8c e1       	ldi	r24, 0x1C	; 28
     bac:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp &= ~(1<<pipe);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <enable_dynamic_payload_pipe+0x36>
     bb6:	66 0f       	add	r22, r22
     bb8:	77 1f       	adc	r23, r23
     bba:	ca 95       	dec	r28
     bbc:	e2 f7       	brpl	.-8      	; 0xbb6 <enable_dynamic_payload_pipe+0x32>
     bbe:	60 95       	com	r22
     bc0:	68 23       	and	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);    
     bc2:	8c e1       	ldi	r24, 0x1C	; 28
     bc4:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
    }
   
}
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <enable_dynamic_payload>:



void enable_dynamic_payload(bool sel){
    if(sel){
     bcc:	88 23       	and	r24, r24
     bce:	49 f0       	breq	.+18     	; 0xbe2 <enable_dynamic_payload+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     bd0:	8d e1       	ldi	r24, 0x1D	; 29
     bd2:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DPL;
     bd6:	68 2f       	mov	r22, r24
     bd8:	64 60       	ori	r22, 0x04	; 4
        write_register(_NRF24L01P_REG_FEATURE,temp);     
     bda:	8d e1       	ldi	r24, 0x1D	; 29
     bdc:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     be0:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     be2:	8d e1       	ldi	r24, 0x1D	; 29
     be4:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
     be8:	68 2f       	mov	r22, r24
     bea:	6b 7f       	andi	r22, 0xFB	; 251
        write_register(_NRF24L01P_REG_FEATURE,temp);
     bec:	8d e1       	ldi	r24, 0x1D	; 29
     bee:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     bf2:	08 95       	ret

00000bf4 <enable_payload_with_ack>:
}



void enable_payload_with_ack(bool sel){
    if(sel){
     bf4:	88 23       	and	r24, r24
     bf6:	49 f0       	breq	.+18     	; 0xc0a <enable_payload_with_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     bf8:	8d e1       	ldi	r24, 0x1D	; 29
     bfa:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
     bfe:	68 2f       	mov	r22, r24
     c00:	62 60       	ori	r22, 0x02	; 2
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     c02:	8d e1       	ldi	r24, 0x1D	; 29
     c04:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     c08:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c0a:	8d e1       	ldi	r24, 0x1D	; 29
     c0c:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
     c10:	68 2f       	mov	r22, r24
     c12:	6d 7f       	andi	r22, 0xFD	; 253
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     c14:	8d e1       	ldi	r24, 0x1D	; 29
     c16:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     c1a:	08 95       	ret

00000c1c <enable_dynamic_payload_with_no_ack>:
}



void enable_dynamic_payload_with_no_ack(bool sel){
    if(sel){
     c1c:	88 23       	and	r24, r24
     c1e:	49 f0       	breq	.+18     	; 0xc32 <enable_dynamic_payload_with_no_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c20:	8d e1       	ldi	r24, 0x1D	; 29
     c22:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
     c26:	68 2f       	mov	r22, r24
     c28:	61 60       	ori	r22, 0x01	; 1
        write_register(_NRF24L01P_REG_FEATURE,temp);        
     c2a:	8d e1       	ldi	r24, 0x1D	; 29
     c2c:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     c30:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c32:	8d e1       	ldi	r24, 0x1D	; 29
     c34:	0e 94 4b 03 	call	0x696	; 0x696 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
     c38:	68 2f       	mov	r22, r24
     c3a:	6e 7f       	andi	r22, 0xFE	; 254
        write_register(_NRF24L01P_REG_FEATURE,temp);  
     c3c:	8d e1       	ldi	r24, 0x1D	; 29
     c3e:	0e 94 98 03 	call	0x730	; 0x730 <write_register>
     c42:	08 95       	ret

00000c44 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c44:	31 e1       	ldi	r19, 0x11	; 17
     c46:	fc 01       	movw	r30, r24
     c48:	30 83       	st	Z, r19
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	22 e2       	ldi	r18, 0x22	; 34
     c4e:	20 83       	st	Z, r18
     c50:	31 97       	sbiw	r30, 0x01	; 1
     c52:	a3 e3       	ldi	r26, 0x33	; 51
     c54:	a0 83       	st	Z, r26
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	60 83       	st	Z, r22
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	70 83       	st	Z, r23
     c5e:	31 97       	sbiw	r30, 0x01	; 1
     c60:	10 82       	st	Z, r1
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	10 82       	st	Z, r1
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	60 e8       	ldi	r22, 0x80	; 128
     c6a:	60 83       	st	Z, r22
     c6c:	31 97       	sbiw	r30, 0x01	; 1
     c6e:	10 82       	st	Z, r1
     c70:	31 97       	sbiw	r30, 0x01	; 1
     c72:	62 e0       	ldi	r22, 0x02	; 2
     c74:	60 83       	st	Z, r22
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	63 e0       	ldi	r22, 0x03	; 3
     c7a:	60 83       	st	Z, r22
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	64 e0       	ldi	r22, 0x04	; 4
     c80:	60 83       	st	Z, r22
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	65 e0       	ldi	r22, 0x05	; 5
     c86:	60 83       	st	Z, r22
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	66 e0       	ldi	r22, 0x06	; 6
     c8c:	60 83       	st	Z, r22
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	67 e0       	ldi	r22, 0x07	; 7
     c92:	60 83       	st	Z, r22
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	68 e0       	ldi	r22, 0x08	; 8
     c98:	60 83       	st	Z, r22
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	69 e0       	ldi	r22, 0x09	; 9
     c9e:	60 83       	st	Z, r22
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	60 e1       	ldi	r22, 0x10	; 16
     ca4:	60 83       	st	Z, r22
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	30 83       	st	Z, r19
     caa:	31 97       	sbiw	r30, 0x01	; 1
     cac:	32 e1       	ldi	r19, 0x12	; 18
     cae:	30 83       	st	Z, r19
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	33 e1       	ldi	r19, 0x13	; 19
     cb4:	30 83       	st	Z, r19
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	34 e1       	ldi	r19, 0x14	; 20
     cba:	30 83       	st	Z, r19
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	35 e1       	ldi	r19, 0x15	; 21
     cc0:	30 83       	st	Z, r19
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	36 e1       	ldi	r19, 0x16	; 22
     cc6:	30 83       	st	Z, r19
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	37 e1       	ldi	r19, 0x17	; 23
     ccc:	30 83       	st	Z, r19
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	38 e1       	ldi	r19, 0x18	; 24
     cd2:	30 83       	st	Z, r19
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	39 e1       	ldi	r19, 0x19	; 25
     cd8:	30 83       	st	Z, r19
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	30 e2       	ldi	r19, 0x20	; 32
     cde:	30 83       	st	Z, r19
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	31 e2       	ldi	r19, 0x21	; 33
     ce4:	30 83       	st	Z, r19
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	20 83       	st	Z, r18
     cea:	31 97       	sbiw	r30, 0x01	; 1
     cec:	23 e2       	ldi	r18, 0x23	; 35
     cee:	20 83       	st	Z, r18
     cf0:	31 97       	sbiw	r30, 0x01	; 1
     cf2:	40 83       	st	Z, r20
     cf4:	31 97       	sbiw	r30, 0x01	; 1
     cf6:	50 83       	st	Z, r21
     cf8:	31 97       	sbiw	r30, 0x01	; 1
     cfa:	26 e2       	ldi	r18, 0x26	; 38
     cfc:	20 83       	st	Z, r18
     cfe:	31 97       	sbiw	r30, 0x01	; 1
     d00:	27 e2       	ldi	r18, 0x27	; 39
     d02:	20 83       	st	Z, r18
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	28 e2       	ldi	r18, 0x28	; 40
     d08:	20 83       	st	Z, r18
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	29 e2       	ldi	r18, 0x29	; 41
     d0e:	20 83       	st	Z, r18
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	20 e3       	ldi	r18, 0x30	; 48
     d14:	20 83       	st	Z, r18
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	21 e3       	ldi	r18, 0x31	; 49
     d1a:	20 83       	st	Z, r18
     d1c:	87 97       	sbiw	r24, 0x27	; 39
     d1e:	08 95       	ret

00000d20 <xPortStartScheduler>:
     d20:	65 e0       	ldi	r22, 0x05	; 5
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	98 e0       	ldi	r25, 0x08	; 8
     d26:	0e 94 4b 12 	call	0x2496	; 0x2496 <TC0_ConfigClockSource>
     d2a:	83 ef       	ldi	r24, 0xF3	; 243
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d32:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	98 e0       	ldi	r25, 0x08	; 8
     d3c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TC0_SetOverflowIntLevel>
     d40:	e0 ea       	ldi	r30, 0xA0	; 160
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	82 83       	std	Z+2, r24	; 0x02
     d4a:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     d4e:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     d52:	cd 91       	ld	r28, X+
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	dd 91       	ld	r29, X+
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	ff 91       	pop	r31
     d5c:	ef 91       	pop	r30
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	bf 91       	pop	r27
     d64:	af 91       	pop	r26
     d66:	9f 91       	pop	r25
     d68:	8f 91       	pop	r24
     d6a:	7f 91       	pop	r23
     d6c:	6f 91       	pop	r22
     d6e:	5f 91       	pop	r21
     d70:	4f 91       	pop	r20
     d72:	3f 91       	pop	r19
     d74:	2f 91       	pop	r18
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	ff 90       	pop	r15
     d7c:	ef 90       	pop	r14
     d7e:	df 90       	pop	r13
     d80:	cf 90       	pop	r12
     d82:	bf 90       	pop	r11
     d84:	af 90       	pop	r10
     d86:	9f 90       	pop	r9
     d88:	8f 90       	pop	r8
     d8a:	7f 90       	pop	r7
     d8c:	6f 90       	pop	r6
     d8e:	5f 90       	pop	r5
     d90:	4f 90       	pop	r4
     d92:	3f 90       	pop	r3
     d94:	2f 90       	pop	r2
     d96:	1f 90       	pop	r1
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	08 95       	ret
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	08 95       	ret

00000da4 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	0f 92       	push	r0
     dac:	1f 92       	push	r1
     dae:	11 24       	eor	r1, r1
     db0:	2f 92       	push	r2
     db2:	3f 92       	push	r3
     db4:	4f 92       	push	r4
     db6:	5f 92       	push	r5
     db8:	6f 92       	push	r6
     dba:	7f 92       	push	r7
     dbc:	8f 92       	push	r8
     dbe:	9f 92       	push	r9
     dc0:	af 92       	push	r10
     dc2:	bf 92       	push	r11
     dc4:	cf 92       	push	r12
     dc6:	df 92       	push	r13
     dc8:	ef 92       	push	r14
     dca:	ff 92       	push	r15
     dcc:	0f 93       	push	r16
     dce:	1f 93       	push	r17
     dd0:	2f 93       	push	r18
     dd2:	3f 93       	push	r19
     dd4:	4f 93       	push	r20
     dd6:	5f 93       	push	r21
     dd8:	6f 93       	push	r22
     dda:	7f 93       	push	r23
     ddc:	8f 93       	push	r24
     dde:	9f 93       	push	r25
     de0:	af 93       	push	r26
     de2:	bf 93       	push	r27
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ef 93       	push	r30
     dea:	ff 93       	push	r31
     dec:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     df0:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     df4:	0d b6       	in	r0, 0x3d	; 61
     df6:	0d 92       	st	X+, r0
     df8:	0e b6       	in	r0, 0x3e	; 62
     dfa:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     dfc:	0e 94 33 0b 	call	0x1666	; 0x1666 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e00:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     e04:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     e08:	cd 91       	ld	r28, X+
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	dd 91       	ld	r29, X+
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	ff 90       	pop	r15
     e32:	ef 90       	pop	r14
     e34:	df 90       	pop	r13
     e36:	cf 90       	pop	r12
     e38:	bf 90       	pop	r11
     e3a:	af 90       	pop	r10
     e3c:	9f 90       	pop	r9
     e3e:	8f 90       	pop	r8
     e40:	7f 90       	pop	r7
     e42:	6f 90       	pop	r6
     e44:	5f 90       	pop	r5
     e46:	4f 90       	pop	r4
     e48:	3f 90       	pop	r3
     e4a:	2f 90       	pop	r2
     e4c:	1f 90       	pop	r1
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e54:	08 95       	ret

00000e56 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	0f 92       	push	r0
     e5e:	1f 92       	push	r1
     e60:	11 24       	eor	r1, r1
     e62:	2f 92       	push	r2
     e64:	3f 92       	push	r3
     e66:	4f 92       	push	r4
     e68:	5f 92       	push	r5
     e6a:	6f 92       	push	r6
     e6c:	7f 92       	push	r7
     e6e:	8f 92       	push	r8
     e70:	9f 92       	push	r9
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	6f 93       	push	r22
     e8c:	7f 93       	push	r23
     e8e:	8f 93       	push	r24
     e90:	9f 93       	push	r25
     e92:	af 93       	push	r26
     e94:	bf 93       	push	r27
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ef 93       	push	r30
     e9c:	ff 93       	push	r31
     e9e:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     ea2:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     ea6:	0d b6       	in	r0, 0x3d	; 61
     ea8:	0d 92       	st	X+, r0
     eaa:	0e b6       	in	r0, 0x3e	; 62
     eac:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     eae:	0e 94 bb 09 	call	0x1376	; 0x1376 <xTaskIncrementTick>
     eb2:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     eb4:	0e 94 33 0b 	call	0x1666	; 0x1666 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     eb8:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     ebc:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     ec0:	cd 91       	ld	r28, X+
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	dd 91       	ld	r29, X+
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	7f 90       	pop	r7
     efa:	6f 90       	pop	r6
     efc:	5f 90       	pop	r5
     efe:	4f 90       	pop	r4
     f00:	3f 90       	pop	r3
     f02:	2f 90       	pop	r2
     f04:	1f 90       	pop	r1
     f06:	0f 90       	pop	r0
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f0c:	08 95       	ret

00000f0e <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
     f0e:	0e 94 2b 07 	call	0xe56	; 0xe56 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f12:	18 95       	reti

00000f14 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f1a:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     f1e:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <pucAlignedHeap.3808>
     f22:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <pucAlignedHeap.3808+0x1>
     f26:	89 2b       	or	r24, r25
     f28:	31 f4       	brne	.+12     	; 0xf36 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     f2a:	8d e2       	ldi	r24, 0x2D	; 45
     f2c:	93 e2       	ldi	r25, 0x23	; 35
     f2e:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <pucAlignedHeap.3808>
     f32:	90 93 29 23 	sts	0x2329, r25	; 0x802329 <pucAlignedHeap.3808+0x1>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     f36:	20 91 2a 23 	lds	r18, 0x232A	; 0x80232a <xNextFreeByte>
     f3a:	30 91 2b 23 	lds	r19, 0x232B	; 0x80232b <xNextFreeByte+0x1>
     f3e:	ce 01       	movw	r24, r28
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	4f e6       	ldi	r20, 0x6F	; 111
     f48:	94 07       	cpc	r25, r20
     f4a:	70 f4       	brcc	.+28     	; 0xf68 <pvPortMalloc+0x54>
     f4c:	28 17       	cp	r18, r24
     f4e:	39 07       	cpc	r19, r25
     f50:	70 f4       	brcc	.+28     	; 0xf6e <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     f52:	c0 91 28 23 	lds	r28, 0x2328	; 0x802328 <pucAlignedHeap.3808>
     f56:	d0 91 29 23 	lds	r29, 0x2329	; 0x802329 <pucAlignedHeap.3808+0x1>
     f5a:	c2 0f       	add	r28, r18
     f5c:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     f5e:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <xNextFreeByte>
     f62:	90 93 2b 23 	sts	0x232B, r25	; 0x80232b <xNextFreeByte+0x1>
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     f68:	c0 e0       	ldi	r28, 0x00	; 0
     f6a:	d0 e0       	ldi	r29, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <pvPortMalloc+0x5e>
     f6e:	c0 e0       	ldi	r28, 0x00	; 0
     f70:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f72:	0e 94 91 0a 	call	0x1522	; 0x1522 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     f76:	ce 01       	movw	r24, r28
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f7e:	08 95       	ret

00000f80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f80:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f82:	03 96       	adiw	r24, 0x03	; 3
     f84:	81 83       	std	Z+1, r24	; 0x01
     f86:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f88:	2f ef       	ldi	r18, 0xFF	; 255
     f8a:	3f ef       	ldi	r19, 0xFF	; 255
     f8c:	23 83       	std	Z+3, r18	; 0x03
     f8e:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f90:	85 83       	std	Z+5, r24	; 0x05
     f92:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f94:	87 83       	std	Z+7, r24	; 0x07
     f96:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f98:	10 82       	st	Z, r1
     f9a:	08 95       	ret

00000f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f9c:	fc 01       	movw	r30, r24
     f9e:	10 86       	std	Z+8, r1	; 0x08
     fa0:	11 86       	std	Z+9, r1	; 0x09
     fa2:	08 95       	ret

00000fa4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	9c 01       	movw	r18, r24
     faa:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     fac:	dc 01       	movw	r26, r24
     fae:	11 96       	adiw	r26, 0x01	; 1
     fb0:	cd 91       	ld	r28, X+
     fb2:	dc 91       	ld	r29, X
     fb4:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fb6:	c2 83       	std	Z+2, r28	; 0x02
     fb8:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	84 83       	std	Z+4, r24	; 0x04
     fc0:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	9d 81       	ldd	r25, Y+5	; 0x05
     fc6:	dc 01       	movw	r26, r24
     fc8:	12 96       	adiw	r26, 0x02	; 2
     fca:	6d 93       	st	X+, r22
     fcc:	7c 93       	st	X, r23
     fce:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     fd0:	6c 83       	std	Y+4, r22	; 0x04
     fd2:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     fd4:	20 87       	std	Z+8, r18	; 0x08
     fd6:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     fd8:	f9 01       	movw	r30, r18
     fda:	80 81       	ld	r24, Z
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 83       	st	Z, r24
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     fec:	48 81       	ld	r20, Y
     fee:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ff0:	4f 3f       	cpi	r20, 0xFF	; 255
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	52 07       	cpc	r21, r18
     ff6:	21 f4       	brne	.+8      	; 0x1000 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ff8:	fc 01       	movw	r30, r24
     ffa:	a7 81       	ldd	r26, Z+7	; 0x07
     ffc:	b0 85       	ldd	r27, Z+8	; 0x08
     ffe:	0d c0       	rjmp	.+26     	; 0x101a <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1000:	dc 01       	movw	r26, r24
    1002:	13 96       	adiw	r26, 0x03	; 3
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <vListInsert+0x22>
    1006:	df 01       	movw	r26, r30
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	ed 91       	ld	r30, X+
    100c:	fc 91       	ld	r31, X
    100e:	13 97       	sbiw	r26, 0x03	; 3
    1010:	20 81       	ld	r18, Z
    1012:	31 81       	ldd	r19, Z+1	; 0x01
    1014:	42 17       	cp	r20, r18
    1016:	53 07       	cpc	r21, r19
    1018:	b0 f7       	brcc	.-20     	; 0x1006 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	ea 83       	std	Y+2, r30	; 0x02
    1024:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1026:	c4 83       	std	Z+4, r28	; 0x04
    1028:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    102a:	ac 83       	std	Y+4, r26	; 0x04
    102c:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	cd 93       	st	X+, r28
    1032:	dc 93       	st	X, r29
    1034:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1036:	88 87       	std	Y+8, r24	; 0x08
    1038:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    103a:	fc 01       	movw	r30, r24
    103c:	20 81       	ld	r18, Z
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	20 83       	st	Z, r18
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    104e:	a0 85       	ldd	r26, Z+8	; 0x08
    1050:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1052:	c2 81       	ldd	r28, Z+2	; 0x02
    1054:	d3 81       	ldd	r29, Z+3	; 0x03
    1056:	84 81       	ldd	r24, Z+4	; 0x04
    1058:	95 81       	ldd	r25, Z+5	; 0x05
    105a:	8c 83       	std	Y+4, r24	; 0x04
    105c:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    105e:	c4 81       	ldd	r28, Z+4	; 0x04
    1060:	d5 81       	ldd	r29, Z+5	; 0x05
    1062:	82 81       	ldd	r24, Z+2	; 0x02
    1064:	93 81       	ldd	r25, Z+3	; 0x03
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	cd 91       	ld	r28, X+
    106e:	dc 91       	ld	r29, X
    1070:	12 97       	sbiw	r26, 0x02	; 2
    1072:	ce 17       	cp	r28, r30
    1074:	df 07       	cpc	r29, r31
    1076:	31 f4       	brne	.+12     	; 0x1084 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	8d 93       	st	X+, r24
    1080:	9c 93       	st	X, r25
    1082:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1084:	10 86       	std	Z+8, r1	; 0x08
    1086:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1088:	8c 91       	ld	r24, X
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	08 95       	ret

00001094 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1094:	ff cf       	rjmp	.-2      	; 0x1094 <prvIdleTask>

00001096 <prvAddCurrentTaskToDelayedList>:
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    10a0:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10a4:	82 83       	std	Z+2, r24	; 0x02
    10a6:	93 83       	std	Z+3, r25	; 0x03
    10a8:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    10ac:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    10b0:	c8 17       	cp	r28, r24
    10b2:	d9 07       	cpc	r29, r25
    10b4:	68 f4       	brcc	.+26     	; 0x10d0 <prvAddCurrentTaskToDelayedList+0x3a>
    10b6:	60 91 79 93 	lds	r22, 0x9379	; 0x809379 <pxCurrentTCB>
    10ba:	70 91 7a 93 	lds	r23, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10be:	80 91 3f 93 	lds	r24, 0x933F	; 0x80933f <pxOverflowDelayedTaskList>
    10c2:	90 91 40 93 	lds	r25, 0x9340	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    10c6:	6e 5f       	subi	r22, 0xFE	; 254
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsert>
    10ce:	17 c0       	rjmp	.+46     	; 0x10fe <prvAddCurrentTaskToDelayedList+0x68>
    10d0:	60 91 79 93 	lds	r22, 0x9379	; 0x809379 <pxCurrentTCB>
    10d4:	70 91 7a 93 	lds	r23, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10d8:	80 91 41 93 	lds	r24, 0x9341	; 0x809341 <pxDelayedTaskList>
    10dc:	90 91 42 93 	lds	r25, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    10e0:	6e 5f       	subi	r22, 0xFE	; 254
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <vListInsert>
    10e8:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <xNextTaskUnblockTime>
    10ec:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <xNextTaskUnblockTime+0x1>
    10f0:	c8 17       	cp	r28, r24
    10f2:	d9 07       	cpc	r29, r25
    10f4:	20 f4       	brcc	.+8      	; 0x10fe <prvAddCurrentTaskToDelayedList+0x68>
    10f6:	c0 93 92 22 	sts	0x2292, r28	; 0x802292 <xNextTaskUnblockTime>
    10fa:	d0 93 93 22 	sts	0x2293, r29	; 0x802293 <xNextTaskUnblockTime+0x1>
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	08 95       	ret

00001104 <xTaskGenericCreate>:
    1104:	4f 92       	push	r4
    1106:	5f 92       	push	r5
    1108:	6f 92       	push	r6
    110a:	7f 92       	push	r7
    110c:	8f 92       	push	r8
    110e:	9f 92       	push	r9
    1110:	af 92       	push	r10
    1112:	bf 92       	push	r11
    1114:	cf 92       	push	r12
    1116:	df 92       	push	r13
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	4c 01       	movw	r8, r24
    1126:	eb 01       	movw	r28, r22
    1128:	5a 01       	movw	r10, r20
    112a:	29 01       	movw	r4, r18
    112c:	81 e2       	ldi	r24, 0x21	; 33
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 8a 07 	call	0xf14	; 0xf14 <pvPortMalloc>
    1134:	3c 01       	movw	r6, r24
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	09 f4       	brne	.+2      	; 0x113c <xTaskGenericCreate+0x38>
    113a:	da c0       	rjmp	.+436    	; 0x12f0 <xTaskGenericCreate+0x1ec>
    113c:	c1 14       	cp	r12, r1
    113e:	d1 04       	cpc	r13, r1
    1140:	09 f0       	breq	.+2      	; 0x1144 <xTaskGenericCreate+0x40>
    1142:	d2 c0       	rjmp	.+420    	; 0x12e8 <xTaskGenericCreate+0x1e4>
    1144:	c5 01       	movw	r24, r10
    1146:	0e 94 8a 07 	call	0xf14	; 0xf14 <pvPortMalloc>
    114a:	f3 01       	movw	r30, r6
    114c:	87 8b       	std	Z+23, r24	; 0x17
    114e:	90 8f       	std	Z+24, r25	; 0x18
    1150:	89 2b       	or	r24, r25
    1152:	21 f4       	brne	.+8      	; 0x115c <xTaskGenericCreate+0x58>
    1154:	c3 01       	movw	r24, r6
    1156:	0e 94 bf 07 	call	0xf7e	; 0xf7e <vPortFree>
    115a:	ca c0       	rjmp	.+404    	; 0x12f0 <xTaskGenericCreate+0x1ec>
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	af 1a       	sub	r10, r31
    1160:	b1 08       	sbc	r11, r1
    1162:	f3 01       	movw	r30, r6
    1164:	87 89       	ldd	r24, Z+23	; 0x17
    1166:	90 8d       	ldd	r25, Z+24	; 0x18
    1168:	a8 0e       	add	r10, r24
    116a:	b9 1e       	adc	r11, r25
    116c:	88 81       	ld	r24, Y
    116e:	81 8f       	std	Z+25, r24	; 0x19
    1170:	88 81       	ld	r24, Y
    1172:	88 23       	and	r24, r24
    1174:	81 f0       	breq	.+32     	; 0x1196 <xTaskGenericCreate+0x92>
    1176:	d3 01       	movw	r26, r6
    1178:	5a 96       	adiw	r26, 0x1a	; 26
    117a:	fe 01       	movw	r30, r28
    117c:	31 96       	adiw	r30, 0x01	; 1
    117e:	9e 01       	movw	r18, r28
    1180:	28 5f       	subi	r18, 0xF8	; 248
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	ef 01       	movw	r28, r30
    1186:	81 91       	ld	r24, Z+
    1188:	8d 93       	st	X+, r24
    118a:	88 81       	ld	r24, Y
    118c:	88 23       	and	r24, r24
    118e:	19 f0       	breq	.+6      	; 0x1196 <xTaskGenericCreate+0x92>
    1190:	e2 17       	cp	r30, r18
    1192:	f3 07       	cpc	r31, r19
    1194:	b9 f7       	brne	.-18     	; 0x1184 <xTaskGenericCreate+0x80>
    1196:	f3 01       	movw	r30, r6
    1198:	10 a2       	std	Z+32, r1	; 0x20
    119a:	10 2f       	mov	r17, r16
    119c:	04 30       	cpi	r16, 0x04	; 4
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <xTaskGenericCreate+0x9e>
    11a0:	13 e0       	ldi	r17, 0x03	; 3
    11a2:	f3 01       	movw	r30, r6
    11a4:	16 8b       	std	Z+22, r17	; 0x16
    11a6:	e3 01       	movw	r28, r6
    11a8:	22 96       	adiw	r28, 0x02	; 2
    11aa:	ce 01       	movw	r24, r28
    11ac:	0e 94 ce 07 	call	0xf9c	; 0xf9c <vListInitialiseItem>
    11b0:	c3 01       	movw	r24, r6
    11b2:	0c 96       	adiw	r24, 0x0c	; 12
    11b4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <vListInitialiseItem>
    11b8:	f3 01       	movw	r30, r6
    11ba:	60 86       	std	Z+8, r6	; 0x08
    11bc:	71 86       	std	Z+9, r7	; 0x09
    11be:	84 e0       	ldi	r24, 0x04	; 4
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	81 1b       	sub	r24, r17
    11c4:	91 09       	sbc	r25, r1
    11c6:	84 87       	std	Z+12, r24	; 0x0c
    11c8:	95 87       	std	Z+13, r25	; 0x0d
    11ca:	62 8a       	std	Z+18, r6	; 0x12
    11cc:	73 8a       	std	Z+19, r7	; 0x13
    11ce:	a2 01       	movw	r20, r4
    11d0:	b4 01       	movw	r22, r8
    11d2:	c5 01       	movw	r24, r10
    11d4:	0e 94 22 06 	call	0xc44	; 0xc44 <pxPortInitialiseStack>
    11d8:	f3 01       	movw	r30, r6
    11da:	80 83       	st	Z, r24
    11dc:	91 83       	std	Z+1, r25	; 0x01
    11de:	e1 14       	cp	r14, r1
    11e0:	f1 04       	cpc	r15, r1
    11e2:	19 f0       	breq	.+6      	; 0x11ea <xTaskGenericCreate+0xe6>
    11e4:	f7 01       	movw	r30, r14
    11e6:	60 82       	st	Z, r6
    11e8:	71 82       	std	Z+1, r7	; 0x01
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	0f 92       	push	r0
    11f0:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    11f4:	8f 5f       	subi	r24, 0xFF	; 255
    11f6:	80 93 35 93 	sts	0x9335, r24	; 0x809335 <uxCurrentNumberOfTasks>
    11fa:	80 91 79 93 	lds	r24, 0x9379	; 0x809379 <pxCurrentTCB>
    11fe:	90 91 7a 93 	lds	r25, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    1202:	89 2b       	or	r24, r25
    1204:	89 f5       	brne	.+98     	; 0x1268 <xTaskGenericCreate+0x164>
    1206:	60 92 79 93 	sts	0x9379, r6	; 0x809379 <pxCurrentTCB>
    120a:	70 92 7a 93 	sts	0x937A, r7	; 0x80937a <pxCurrentTCB+0x1>
    120e:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	c1 f5       	brne	.+112    	; 0x1286 <xTaskGenericCreate+0x182>
    1216:	85 e5       	ldi	r24, 0x55	; 85
    1218:	93 e9       	ldi	r25, 0x93	; 147
    121a:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    121e:	8e e5       	ldi	r24, 0x5E	; 94
    1220:	93 e9       	ldi	r25, 0x93	; 147
    1222:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    1226:	87 e6       	ldi	r24, 0x67	; 103
    1228:	93 e9       	ldi	r25, 0x93	; 147
    122a:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    122e:	80 e7       	ldi	r24, 0x70	; 112
    1230:	93 e9       	ldi	r25, 0x93	; 147
    1232:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    1236:	8c e4       	ldi	r24, 0x4C	; 76
    1238:	93 e9       	ldi	r25, 0x93	; 147
    123a:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    123e:	83 e4       	ldi	r24, 0x43	; 67
    1240:	93 e9       	ldi	r25, 0x93	; 147
    1242:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    1246:	86 e3       	ldi	r24, 0x36	; 54
    1248:	93 e9       	ldi	r25, 0x93	; 147
    124a:	0e 94 c0 07 	call	0xf80	; 0xf80 <vListInitialise>
    124e:	8c e4       	ldi	r24, 0x4C	; 76
    1250:	93 e9       	ldi	r25, 0x93	; 147
    1252:	80 93 41 93 	sts	0x9341, r24	; 0x809341 <pxDelayedTaskList>
    1256:	90 93 42 93 	sts	0x9342, r25	; 0x809342 <pxDelayedTaskList+0x1>
    125a:	83 e4       	ldi	r24, 0x43	; 67
    125c:	93 e9       	ldi	r25, 0x93	; 147
    125e:	80 93 3f 93 	sts	0x933F, r24	; 0x80933f <pxOverflowDelayedTaskList>
    1262:	90 93 40 93 	sts	0x9340, r25	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <xTaskGenericCreate+0x182>
    1268:	80 91 31 93 	lds	r24, 0x9331	; 0x809331 <xSchedulerRunning>
    126c:	81 11       	cpse	r24, r1
    126e:	0b c0       	rjmp	.+22     	; 0x1286 <xTaskGenericCreate+0x182>
    1270:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    1274:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    1278:	86 89       	ldd	r24, Z+22	; 0x16
    127a:	08 17       	cp	r16, r24
    127c:	20 f0       	brcs	.+8      	; 0x1286 <xTaskGenericCreate+0x182>
    127e:	60 92 79 93 	sts	0x9379, r6	; 0x809379 <pxCurrentTCB>
    1282:	70 92 7a 93 	sts	0x937A, r7	; 0x80937a <pxCurrentTCB+0x1>
    1286:	80 91 2d 93 	lds	r24, 0x932D	; 0x80932d <uxTaskNumber>
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 2d 93 	sts	0x932D, r24	; 0x80932d <uxTaskNumber>
    1290:	f3 01       	movw	r30, r6
    1292:	86 89       	ldd	r24, Z+22	; 0x16
    1294:	90 91 32 93 	lds	r25, 0x9332	; 0x809332 <uxTopReadyPriority>
    1298:	98 17       	cp	r25, r24
    129a:	10 f4       	brcc	.+4      	; 0x12a0 <xTaskGenericCreate+0x19c>
    129c:	80 93 32 93 	sts	0x9332, r24	; 0x809332 <uxTopReadyPriority>
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 01       	movw	r18, r24
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	82 0f       	add	r24, r18
    12b2:	93 1f       	adc	r25, r19
    12b4:	be 01       	movw	r22, r28
    12b6:	8b 5a       	subi	r24, 0xAB	; 171
    12b8:	9c 46       	sbci	r25, 0x6C	; 108
    12ba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vListInsertEnd>
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	80 91 31 93 	lds	r24, 0x9331	; 0x809331 <xSchedulerRunning>
    12c6:	88 23       	and	r24, r24
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <xTaskGenericCreate+0x1dc>
    12ca:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    12ce:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    12d2:	86 89       	ldd	r24, Z+22	; 0x16
    12d4:	80 17       	cp	r24, r16
    12d6:	30 f4       	brcc	.+12     	; 0x12e4 <xTaskGenericCreate+0x1e0>
    12d8:	0e 94 d2 06 	call	0xda4	; 0xda4 <vPortYield>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	09 c0       	rjmp	.+18     	; 0x12f2 <xTaskGenericCreate+0x1ee>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <xTaskGenericCreate+0x1ee>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	05 c0       	rjmp	.+10     	; 0x12f2 <xTaskGenericCreate+0x1ee>
    12e8:	fc 01       	movw	r30, r24
    12ea:	c7 8a       	std	Z+23, r12	; 0x17
    12ec:	d0 8e       	std	Z+24, r13	; 0x18
    12ee:	36 cf       	rjmp	.-404    	; 0x115c <xTaskGenericCreate+0x58>
    12f0:	8f ef       	ldi	r24, 0xFF	; 255
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	ff 90       	pop	r15
    12fc:	ef 90       	pop	r14
    12fe:	df 90       	pop	r13
    1300:	cf 90       	pop	r12
    1302:	bf 90       	pop	r11
    1304:	af 90       	pop	r10
    1306:	9f 90       	pop	r9
    1308:	8f 90       	pop	r8
    130a:	7f 90       	pop	r7
    130c:	6f 90       	pop	r6
    130e:	5f 90       	pop	r5
    1310:	4f 90       	pop	r4
    1312:	08 95       	ret

00001314 <vTaskStartScheduler>:
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	a1 2c       	mov	r10, r1
    1324:	b1 2c       	mov	r11, r1
    1326:	c1 2c       	mov	r12, r1
    1328:	d1 2c       	mov	r13, r1
    132a:	e1 2c       	mov	r14, r1
    132c:	f1 2c       	mov	r15, r1
    132e:	00 e0       	ldi	r16, 0x00	; 0
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	44 e6       	ldi	r20, 0x64	; 100
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	6c eb       	ldi	r22, 0xBC	; 188
    133a:	72 e2       	ldi	r23, 0x22	; 34
    133c:	8a e4       	ldi	r24, 0x4A	; 74
    133e:	98 e0       	ldi	r25, 0x08	; 8
    1340:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskGenericCreate>
    1344:	81 30       	cpi	r24, 0x01	; 1
    1346:	49 f4       	brne	.+18     	; 0x135a <vTaskStartScheduler+0x46>
    1348:	f8 94       	cli
    134a:	80 93 31 93 	sts	0x9331, r24	; 0x809331 <xSchedulerRunning>
    134e:	10 92 33 93 	sts	0x9333, r1	; 0x809333 <xTickCount>
    1352:	10 92 34 93 	sts	0x9334, r1	; 0x809334 <xTickCount+0x1>
    1356:	0e 94 90 06 	call	0xd20	; 0xd20 <xPortStartScheduler>
    135a:	0f 91       	pop	r16
    135c:	ff 90       	pop	r15
    135e:	ef 90       	pop	r14
    1360:	df 90       	pop	r13
    1362:	cf 90       	pop	r12
    1364:	bf 90       	pop	r11
    1366:	af 90       	pop	r10
    1368:	08 95       	ret

0000136a <vTaskSuspendAll>:
    136a:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 2c 93 	sts	0x932C, r24	; 0x80932c <uxSchedulerSuspended>
    1374:	08 95       	ret

00001376 <xTaskIncrementTick>:
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1388:	81 11       	cpse	r24, r1
    138a:	b6 c0       	rjmp	.+364    	; 0x14f8 <xTaskIncrementTick+0x182>
    138c:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    1390:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	80 93 33 93 	sts	0x9333, r24	; 0x809333 <xTickCount>
    139a:	90 93 34 93 	sts	0x9334, r25	; 0x809334 <xTickCount+0x1>
    139e:	e0 90 33 93 	lds	r14, 0x9333	; 0x809333 <xTickCount>
    13a2:	f0 90 34 93 	lds	r15, 0x9334	; 0x809334 <xTickCount+0x1>
    13a6:	e1 14       	cp	r14, r1
    13a8:	f1 04       	cpc	r15, r1
    13aa:	99 f5       	brne	.+102    	; 0x1412 <xTaskIncrementTick+0x9c>
    13ac:	80 91 41 93 	lds	r24, 0x9341	; 0x809341 <pxDelayedTaskList>
    13b0:	90 91 42 93 	lds	r25, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    13b4:	20 91 3f 93 	lds	r18, 0x933F	; 0x80933f <pxOverflowDelayedTaskList>
    13b8:	30 91 40 93 	lds	r19, 0x9340	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    13bc:	20 93 41 93 	sts	0x9341, r18	; 0x809341 <pxDelayedTaskList>
    13c0:	30 93 42 93 	sts	0x9342, r19	; 0x809342 <pxDelayedTaskList+0x1>
    13c4:	80 93 3f 93 	sts	0x933F, r24	; 0x80933f <pxOverflowDelayedTaskList>
    13c8:	90 93 40 93 	sts	0x9340, r25	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    13cc:	80 91 2e 93 	lds	r24, 0x932E	; 0x80932e <xNumOfOverflows>
    13d0:	8f 5f       	subi	r24, 0xFF	; 255
    13d2:	80 93 2e 93 	sts	0x932E, r24	; 0x80932e <xNumOfOverflows>
    13d6:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    13da:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    13de:	80 81       	ld	r24, Z
    13e0:	81 11       	cpse	r24, r1
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <xTaskIncrementTick+0x7c>
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	9f ef       	ldi	r25, 0xFF	; 255
    13e8:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    13ec:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <xTaskIncrementTick+0x9c>
    13f2:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    13f6:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    13fa:	05 80       	ldd	r0, Z+5	; 0x05
    13fc:	f6 81       	ldd	r31, Z+6	; 0x06
    13fe:	e0 2d       	mov	r30, r0
    1400:	06 80       	ldd	r0, Z+6	; 0x06
    1402:	f7 81       	ldd	r31, Z+7	; 0x07
    1404:	e0 2d       	mov	r30, r0
    1406:	82 81       	ldd	r24, Z+2	; 0x02
    1408:	93 81       	ldd	r25, Z+3	; 0x03
    140a:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    140e:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    1412:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <xNextTaskUnblockTime>
    1416:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <xNextTaskUnblockTime+0x1>
    141a:	e8 16       	cp	r14, r24
    141c:	f9 06       	cpc	r15, r25
    141e:	10 f4       	brcc	.+4      	; 0x1424 <xTaskIncrementTick+0xae>
    1420:	d1 2c       	mov	r13, r1
    1422:	52 c0       	rjmp	.+164    	; 0x14c8 <xTaskIncrementTick+0x152>
    1424:	d1 2c       	mov	r13, r1
    1426:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    142a:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    142e:	90 81       	ld	r25, Z
    1430:	91 11       	cpse	r25, r1
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <xTaskIncrementTick+0xcc>
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	9f ef       	ldi	r25, 0xFF	; 255
    1438:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    143c:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    1440:	43 c0       	rjmp	.+134    	; 0x14c8 <xTaskIncrementTick+0x152>
    1442:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    1446:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    144a:	05 80       	ldd	r0, Z+5	; 0x05
    144c:	f6 81       	ldd	r31, Z+6	; 0x06
    144e:	e0 2d       	mov	r30, r0
    1450:	c6 81       	ldd	r28, Z+6	; 0x06
    1452:	d7 81       	ldd	r29, Z+7	; 0x07
    1454:	2a 81       	ldd	r18, Y+2	; 0x02
    1456:	3b 81       	ldd	r19, Y+3	; 0x03
    1458:	e2 16       	cp	r14, r18
    145a:	f3 06       	cpc	r15, r19
    145c:	28 f4       	brcc	.+10     	; 0x1468 <xTaskIncrementTick+0xf2>
    145e:	20 93 92 22 	sts	0x2292, r18	; 0x802292 <xNextTaskUnblockTime>
    1462:	30 93 93 22 	sts	0x2293, r19	; 0x802293 <xNextTaskUnblockTime+0x1>
    1466:	30 c0       	rjmp	.+96     	; 0x14c8 <xTaskIncrementTick+0x152>
    1468:	8e 01       	movw	r16, r28
    146a:	0e 5f       	subi	r16, 0xFE	; 254
    146c:	1f 4f       	sbci	r17, 0xFF	; 255
    146e:	c8 01       	movw	r24, r16
    1470:	0e 94 24 08 	call	0x1048	; 0x1048 <uxListRemove>
    1474:	8c 89       	ldd	r24, Y+20	; 0x14
    1476:	9d 89       	ldd	r25, Y+21	; 0x15
    1478:	89 2b       	or	r24, r25
    147a:	21 f0       	breq	.+8      	; 0x1484 <xTaskIncrementTick+0x10e>
    147c:	ce 01       	movw	r24, r28
    147e:	0c 96       	adiw	r24, 0x0c	; 12
    1480:	0e 94 24 08 	call	0x1048	; 0x1048 <uxListRemove>
    1484:	2e 89       	ldd	r18, Y+22	; 0x16
    1486:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    148a:	82 17       	cp	r24, r18
    148c:	10 f4       	brcc	.+4      	; 0x1492 <xTaskIncrementTick+0x11c>
    148e:	20 93 32 93 	sts	0x9332, r18	; 0x809332 <uxTopReadyPriority>
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	c9 01       	movw	r24, r18
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	b8 01       	movw	r22, r16
    14a8:	8b 5a       	subi	r24, 0xAB	; 171
    14aa:	9c 46       	sbci	r25, 0x6C	; 108
    14ac:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vListInsertEnd>
    14b0:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    14b4:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    14b8:	9e 89       	ldd	r25, Y+22	; 0x16
    14ba:	86 89       	ldd	r24, Z+22	; 0x16
    14bc:	98 17       	cp	r25, r24
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <xTaskIncrementTick+0x14c>
    14c0:	b2 cf       	rjmp	.-156    	; 0x1426 <xTaskIncrementTick+0xb0>
    14c2:	dd 24       	eor	r13, r13
    14c4:	d3 94       	inc	r13
    14c6:	af cf       	rjmp	.-162    	; 0x1426 <xTaskIncrementTick+0xb0>
    14c8:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    14cc:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    14d0:	86 89       	ldd	r24, Z+22	; 0x16
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	fc 01       	movw	r30, r24
    14d6:	ee 0f       	add	r30, r30
    14d8:	ff 1f       	adc	r31, r31
    14da:	ee 0f       	add	r30, r30
    14dc:	ff 1f       	adc	r31, r31
    14de:	ee 0f       	add	r30, r30
    14e0:	ff 1f       	adc	r31, r31
    14e2:	8e 0f       	add	r24, r30
    14e4:	9f 1f       	adc	r25, r31
    14e6:	fc 01       	movw	r30, r24
    14e8:	eb 5a       	subi	r30, 0xAB	; 171
    14ea:	fc 46       	sbci	r31, 0x6C	; 108
    14ec:	80 81       	ld	r24, Z
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	48 f0       	brcs	.+18     	; 0x1504 <xTaskIncrementTick+0x18e>
    14f2:	dd 24       	eor	r13, r13
    14f4:	d3 94       	inc	r13
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <xTaskIncrementTick+0x18e>
    14f8:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    14fc:	8f 5f       	subi	r24, 0xFF	; 255
    14fe:	80 93 30 93 	sts	0x9330, r24	; 0x809330 <uxPendedTicks>
    1502:	d1 2c       	mov	r13, r1
    1504:	80 91 2f 93 	lds	r24, 0x932F	; 0x80932f <xYieldPending>
    1508:	88 23       	and	r24, r24
    150a:	11 f0       	breq	.+4      	; 0x1510 <xTaskIncrementTick+0x19a>
    150c:	dd 24       	eor	r13, r13
    150e:	d3 94       	inc	r13
    1510:	8d 2d       	mov	r24, r13
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	08 95       	ret

00001522 <xTaskResumeAll>:
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	0f 92       	push	r0
    1536:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	80 93 2c 93 	sts	0x932C, r24	; 0x80932c <uxSchedulerSuspended>
    1540:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1544:	81 11       	cpse	r24, r1
    1546:	62 c0       	rjmp	.+196    	; 0x160c <xTaskResumeAll+0xea>
    1548:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    154c:	81 11       	cpse	r24, r1
    154e:	33 c0       	rjmp	.+102    	; 0x15b6 <xTaskResumeAll+0x94>
    1550:	60 c0       	rjmp	.+192    	; 0x1612 <xTaskResumeAll+0xf0>
    1552:	d7 01       	movw	r26, r14
    1554:	15 96       	adiw	r26, 0x05	; 5
    1556:	ed 91       	ld	r30, X+
    1558:	fc 91       	ld	r31, X
    155a:	16 97       	sbiw	r26, 0x06	; 6
    155c:	c6 81       	ldd	r28, Z+6	; 0x06
    155e:	d7 81       	ldd	r29, Z+7	; 0x07
    1560:	ce 01       	movw	r24, r28
    1562:	0c 96       	adiw	r24, 0x0c	; 12
    1564:	0e 94 24 08 	call	0x1048	; 0x1048 <uxListRemove>
    1568:	8e 01       	movw	r16, r28
    156a:	0e 5f       	subi	r16, 0xFE	; 254
    156c:	1f 4f       	sbci	r17, 0xFF	; 255
    156e:	c8 01       	movw	r24, r16
    1570:	0e 94 24 08 	call	0x1048	; 0x1048 <uxListRemove>
    1574:	2e 89       	ldd	r18, Y+22	; 0x16
    1576:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    157a:	82 17       	cp	r24, r18
    157c:	10 f4       	brcc	.+4      	; 0x1582 <xTaskResumeAll+0x60>
    157e:	20 93 32 93 	sts	0x9332, r18	; 0x809332 <uxTopReadyPriority>
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	c9 01       	movw	r24, r18
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	82 0f       	add	r24, r18
    1594:	93 1f       	adc	r25, r19
    1596:	b8 01       	movw	r22, r16
    1598:	8b 5a       	subi	r24, 0xAB	; 171
    159a:	9c 46       	sbci	r25, 0x6C	; 108
    159c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <vListInsertEnd>
    15a0:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    15a4:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    15a8:	9e 89       	ldd	r25, Y+22	; 0x16
    15aa:	86 89       	ldd	r24, Z+22	; 0x16
    15ac:	98 17       	cp	r25, r24
    15ae:	58 f0       	brcs	.+22     	; 0x15c6 <xTaskResumeAll+0xa4>
    15b0:	d0 92 2f 93 	sts	0x932F, r13	; 0x80932f <xYieldPending>
    15b4:	08 c0       	rjmp	.+16     	; 0x15c6 <xTaskResumeAll+0xa4>
    15b6:	0f 2e       	mov	r0, r31
    15b8:	f6 e3       	ldi	r31, 0x36	; 54
    15ba:	ef 2e       	mov	r14, r31
    15bc:	f3 e9       	ldi	r31, 0x93	; 147
    15be:	ff 2e       	mov	r15, r31
    15c0:	f0 2d       	mov	r31, r0
    15c2:	dd 24       	eor	r13, r13
    15c4:	d3 94       	inc	r13
    15c6:	f7 01       	movw	r30, r14
    15c8:	80 81       	ld	r24, Z
    15ca:	81 11       	cpse	r24, r1
    15cc:	c2 cf       	rjmp	.-124    	; 0x1552 <xTaskResumeAll+0x30>
    15ce:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15d2:	88 23       	and	r24, r24
    15d4:	99 f0       	breq	.+38     	; 0x15fc <xTaskResumeAll+0xda>
    15d6:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15da:	88 23       	and	r24, r24
    15dc:	79 f0       	breq	.+30     	; 0x15fc <xTaskResumeAll+0xda>
    15de:	c1 e0       	ldi	r28, 0x01	; 1
    15e0:	0e 94 bb 09 	call	0x1376	; 0x1376 <xTaskIncrementTick>
    15e4:	81 11       	cpse	r24, r1
    15e6:	c0 93 2f 93 	sts	0x932F, r28	; 0x80932f <xYieldPending>
    15ea:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15ee:	81 50       	subi	r24, 0x01	; 1
    15f0:	80 93 30 93 	sts	0x9330, r24	; 0x809330 <uxPendedTicks>
    15f4:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15f8:	81 11       	cpse	r24, r1
    15fa:	f2 cf       	rjmp	.-28     	; 0x15e0 <xTaskResumeAll+0xbe>
    15fc:	80 91 2f 93 	lds	r24, 0x932F	; 0x80932f <xYieldPending>
    1600:	81 30       	cpi	r24, 0x01	; 1
    1602:	31 f4       	brne	.+12     	; 0x1610 <xTaskResumeAll+0xee>
    1604:	0e 94 d2 06 	call	0xda4	; 0xda4 <vPortYield>
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <xTaskResumeAll+0xf0>
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	01 c0       	rjmp	.+2      	; 0x1612 <xTaskResumeAll+0xf0>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ff 90       	pop	r15
    1620:	ef 90       	pop	r14
    1622:	df 90       	pop	r13
    1624:	08 95       	ret

00001626 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    162c:	89 2b       	or	r24, r25
    162e:	b1 f0       	breq	.+44     	; 0x165c <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1630:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1634:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    1638:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    163c:	c8 0f       	add	r28, r24
    163e:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    1640:	80 91 79 93 	lds	r24, 0x9379	; 0x809379 <pxCurrentTCB>
    1644:	90 91 7a 93 	lds	r25, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    1648:	02 96       	adiw	r24, 0x02	; 2
    164a:	0e 94 24 08 	call	0x1048	; 0x1048 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    164e:	ce 01       	movw	r24, r28
    1650:	0e 94 4b 08 	call	0x1096	; 0x1096 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1654:	0e 94 91 0a 	call	0x1522	; 0x1522 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1658:	81 11       	cpse	r24, r1
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    165c:	0e 94 d2 06 	call	0xda4	; 0xda4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1666:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    166a:	88 23       	and	r24, r24
    166c:	21 f0       	breq	.+8      	; 0x1676 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	80 93 2f 93 	sts	0x932F, r24	; 0x80932f <xYieldPending>
    1674:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1676:	10 92 2f 93 	sts	0x932F, r1	; 0x80932f <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    167a:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	fc 01       	movw	r30, r24
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	ee 0f       	add	r30, r30
    1688:	ff 1f       	adc	r31, r31
    168a:	ee 0f       	add	r30, r30
    168c:	ff 1f       	adc	r31, r31
    168e:	8e 0f       	add	r24, r30
    1690:	9f 1f       	adc	r25, r31
    1692:	fc 01       	movw	r30, r24
    1694:	eb 5a       	subi	r30, 0xAB	; 171
    1696:	fc 46       	sbci	r31, 0x6C	; 108
    1698:	80 81       	ld	r24, Z
    169a:	81 11       	cpse	r24, r1
    169c:	17 c0       	rjmp	.+46     	; 0x16cc <vTaskSwitchContext+0x66>
    169e:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16a2:	81 50       	subi	r24, 0x01	; 1
    16a4:	80 93 32 93 	sts	0x9332, r24	; 0x809332 <uxTopReadyPriority>
    16a8:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	fc 01       	movw	r30, r24
    16b0:	ee 0f       	add	r30, r30
    16b2:	ff 1f       	adc	r31, r31
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	8e 0f       	add	r24, r30
    16be:	9f 1f       	adc	r25, r31
    16c0:	fc 01       	movw	r30, r24
    16c2:	eb 5a       	subi	r30, 0xAB	; 171
    16c4:	fc 46       	sbci	r31, 0x6C	; 108
    16c6:	80 81       	ld	r24, Z
    16c8:	88 23       	and	r24, r24
    16ca:	49 f3       	breq	.-46     	; 0x169e <vTaskSwitchContext+0x38>
    16cc:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 01       	movw	r18, r24
    16d4:	22 0f       	add	r18, r18
    16d6:	33 1f       	adc	r19, r19
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	28 0f       	add	r18, r24
    16e2:	39 1f       	adc	r19, r25
    16e4:	d9 01       	movw	r26, r18
    16e6:	ab 5a       	subi	r26, 0xAB	; 171
    16e8:	bc 46       	sbci	r27, 0x6C	; 108
    16ea:	11 96       	adiw	r26, 0x01	; 1
    16ec:	ed 91       	ld	r30, X+
    16ee:	fc 91       	ld	r31, X
    16f0:	12 97       	sbiw	r26, 0x02	; 2
    16f2:	02 80       	ldd	r0, Z+2	; 0x02
    16f4:	f3 81       	ldd	r31, Z+3	; 0x03
    16f6:	e0 2d       	mov	r30, r0
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	ed 93       	st	X+, r30
    16fc:	fc 93       	st	X, r31
    16fe:	12 97       	sbiw	r26, 0x02	; 2
    1700:	28 5a       	subi	r18, 0xA8	; 168
    1702:	3c 46       	sbci	r19, 0x6C	; 108
    1704:	e2 17       	cp	r30, r18
    1706:	f3 07       	cpc	r31, r19
    1708:	29 f4       	brne	.+10     	; 0x1714 <vTaskSwitchContext+0xae>
    170a:	22 81       	ldd	r18, Z+2	; 0x02
    170c:	33 81       	ldd	r19, Z+3	; 0x03
    170e:	fd 01       	movw	r30, r26
    1710:	21 83       	std	Z+1, r18	; 0x01
    1712:	32 83       	std	Z+2, r19	; 0x02
    1714:	fc 01       	movw	r30, r24
    1716:	ee 0f       	add	r30, r30
    1718:	ff 1f       	adc	r31, r31
    171a:	ee 0f       	add	r30, r30
    171c:	ff 1f       	adc	r31, r31
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	8e 0f       	add	r24, r30
    1724:	9f 1f       	adc	r25, r31
    1726:	fc 01       	movw	r30, r24
    1728:	eb 5a       	subi	r30, 0xAB	; 171
    172a:	fc 46       	sbci	r31, 0x6C	; 108
    172c:	01 80       	ldd	r0, Z+1	; 0x01
    172e:	f2 81       	ldd	r31, Z+2	; 0x02
    1730:	e0 2d       	mov	r30, r0
    1732:	86 81       	ldd	r24, Z+6	; 0x06
    1734:	97 81       	ldd	r25, Z+7	; 0x07
    1736:	80 93 79 93 	sts	0x9379, r24	; 0x809379 <pxCurrentTCB>
    173a:	90 93 7a 93 	sts	0x937A, r25	; 0x80937a <pxCurrentTCB+0x1>
    173e:	08 95       	ret

00001740 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1740:	08 95       	ret

00001742 <Endpoint_SelectEndpoint>:
			return false;
		}
	}

	return true;
}
    1742:	80 93 ec 93 	sts	0x93EC, r24	; 0x8093ec <USB_Endpoint_SelectedEndpoint>
    1746:	28 2f       	mov	r18, r24
    1748:	2f 70       	andi	r18, 0x0F	; 15
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
    1750:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
    1754:	88 23       	and	r24, r24
    1756:	e4 f4       	brge	.+56     	; 0x1790 <Endpoint_SelectEndpoint+0x4e>
    1758:	64 e8       	ldi	r22, 0x84	; 132
    175a:	62 9f       	mul	r22, r18
    175c:	c0 01       	movw	r24, r0
    175e:	63 9f       	mul	r22, r19
    1760:	90 0d       	add	r25, r0
    1762:	11 24       	eor	r1, r1
    1764:	81 5d       	subi	r24, 0xD1	; 209
    1766:	9b 46       	sbci	r25, 0x6B	; 107
    1768:	80 93 e8 93 	sts	0x93E8, r24	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    176c:	90 93 e9 93 	sts	0x93E9, r25	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    1770:	c9 01       	movw	r24, r18
    1772:	82 95       	swap	r24
    1774:	92 95       	swap	r25
    1776:	90 7f       	andi	r25, 0xF0	; 240
    1778:	98 27       	eor	r25, r24
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	98 27       	eor	r25, r24
    177e:	08 96       	adiw	r24, 0x08	; 8
    1780:	9a 01       	movw	r18, r20
    1782:	28 0f       	add	r18, r24
    1784:	39 1f       	adc	r19, r25
    1786:	20 93 ea 93 	sts	0x93EA, r18	; 0x8093ea <USB_Endpoint_SelectedHandle>
    178a:	30 93 eb 93 	sts	0x93EB, r19	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    178e:	08 95       	ret
    1790:	64 e8       	ldi	r22, 0x84	; 132
    1792:	62 9f       	mul	r22, r18
    1794:	c0 01       	movw	r24, r0
    1796:	63 9f       	mul	r22, r19
    1798:	90 0d       	add	r25, r0
    179a:	11 24       	eor	r1, r1
    179c:	83 51       	subi	r24, 0x13	; 19
    179e:	9c 46       	sbci	r25, 0x6C	; 108
    17a0:	80 93 e8 93 	sts	0x93E8, r24	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    17a4:	90 93 e9 93 	sts	0x93E9, r25	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    17a8:	22 95       	swap	r18
    17aa:	32 95       	swap	r19
    17ac:	30 7f       	andi	r19, 0xF0	; 240
    17ae:	32 27       	eor	r19, r18
    17b0:	20 7f       	andi	r18, 0xF0	; 240
    17b2:	32 27       	eor	r19, r18
    17b4:	24 0f       	add	r18, r20
    17b6:	35 1f       	adc	r19, r21
    17b8:	20 93 ea 93 	sts	0x93EA, r18	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17bc:	30 93 eb 93 	sts	0x93EB, r19	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17c0:	08 95       	ret

000017c2 <Endpoint_ConfigureEndpoint_PRV>:
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	d8 2f       	mov	r29, r24
    17ca:	16 2f       	mov	r17, r22
    17cc:	c4 2f       	mov	r28, r20
    17ce:	0e 94 a1 0b 	call	0x1742	; 0x1742 <Endpoint_SelectEndpoint>
    17d2:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17d6:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17da:	11 82       	std	Z+1, r1	; 0x01
    17dc:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17e0:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17e4:	dd 23       	and	r29, r29
    17e6:	a4 f0       	brlt	.+40     	; 0x1810 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    17e8:	10 82       	st	Z, r1
    17ea:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17ee:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17f2:	11 83       	std	Z+1, r17	; 0x01
    17f4:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17f8:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17fc:	12 82       	std	Z+2, r1	; 0x02
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	80 91 e8 93 	lds	r24, 0x93E8	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    1804:	90 91 e9 93 	lds	r25, 0x93E9	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    1808:	84 83       	std	Z+4, r24	; 0x04
    180a:	95 83       	std	Z+5, r25	; 0x05
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <Endpoint_ConfigureEndpoint_PRV+0x76>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	80 83       	st	Z, r24
    1814:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    1818:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    181c:	11 83       	std	Z+1, r17	; 0x01
    181e:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    1822:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    1826:	12 82       	std	Z+2, r1	; 0x02
    1828:	13 82       	std	Z+3, r1	; 0x03
    182a:	80 91 e8 93 	lds	r24, 0x93E8	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    182e:	90 91 e9 93 	lds	r25, 0x93E9	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    1832:	84 83       	std	Z+4, r24	; 0x04
    1834:	95 83       	std	Z+5, r25	; 0x05
    1836:	4c 2f       	mov	r20, r28
    1838:	fc 01       	movw	r30, r24
    183a:	e0 5c       	subi	r30, 0xC0	; 192
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	40 83       	st	Z, r20
    1840:	31 96       	adiw	r30, 0x01	; 1
    1842:	10 82       	st	Z, r1
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	1f 91       	pop	r17
    184c:	08 95       	ret

0000184e <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1852:	a0 ec       	ldi	r26, 0xC0	; 192
    1854:	b4 e0       	ldi	r27, 0x04	; 4
    1856:	16 96       	adiw	r26, 0x06	; 6
    1858:	ed 91       	ld	r30, X+
    185a:	fc 91       	ld	r31, X
    185c:	17 97       	sbiw	r26, 0x07	; 7
    185e:	c9 01       	movw	r24, r18
    1860:	82 95       	swap	r24
    1862:	92 95       	swap	r25
    1864:	90 7f       	andi	r25, 0xF0	; 240
    1866:	98 27       	eor	r25, r24
    1868:	80 7f       	andi	r24, 0xF0	; 240
    186a:	98 27       	eor	r25, r24
    186c:	e8 0f       	add	r30, r24
    186e:	f9 1f       	adc	r31, r25
    1870:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1872:	16 96       	adiw	r26, 0x06	; 6
    1874:	4d 91       	ld	r20, X+
    1876:	5c 91       	ld	r21, X
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	fa 01       	movw	r30, r20
    187c:	e8 0f       	add	r30, r24
    187e:	f9 1f       	adc	r31, r25
    1880:	11 82       	std	Z+1, r1	; 0x01
    1882:	2f 5f       	subi	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1886:	25 30       	cpi	r18, 0x05	; 5
    1888:	31 05       	cpc	r19, r1
    188a:	29 f7       	brne	.-54     	; 0x1856 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    188c:	08 95       	ret

0000188e <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	0b b6       	in	r0, 0x3b	; 59
    189a:	0f 92       	push	r0
    189c:	2f 93       	push	r18
    189e:	3f 93       	push	r19
    18a0:	4f 93       	push	r20
    18a2:	5f 93       	push	r21
    18a4:	6f 93       	push	r22
    18a6:	7f 93       	push	r23
    18a8:	8f 93       	push	r24
    18aa:	9f 93       	push	r25
    18ac:	af 93       	push	r26
    18ae:	bf 93       	push	r27
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    18b4:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18b8:	88 23       	and	r24, r24
    18ba:	4c f4       	brge	.+18     	; 0x18ce <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    18bc:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    18c4:	80 e8       	ldi	r24, 0x80	; 128
    18c6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18ca:	0e 94 a0 0b 	call	0x1740	; 0x1740 <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    18ce:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    18d2:	86 ff       	sbrs	r24, 6
    18d4:	07 c0       	rjmp	.+14     	; 0x18e4 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    18d6:	80 e4       	ldi	r24, 0x40	; 64
    18d8:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    18dc:	10 92 df 93 	sts	0x93DF, r1	; 0x8093df <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    18e0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <USB_Event_Stub>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    18e4:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    18e8:	85 ff       	sbrs	r24, 5
    18ea:	16 c0       	rjmp	.+44     	; 0x1918 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    18ec:	80 e2       	ldi	r24, 0x20	; 32
    18ee:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    18f2:	80 91 db 93 	lds	r24, 0x93DB	; 0x8093db <USB_Device_ConfigurationNumber>
    18f6:	88 23       	and	r24, r24
    18f8:	21 f0       	breq	.+8      	; 0x1902 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1902:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1906:	81 11       	cpse	r24, r1
    1908:	02 c0       	rjmp	.+4      	; 0x190e <__vector_125+0x80>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <__vector_125+0x82>
    190e:	83 e0       	ldi	r24, 0x03	; 3
    1910:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1914:	0e 94 a0 0b 	call	0x1740	; 0x1740 <USB_Event_Stub>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1918:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    191c:	84 ff       	sbrs	r24, 4
    191e:	18 c0       	rjmp	.+48     	; 0x1950 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    1920:	e0 ec       	ldi	r30, 0xC0	; 192
    1922:	f4 e0       	ldi	r31, 0x04	; 4
    1924:	80 e1       	ldi	r24, 0x10	; 16
    1926:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    192e:	10 92 db 93 	sts	0x93DB, r1	; 0x8093db <USB_Device_ConfigurationNumber>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1932:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    1934:	0e 94 27 0c 	call	0x184e	; 0x184e <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1938:	48 e0       	ldi	r20, 0x08	; 8
    193a:	68 e4       	ldi	r22, 0x48	; 72
    193c:	80 e8       	ldi	r24, 0x80	; 128
    193e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1942:	48 e0       	ldi	r20, 0x08	; 8
    1944:	68 e4       	ldi	r22, 0x48	; 72
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    194c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <USB_Event_Stub>
	}
}
    1950:	ff 91       	pop	r31
    1952:	ef 91       	pop	r30
    1954:	bf 91       	pop	r27
    1956:	af 91       	pop	r26
    1958:	9f 91       	pop	r25
    195a:	8f 91       	pop	r24
    195c:	7f 91       	pop	r23
    195e:	6f 91       	pop	r22
    1960:	5f 91       	pop	r21
    1962:	4f 91       	pop	r20
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0b be       	out	0x3b, r0	; 59
    196c:	0f 90       	pop	r0
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	0f 90       	pop	r0
    1972:	1f 90       	pop	r1
    1974:	18 95       	reti

00001976 <relay_thread>:
	time_t t;
	t = mktime(&_t);
	
	return t;

}
    1976:	07 e0       	ldi	r16, 0x07	; 7
    1978:	28 e1       	ldi	r18, 0x18	; 24
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	60 e0       	ldi	r22, 0x00	; 0
    197e:	84 ea       	ldi	r24, 0xA4	; 164
    1980:	92 e2       	ldi	r25, 0x22	; 34
    1982:	0e 94 30 11 	call	0x2260	; 0x2260 <DigitalPin_Config>
    1986:	28 e1       	ldi	r18, 0x18	; 24
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	60 e0       	ldi	r22, 0x00	; 0
    198c:	87 ea       	ldi	r24, 0xA7	; 167
    198e:	92 e2       	ldi	r25, 0x22	; 34
    1990:	0e 94 30 11 	call	0x2260	; 0x2260 <DigitalPin_Config>
    1994:	00 e0       	ldi	r16, 0x00	; 0
    1996:	28 e1       	ldi	r18, 0x18	; 24
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	60 e0       	ldi	r22, 0x00	; 0
    199c:	8a ea       	ldi	r24, 0xAA	; 170
    199e:	92 e2       	ldi	r25, 0x22	; 34
    19a0:	0e 94 30 11 	call	0x2260	; 0x2260 <DigitalPin_Config>
    19a4:	28 e1       	ldi	r18, 0x18	; 24
    19a6:	40 e0       	ldi	r20, 0x00	; 0
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	8d ea       	ldi	r24, 0xAD	; 173
    19ac:	92 e2       	ldi	r25, 0x22	; 34
    19ae:	0e 94 30 11 	call	0x2260	; 0x2260 <DigitalPin_Config>
    19b2:	c8 e9       	ldi	r28, 0x98	; 152
    19b4:	d2 e2       	ldi	r29, 0x22	; 34
    19b6:	0f 2e       	mov	r0, r31
    19b8:	f4 ea       	ldi	r31, 0xA4	; 164
    19ba:	ef 2e       	mov	r14, r31
    19bc:	f2 e2       	ldi	r31, 0x22	; 34
    19be:	ff 2e       	mov	r15, r31
    19c0:	f0 2d       	mov	r31, r0
    19c2:	8e 01       	movw	r16, r28
    19c4:	c8 01       	movw	r24, r16
    19c6:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
    19ca:	61 e0       	ldi	r22, 0x01	; 1
    19cc:	c8 01       	movw	r24, r16
    19ce:	0e 94 4c 11 	call	0x2298	; 0x2298 <DigitalPin_SetDir>
    19d2:	0d 5f       	subi	r16, 0xFD	; 253
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	0e 15       	cp	r16, r14
    19d8:	1f 05       	cpc	r17, r15
    19da:	a1 f7       	brne	.-24     	; 0x19c4 <relay_thread+0x4e>
    19dc:	0f 2e       	mov	r0, r31
    19de:	f4 ea       	ldi	r31, 0xA4	; 164
    19e0:	cf 2e       	mov	r12, r31
    19e2:	f2 e2       	ldi	r31, 0x22	; 34
    19e4:	df 2e       	mov	r13, r31
    19e6:	f0 2d       	mov	r31, r0
    19e8:	bb 24       	eor	r11, r11
    19ea:	b3 94       	inc	r11
    19ec:	9c 2e       	mov	r9, r28
    19ee:	ad 2e       	mov	r10, r29
    19f0:	84 e6       	ldi	r24, 0x64	; 100
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
    19f8:	86 01       	movw	r16, r12
    19fa:	e1 2c       	mov	r14, r1
    19fc:	f1 2c       	mov	r15, r1
    19fe:	d0 2f       	mov	r29, r16
    1a00:	c1 2f       	mov	r28, r17
    1a02:	c8 01       	movw	r24, r16
    1a04:	0e 94 8e 11 	call	0x231c	; 0x231c <DigitalPin_GetValue>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	0c c0       	rjmp	.+24     	; 0x1a24 <relay_thread+0xae>
    1a0c:	8d 2f       	mov	r24, r29
    1a0e:	9c 2f       	mov	r25, r28
    1a10:	0e 94 8e 11 	call	0x231c	; 0x231c <DigitalPin_GetValue>
    1a14:	88 23       	and	r24, r24
    1a16:	d1 f3       	breq	.-12     	; 0x1a0c <relay_thread+0x96>
    1a18:	f7 01       	movw	r30, r14
    1a1a:	ec 56       	subi	r30, 0x6C	; 108
    1a1c:	fd 4d       	sbci	r31, 0xDD	; 221
    1a1e:	80 81       	ld	r24, Z
    1a20:	8b 25       	eor	r24, r11
    1a22:	80 83       	st	Z, r24
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	e8 1a       	sub	r14, r24
    1a28:	f8 0a       	sbc	r15, r24
    1a2a:	0d 5f       	subi	r16, 0xFD	; 253
    1a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	e8 16       	cp	r14, r24
    1a32:	f1 04       	cpc	r15, r1
    1a34:	21 f7       	brne	.-56     	; 0x19fe <relay_thread+0x88>
    1a36:	09 2d       	mov	r16, r9
    1a38:	1a 2d       	mov	r17, r10
    1a3a:	c0 e0       	ldi	r28, 0x00	; 0
    1a3c:	d0 e0       	ldi	r29, 0x00	; 0
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ec 56       	subi	r30, 0x6C	; 108
    1a42:	fd 4d       	sbci	r31, 0xDD	; 221
    1a44:	80 81       	ld	r24, Z
    1a46:	88 23       	and	r24, r24
    1a48:	21 f0       	breq	.+8      	; 0x1a52 <relay_thread+0xdc>
    1a4a:	c8 01       	movw	r24, r16
    1a4c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <relay_thread+0xe2>
    1a52:	c8 01       	movw	r24, r16
    1a54:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
    1a58:	21 96       	adiw	r28, 0x01	; 1
    1a5a:	0d 5f       	subi	r16, 0xFD	; 253
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	c4 30       	cpi	r28, 0x04	; 4
    1a60:	d1 05       	cpc	r29, r1
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <relay_thread+0xc8>
    1a64:	c5 cf       	rjmp	.-118    	; 0x19f0 <relay_thread+0x7a>

00001a66 <usart_spi_transmit_receive>:
    1a66:	fc 01       	movw	r30, r24
    1a68:	81 81       	ldd	r24, Z+1	; 0x01
    1a6a:	85 ff       	sbrs	r24, 5
    1a6c:	fd cf       	rjmp	.-6      	; 0x1a68 <usart_spi_transmit_receive+0x2>
    1a6e:	60 83       	st	Z, r22
    1a70:	81 81       	ldd	r24, Z+1	; 0x01
    1a72:	86 ff       	sbrs	r24, 6
    1a74:	fd cf       	rjmp	.-6      	; 0x1a70 <usart_spi_transmit_receive+0xa>
    1a76:	80 e4       	ldi	r24, 0x40	; 64
    1a78:	81 83       	std	Z+1, r24	; 0x01
    1a7a:	80 81       	ld	r24, Z
    1a7c:	08 95       	ret

00001a7e <ssd1306_write_command>:
    1a7e:	1f 93       	push	r17
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	c0 ea       	ldi	r28, 0xA0	; 160
    1a86:	d6 e0       	ldi	r29, 0x06	; 6
    1a88:	18 e0       	ldi	r17, 0x08	; 8
    1a8a:	1e 83       	std	Y+6, r17	; 0x06
    1a8c:	e0 e6       	ldi	r30, 0x60	; 96
    1a8e:	f6 e0       	ldi	r31, 0x06	; 6
    1a90:	91 e0       	ldi	r25, 0x01	; 1
    1a92:	96 83       	std	Z+6, r25	; 0x06
    1a94:	96 83       	std	Z+6, r25	; 0x06
    1a96:	68 2f       	mov	r22, r24
    1a98:	80 ea       	ldi	r24, 0xA0	; 160
    1a9a:	99 e0       	ldi	r25, 0x09	; 9
    1a9c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <usart_spi_transmit_receive>
    1aa0:	1d 83       	std	Y+5, r17	; 0x05
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	08 95       	ret

00001aaa <ssd1306_write_data>:
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	c0 ea       	ldi	r28, 0xA0	; 160
    1ab8:	d6 e0       	ldi	r29, 0x06	; 6
    1aba:	18 e0       	ldi	r17, 0x08	; 8
    1abc:	1e 83       	std	Y+6, r17	; 0x06
    1abe:	0f 2e       	mov	r0, r31
    1ac0:	f0 e6       	ldi	r31, 0x60	; 96
    1ac2:	ef 2e       	mov	r14, r31
    1ac4:	f6 e0       	ldi	r31, 0x06	; 6
    1ac6:	ff 2e       	mov	r15, r31
    1ac8:	f0 2d       	mov	r31, r0
    1aca:	01 e0       	ldi	r16, 0x01	; 1
    1acc:	f7 01       	movw	r30, r14
    1ace:	05 83       	std	Z+5, r16	; 0x05
    1ad0:	68 2f       	mov	r22, r24
    1ad2:	80 ea       	ldi	r24, 0xA0	; 160
    1ad4:	99 e0       	ldi	r25, 0x09	; 9
    1ad6:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <usart_spi_transmit_receive>
    1ada:	f7 01       	movw	r30, r14
    1adc:	06 83       	std	Z+6, r16	; 0x06
    1ade:	1d 83       	std	Y+5, r17	; 0x05
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	08 95       	ret

00001aee <ssd1306_set_page_address>:
    1aee:	87 70       	andi	r24, 0x07	; 7
    1af0:	80 6b       	ori	r24, 0xB0	; 176
    1af2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1af6:	08 95       	ret

00001af8 <ssd1306_set_column_address>:
    1af8:	cf 93       	push	r28
    1afa:	c8 2f       	mov	r28, r24
    1afc:	98 2f       	mov	r25, r24
    1afe:	9f 77       	andi	r25, 0x7F	; 127
    1b00:	89 2f       	mov	r24, r25
    1b02:	82 95       	swap	r24
    1b04:	8f 70       	andi	r24, 0x0F	; 15
    1b06:	80 61       	ori	r24, 0x10	; 16
    1b08:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1b0c:	8c 2f       	mov	r24, r28
    1b0e:	8f 70       	andi	r24, 0x0F	; 15
    1b10:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1b14:	cf 91       	pop	r28
    1b16:	08 95       	ret

00001b18 <usart_init_spi>:
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ec 01       	movw	r28, r24
    1b1e:	fb 01       	movw	r30, r22
    1b20:	8c 81       	ldd	r24, Y+4	; 0x04
    1b22:	8f 7e       	andi	r24, 0xEF	; 239
    1b24:	8c 83       	std	Y+4, r24	; 0x04
    1b26:	a0 e6       	ldi	r26, 0x60	; 96
    1b28:	b6 e0       	ldi	r27, 0x06	; 6
    1b2a:	82 e0       	ldi	r24, 0x02	; 2
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	8c 93       	st	X, r24
    1b30:	11 97       	sbiw	r26, 0x01	; 1
    1b32:	15 96       	adiw	r26, 0x05	; 5
    1b34:	8c 93       	st	X, r24
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	80 6c       	ori	r24, 0xC0	; 192
    1b3a:	8d 83       	std	Y+5, r24	; 0x05
    1b3c:	84 81       	ldd	r24, Z+4	; 0x04
    1b3e:	8d 7f       	andi	r24, 0xFD	; 253
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	21 f4       	brne	.+8      	; 0x1b4c <usart_init_spi+0x34>
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	82 60       	ori	r24, 0x02	; 2
    1b48:	8d 83       	std	Y+5, r24	; 0x05
    1b4a:	03 c0       	rjmp	.+6      	; 0x1b52 <usart_init_spi+0x3a>
    1b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4e:	8d 7f       	andi	r24, 0xFD	; 253
    1b50:	8d 83       	std	Y+5, r24	; 0x05
    1b52:	85 81       	ldd	r24, Z+5	; 0x05
    1b54:	88 23       	and	r24, r24
    1b56:	21 f0       	breq	.+8      	; 0x1b60 <usart_init_spi+0x48>
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	84 60       	ori	r24, 0x04	; 4
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	03 c0       	rjmp	.+6      	; 0x1b66 <usart_init_spi+0x4e>
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	8b 7f       	andi	r24, 0xFB	; 251
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	80 81       	ld	r24, Z
    1b68:	91 81       	ldd	r25, Z+1	; 0x01
    1b6a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b6c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b6e:	9c 01       	movw	r18, r24
    1b70:	ad 01       	movw	r20, r26
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	44 1f       	adc	r20, r20
    1b78:	55 1f       	adc	r21, r21
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	78 e4       	ldi	r23, 0x48	; 72
    1b7e:	88 ee       	ldi	r24, 0xE8	; 232
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__udivmodsi4>
    1b86:	21 50       	subi	r18, 0x01	; 1
    1b88:	31 09       	sbc	r19, r1
    1b8a:	83 2f       	mov	r24, r19
    1b8c:	8f 70       	andi	r24, 0x0F	; 15
    1b8e:	8f 83       	std	Y+7, r24	; 0x07
    1b90:	2e 83       	std	Y+6, r18	; 0x06
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	88 60       	ori	r24, 0x08	; 8
    1b96:	8c 83       	std	Y+4, r24	; 0x04
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <ssd1306_init>:
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <ssd1306_init+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <ssd1306_init+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	20 ea       	ldi	r18, 0xA0	; 160
    1bac:	36 e0       	ldi	r19, 0x06	; 6
    1bae:	88 e0       	ldi	r24, 0x08	; 8
    1bb0:	d9 01       	movw	r26, r18
    1bb2:	11 96       	adiw	r26, 0x01	; 1
    1bb4:	8c 93       	st	X, r24
    1bb6:	a0 e6       	ldi	r26, 0x60	; 96
    1bb8:	b6 e0       	ldi	r27, 0x06	; 6
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	11 96       	adiw	r26, 0x01	; 1
    1bbe:	9c 93       	st	X, r25
    1bc0:	11 97       	sbiw	r26, 0x01	; 1
    1bc2:	e0 e0       	ldi	r30, 0x00	; 0
    1bc4:	f6 e0       	ldi	r31, 0x06	; 6
    1bc6:	81 83       	std	Z+1, r24	; 0x01
    1bc8:	92 e0       	ldi	r25, 0x02	; 2
    1bca:	11 96       	adiw	r26, 0x01	; 1
    1bcc:	9c 93       	st	X, r25
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	11 96       	adiw	r26, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
    1bd4:	d9 01       	movw	r26, r18
    1bd6:	15 96       	adiw	r26, 0x05	; 5
    1bd8:	8c 93       	st	X, r24
    1bda:	86 83       	std	Z+6, r24	; 0x06
    1bdc:	ba e6       	ldi	r27, 0x6A	; 106
    1bde:	ba 95       	dec	r27
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <ssd1306_init+0x40>
    1be2:	00 c0       	rjmp	.+0      	; 0x1be4 <ssd1306_init+0x46>
    1be4:	85 83       	std	Z+5, r24	; 0x05
    1be6:	ea e6       	ldi	r30, 0x6A	; 106
    1be8:	ea 95       	dec	r30
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <ssd1306_init+0x4a>
    1bec:	00 c0       	rjmp	.+0      	; 0x1bee <ssd1306_init+0x50>
    1bee:	e0 e7       	ldi	r30, 0x70	; 112
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	84 81       	ldd	r24, Z+4	; 0x04
    1bf4:	8f 7e       	andi	r24, 0xEF	; 239
    1bf6:	84 83       	std	Z+4, r24	; 0x04
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	9b e1       	ldi	r25, 0x1B	; 27
    1bfc:	a7 eb       	ldi	r26, 0xB7	; 183
    1bfe:	b0 e0       	ldi	r27, 0x00	; 0
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	9a 83       	std	Y+2, r25	; 0x02
    1c04:	ab 83       	std	Y+3, r26	; 0x03
    1c06:	bc 83       	std	Y+4, r27	; 0x04
    1c08:	1d 82       	std	Y+5, r1	; 0x05
    1c0a:	1e 82       	std	Y+6, r1	; 0x06
    1c0c:	be 01       	movw	r22, r28
    1c0e:	6f 5f       	subi	r22, 0xFF	; 255
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	80 ea       	ldi	r24, 0xA0	; 160
    1c14:	99 e0       	ldi	r25, 0x09	; 9
    1c16:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <usart_init_spi>
    1c1a:	88 ea       	ldi	r24, 0xA8	; 168
    1c1c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c20:	8f e1       	ldi	r24, 0x1F	; 31
    1c22:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c26:	83 ed       	ldi	r24, 0xD3	; 211
    1c28:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c32:	80 e4       	ldi	r24, 0x40	; 64
    1c34:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c38:	81 ea       	ldi	r24, 0xA1	; 161
    1c3a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c3e:	88 ec       	ldi	r24, 0xC8	; 200
    1c40:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c44:	8a ed       	ldi	r24, 0xDA	; 218
    1c46:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c50:	81 e8       	ldi	r24, 0x81	; 129
    1c52:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c56:	8f e8       	ldi	r24, 0x8F	; 143
    1c58:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c5c:	84 ea       	ldi	r24, 0xA4	; 164
    1c5e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c62:	86 ea       	ldi	r24, 0xA6	; 166
    1c64:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c68:	85 ed       	ldi	r24, 0xD5	; 213
    1c6a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c6e:	80 e8       	ldi	r24, 0x80	; 128
    1c70:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c74:	8d e8       	ldi	r24, 0x8D	; 141
    1c76:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c7a:	84 e1       	ldi	r24, 0x14	; 20
    1c7c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c80:	8b ed       	ldi	r24, 0xDB	; 219
    1c82:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c86:	80 e4       	ldi	r24, 0x40	; 64
    1c88:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c8c:	89 ed       	ldi	r24, 0xD9	; 217
    1c8e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c92:	81 ef       	ldi	r24, 0xF1	; 241
    1c94:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c98:	8f ea       	ldi	r24, 0xAF	; 175
    1c9a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ssd1306_write_command>
    1c9e:	26 96       	adiw	r28, 0x06	; 6
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <ssd1306_write_text>:
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	ec 91       	ld	r30, X
    1cb8:	ee 23       	and	r30, r30
    1cba:	29 f1       	breq	.+74     	; 0x1d06 <ssd1306_write_text+0x5c>
    1cbc:	7c 01       	movw	r14, r24
    1cbe:	bf ef       	ldi	r27, 0xFF	; 255
    1cc0:	eb 1a       	sub	r14, r27
    1cc2:	fb 0a       	sbc	r15, r27
    1cc4:	ef 37       	cpi	r30, 0x7F	; 127
    1cc6:	d0 f4       	brcc	.+52     	; 0x1cfc <ssd1306_write_text+0x52>
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	ee 0f       	add	r30, r30
    1ccc:	ff 1f       	adc	r31, r31
    1cce:	ec 56       	subi	r30, 0x6C	; 108
    1cd0:	fe 4d       	sbci	r31, 0xDE	; 222
    1cd2:	00 81       	ld	r16, Z
    1cd4:	11 81       	ldd	r17, Z+1	; 0x01
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 23       	and	r24, r24
    1cdc:	61 f0       	breq	.+24     	; 0x1cf6 <ssd1306_write_text+0x4c>
    1cde:	c1 e0       	ldi	r28, 0x01	; 1
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	ec 0f       	add	r30, r28
    1ce4:	f1 1d       	adc	r31, r1
    1ce6:	80 81       	ld	r24, Z
    1ce8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <ssd1306_write_data>
    1cec:	cf 5f       	subi	r28, 0xFF	; 255
    1cee:	d8 01       	movw	r26, r16
    1cf0:	9c 91       	ld	r25, X
    1cf2:	9c 17       	cp	r25, r28
    1cf4:	a8 f7       	brcc	.-22     	; 0x1ce0 <ssd1306_write_text+0x36>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <ssd1306_write_data>
    1cfc:	d7 01       	movw	r26, r14
    1cfe:	ed 91       	ld	r30, X+
    1d00:	7d 01       	movw	r14, r26
    1d02:	e1 11       	cpse	r30, r1
    1d04:	df cf       	rjmp	.-66     	; 0x1cc4 <ssd1306_write_text+0x1a>
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	08 95       	ret

00001d12 <glcd_thread>:
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	c8 57       	subi	r28, 0x78	; 120
    1d1c:	d1 09       	sbc	r29, r1
    1d1e:	cd bf       	out	0x3d, r28	; 61
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ssd1306_init>
    1d26:	10 e0       	ldi	r17, 0x00	; 0
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <glcd_thread+0x36>
    1d2a:	81 2f       	mov	r24, r17
    1d2c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <ssd1306_set_page_address>
    1d30:	80 2f       	mov	r24, r16
    1d32:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_set_column_address>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <ssd1306_write_data>
    1d3c:	0f 5f       	subi	r16, 0xFF	; 255
    1d3e:	00 38       	cpi	r16, 0x80	; 128
    1d40:	a1 f7       	brne	.-24     	; 0x1d2a <glcd_thread+0x18>
    1d42:	1f 5f       	subi	r17, 0xFF	; 255
    1d44:	14 30       	cpi	r17, 0x04	; 4
    1d46:	11 f0       	breq	.+4      	; 0x1d4c <glcd_thread+0x3a>
    1d48:	00 e0       	ldi	r16, 0x00	; 0
    1d4a:	ef cf       	rjmp	.-34     	; 0x1d2a <glcd_thread+0x18>
    1d4c:	0f 2e       	mov	r0, r31
    1d4e:	f4 e9       	ldi	r31, 0x94	; 148
    1d50:	ef 2e       	mov	r14, r31
    1d52:	f2 e2       	ldi	r31, 0x22	; 34
    1d54:	ff 2e       	mov	r15, r31
    1d56:	f0 2d       	mov	r31, r0
    1d58:	33 24       	eor	r3, r3
    1d5a:	33 94       	inc	r3
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	01 96       	adiw	r24, 0x01	; 1
    1d60:	4c 01       	movw	r8, r24
    1d62:	3e 01       	movw	r6, r28
    1d64:	9f e1       	ldi	r25, 0x1F	; 31
    1d66:	69 0e       	add	r6, r25
    1d68:	71 1c       	adc	r7, r1
    1d6a:	0f 2e       	mov	r0, r31
    1d6c:	ff ed       	ldi	r31, 0xDF	; 223
    1d6e:	4f 2e       	mov	r4, r31
    1d70:	f2 e2       	ldi	r31, 0x22	; 34
    1d72:	5f 2e       	mov	r5, r31
    1d74:	f0 2d       	mov	r31, r0
    1d76:	5e 01       	movw	r10, r28
    1d78:	ad e3       	ldi	r26, 0x3D	; 61
    1d7a:	aa 0e       	add	r10, r26
    1d7c:	b1 1c       	adc	r11, r1
    1d7e:	6e 01       	movw	r12, r28
    1d80:	bb e5       	ldi	r27, 0x5B	; 91
    1d82:	cb 0e       	add	r12, r27
    1d84:	d1 1c       	adc	r13, r1
    1d86:	f7 01       	movw	r30, r14
    1d88:	80 81       	ld	r24, Z
    1d8a:	83 25       	eor	r24, r3
    1d8c:	1f 92       	push	r1
    1d8e:	8f 93       	push	r24
    1d90:	a1 ec       	ldi	r26, 0xC1	; 193
    1d92:	b2 e2       	ldi	r27, 0x22	; 34
    1d94:	bf 93       	push	r27
    1d96:	af 93       	push	r26
    1d98:	9f 92       	push	r9
    1d9a:	8f 92       	push	r8
    1d9c:	0e 94 90 17 	call	0x2f20	; 0x2f20 <sprintf>
    1da0:	d7 01       	movw	r26, r14
    1da2:	11 96       	adiw	r26, 0x01	; 1
    1da4:	8c 91       	ld	r24, X
    1da6:	83 25       	eor	r24, r3
    1da8:	1f 92       	push	r1
    1daa:	8f 93       	push	r24
    1dac:	a0 ed       	ldi	r26, 0xD0	; 208
    1dae:	b2 e2       	ldi	r27, 0x22	; 34
    1db0:	bf 93       	push	r27
    1db2:	af 93       	push	r26
    1db4:	7f 92       	push	r7
    1db6:	6f 92       	push	r6
    1db8:	0e 94 90 17 	call	0x2f20	; 0x2f20 <sprintf>
    1dbc:	d7 01       	movw	r26, r14
    1dbe:	12 96       	adiw	r26, 0x02	; 2
    1dc0:	8c 91       	ld	r24, X
    1dc2:	83 25       	eor	r24, r3
    1dc4:	1f 92       	push	r1
    1dc6:	8f 93       	push	r24
    1dc8:	5f 92       	push	r5
    1dca:	4f 92       	push	r4
    1dcc:	bf 92       	push	r11
    1dce:	af 92       	push	r10
    1dd0:	0e 94 90 17 	call	0x2f20	; 0x2f20 <sprintf>
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	83 81       	ldd	r24, Z+3	; 0x03
    1dd8:	83 25       	eor	r24, r3
    1dda:	1f 92       	push	r1
    1ddc:	8f 93       	push	r24
    1dde:	ae ee       	ldi	r26, 0xEE	; 238
    1de0:	b2 e2       	ldi	r27, 0x22	; 34
    1de2:	bf 93       	push	r27
    1de4:	af 93       	push	r26
    1de6:	df 92       	push	r13
    1de8:	cf 92       	push	r12
    1dea:	0e 94 90 17 	call	0x2f20	; 0x2f20 <sprintf>
    1dee:	cd bf       	out	0x3d, r28	; 61
    1df0:	de bf       	out	0x3e, r29	; 62
    1df2:	00 e0       	ldi	r16, 0x00	; 0
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <glcd_thread+0x102>
    1df6:	80 2f       	mov	r24, r16
    1df8:	0e 94 77 0d 	call	0x1aee	; 0x1aee <ssd1306_set_page_address>
    1dfc:	81 2f       	mov	r24, r17
    1dfe:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_set_column_address>
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <ssd1306_write_data>
    1e08:	1f 5f       	subi	r17, 0xFF	; 255
    1e0a:	10 38       	cpi	r17, 0x80	; 128
    1e0c:	a1 f7       	brne	.-24     	; 0x1df6 <glcd_thread+0xe4>
    1e0e:	0f 5f       	subi	r16, 0xFF	; 255
    1e10:	04 30       	cpi	r16, 0x04	; 4
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <glcd_thread+0x106>
    1e14:	10 e0       	ldi	r17, 0x00	; 0
    1e16:	ef cf       	rjmp	.-34     	; 0x1df6 <glcd_thread+0xe4>
    1e18:	84 01       	movw	r16, r8
    1e1a:	21 2c       	mov	r2, r1
    1e1c:	82 2d       	mov	r24, r2
    1e1e:	0e 94 77 0d 	call	0x1aee	; 0x1aee <ssd1306_set_page_address>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <ssd1306_set_column_address>
    1e28:	c8 01       	movw	r24, r16
    1e2a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <ssd1306_write_text>
    1e2e:	23 94       	inc	r2
    1e30:	02 5e       	subi	r16, 0xE2	; 226
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	94 e0       	ldi	r25, 0x04	; 4
    1e36:	29 12       	cpse	r2, r25
    1e38:	f1 cf       	rjmp	.-30     	; 0x1e1c <glcd_thread+0x10a>
    1e3a:	80 91 7b 93 	lds	r24, 0x937B	; 0x80937b <radioRXnotificationLed>
    1e3e:	88 23       	and	r24, r24
    1e40:	79 f0       	breq	.+30     	; 0x1e60 <glcd_thread+0x14e>
    1e42:	89 eb       	ldi	r24, 0xB9	; 185
    1e44:	92 e2       	ldi	r25, 0x22	; 34
    1e46:	0e 94 7e 11 	call	0x22fc	; 0x22fc <DigitalPin_ClearValue>
    1e4a:	88 ec       	ldi	r24, 0xC8	; 200
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
    1e52:	89 eb       	ldi	r24, 0xB9	; 185
    1e54:	92 e2       	ldi	r25, 0x22	; 34
    1e56:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
    1e5a:	10 92 7b 93 	sts	0x937B, r1	; 0x80937b <radioRXnotificationLed>
    1e5e:	93 cf       	rjmp	.-218    	; 0x1d86 <glcd_thread+0x74>
    1e60:	88 ec       	ldi	r24, 0xC8	; 200
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
    1e68:	8e cf       	rjmp	.-228    	; 0x1d86 <glcd_thread+0x74>

00001e6a <board_config>:
volatile bool radioRXnotificationLed  =0;
	
	
void board_config(){

	CLKSYS_Enable( OSC_RC32MEN_bm );
    1e6a:	e0 e5       	ldi	r30, 0x50	; 80
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	82 60       	ori	r24, 0x02	; 2
    1e72:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    1e74:	81 81       	ldd	r24, Z+1	; 0x01
    1e76:	81 ff       	sbrs	r24, 1
    1e78:	fd cf       	rjmp	.-6      	; 0x1e74 <board_config+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0e 94 36 12 	call	0x246c	; 0x246c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	0e 94 2c 12 	call	0x2458	; 0x2458 <CLKSYS_Disable>

	DigitalPin_SetDir(&led1,1);
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	89 eb       	ldi	r24, 0xB9	; 185
    1e8a:	92 e2       	ldi	r25, 0x22	; 34
    1e8c:	0e 94 4c 11 	call	0x2298	; 0x2298 <DigitalPin_SetDir>
	DigitalPin_SetDir(&led2,1);
    1e90:	61 e0       	ldi	r22, 0x01	; 1
    1e92:	86 eb       	ldi	r24, 0xB6	; 182
    1e94:	92 e2       	ldi	r25, 0x22	; 34
    1e96:	0e 94 4c 11 	call	0x2298	; 0x2298 <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedR,1);
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	83 eb       	ldi	r24, 0xB3	; 179
    1e9e:	92 e2       	ldi	r25, 0x22	; 34
    1ea0:	0e 94 4c 11 	call	0x2298	; 0x2298 <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedG,1);
    1ea4:	61 e0       	ldi	r22, 0x01	; 1
    1ea6:	80 eb       	ldi	r24, 0xB0	; 176
    1ea8:	92 e2       	ldi	r25, 0x22	; 34
    1eaa:	0e 94 4c 11 	call	0x2298	; 0x2298 <DigitalPin_SetDir>

	DigitalPin_SetValue(&led1);
    1eae:	89 eb       	ldi	r24, 0xB9	; 185
    1eb0:	92 e2       	ldi	r25, 0x22	; 34
    1eb2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
	DigitalPin_SetValue(&led2);
    1eb6:	86 eb       	ldi	r24, 0xB6	; 182
    1eb8:	92 e2       	ldi	r25, 0x22	; 34
    1eba:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedR);//off
    1ebe:	83 eb       	ldi	r24, 0xB3	; 179
    1ec0:	92 e2       	ldi	r25, 0x22	; 34
    1ec2:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedG);//on
    1ec6:	80 eb       	ldi	r24, 0xB0	; 176
    1ec8:	92 e2       	ldi	r25, 0x22	; 34
    1eca:	0e 94 6e 11 	call	0x22dc	; 0x22dc <DigitalPin_SetValue>
    1ece:	08 95       	ret

00001ed0 <command_handler>:

	
}


void *command_handler(char **args,int arg_count){
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	ec 01       	movw	r28, r24

	if(!strcmp(args[0], "light") ) {
    1eda:	08 81       	ld	r16, Y
    1edc:	19 81       	ldd	r17, Y+1	; 0x01
    1ede:	6e ef       	ldi	r22, 0xFE	; 254
    1ee0:	72 e2       	ldi	r23, 0x22	; 34
    1ee2:	c8 01       	movw	r24, r16
    1ee4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1ee8:	89 2b       	or	r24, r25
    1eea:	09 f0       	breq	.+2      	; 0x1eee <command_handler+0x1e>
    1eec:	63 c0       	rjmp	.+198    	; 0x1fb4 <command_handler+0xe4>
		if(!strcmp(args[1], "0")) {
    1eee:	0a 81       	ldd	r16, Y+2	; 0x02
    1ef0:	1b 81       	ldd	r17, Y+3	; 0x03
    1ef2:	64 e0       	ldi	r22, 0x04	; 4
    1ef4:	73 e2       	ldi	r23, 0x23	; 35
    1ef6:	c8 01       	movw	r24, r16
    1ef8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1efc:	89 2b       	or	r24, r25
    1efe:	c9 f4       	brne	.+50     	; 0x1f32 <command_handler+0x62>
			if(!strcmp(args[2], "0")) {
    1f00:	0c 80       	ldd	r0, Y+4	; 0x04
    1f02:	dd 81       	ldd	r29, Y+5	; 0x05
    1f04:	c0 2d       	mov	r28, r0
    1f06:	64 e0       	ldi	r22, 0x04	; 4
    1f08:	73 e2       	ldi	r23, 0x23	; 35
    1f0a:	ce 01       	movw	r24, r28
    1f0c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f10:	89 2b       	or	r24, r25
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <command_handler+0x4c>
				relayState[0] = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <relayState>
    1f1a:	9e c0       	rjmp	.+316    	; 0x2058 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1f1c:	6d e1       	ldi	r22, 0x1D	; 29
    1f1e:	73 e2       	ldi	r23, 0x23	; 35
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f26:	89 2b       	or	r24, r25
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <command_handler+0x5c>
    1f2a:	96 c0       	rjmp	.+300    	; 0x2058 <command_handler+0x188>
				relayState[0] = 0;
    1f2c:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <relayState>
    1f30:	93 c0       	rjmp	.+294    	; 0x2058 <command_handler+0x188>
			}
		}
		else if(!strcmp(args[1], "1")) {
    1f32:	6d e1       	ldi	r22, 0x1D	; 29
    1f34:	73 e2       	ldi	r23, 0x23	; 35
    1f36:	c8 01       	movw	r24, r16
    1f38:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f3c:	89 2b       	or	r24, r25
    1f3e:	c9 f4       	brne	.+50     	; 0x1f72 <command_handler+0xa2>
			if(!strcmp(args[2], "0")) {
    1f40:	0c 80       	ldd	r0, Y+4	; 0x04
    1f42:	dd 81       	ldd	r29, Y+5	; 0x05
    1f44:	c0 2d       	mov	r28, r0
    1f46:	64 e0       	ldi	r22, 0x04	; 4
    1f48:	73 e2       	ldi	r23, 0x23	; 35
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f50:	89 2b       	or	r24, r25
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <command_handler+0x8c>
				relayState[1] = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <relayState+0x1>
    1f5a:	7e c0       	rjmp	.+252    	; 0x2058 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1f5c:	6d e1       	ldi	r22, 0x1D	; 29
    1f5e:	73 e2       	ldi	r23, 0x23	; 35
    1f60:	ce 01       	movw	r24, r28
    1f62:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f66:	89 2b       	or	r24, r25
    1f68:	09 f0       	breq	.+2      	; 0x1f6c <command_handler+0x9c>
    1f6a:	76 c0       	rjmp	.+236    	; 0x2058 <command_handler+0x188>
				relayState[1] = 0;
    1f6c:	10 92 95 22 	sts	0x2295, r1	; 0x802295 <relayState+0x1>
    1f70:	73 c0       	rjmp	.+230    	; 0x2058 <command_handler+0x188>
			}
		}
		else if(!strcmp(args[1], "2")) {
    1f72:	60 e2       	ldi	r22, 0x20	; 32
    1f74:	73 e2       	ldi	r23, 0x23	; 35
    1f76:	c8 01       	movw	r24, r16
    1f78:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f7c:	89 2b       	or	r24, r25
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <command_handler+0xb2>
    1f80:	6b c0       	rjmp	.+214    	; 0x2058 <command_handler+0x188>
			if(!strcmp(args[2], "0")) {
    1f82:	0c 80       	ldd	r0, Y+4	; 0x04
    1f84:	dd 81       	ldd	r29, Y+5	; 0x05
    1f86:	c0 2d       	mov	r28, r0
    1f88:	64 e0       	ldi	r22, 0x04	; 4
    1f8a:	73 e2       	ldi	r23, 0x23	; 35
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1f92:	89 2b       	or	r24, r25
    1f94:	21 f4       	brne	.+8      	; 0x1f9e <command_handler+0xce>
				relayState[2] = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <relayState+0x2>
    1f9c:	5d c0       	rjmp	.+186    	; 0x2058 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1f9e:	6d e1       	ldi	r22, 0x1D	; 29
    1fa0:	73 e2       	ldi	r23, 0x23	; 35
    1fa2:	ce 01       	movw	r24, r28
    1fa4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1fa8:	89 2b       	or	r24, r25
    1faa:	09 f0       	breq	.+2      	; 0x1fae <command_handler+0xde>
    1fac:	55 c0       	rjmp	.+170    	; 0x2058 <command_handler+0x188>
				relayState[2] = 0;
    1fae:	10 92 96 22 	sts	0x2296, r1	; 0x802296 <relayState+0x2>
    1fb2:	52 c0       	rjmp	.+164    	; 0x2058 <command_handler+0x188>
			}
		}
	}
	else if(!strcmp(args[0], "fan") ) {
    1fb4:	66 e0       	ldi	r22, 0x06	; 6
    1fb6:	73 e2       	ldi	r23, 0x23	; 35
    1fb8:	c8 01       	movw	r24, r16
    1fba:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1fbe:	89 2b       	or	r24, r25
    1fc0:	c1 f4       	brne	.+48     	; 0x1ff2 <command_handler+0x122>
		if(!strcmp(args[1], "0")) {
    1fc2:	0a 80       	ldd	r0, Y+2	; 0x02
    1fc4:	db 81       	ldd	r29, Y+3	; 0x03
    1fc6:	c0 2d       	mov	r28, r0
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	73 e2       	ldi	r23, 0x23	; 35
    1fcc:	ce 01       	movw	r24, r28
    1fce:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1fd2:	89 2b       	or	r24, r25
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <command_handler+0x10e>
			relayState[3] = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	80 93 97 22 	sts	0x2297, r24	; 0x802297 <relayState+0x3>
    1fdc:	3d c0       	rjmp	.+122    	; 0x2058 <command_handler+0x188>
		}
		else if(!strcmp(args[1], "1")) {
    1fde:	6d e1       	ldi	r22, 0x1D	; 29
    1fe0:	73 e2       	ldi	r23, 0x23	; 35
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1fe8:	89 2b       	or	r24, r25
    1fea:	b1 f5       	brne	.+108    	; 0x2058 <command_handler+0x188>
			relayState[3] = 0;
    1fec:	10 92 97 22 	sts	0x2297, r1	; 0x802297 <relayState+0x3>
    1ff0:	33 c0       	rjmp	.+102    	; 0x2058 <command_handler+0x188>
		}
	}
	else if(!strcmp(args[0], "all") ) {
    1ff2:	6a e0       	ldi	r22, 0x0A	; 10
    1ff4:	73 e2       	ldi	r23, 0x23	; 35
    1ff6:	c8 01       	movw	r24, r16
    1ff8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    1ffc:	89 2b       	or	r24, r25
    1ffe:	01 f5       	brne	.+64     	; 0x2040 <command_handler+0x170>
		if(!strcmp(args[1], "0")) {
    2000:	0a 80       	ldd	r0, Y+2	; 0x02
    2002:	db 81       	ldd	r29, Y+3	; 0x03
    2004:	c0 2d       	mov	r28, r0
    2006:	64 e0       	ldi	r22, 0x04	; 4
    2008:	73 e2       	ldi	r23, 0x23	; 35
    200a:	ce 01       	movw	r24, r28
    200c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    2010:	89 2b       	or	r24, r25
    2012:	41 f4       	brne	.+16     	; 0x2024 <command_handler+0x154>
			relayState[0] = 1;
    2014:	e4 e9       	ldi	r30, 0x94	; 148
    2016:	f2 e2       	ldi	r31, 0x22	; 34
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 83       	st	Z, r24
			relayState[1] = 1;
    201c:	81 83       	std	Z+1, r24	; 0x01
			relayState[2] = 1;
    201e:	82 83       	std	Z+2, r24	; 0x02
			relayState[3] = 1;
    2020:	83 83       	std	Z+3, r24	; 0x03
    2022:	1a c0       	rjmp	.+52     	; 0x2058 <command_handler+0x188>
		}
		else if(!strcmp(args[1], "1")) {
    2024:	6d e1       	ldi	r22, 0x1D	; 29
    2026:	73 e2       	ldi	r23, 0x23	; 35
    2028:	ce 01       	movw	r24, r28
    202a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    202e:	89 2b       	or	r24, r25
    2030:	99 f4       	brne	.+38     	; 0x2058 <command_handler+0x188>
			relayState[0] = 0;
    2032:	e4 e9       	ldi	r30, 0x94	; 148
    2034:	f2 e2       	ldi	r31, 0x22	; 34
    2036:	10 82       	st	Z, r1
			relayState[1] = 0;
    2038:	11 82       	std	Z+1, r1	; 0x01
			relayState[2] = 0;
    203a:	12 82       	std	Z+2, r1	; 0x02
			relayState[3] = 0;
    203c:	13 82       	std	Z+3, r1	; 0x03
    203e:	0c c0       	rjmp	.+24     	; 0x2058 <command_handler+0x188>
		}
	}

	else if(!strcmp(args[0],"bootloader")){
    2040:	6e e0       	ldi	r22, 0x0E	; 14
    2042:	73 e2       	ldi	r23, 0x23	; 35
    2044:	c8 01       	movw	r24, r16
    2046:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <strcmp>
    204a:	89 2b       	or	r24, r25
    204c:	29 f4       	brne	.+10     	; 0x2058 <command_handler+0x188>
		uint8_t jmpE = (uint8_t)((BOOT_SECTION_START/2)>>16);
		uint8_t jmpH = (uint8_t)((BOOT_SECTION_START/2)>>8);
		uint8_t jmpL = (uint8_t)((BOOT_SECTION_START/2)>>0);
		//cli();
		//CCPWrite(&(PMIC.CTRL), PMIC_IVSEL_bm );
		asm("ldi ZH, %0"::"i" (jmpH):"r30","r31");
    204e:	f0 e0       	ldi	r31, 0x00	; 0
		asm("ldi ZL, %0"::"i" (jmpL):"r30","r31");
    2050:	e0 e0       	ldi	r30, 0x00	; 0
		EIND = jmpE;
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	8c bf       	out	0x3c, r24	; 60
		asm("eijmp");
    2056:	19 94       	eijmp
	else{
		//no recognized command
	}

	return 0;
}
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	08 95       	ret

00002066 <command_parse_execute>:

void command_parse_execute(char *command){
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	64 97       	sbiw	r28, 0x14	; 20
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	de bf       	out	0x3e, r29	; 62

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
    207c:	69 e1       	ldi	r22, 0x19	; 25
    207e:	73 e2       	ldi	r23, 0x23	; 35
    2080:	0e 94 19 17 	call	0x2e32	; 0x2e32 <strtok>
	while(pch != NULL) {
    2084:	00 97       	sbiw	r24, 0x00	; 0
    2086:	d9 f0       	breq	.+54     	; 0x20be <command_parse_execute+0x58>
		remotch_args[arg_index] = pch;
    2088:	89 83       	std	Y+1, r24	; 0x01
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	7e 01       	movw	r14, r28
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	e8 0e       	add	r14, r24
    2092:	f1 1c       	adc	r15, r1
    2094:	01 e0       	ldi	r16, 0x01	; 1
    2096:	10 e0       	ldi	r17, 0x00	; 0
    2098:	09 c0       	rjmp	.+18     	; 0x20ac <command_parse_execute+0x46>
    209a:	f7 01       	movw	r30, r14
    209c:	81 93       	st	Z+, r24
    209e:	91 93       	st	Z+, r25
    20a0:	7f 01       	movw	r14, r30
		arg_index++;
    20a2:	0f 5f       	subi	r16, 0xFF	; 255
    20a4:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
    20a6:	0a 30       	cpi	r16, 0x0A	; 10
    20a8:	11 05       	cpc	r17, r1
    20aa:	59 f0       	breq	.+22     	; 0x20c2 <command_parse_execute+0x5c>
		pch = strtok (NULL, " ,");
    20ac:	69 e1       	ldi	r22, 0x19	; 25
    20ae:	73 e2       	ldi	r23, 0x23	; 35
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 19 17 	call	0x2e32	; 0x2e32 <strtok>

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	79 f7       	brne	.-34     	; 0x209a <command_parse_execute+0x34>
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <command_parse_execute+0x5c>
	return 0;
}

void command_parse_execute(char *command){

	int arg_index = 0;
    20be:	00 e0       	ldi	r16, 0x00	; 0
    20c0:	10 e0       	ldi	r17, 0x00	; 0
		remotch_args[arg_index] = pch;
		arg_index++;
		if(arg_index >=10) break;
		pch = strtok (NULL, " ,");
	}
	command_handler(remotch_args,arg_index);
    20c2:	b8 01       	movw	r22, r16
    20c4:	ce 01       	movw	r24, r28
    20c6:	01 96       	adiw	r24, 0x01	; 1
    20c8:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <command_handler>
}
    20cc:	64 96       	adiw	r28, 0x14	; 20
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	df 91       	pop	r29
    20d4:	cf 91       	pop	r28
    20d6:	1f 91       	pop	r17
    20d8:	0f 91       	pop	r16
    20da:	ff 90       	pop	r15
    20dc:	ef 90       	pop	r14
    20de:	08 95       	ret

000020e0 <RadioReset>:
RadioConfig_t RadioConfig;
RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){

  RadioConfig.DataReadyInterruptEnabled = 0;
    20e0:	ed e7       	ldi	r30, 0x7D	; 125
    20e2:	f3 e9       	ldi	r31, 0x93	; 147
    20e4:	10 82       	st	Z, r1
  RadioConfig.DataSentInterruptFlagEnabled = 0;
    20e6:	11 82       	std	Z+1, r1	; 0x01
  RadioConfig.MaxRetryInterruptFlagEnabled = 0;
    20e8:	12 82       	std	Z+2, r1	; 0x02
  RadioConfig.Crc = CONFIG_CRC_16BIT;
    20ea:	8c e0       	ldi	r24, 0x0C	; 12
    20ec:	83 83       	std	Z+3, r24	; 0x03
  RadioConfig.AutoReTransmissionCount = 15;
    20ee:	8f e0       	ldi	r24, 0x0F	; 15
    20f0:	84 83       	std	Z+4, r24	; 0x04
  RadioConfig.AutoReTransmitDelayX250us = 15;
    20f2:	85 83       	std	Z+5, r24	; 0x05
  RadioConfig.frequencyOffset = 2;
    20f4:	42 e0       	ldi	r20, 0x02	; 2
    20f6:	46 83       	std	Z+6, r20	; 0x06
  RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
    20f8:	88 e0       	ldi	r24, 0x08	; 8
    20fa:	87 83       	std	Z+7, r24	; 0x07
  RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
    20fc:	86 e0       	ldi	r24, 0x06	; 6
    20fe:	80 87       	std	Z+8, r24	; 0x08
  RadioConfig.PllLock = 0;
    2100:	11 86       	std	Z+9, r1	; 0x09
  RadioConfig.ContWaveEnabled = 0;
    2102:	12 86       	std	Z+10, r1	; 0x0a
  RadioConfig.FeatureDynamicPayloadEnabled = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	83 87       	std	Z+11, r24	; 0x0b
  RadioConfig.FeaturePayloadWithAckEnabled = 1;
    2108:	84 87       	std	Z+12, r24	; 0x0c
  RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
    210a:	85 87       	std	Z+13, r24	; 0x0d
  
    RxPipeConfig[0].address = 0x11223344EE;
    210c:	e3 e9       	ldi	r30, 0x93	; 147
    210e:	f3 e9       	ldi	r31, 0x93	; 147
    2110:	9e ee       	ldi	r25, 0xEE	; 238
    2112:	92 83       	std	Z+2, r25	; 0x02
    2114:	94 e4       	ldi	r25, 0x44	; 68
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	93 e3       	ldi	r25, 0x33	; 51
    211a:	94 83       	std	Z+4, r25	; 0x04
    211c:	92 e2       	ldi	r25, 0x22	; 34
    211e:	95 83       	std	Z+5, r25	; 0x05
    2120:	91 e1       	ldi	r25, 0x11	; 17
    2122:	96 83       	std	Z+6, r25	; 0x06
    2124:	17 82       	std	Z+7, r1	; 0x07
    2126:	10 86       	std	Z+8, r1	; 0x08
    2128:	11 86       	std	Z+9, r1	; 0x09
    RxPipeConfig[1].address = 0x9A4524CE01;
    212a:	86 87       	std	Z+14, r24	; 0x0e
    212c:	3e ec       	ldi	r19, 0xCE	; 206
    212e:	37 87       	std	Z+15, r19	; 0x0f
    2130:	24 e2       	ldi	r18, 0x24	; 36
    2132:	20 8b       	std	Z+16, r18	; 0x10
    2134:	95 e4       	ldi	r25, 0x45	; 69
    2136:	91 8b       	std	Z+17, r25	; 0x11
    2138:	8a e9       	ldi	r24, 0x9A	; 154
    213a:	82 8b       	std	Z+18, r24	; 0x12
    213c:	13 8a       	std	Z+19, r1	; 0x13
    213e:	14 8a       	std	Z+20, r1	; 0x14
    2140:	15 8a       	std	Z+21, r1	; 0x15
    RxPipeConfig[2].address = 0x9A4524CE02;
    2142:	42 8f       	std	Z+26, r20	; 0x1a
    2144:	33 8f       	std	Z+27, r19	; 0x1b
    2146:	24 8f       	std	Z+28, r18	; 0x1c
    2148:	95 8f       	std	Z+29, r25	; 0x1d
    214a:	86 8f       	std	Z+30, r24	; 0x1e
    214c:	17 8e       	std	Z+31, r1	; 0x1f
    214e:	10 a2       	std	Z+32, r1	; 0x20
    2150:	11 a2       	std	Z+33, r1	; 0x21
    RxPipeConfig[3].address = 0x9A4524CE03;
    2152:	43 e0       	ldi	r20, 0x03	; 3
    2154:	46 a3       	std	Z+38, r20	; 0x26
    2156:	37 a3       	std	Z+39, r19	; 0x27
    2158:	20 a7       	std	Z+40, r18	; 0x28
    215a:	91 a7       	std	Z+41, r25	; 0x29
    215c:	82 a7       	std	Z+42, r24	; 0x2a
    215e:	13 a6       	std	Z+43, r1	; 0x2b
    2160:	14 a6       	std	Z+44, r1	; 0x2c
    2162:	15 a6       	std	Z+45, r1	; 0x2d
    RxPipeConfig[4].address = 0x9A4524CE04;
    2164:	44 e0       	ldi	r20, 0x04	; 4
    2166:	42 ab       	std	Z+50, r20	; 0x32
    2168:	33 ab       	std	Z+51, r19	; 0x33
    216a:	24 ab       	std	Z+52, r18	; 0x34
    216c:	95 ab       	std	Z+53, r25	; 0x35
    216e:	86 ab       	std	Z+54, r24	; 0x36
    2170:	17 aa       	std	Z+55, r1	; 0x37
    2172:	10 ae       	std	Z+56, r1	; 0x38
    2174:	11 ae       	std	Z+57, r1	; 0x39
    RxPipeConfig[5].address = 0x9A4524CE05;
    2176:	e1 ed       	ldi	r30, 0xD1	; 209
    2178:	f3 e9       	ldi	r31, 0x93	; 147
    217a:	45 e0       	ldi	r20, 0x05	; 5
    217c:	40 83       	st	Z, r20
    217e:	31 83       	std	Z+1, r19	; 0x01
    2180:	22 83       	std	Z+2, r18	; 0x02
    2182:	93 83       	std	Z+3, r25	; 0x03
    2184:	84 83       	std	Z+4, r24	; 0x04
    2186:	15 82       	std	Z+5, r1	; 0x05
    2188:	16 82       	std	Z+6, r1	; 0x06
    218a:	17 82       	std	Z+7, r1	; 0x07
    218c:	ee e9       	ldi	r30, 0x9E	; 158
    218e:	f3 e9       	ldi	r31, 0x93	; 147
    2190:	26 ee       	ldi	r18, 0xE6	; 230
    2192:	33 e9       	ldi	r19, 0x93	; 147

  
  int i;
  for(i=0;i<6;i++){
    RxPipeConfig[i].PipeEnabled = 1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	df 01       	movw	r26, r30
    2198:	1b 97       	sbiw	r26, 0x0b	; 11
    219a:	8c 93       	st	X, r24
    219c:	11 96       	adiw	r26, 0x01	; 1
    RxPipeConfig[i].autoAckEnabled = 1;
    219e:	8c 93       	st	X, r24
    RxPipeConfig[i].dynamicPayloadEnabled = 1;
    21a0:	80 83       	st	Z, r24
    21a2:	3c 96       	adiw	r30, 0x0c	; 12
    RxPipeConfig[4].address = 0x9A4524CE04;
    RxPipeConfig[5].address = 0x9A4524CE05;

  
  int i;
  for(i=0;i<6;i++){
    21a4:	e2 17       	cp	r30, r18
    21a6:	f3 07       	cpc	r31, r19
    21a8:	b1 f7       	brne	.-20     	; 0x2196 <RadioReset+0xb6>
    RxPipeConfig[i].autoAckEnabled = 1;
    RxPipeConfig[i].dynamicPayloadEnabled = 1;
  }
  
  
  ResetConfigValues(&RadioConfig, RxPipeConfig);
    21aa:	63 e9       	ldi	r22, 0x93	; 147
    21ac:	73 e9       	ldi	r23, 0x93	; 147
    21ae:	8d e7       	ldi	r24, 0x7D	; 125
    21b0:	93 e9       	ldi	r25, 0x93	; 147
    21b2:	0e 94 04 02 	call	0x408	; 0x408 <ResetConfigValues>
    21b6:	08 95       	ret

000021b8 <radio_thread>:





void radio_thread( void *pvParameters ){
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	af 97       	sbiw	r28, 0x2f	; 47
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	de bf       	out	0x3e, r29	; 62
	
  RadioReset();
    21c6:	0e 94 70 10 	call	0x20e0	; 0x20e0 <RadioReset>
  
	while(1){
		if(readable()){
			uint8_t RxData[32];
			Payload_t payload;
			payload.data = RxData;
    21ca:	8e 01       	movw	r16, r28
    21cc:	0f 5f       	subi	r16, 0xFF	; 255
    21ce:	1f 4f       	sbci	r17, 0xFF	; 255
  payload.length = strlen(myMesg);
  payload.retransmitCount = 15;
  
  
	while(1){
		if(readable()){
    21d0:	0e 94 05 03 	call	0x60a	; 0x60a <readable>
    21d4:	88 23       	and	r24, r24
    21d6:	a9 f0       	breq	.+42     	; 0x2202 <radio_thread+0x4a>
			uint8_t RxData[32];
			Payload_t payload;
			payload.data = RxData;
    21d8:	0b a7       	std	Y+43, r16	; 0x2b
    21da:	1c a7       	std	Y+44, r17	; 0x2c
          
			clear_data_ready_flag();
    21dc:	0e 94 22 05 	call	0xa44	; 0xa44 <clear_data_ready_flag>
			readPayload(&payload);
    21e0:	ce 01       	movw	r24, r28
    21e2:	81 96       	adiw	r24, 0x21	; 33
    21e4:	0e 94 12 03 	call	0x624	; 0x624 <readPayload>
			payload.data[payload.length] = '\0';
    21e8:	eb a5       	ldd	r30, Y+43	; 0x2b
    21ea:	fc a5       	ldd	r31, Y+44	; 0x2c
    21ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    21f0:	e8 0f       	add	r30, r24
    21f2:	f9 1f       	adc	r31, r25
    21f4:	10 82       	st	Z, r1
			command_parse_execute(payload.data);
    21f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fa:	0e 94 33 10 	call	0x2066	; 0x2066 <command_parse_execute>

			flush_rx();
    21fe:	0e 94 29 04 	call	0x852	; 0x852 <flush_rx>

		}
    
		vTaskDelay(200);
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 13 0b 	call	0x1626	; 0x1626 <vTaskDelay>
	}
    220a:	e2 cf       	rjmp	.-60     	; 0x21d0 <radio_thread+0x18>

0000220c <main>:
 */
int main(void)
{


	board_config();
    220c:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <board_config>
	
	xTaskCreate(radio_thread,(signed portCHAR *) "t1", 500, NULL, tskIDLE_PRIORITY, NULL );
    2210:	a1 2c       	mov	r10, r1
    2212:	b1 2c       	mov	r11, r1
    2214:	c1 2c       	mov	r12, r1
    2216:	d1 2c       	mov	r13, r1
    2218:	e1 2c       	mov	r14, r1
    221a:	f1 2c       	mov	r15, r1
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	44 ef       	ldi	r20, 0xF4	; 244
    2224:	51 e0       	ldi	r21, 0x01	; 1
    2226:	6c e1       	ldi	r22, 0x1C	; 28
    2228:	73 e2       	ldi	r23, 0x23	; 35
    222a:	8c ed       	ldi	r24, 0xDC	; 220
    222c:	90 e1       	ldi	r25, 0x10	; 16
    222e:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskGenericCreate>
	xTaskCreate(relay_thread,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	44 ef       	ldi	r20, 0xF4	; 244
    2238:	51 e0       	ldi	r21, 0x01	; 1
    223a:	6f e1       	ldi	r22, 0x1F	; 31
    223c:	73 e2       	ldi	r23, 0x23	; 35
    223e:	8b eb       	ldi	r24, 0xBB	; 187
    2240:	9c e0       	ldi	r25, 0x0C	; 12
    2242:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskGenericCreate>
	xTaskCreate(glcd_thread,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	44 ef       	ldi	r20, 0xF4	; 244
    224c:	51 e0       	ldi	r21, 0x01	; 1
    224e:	62 e2       	ldi	r22, 0x22	; 34
    2250:	73 e2       	ldi	r23, 0x23	; 35
    2252:	89 e8       	ldi	r24, 0x89	; 137
    2254:	9e e0       	ldi	r25, 0x0E	; 14
    2256:	0e 94 82 08 	call	0x1104	; 0x1104 <xTaskGenericCreate>
	
	vTaskStartScheduler();
    225a:	0e 94 8a 09 	call	0x1314	; 0x1314 <vTaskStartScheduler>


	while(1)
	{

	}
    225e:	ff cf       	rjmp	.-2      	; 0x225e <main+0x52>

00002260 <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    2260:	0f 93       	push	r16
    2262:	20 2b       	or	r18, r16
    2264:	61 11       	cpse	r22, r1
    2266:	02 c0       	rjmp	.+4      	; 0x226c <DigitalPin_Config+0xc>
    2268:	00 e0       	ldi	r16, 0x00	; 0
    226a:	01 c0       	rjmp	.+2      	; 0x226e <DigitalPin_Config+0xe>
    226c:	00 e8       	ldi	r16, 0x80	; 128
    226e:	20 2b       	or	r18, r16
    2270:	41 11       	cpse	r20, r1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DigitalPin_Config+0x18>
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	01 c0       	rjmp	.+2      	; 0x227a <DigitalPin_Config+0x1a>
    2278:	00 e4       	ldi	r16, 0x40	; 64
    227a:	20 2b       	or	r18, r16
    227c:	3f b7       	in	r19, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	dc 01       	movw	r26, r24
    2282:	12 96       	adiw	r26, 0x02	; 2
    2284:	4c 91       	ld	r20, X
    2286:	12 97       	sbiw	r26, 0x02	; 2
    2288:	40 93 b0 00 	sts	0x00B0, r20	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    228c:	ed 91       	ld	r30, X+
    228e:	fc 91       	ld	r31, X
    2290:	20 8b       	std	Z+16, r18	; 0x10
    2292:	3f bf       	out	0x3f, r19	; 63
    2294:	0f 91       	pop	r16
    2296:	08 95       	ret

00002298 <DigitalPin_SetDir>:
    2298:	66 23       	and	r22, r22
    229a:	81 f0       	breq	.+32     	; 0x22bc <DigitalPin_SetDir+0x24>
    229c:	dc 01       	movw	r26, r24
    229e:	ed 91       	ld	r30, X+
    22a0:	fc 91       	ld	r31, X
    22a2:	11 97       	sbiw	r26, 0x01	; 1
    22a4:	21 e0       	ldi	r18, 0x01	; 1
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	12 96       	adiw	r26, 0x02	; 2
    22ac:	0c 90       	ld	r0, X
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <DigitalPin_SetDir+0x1c>
    22b0:	44 0f       	add	r20, r20
    22b2:	55 1f       	adc	r21, r21
    22b4:	0a 94       	dec	r0
    22b6:	e2 f7       	brpl	.-8      	; 0x22b0 <DigitalPin_SetDir+0x18>
    22b8:	41 83       	std	Z+1, r20	; 0x01
    22ba:	08 95       	ret
    22bc:	dc 01       	movw	r26, r24
    22be:	ed 91       	ld	r30, X+
    22c0:	fc 91       	ld	r31, X
    22c2:	11 97       	sbiw	r26, 0x01	; 1
    22c4:	21 e0       	ldi	r18, 0x01	; 1
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	a9 01       	movw	r20, r18
    22ca:	12 96       	adiw	r26, 0x02	; 2
    22cc:	0c 90       	ld	r0, X
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <DigitalPin_SetDir+0x3c>
    22d0:	44 0f       	add	r20, r20
    22d2:	55 1f       	adc	r21, r21
    22d4:	0a 94       	dec	r0
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <DigitalPin_SetDir+0x38>
    22d8:	42 83       	std	Z+2, r20	; 0x02
    22da:	08 95       	ret

000022dc <DigitalPin_SetValue>:
    22dc:	dc 01       	movw	r26, r24
    22de:	ed 91       	ld	r30, X+
    22e0:	fc 91       	ld	r31, X
    22e2:	11 97       	sbiw	r26, 0x01	; 1
    22e4:	21 e0       	ldi	r18, 0x01	; 1
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	a9 01       	movw	r20, r18
    22ea:	12 96       	adiw	r26, 0x02	; 2
    22ec:	0c 90       	ld	r0, X
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <DigitalPin_SetValue+0x18>
    22f0:	44 0f       	add	r20, r20
    22f2:	55 1f       	adc	r21, r21
    22f4:	0a 94       	dec	r0
    22f6:	e2 f7       	brpl	.-8      	; 0x22f0 <DigitalPin_SetValue+0x14>
    22f8:	45 83       	std	Z+5, r20	; 0x05
    22fa:	08 95       	ret

000022fc <DigitalPin_ClearValue>:
    22fc:	dc 01       	movw	r26, r24
    22fe:	ed 91       	ld	r30, X+
    2300:	fc 91       	ld	r31, X
    2302:	11 97       	sbiw	r26, 0x01	; 1
    2304:	21 e0       	ldi	r18, 0x01	; 1
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	a9 01       	movw	r20, r18
    230a:	12 96       	adiw	r26, 0x02	; 2
    230c:	0c 90       	ld	r0, X
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <DigitalPin_ClearValue+0x18>
    2310:	44 0f       	add	r20, r20
    2312:	55 1f       	adc	r21, r21
    2314:	0a 94       	dec	r0
    2316:	e2 f7       	brpl	.-8      	; 0x2310 <DigitalPin_ClearValue+0x14>
    2318:	46 83       	std	Z+6, r20	; 0x06
    231a:	08 95       	ret

0000231c <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    231c:	dc 01       	movw	r26, r24
    231e:	ed 91       	ld	r30, X+
    2320:	fc 91       	ld	r31, X
    2322:	11 97       	sbiw	r26, 0x01	; 1
    2324:	20 85       	ldd	r18, Z+8	; 0x08
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	f9 01       	movw	r30, r18
    232a:	12 96       	adiw	r26, 0x02	; 2
    232c:	0c 90       	ld	r0, X
    232e:	02 c0       	rjmp	.+4      	; 0x2334 <DigitalPin_GetValue+0x18>
    2330:	f5 95       	asr	r31
    2332:	e7 95       	ror	r30
    2334:	0a 94       	dec	r0
    2336:	e2 f7       	brpl	.-8      	; 0x2330 <DigitalPin_GetValue+0x14>
    2338:	cf 01       	movw	r24, r30
	else pinValue = 0;
	return pinValue;
    233a:	81 70       	andi	r24, 0x01	; 1
    233c:	08 95       	ret

0000233e <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    233e:	1f 92       	push	r1
    2340:	0f 92       	push	r0
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	0f 92       	push	r0
    2346:	11 24       	eor	r1, r1

}
    2348:	0f 90       	pop	r0
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	0f 90       	pop	r0
    234e:	1f 90       	pop	r1
    2350:	18 95       	reti

00002352 <__vector_27>:

ISR(USARTC0_TXC_vect){
    2352:	1f 92       	push	r1
    2354:	0f 92       	push	r0
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	0f 92       	push	r0
    235a:	11 24       	eor	r1, r1
	
}
    235c:	0f 90       	pop	r0
    235e:	0f be       	out	0x3f, r0	; 63
    2360:	0f 90       	pop	r0
    2362:	1f 90       	pop	r1
    2364:	18 95       	reti

00002366 <__vector_26>:

ISR(USARTC0_DRE_vect){
    2366:	1f 92       	push	r1
    2368:	0f 92       	push	r0
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	0f 92       	push	r0
    236e:	11 24       	eor	r1, r1
	
}
    2370:	0f 90       	pop	r0
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	0f 90       	pop	r0
    2376:	1f 90       	pop	r1
    2378:	18 95       	reti

0000237a <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    237a:	1f 92       	push	r1
    237c:	0f 92       	push	r0
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	0f 92       	push	r0
    2382:	11 24       	eor	r1, r1
	
}
    2384:	0f 90       	pop	r0
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	0f 90       	pop	r0
    238a:	1f 90       	pop	r1
    238c:	18 95       	reti

0000238e <__vector_30>:

ISR(USARTC1_TXC_vect){
    238e:	1f 92       	push	r1
    2390:	0f 92       	push	r0
    2392:	0f b6       	in	r0, 0x3f	; 63
    2394:	0f 92       	push	r0
    2396:	11 24       	eor	r1, r1
	
}
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	0f 90       	pop	r0
    239e:	1f 90       	pop	r1
    23a0:	18 95       	reti

000023a2 <__vector_29>:

ISR(USARTC1_DRE_vect){
    23a2:	1f 92       	push	r1
    23a4:	0f 92       	push	r0
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	0f 92       	push	r0
    23aa:	11 24       	eor	r1, r1
	
}
    23ac:	0f 90       	pop	r0
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	0f 90       	pop	r0
    23b2:	1f 90       	pop	r1
    23b4:	18 95       	reti

000023b6 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    23b6:	1f 92       	push	r1
    23b8:	0f 92       	push	r0
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	0f 92       	push	r0
    23be:	11 24       	eor	r1, r1
	
}
    23c0:	0f 90       	pop	r0
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	0f 90       	pop	r0
    23c6:	1f 90       	pop	r1
    23c8:	18 95       	reti

000023ca <__vector_90>:

ISR(USARTD0_TXC_vect){
    23ca:	1f 92       	push	r1
    23cc:	0f 92       	push	r0
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	0f 92       	push	r0
    23d2:	11 24       	eor	r1, r1
	
}
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <__vector_89>:

ISR(USARTD0_DRE_vect){
    23de:	1f 92       	push	r1
    23e0:	0f 92       	push	r0
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	0f 92       	push	r0
    23e6:	11 24       	eor	r1, r1
	
}
    23e8:	0f 90       	pop	r0
    23ea:	0f be       	out	0x3f, r0	; 63
    23ec:	0f 90       	pop	r0
    23ee:	1f 90       	pop	r1
    23f0:	18 95       	reti

000023f2 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    23f2:	1f 92       	push	r1
    23f4:	0f 92       	push	r0
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	0f 92       	push	r0
    23fa:	11 24       	eor	r1, r1
	
}
    23fc:	0f 90       	pop	r0
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	0f 90       	pop	r0
    2402:	1f 90       	pop	r1
    2404:	18 95       	reti

00002406 <__vector_60>:

ISR(USARTE0_TXC_vect){
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
	
}
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	0f 90       	pop	r0
    2416:	1f 90       	pop	r1
    2418:	18 95       	reti

0000241a <__vector_59>:

ISR(USARTE0_DRE_vect){
    241a:	1f 92       	push	r1
    241c:	0f 92       	push	r0
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	0f 92       	push	r0
    2422:	11 24       	eor	r1, r1
	
}
    2424:	0f 90       	pop	r0
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	0f 90       	pop	r0
    242a:	1f 90       	pop	r1
    242c:	18 95       	reti

0000242e <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    242e:	0f 93       	push	r16
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	1f 92       	push	r1
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	2f b7       	in	r18, 0x3f	; 63
    243c:	29 83       	std	Y+1, r18	; 0x01
    243e:	f8 94       	cli
    2440:	1b be       	out	0x3b, r1	; 59
    2442:	fc 01       	movw	r30, r24
    2444:	08 ed       	ldi	r16, 0xD8	; 216
    2446:	04 bf       	out	0x34, r16	; 52
    2448:	60 83       	st	Z, r22
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	8f bf       	out	0x3f, r24	; 63
    244e:	0f 90       	pop	r0
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	0f 91       	pop	r16
    2456:	08 95       	ret

00002458 <CLKSYS_Disable>:
    2458:	e0 e5       	ldi	r30, 0x50	; 80
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	90 81       	ld	r25, Z
    245e:	28 2f       	mov	r18, r24
    2460:	20 95       	com	r18
    2462:	92 23       	and	r25, r18
    2464:	90 83       	st	Z, r25
    2466:	90 81       	ld	r25, Z
    2468:	89 23       	and	r24, r25
    246a:	08 95       	ret

0000246c <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2474:	00 e4       	ldi	r16, 0x40	; 64
    2476:	10 e0       	ldi	r17, 0x00	; 0
    2478:	f8 01       	movw	r30, r16
    247a:	60 81       	ld	r22, Z
    247c:	68 7f       	andi	r22, 0xF8	; 248
    247e:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    2480:	80 e4       	ldi	r24, 0x40	; 64
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 17 12 	call	0x242e	; 0x242e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    2488:	f8 01       	movw	r30, r16
    248a:	80 81       	ld	r24, Z
	return clkCtrl;
}
    248c:	8c 23       	and	r24, r28
    248e:	cf 91       	pop	r28
    2490:	1f 91       	pop	r17
    2492:	0f 91       	pop	r16
    2494:	08 95       	ret

00002496 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    2496:	fc 01       	movw	r30, r24
    2498:	90 81       	ld	r25, Z
    249a:	90 7f       	andi	r25, 0xF0	; 240
    249c:	69 2b       	or	r22, r25
    249e:	60 83       	st	Z, r22
    24a0:	08 95       	ret

000024a2 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    24a2:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    24a4:	96 81       	ldd	r25, Z+6	; 0x06
    24a6:	9c 7f       	andi	r25, 0xFC	; 252
    24a8:	69 2b       	or	r22, r25
    24aa:	66 83       	std	Z+6, r22	; 0x06
    24ac:	08 95       	ret

000024ae <vfprintf>:
    24ae:	2f 92       	push	r2
    24b0:	3f 92       	push	r3
    24b2:	4f 92       	push	r4
    24b4:	5f 92       	push	r5
    24b6:	6f 92       	push	r6
    24b8:	7f 92       	push	r7
    24ba:	8f 92       	push	r8
    24bc:	9f 92       	push	r9
    24be:	af 92       	push	r10
    24c0:	bf 92       	push	r11
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	0f 93       	push	r16
    24cc:	1f 93       	push	r17
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	63 97       	sbiw	r28, 0x13	; 19
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	6c 01       	movw	r12, r24
    24de:	4b 01       	movw	r8, r22
    24e0:	2a 01       	movw	r4, r20
    24e2:	fc 01       	movw	r30, r24
    24e4:	16 82       	std	Z+6, r1	; 0x06
    24e6:	17 82       	std	Z+7, r1	; 0x07
    24e8:	83 81       	ldd	r24, Z+3	; 0x03
    24ea:	81 ff       	sbrs	r24, 1
    24ec:	43 c3       	rjmp	.+1670   	; 0x2b74 <vfprintf+0x6c6>
    24ee:	ae 01       	movw	r20, r28
    24f0:	4f 5f       	subi	r20, 0xFF	; 255
    24f2:	5f 4f       	sbci	r21, 0xFF	; 255
    24f4:	3a 01       	movw	r6, r20
    24f6:	f6 01       	movw	r30, r12
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	f4 01       	movw	r30, r8
    24fc:	93 fd       	sbrc	r25, 3
    24fe:	85 91       	lpm	r24, Z+
    2500:	93 ff       	sbrs	r25, 3
    2502:	81 91       	ld	r24, Z+
    2504:	4f 01       	movw	r8, r30
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <vfprintf+0x5e>
    250a:	30 c3       	rjmp	.+1632   	; 0x2b6c <vfprintf+0x6be>
    250c:	85 32       	cpi	r24, 0x25	; 37
    250e:	39 f4       	brne	.+14     	; 0x251e <vfprintf+0x70>
    2510:	93 fd       	sbrc	r25, 3
    2512:	85 91       	lpm	r24, Z+
    2514:	93 ff       	sbrs	r25, 3
    2516:	81 91       	ld	r24, Z+
    2518:	4f 01       	movw	r8, r30
    251a:	85 32       	cpi	r24, 0x25	; 37
    251c:	39 f4       	brne	.+14     	; 0x252c <vfprintf+0x7e>
    251e:	b6 01       	movw	r22, r12
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2526:	52 01       	movw	r10, r4
    2528:	25 01       	movw	r4, r10
    252a:	e5 cf       	rjmp	.-54     	; 0x24f6 <vfprintf+0x48>
    252c:	10 e0       	ldi	r17, 0x00	; 0
    252e:	f1 2c       	mov	r15, r1
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	20 32       	cpi	r18, 0x20	; 32
    2534:	a0 f4       	brcc	.+40     	; 0x255e <vfprintf+0xb0>
    2536:	8b 32       	cpi	r24, 0x2B	; 43
    2538:	69 f0       	breq	.+26     	; 0x2554 <vfprintf+0xa6>
    253a:	30 f4       	brcc	.+12     	; 0x2548 <vfprintf+0x9a>
    253c:	80 32       	cpi	r24, 0x20	; 32
    253e:	59 f0       	breq	.+22     	; 0x2556 <vfprintf+0xa8>
    2540:	83 32       	cpi	r24, 0x23	; 35
    2542:	69 f4       	brne	.+26     	; 0x255e <vfprintf+0xb0>
    2544:	20 61       	ori	r18, 0x10	; 16
    2546:	2c c0       	rjmp	.+88     	; 0x25a0 <vfprintf+0xf2>
    2548:	8d 32       	cpi	r24, 0x2D	; 45
    254a:	39 f0       	breq	.+14     	; 0x255a <vfprintf+0xac>
    254c:	80 33       	cpi	r24, 0x30	; 48
    254e:	39 f4       	brne	.+14     	; 0x255e <vfprintf+0xb0>
    2550:	21 60       	ori	r18, 0x01	; 1
    2552:	26 c0       	rjmp	.+76     	; 0x25a0 <vfprintf+0xf2>
    2554:	22 60       	ori	r18, 0x02	; 2
    2556:	24 60       	ori	r18, 0x04	; 4
    2558:	23 c0       	rjmp	.+70     	; 0x25a0 <vfprintf+0xf2>
    255a:	28 60       	ori	r18, 0x08	; 8
    255c:	21 c0       	rjmp	.+66     	; 0x25a0 <vfprintf+0xf2>
    255e:	27 fd       	sbrc	r18, 7
    2560:	27 c0       	rjmp	.+78     	; 0x25b0 <vfprintf+0x102>
    2562:	30 ed       	ldi	r19, 0xD0	; 208
    2564:	38 0f       	add	r19, r24
    2566:	3a 30       	cpi	r19, 0x0A	; 10
    2568:	78 f4       	brcc	.+30     	; 0x2588 <vfprintf+0xda>
    256a:	26 ff       	sbrs	r18, 6
    256c:	06 c0       	rjmp	.+12     	; 0x257a <vfprintf+0xcc>
    256e:	fa e0       	ldi	r31, 0x0A	; 10
    2570:	1f 9f       	mul	r17, r31
    2572:	30 0d       	add	r19, r0
    2574:	11 24       	eor	r1, r1
    2576:	13 2f       	mov	r17, r19
    2578:	13 c0       	rjmp	.+38     	; 0x25a0 <vfprintf+0xf2>
    257a:	4a e0       	ldi	r20, 0x0A	; 10
    257c:	f4 9e       	mul	r15, r20
    257e:	30 0d       	add	r19, r0
    2580:	11 24       	eor	r1, r1
    2582:	f3 2e       	mov	r15, r19
    2584:	20 62       	ori	r18, 0x20	; 32
    2586:	0c c0       	rjmp	.+24     	; 0x25a0 <vfprintf+0xf2>
    2588:	8e 32       	cpi	r24, 0x2E	; 46
    258a:	21 f4       	brne	.+8      	; 0x2594 <vfprintf+0xe6>
    258c:	26 fd       	sbrc	r18, 6
    258e:	ee c2       	rjmp	.+1500   	; 0x2b6c <vfprintf+0x6be>
    2590:	20 64       	ori	r18, 0x40	; 64
    2592:	06 c0       	rjmp	.+12     	; 0x25a0 <vfprintf+0xf2>
    2594:	8c 36       	cpi	r24, 0x6C	; 108
    2596:	11 f4       	brne	.+4      	; 0x259c <vfprintf+0xee>
    2598:	20 68       	ori	r18, 0x80	; 128
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0xf2>
    259c:	88 36       	cpi	r24, 0x68	; 104
    259e:	41 f4       	brne	.+16     	; 0x25b0 <vfprintf+0x102>
    25a0:	f4 01       	movw	r30, r8
    25a2:	93 fd       	sbrc	r25, 3
    25a4:	85 91       	lpm	r24, Z+
    25a6:	93 ff       	sbrs	r25, 3
    25a8:	81 91       	ld	r24, Z+
    25aa:	4f 01       	movw	r8, r30
    25ac:	81 11       	cpse	r24, r1
    25ae:	c1 cf       	rjmp	.-126    	; 0x2532 <vfprintf+0x84>
    25b0:	9b eb       	ldi	r25, 0xBB	; 187
    25b2:	98 0f       	add	r25, r24
    25b4:	93 30       	cpi	r25, 0x03	; 3
    25b6:	18 f4       	brcc	.+6      	; 0x25be <vfprintf+0x110>
    25b8:	20 61       	ori	r18, 0x10	; 16
    25ba:	80 5e       	subi	r24, 0xE0	; 224
    25bc:	06 c0       	rjmp	.+12     	; 0x25ca <vfprintf+0x11c>
    25be:	9b e9       	ldi	r25, 0x9B	; 155
    25c0:	98 0f       	add	r25, r24
    25c2:	93 30       	cpi	r25, 0x03	; 3
    25c4:	08 f0       	brcs	.+2      	; 0x25c8 <vfprintf+0x11a>
    25c6:	71 c1       	rjmp	.+738    	; 0x28aa <vfprintf+0x3fc>
    25c8:	2f 7e       	andi	r18, 0xEF	; 239
    25ca:	26 ff       	sbrs	r18, 6
    25cc:	16 e0       	ldi	r17, 0x06	; 6
    25ce:	2f 73       	andi	r18, 0x3F	; 63
    25d0:	32 2e       	mov	r3, r18
    25d2:	85 36       	cpi	r24, 0x65	; 101
    25d4:	19 f4       	brne	.+6      	; 0x25dc <vfprintf+0x12e>
    25d6:	20 64       	ori	r18, 0x40	; 64
    25d8:	32 2e       	mov	r3, r18
    25da:	08 c0       	rjmp	.+16     	; 0x25ec <vfprintf+0x13e>
    25dc:	86 36       	cpi	r24, 0x66	; 102
    25de:	21 f4       	brne	.+8      	; 0x25e8 <vfprintf+0x13a>
    25e0:	f2 2f       	mov	r31, r18
    25e2:	f0 68       	ori	r31, 0x80	; 128
    25e4:	3f 2e       	mov	r3, r31
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <vfprintf+0x13e>
    25e8:	11 11       	cpse	r17, r1
    25ea:	11 50       	subi	r17, 0x01	; 1
    25ec:	37 fe       	sbrs	r3, 7
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <vfprintf+0x150>
    25f0:	1c 33       	cpi	r17, 0x3C	; 60
    25f2:	50 f4       	brcc	.+20     	; 0x2608 <vfprintf+0x15a>
    25f4:	ee 24       	eor	r14, r14
    25f6:	e3 94       	inc	r14
    25f8:	e1 0e       	add	r14, r17
    25fa:	27 e0       	ldi	r18, 0x07	; 7
    25fc:	0b c0       	rjmp	.+22     	; 0x2614 <vfprintf+0x166>
    25fe:	18 30       	cpi	r17, 0x08	; 8
    2600:	38 f0       	brcs	.+14     	; 0x2610 <vfprintf+0x162>
    2602:	27 e0       	ldi	r18, 0x07	; 7
    2604:	17 e0       	ldi	r17, 0x07	; 7
    2606:	05 c0       	rjmp	.+10     	; 0x2612 <vfprintf+0x164>
    2608:	27 e0       	ldi	r18, 0x07	; 7
    260a:	4c e3       	ldi	r20, 0x3C	; 60
    260c:	e4 2e       	mov	r14, r20
    260e:	02 c0       	rjmp	.+4      	; 0x2614 <vfprintf+0x166>
    2610:	21 2f       	mov	r18, r17
    2612:	e1 2c       	mov	r14, r1
    2614:	52 01       	movw	r10, r4
    2616:	44 e0       	ldi	r20, 0x04	; 4
    2618:	a4 0e       	add	r10, r20
    261a:	b1 1c       	adc	r11, r1
    261c:	f2 01       	movw	r30, r4
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0e 2d       	mov	r16, r14
    2628:	a3 01       	movw	r20, r6
    262a:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__ftoa_engine>
    262e:	2c 01       	movw	r4, r24
    2630:	09 81       	ldd	r16, Y+1	; 0x01
    2632:	00 ff       	sbrs	r16, 0
    2634:	02 c0       	rjmp	.+4      	; 0x263a <vfprintf+0x18c>
    2636:	03 ff       	sbrs	r16, 3
    2638:	07 c0       	rjmp	.+14     	; 0x2648 <vfprintf+0x19a>
    263a:	31 fc       	sbrc	r3, 1
    263c:	08 c0       	rjmp	.+16     	; 0x264e <vfprintf+0x1a0>
    263e:	32 fe       	sbrs	r3, 2
    2640:	09 c0       	rjmp	.+18     	; 0x2654 <vfprintf+0x1a6>
    2642:	30 e2       	ldi	r19, 0x20	; 32
    2644:	23 2e       	mov	r2, r19
    2646:	07 c0       	rjmp	.+14     	; 0x2656 <vfprintf+0x1a8>
    2648:	2d e2       	ldi	r18, 0x2D	; 45
    264a:	22 2e       	mov	r2, r18
    264c:	04 c0       	rjmp	.+8      	; 0x2656 <vfprintf+0x1a8>
    264e:	9b e2       	ldi	r25, 0x2B	; 43
    2650:	29 2e       	mov	r2, r25
    2652:	01 c0       	rjmp	.+2      	; 0x2656 <vfprintf+0x1a8>
    2654:	21 2c       	mov	r2, r1
    2656:	80 2f       	mov	r24, r16
    2658:	8c 70       	andi	r24, 0x0C	; 12
    265a:	19 f0       	breq	.+6      	; 0x2662 <vfprintf+0x1b4>
    265c:	21 10       	cpse	r2, r1
    265e:	68 c2       	rjmp	.+1232   	; 0x2b30 <vfprintf+0x682>
    2660:	a8 c2       	rjmp	.+1360   	; 0x2bb2 <vfprintf+0x704>
    2662:	37 fe       	sbrs	r3, 7
    2664:	0f c0       	rjmp	.+30     	; 0x2684 <vfprintf+0x1d6>
    2666:	e4 0c       	add	r14, r4
    2668:	04 ff       	sbrs	r16, 4
    266a:	04 c0       	rjmp	.+8      	; 0x2674 <vfprintf+0x1c6>
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	81 33       	cpi	r24, 0x31	; 49
    2670:	09 f4       	brne	.+2      	; 0x2674 <vfprintf+0x1c6>
    2672:	ea 94       	dec	r14
    2674:	1e 14       	cp	r1, r14
    2676:	74 f5       	brge	.+92     	; 0x26d4 <vfprintf+0x226>
    2678:	f8 e0       	ldi	r31, 0x08	; 8
    267a:	fe 15       	cp	r31, r14
    267c:	78 f5       	brcc	.+94     	; 0x26dc <vfprintf+0x22e>
    267e:	88 e0       	ldi	r24, 0x08	; 8
    2680:	e8 2e       	mov	r14, r24
    2682:	2c c0       	rjmp	.+88     	; 0x26dc <vfprintf+0x22e>
    2684:	36 fc       	sbrc	r3, 6
    2686:	2a c0       	rjmp	.+84     	; 0x26dc <vfprintf+0x22e>
    2688:	81 2f       	mov	r24, r17
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	84 15       	cp	r24, r4
    268e:	95 05       	cpc	r25, r5
    2690:	9c f0       	brlt	.+38     	; 0x26b8 <vfprintf+0x20a>
    2692:	2c ef       	ldi	r18, 0xFC	; 252
    2694:	42 16       	cp	r4, r18
    2696:	2f ef       	ldi	r18, 0xFF	; 255
    2698:	52 06       	cpc	r5, r18
    269a:	74 f0       	brlt	.+28     	; 0x26b8 <vfprintf+0x20a>
    269c:	43 2d       	mov	r20, r3
    269e:	40 68       	ori	r20, 0x80	; 128
    26a0:	34 2e       	mov	r3, r20
    26a2:	0a c0       	rjmp	.+20     	; 0x26b8 <vfprintf+0x20a>
    26a4:	e2 e0       	ldi	r30, 0x02	; 2
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	ec 0f       	add	r30, r28
    26aa:	fd 1f       	adc	r31, r29
    26ac:	e1 0f       	add	r30, r17
    26ae:	f1 1d       	adc	r31, r1
    26b0:	80 81       	ld	r24, Z
    26b2:	80 33       	cpi	r24, 0x30	; 48
    26b4:	19 f4       	brne	.+6      	; 0x26bc <vfprintf+0x20e>
    26b6:	11 50       	subi	r17, 0x01	; 1
    26b8:	11 11       	cpse	r17, r1
    26ba:	f4 cf       	rjmp	.-24     	; 0x26a4 <vfprintf+0x1f6>
    26bc:	37 fe       	sbrs	r3, 7
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <vfprintf+0x22e>
    26c0:	ee 24       	eor	r14, r14
    26c2:	e3 94       	inc	r14
    26c4:	e1 0e       	add	r14, r17
    26c6:	81 2f       	mov	r24, r17
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	48 16       	cp	r4, r24
    26cc:	59 06       	cpc	r5, r25
    26ce:	2c f4       	brge	.+10     	; 0x26da <vfprintf+0x22c>
    26d0:	14 19       	sub	r17, r4
    26d2:	04 c0       	rjmp	.+8      	; 0x26dc <vfprintf+0x22e>
    26d4:	ee 24       	eor	r14, r14
    26d6:	e3 94       	inc	r14
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <vfprintf+0x22e>
    26da:	10 e0       	ldi	r17, 0x00	; 0
    26dc:	37 fe       	sbrs	r3, 7
    26de:	06 c0       	rjmp	.+12     	; 0x26ec <vfprintf+0x23e>
    26e0:	14 14       	cp	r1, r4
    26e2:	15 04       	cpc	r1, r5
    26e4:	34 f4       	brge	.+12     	; 0x26f2 <vfprintf+0x244>
    26e6:	c2 01       	movw	r24, r4
    26e8:	01 96       	adiw	r24, 0x01	; 1
    26ea:	05 c0       	rjmp	.+10     	; 0x26f6 <vfprintf+0x248>
    26ec:	85 e0       	ldi	r24, 0x05	; 5
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <vfprintf+0x248>
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	21 10       	cpse	r2, r1
    26f8:	01 96       	adiw	r24, 0x01	; 1
    26fa:	11 23       	and	r17, r17
    26fc:	31 f0       	breq	.+12     	; 0x270a <vfprintf+0x25c>
    26fe:	21 2f       	mov	r18, r17
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	2f 5f       	subi	r18, 0xFF	; 255
    2704:	3f 4f       	sbci	r19, 0xFF	; 255
    2706:	82 0f       	add	r24, r18
    2708:	93 1f       	adc	r25, r19
    270a:	2f 2d       	mov	r18, r15
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	82 17       	cp	r24, r18
    2710:	93 07       	cpc	r25, r19
    2712:	14 f4       	brge	.+4      	; 0x2718 <vfprintf+0x26a>
    2714:	f8 1a       	sub	r15, r24
    2716:	01 c0       	rjmp	.+2      	; 0x271a <vfprintf+0x26c>
    2718:	f1 2c       	mov	r15, r1
    271a:	83 2d       	mov	r24, r3
    271c:	89 70       	andi	r24, 0x09	; 9
    271e:	49 f4       	brne	.+18     	; 0x2732 <vfprintf+0x284>
    2720:	ff 20       	and	r15, r15
    2722:	39 f0       	breq	.+14     	; 0x2732 <vfprintf+0x284>
    2724:	b6 01       	movw	r22, r12
    2726:	80 e2       	ldi	r24, 0x20	; 32
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    272e:	fa 94       	dec	r15
    2730:	f7 cf       	rjmp	.-18     	; 0x2720 <vfprintf+0x272>
    2732:	22 20       	and	r2, r2
    2734:	29 f0       	breq	.+10     	; 0x2740 <vfprintf+0x292>
    2736:	b6 01       	movw	r22, r12
    2738:	82 2d       	mov	r24, r2
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2740:	33 fc       	sbrc	r3, 3
    2742:	09 c0       	rjmp	.+18     	; 0x2756 <vfprintf+0x2a8>
    2744:	ff 20       	and	r15, r15
    2746:	39 f0       	breq	.+14     	; 0x2756 <vfprintf+0x2a8>
    2748:	b6 01       	movw	r22, r12
    274a:	80 e3       	ldi	r24, 0x30	; 48
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2752:	fa 94       	dec	r15
    2754:	f7 cf       	rjmp	.-18     	; 0x2744 <vfprintf+0x296>
    2756:	37 fe       	sbrs	r3, 7
    2758:	5a c0       	rjmp	.+180    	; 0x280e <vfprintf+0x360>
    275a:	94 2d       	mov	r25, r4
    275c:	85 2d       	mov	r24, r5
    275e:	57 fe       	sbrs	r5, 7
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <vfprintf+0x2b8>
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	29 2e       	mov	r2, r25
    2768:	38 2e       	mov	r3, r24
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	a2 01       	movw	r20, r4
    2770:	4e 19       	sub	r20, r14
    2772:	51 09       	sbc	r21, r1
    2774:	4c 87       	std	Y+12, r20	; 0x0c
    2776:	5d 87       	std	Y+13, r21	; 0x0d
    2778:	a2 01       	movw	r20, r4
    277a:	42 19       	sub	r20, r2
    277c:	53 09       	sbc	r21, r3
    277e:	4e 87       	std	Y+14, r20	; 0x0e
    2780:	5f 87       	std	Y+15, r21	; 0x0f
    2782:	61 2f       	mov	r22, r17
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	44 27       	eor	r20, r20
    2788:	55 27       	eor	r21, r21
    278a:	46 1b       	sub	r20, r22
    278c:	57 0b       	sbc	r21, r23
    278e:	48 8b       	std	Y+16, r20	; 0x10
    2790:	59 8b       	std	Y+17, r21	; 0x11
    2792:	5f ef       	ldi	r21, 0xFF	; 255
    2794:	25 16       	cp	r2, r21
    2796:	35 06       	cpc	r3, r21
    2798:	49 f4       	brne	.+18     	; 0x27ac <vfprintf+0x2fe>
    279a:	b6 01       	movw	r22, r12
    279c:	8e e2       	ldi	r24, 0x2E	; 46
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	2a 8b       	std	Y+18, r18	; 0x12
    27a2:	3b 8b       	std	Y+19, r19	; 0x13
    27a4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    27a8:	3b 89       	ldd	r19, Y+19	; 0x13
    27aa:	2a 89       	ldd	r18, Y+18	; 0x12
    27ac:	42 14       	cp	r4, r2
    27ae:	53 04       	cpc	r5, r3
    27b0:	6c f0       	brlt	.+26     	; 0x27cc <vfprintf+0x31e>
    27b2:	4c 85       	ldd	r20, Y+12	; 0x0c
    27b4:	5d 85       	ldd	r21, Y+13	; 0x0d
    27b6:	42 15       	cp	r20, r2
    27b8:	53 05       	cpc	r21, r3
    27ba:	44 f4       	brge	.+16     	; 0x27cc <vfprintf+0x31e>
    27bc:	ee 85       	ldd	r30, Y+14	; 0x0e
    27be:	ff 85       	ldd	r31, Y+15	; 0x0f
    27c0:	e2 0f       	add	r30, r18
    27c2:	f3 1f       	adc	r31, r19
    27c4:	e6 0d       	add	r30, r6
    27c6:	f7 1d       	adc	r31, r7
    27c8:	81 81       	ldd	r24, Z+1	; 0x01
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <vfprintf+0x320>
    27cc:	80 e3       	ldi	r24, 0x30	; 48
    27ce:	51 e0       	ldi	r21, 0x01	; 1
    27d0:	25 1a       	sub	r2, r21
    27d2:	31 08       	sbc	r3, r1
    27d4:	2f 5f       	subi	r18, 0xFF	; 255
    27d6:	3f 4f       	sbci	r19, 0xFF	; 255
    27d8:	48 89       	ldd	r20, Y+16	; 0x10
    27da:	59 89       	ldd	r21, Y+17	; 0x11
    27dc:	24 16       	cp	r2, r20
    27de:	35 06       	cpc	r3, r21
    27e0:	4c f0       	brlt	.+18     	; 0x27f4 <vfprintf+0x346>
    27e2:	b6 01       	movw	r22, r12
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	2a 8b       	std	Y+18, r18	; 0x12
    27e8:	3b 8b       	std	Y+19, r19	; 0x13
    27ea:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    27ee:	2a 89       	ldd	r18, Y+18	; 0x12
    27f0:	3b 89       	ldd	r19, Y+19	; 0x13
    27f2:	cf cf       	rjmp	.-98     	; 0x2792 <vfprintf+0x2e4>
    27f4:	24 14       	cp	r2, r4
    27f6:	35 04       	cpc	r3, r5
    27f8:	39 f4       	brne	.+14     	; 0x2808 <vfprintf+0x35a>
    27fa:	9a 81       	ldd	r25, Y+2	; 0x02
    27fc:	96 33       	cpi	r25, 0x36	; 54
    27fe:	18 f4       	brcc	.+6      	; 0x2806 <vfprintf+0x358>
    2800:	95 33       	cpi	r25, 0x35	; 53
    2802:	11 f4       	brne	.+4      	; 0x2808 <vfprintf+0x35a>
    2804:	04 ff       	sbrs	r16, 4
    2806:	81 e3       	ldi	r24, 0x31	; 49
    2808:	b6 01       	movw	r22, r12
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	4b c0       	rjmp	.+150    	; 0x28a4 <vfprintf+0x3f6>
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	81 33       	cpi	r24, 0x31	; 49
    2812:	09 f0       	breq	.+2      	; 0x2816 <vfprintf+0x368>
    2814:	0f 7e       	andi	r16, 0xEF	; 239
    2816:	b6 01       	movw	r22, r12
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    281e:	11 11       	cpse	r17, r1
    2820:	05 c0       	rjmp	.+10     	; 0x282c <vfprintf+0x37e>
    2822:	34 fc       	sbrc	r3, 4
    2824:	18 c0       	rjmp	.+48     	; 0x2856 <vfprintf+0x3a8>
    2826:	85 e6       	ldi	r24, 0x65	; 101
    2828:	90 e0       	ldi	r25, 0x00	; 0
    282a:	17 c0       	rjmp	.+46     	; 0x285a <vfprintf+0x3ac>
    282c:	b6 01       	movw	r22, r12
    282e:	8e e2       	ldi	r24, 0x2E	; 46
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	ee 24       	eor	r14, r14
    283a:	e3 94       	inc	r14
    283c:	e8 0e       	add	r14, r24
    283e:	f3 01       	movw	r30, r6
    2840:	e8 0f       	add	r30, r24
    2842:	f1 1d       	adc	r31, r1
    2844:	80 81       	ld	r24, Z
    2846:	b6 01       	movw	r22, r12
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    284e:	11 50       	subi	r17, 0x01	; 1
    2850:	8e 2d       	mov	r24, r14
    2852:	91 f7       	brne	.-28     	; 0x2838 <vfprintf+0x38a>
    2854:	e6 cf       	rjmp	.-52     	; 0x2822 <vfprintf+0x374>
    2856:	85 e4       	ldi	r24, 0x45	; 69
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	b6 01       	movw	r22, r12
    285c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2860:	57 fc       	sbrc	r5, 7
    2862:	05 c0       	rjmp	.+10     	; 0x286e <vfprintf+0x3c0>
    2864:	41 14       	cp	r4, r1
    2866:	51 04       	cpc	r5, r1
    2868:	39 f4       	brne	.+14     	; 0x2878 <vfprintf+0x3ca>
    286a:	04 ff       	sbrs	r16, 4
    286c:	05 c0       	rjmp	.+10     	; 0x2878 <vfprintf+0x3ca>
    286e:	51 94       	neg	r5
    2870:	41 94       	neg	r4
    2872:	51 08       	sbc	r5, r1
    2874:	8d e2       	ldi	r24, 0x2D	; 45
    2876:	01 c0       	rjmp	.+2      	; 0x287a <vfprintf+0x3cc>
    2878:	8b e2       	ldi	r24, 0x2B	; 43
    287a:	b6 01       	movw	r22, r12
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2882:	80 e3       	ldi	r24, 0x30	; 48
    2884:	9a e0       	ldi	r25, 0x0A	; 10
    2886:	49 16       	cp	r4, r25
    2888:	51 04       	cpc	r5, r1
    288a:	2c f0       	brlt	.+10     	; 0x2896 <vfprintf+0x3e8>
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	5a e0       	ldi	r21, 0x0A	; 10
    2890:	45 1a       	sub	r4, r21
    2892:	51 08       	sbc	r5, r1
    2894:	f7 cf       	rjmp	.-18     	; 0x2884 <vfprintf+0x3d6>
    2896:	b6 01       	movw	r22, r12
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    289e:	b6 01       	movw	r22, r12
    28a0:	c2 01       	movw	r24, r4
    28a2:	c0 96       	adiw	r24, 0x30	; 48
    28a4:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    28a8:	57 c1       	rjmp	.+686    	; 0x2b58 <vfprintf+0x6aa>
    28aa:	83 36       	cpi	r24, 0x63	; 99
    28ac:	31 f0       	breq	.+12     	; 0x28ba <vfprintf+0x40c>
    28ae:	83 37       	cpi	r24, 0x73	; 115
    28b0:	79 f0       	breq	.+30     	; 0x28d0 <vfprintf+0x422>
    28b2:	83 35       	cpi	r24, 0x53	; 83
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <vfprintf+0x40a>
    28b6:	58 c0       	rjmp	.+176    	; 0x2968 <vfprintf+0x4ba>
    28b8:	21 c0       	rjmp	.+66     	; 0x28fc <vfprintf+0x44e>
    28ba:	52 01       	movw	r10, r4
    28bc:	e2 e0       	ldi	r30, 0x02	; 2
    28be:	ae 0e       	add	r10, r30
    28c0:	b1 1c       	adc	r11, r1
    28c2:	f2 01       	movw	r30, r4
    28c4:	80 81       	ld	r24, Z
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	01 e0       	ldi	r16, 0x01	; 1
    28ca:	10 e0       	ldi	r17, 0x00	; 0
    28cc:	23 01       	movw	r4, r6
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <vfprintf+0x44a>
    28d0:	52 01       	movw	r10, r4
    28d2:	f2 e0       	ldi	r31, 0x02	; 2
    28d4:	af 0e       	add	r10, r31
    28d6:	b1 1c       	adc	r11, r1
    28d8:	f2 01       	movw	r30, r4
    28da:	40 80       	ld	r4, Z
    28dc:	51 80       	ldd	r5, Z+1	; 0x01
    28de:	26 ff       	sbrs	r18, 6
    28e0:	03 c0       	rjmp	.+6      	; 0x28e8 <vfprintf+0x43a>
    28e2:	61 2f       	mov	r22, r17
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	02 c0       	rjmp	.+4      	; 0x28ec <vfprintf+0x43e>
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	7f ef       	ldi	r23, 0xFF	; 255
    28ec:	c2 01       	movw	r24, r4
    28ee:	2a 8b       	std	Y+18, r18	; 0x12
    28f0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <strnlen>
    28f4:	8c 01       	movw	r16, r24
    28f6:	2a 89       	ldd	r18, Y+18	; 0x12
    28f8:	2f 77       	andi	r18, 0x7F	; 127
    28fa:	15 c0       	rjmp	.+42     	; 0x2926 <vfprintf+0x478>
    28fc:	52 01       	movw	r10, r4
    28fe:	f2 e0       	ldi	r31, 0x02	; 2
    2900:	af 0e       	add	r10, r31
    2902:	b1 1c       	adc	r11, r1
    2904:	f2 01       	movw	r30, r4
    2906:	40 80       	ld	r4, Z
    2908:	51 80       	ldd	r5, Z+1	; 0x01
    290a:	26 ff       	sbrs	r18, 6
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfprintf+0x466>
    290e:	61 2f       	mov	r22, r17
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <vfprintf+0x46a>
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	7f ef       	ldi	r23, 0xFF	; 255
    2918:	c2 01       	movw	r24, r4
    291a:	2a 8b       	std	Y+18, r18	; 0x12
    291c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <strnlen_P>
    2920:	8c 01       	movw	r16, r24
    2922:	2a 89       	ldd	r18, Y+18	; 0x12
    2924:	20 68       	ori	r18, 0x80	; 128
    2926:	32 2e       	mov	r3, r18
    2928:	23 fd       	sbrc	r18, 3
    292a:	1a c0       	rjmp	.+52     	; 0x2960 <vfprintf+0x4b2>
    292c:	8f 2d       	mov	r24, r15
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	08 17       	cp	r16, r24
    2932:	19 07       	cpc	r17, r25
    2934:	a8 f4       	brcc	.+42     	; 0x2960 <vfprintf+0x4b2>
    2936:	b6 01       	movw	r22, r12
    2938:	80 e2       	ldi	r24, 0x20	; 32
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2940:	fa 94       	dec	r15
    2942:	f4 cf       	rjmp	.-24     	; 0x292c <vfprintf+0x47e>
    2944:	f2 01       	movw	r30, r4
    2946:	37 fc       	sbrc	r3, 7
    2948:	85 91       	lpm	r24, Z+
    294a:	37 fe       	sbrs	r3, 7
    294c:	81 91       	ld	r24, Z+
    294e:	2f 01       	movw	r4, r30
    2950:	b6 01       	movw	r22, r12
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2958:	f1 10       	cpse	r15, r1
    295a:	fa 94       	dec	r15
    295c:	01 50       	subi	r16, 0x01	; 1
    295e:	11 09       	sbc	r17, r1
    2960:	01 15       	cp	r16, r1
    2962:	11 05       	cpc	r17, r1
    2964:	79 f7       	brne	.-34     	; 0x2944 <vfprintf+0x496>
    2966:	f8 c0       	rjmp	.+496    	; 0x2b58 <vfprintf+0x6aa>
    2968:	84 36       	cpi	r24, 0x64	; 100
    296a:	11 f0       	breq	.+4      	; 0x2970 <vfprintf+0x4c2>
    296c:	89 36       	cpi	r24, 0x69	; 105
    296e:	59 f5       	brne	.+86     	; 0x29c6 <vfprintf+0x518>
    2970:	52 01       	movw	r10, r4
    2972:	27 ff       	sbrs	r18, 7
    2974:	09 c0       	rjmp	.+18     	; 0x2988 <vfprintf+0x4da>
    2976:	f4 e0       	ldi	r31, 0x04	; 4
    2978:	af 0e       	add	r10, r31
    297a:	b1 1c       	adc	r11, r1
    297c:	f2 01       	movw	r30, r4
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	0a c0       	rjmp	.+20     	; 0x299c <vfprintf+0x4ee>
    2988:	f2 e0       	ldi	r31, 0x02	; 2
    298a:	af 0e       	add	r10, r31
    298c:	b1 1c       	adc	r11, r1
    298e:	f2 01       	movw	r30, r4
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	07 2e       	mov	r0, r23
    2996:	00 0c       	add	r0, r0
    2998:	88 0b       	sbc	r24, r24
    299a:	99 0b       	sbc	r25, r25
    299c:	2f 76       	andi	r18, 0x6F	; 111
    299e:	32 2e       	mov	r3, r18
    29a0:	97 ff       	sbrs	r25, 7
    29a2:	09 c0       	rjmp	.+18     	; 0x29b6 <vfprintf+0x508>
    29a4:	90 95       	com	r25
    29a6:	80 95       	com	r24
    29a8:	70 95       	com	r23
    29aa:	61 95       	neg	r22
    29ac:	7f 4f       	sbci	r23, 0xFF	; 255
    29ae:	8f 4f       	sbci	r24, 0xFF	; 255
    29b0:	9f 4f       	sbci	r25, 0xFF	; 255
    29b2:	20 68       	ori	r18, 0x80	; 128
    29b4:	32 2e       	mov	r3, r18
    29b6:	2a e0       	ldi	r18, 0x0A	; 10
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	a3 01       	movw	r20, r6
    29bc:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__ultoa_invert>
    29c0:	e8 2e       	mov	r14, r24
    29c2:	e6 18       	sub	r14, r6
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <vfprintf+0x596>
    29c6:	02 2f       	mov	r16, r18
    29c8:	85 37       	cpi	r24, 0x75	; 117
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <vfprintf+0x526>
    29cc:	0f 7e       	andi	r16, 0xEF	; 239
    29ce:	2a e0       	ldi	r18, 0x0A	; 10
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	1d c0       	rjmp	.+58     	; 0x2a0e <vfprintf+0x560>
    29d4:	09 7f       	andi	r16, 0xF9	; 249
    29d6:	8f 36       	cpi	r24, 0x6F	; 111
    29d8:	91 f0       	breq	.+36     	; 0x29fe <vfprintf+0x550>
    29da:	18 f4       	brcc	.+6      	; 0x29e2 <vfprintf+0x534>
    29dc:	88 35       	cpi	r24, 0x58	; 88
    29de:	59 f0       	breq	.+22     	; 0x29f6 <vfprintf+0x548>
    29e0:	c5 c0       	rjmp	.+394    	; 0x2b6c <vfprintf+0x6be>
    29e2:	80 37       	cpi	r24, 0x70	; 112
    29e4:	19 f0       	breq	.+6      	; 0x29ec <vfprintf+0x53e>
    29e6:	88 37       	cpi	r24, 0x78	; 120
    29e8:	11 f0       	breq	.+4      	; 0x29ee <vfprintf+0x540>
    29ea:	c0 c0       	rjmp	.+384    	; 0x2b6c <vfprintf+0x6be>
    29ec:	00 61       	ori	r16, 0x10	; 16
    29ee:	04 ff       	sbrs	r16, 4
    29f0:	09 c0       	rjmp	.+18     	; 0x2a04 <vfprintf+0x556>
    29f2:	04 60       	ori	r16, 0x04	; 4
    29f4:	07 c0       	rjmp	.+14     	; 0x2a04 <vfprintf+0x556>
    29f6:	24 ff       	sbrs	r18, 4
    29f8:	08 c0       	rjmp	.+16     	; 0x2a0a <vfprintf+0x55c>
    29fa:	06 60       	ori	r16, 0x06	; 6
    29fc:	06 c0       	rjmp	.+12     	; 0x2a0a <vfprintf+0x55c>
    29fe:	28 e0       	ldi	r18, 0x08	; 8
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	05 c0       	rjmp	.+10     	; 0x2a0e <vfprintf+0x560>
    2a04:	20 e1       	ldi	r18, 0x10	; 16
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	02 c0       	rjmp	.+4      	; 0x2a0e <vfprintf+0x560>
    2a0a:	20 e1       	ldi	r18, 0x10	; 16
    2a0c:	32 e0       	ldi	r19, 0x02	; 2
    2a0e:	52 01       	movw	r10, r4
    2a10:	07 ff       	sbrs	r16, 7
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <vfprintf+0x578>
    2a14:	f4 e0       	ldi	r31, 0x04	; 4
    2a16:	af 0e       	add	r10, r31
    2a18:	b1 1c       	adc	r11, r1
    2a1a:	f2 01       	movw	r30, r4
    2a1c:	60 81       	ld	r22, Z
    2a1e:	71 81       	ldd	r23, Z+1	; 0x01
    2a20:	82 81       	ldd	r24, Z+2	; 0x02
    2a22:	93 81       	ldd	r25, Z+3	; 0x03
    2a24:	08 c0       	rjmp	.+16     	; 0x2a36 <vfprintf+0x588>
    2a26:	f2 e0       	ldi	r31, 0x02	; 2
    2a28:	af 0e       	add	r10, r31
    2a2a:	b1 1c       	adc	r11, r1
    2a2c:	f2 01       	movw	r30, r4
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	a3 01       	movw	r20, r6
    2a38:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <__ultoa_invert>
    2a3c:	e8 2e       	mov	r14, r24
    2a3e:	e6 18       	sub	r14, r6
    2a40:	0f 77       	andi	r16, 0x7F	; 127
    2a42:	30 2e       	mov	r3, r16
    2a44:	36 fe       	sbrs	r3, 6
    2a46:	0b c0       	rjmp	.+22     	; 0x2a5e <vfprintf+0x5b0>
    2a48:	33 2d       	mov	r19, r3
    2a4a:	3e 7f       	andi	r19, 0xFE	; 254
    2a4c:	e1 16       	cp	r14, r17
    2a4e:	50 f4       	brcc	.+20     	; 0x2a64 <vfprintf+0x5b6>
    2a50:	34 fe       	sbrs	r3, 4
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <vfprintf+0x5ba>
    2a54:	32 fc       	sbrc	r3, 2
    2a56:	08 c0       	rjmp	.+16     	; 0x2a68 <vfprintf+0x5ba>
    2a58:	33 2d       	mov	r19, r3
    2a5a:	3e 7e       	andi	r19, 0xEE	; 238
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <vfprintf+0x5ba>
    2a5e:	0e 2d       	mov	r16, r14
    2a60:	33 2d       	mov	r19, r3
    2a62:	03 c0       	rjmp	.+6      	; 0x2a6a <vfprintf+0x5bc>
    2a64:	0e 2d       	mov	r16, r14
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <vfprintf+0x5bc>
    2a68:	01 2f       	mov	r16, r17
    2a6a:	34 ff       	sbrs	r19, 4
    2a6c:	0c c0       	rjmp	.+24     	; 0x2a86 <vfprintf+0x5d8>
    2a6e:	fe 01       	movw	r30, r28
    2a70:	ee 0d       	add	r30, r14
    2a72:	f1 1d       	adc	r31, r1
    2a74:	80 81       	ld	r24, Z
    2a76:	80 33       	cpi	r24, 0x30	; 48
    2a78:	11 f4       	brne	.+4      	; 0x2a7e <vfprintf+0x5d0>
    2a7a:	39 7e       	andi	r19, 0xE9	; 233
    2a7c:	08 c0       	rjmp	.+16     	; 0x2a8e <vfprintf+0x5e0>
    2a7e:	32 ff       	sbrs	r19, 2
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <vfprintf+0x5de>
    2a82:	0e 5f       	subi	r16, 0xFE	; 254
    2a84:	04 c0       	rjmp	.+8      	; 0x2a8e <vfprintf+0x5e0>
    2a86:	83 2f       	mov	r24, r19
    2a88:	86 78       	andi	r24, 0x86	; 134
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <vfprintf+0x5e0>
    2a8c:	0f 5f       	subi	r16, 0xFF	; 255
    2a8e:	33 fd       	sbrc	r19, 3
    2a90:	13 c0       	rjmp	.+38     	; 0x2ab8 <vfprintf+0x60a>
    2a92:	30 ff       	sbrs	r19, 0
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <vfprintf+0x5f4>
    2a96:	1e 2d       	mov	r17, r14
    2a98:	0f 15       	cp	r16, r15
    2a9a:	18 f4       	brcc	.+6      	; 0x2aa2 <vfprintf+0x5f4>
    2a9c:	1f 0d       	add	r17, r15
    2a9e:	10 1b       	sub	r17, r16
    2aa0:	0f 2d       	mov	r16, r15
    2aa2:	0f 15       	cp	r16, r15
    2aa4:	68 f4       	brcc	.+26     	; 0x2ac0 <vfprintf+0x612>
    2aa6:	b6 01       	movw	r22, r12
    2aa8:	80 e2       	ldi	r24, 0x20	; 32
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	3b 8b       	std	Y+19, r19	; 0x13
    2aae:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2ab2:	0f 5f       	subi	r16, 0xFF	; 255
    2ab4:	3b 89       	ldd	r19, Y+19	; 0x13
    2ab6:	f5 cf       	rjmp	.-22     	; 0x2aa2 <vfprintf+0x5f4>
    2ab8:	0f 15       	cp	r16, r15
    2aba:	10 f4       	brcc	.+4      	; 0x2ac0 <vfprintf+0x612>
    2abc:	f0 1a       	sub	r15, r16
    2abe:	01 c0       	rjmp	.+2      	; 0x2ac2 <vfprintf+0x614>
    2ac0:	f1 2c       	mov	r15, r1
    2ac2:	34 ff       	sbrs	r19, 4
    2ac4:	12 c0       	rjmp	.+36     	; 0x2aea <vfprintf+0x63c>
    2ac6:	b6 01       	movw	r22, r12
    2ac8:	80 e3       	ldi	r24, 0x30	; 48
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	3b 8b       	std	Y+19, r19	; 0x13
    2ace:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2ad2:	3b 89       	ldd	r19, Y+19	; 0x13
    2ad4:	32 ff       	sbrs	r19, 2
    2ad6:	17 c0       	rjmp	.+46     	; 0x2b06 <vfprintf+0x658>
    2ad8:	31 fd       	sbrc	r19, 1
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <vfprintf+0x634>
    2adc:	88 e7       	ldi	r24, 0x78	; 120
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	02 c0       	rjmp	.+4      	; 0x2ae6 <vfprintf+0x638>
    2ae2:	88 e5       	ldi	r24, 0x58	; 88
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	b6 01       	movw	r22, r12
    2ae8:	0c c0       	rjmp	.+24     	; 0x2b02 <vfprintf+0x654>
    2aea:	83 2f       	mov	r24, r19
    2aec:	86 78       	andi	r24, 0x86	; 134
    2aee:	59 f0       	breq	.+22     	; 0x2b06 <vfprintf+0x658>
    2af0:	31 ff       	sbrs	r19, 1
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <vfprintf+0x64a>
    2af4:	8b e2       	ldi	r24, 0x2B	; 43
    2af6:	01 c0       	rjmp	.+2      	; 0x2afa <vfprintf+0x64c>
    2af8:	80 e2       	ldi	r24, 0x20	; 32
    2afa:	37 fd       	sbrc	r19, 7
    2afc:	8d e2       	ldi	r24, 0x2D	; 45
    2afe:	b6 01       	movw	r22, r12
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b06:	e1 16       	cp	r14, r17
    2b08:	38 f4       	brcc	.+14     	; 0x2b18 <vfprintf+0x66a>
    2b0a:	b6 01       	movw	r22, r12
    2b0c:	80 e3       	ldi	r24, 0x30	; 48
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b14:	11 50       	subi	r17, 0x01	; 1
    2b16:	f7 cf       	rjmp	.-18     	; 0x2b06 <vfprintf+0x658>
    2b18:	ea 94       	dec	r14
    2b1a:	f3 01       	movw	r30, r6
    2b1c:	ee 0d       	add	r30, r14
    2b1e:	f1 1d       	adc	r31, r1
    2b20:	80 81       	ld	r24, Z
    2b22:	b6 01       	movw	r22, r12
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b2a:	e1 10       	cpse	r14, r1
    2b2c:	f5 cf       	rjmp	.-22     	; 0x2b18 <vfprintf+0x66a>
    2b2e:	14 c0       	rjmp	.+40     	; 0x2b58 <vfprintf+0x6aa>
    2b30:	f4 e0       	ldi	r31, 0x04	; 4
    2b32:	ff 15       	cp	r31, r15
    2b34:	58 f5       	brcc	.+86     	; 0x2b8c <vfprintf+0x6de>
    2b36:	84 e0       	ldi	r24, 0x04	; 4
    2b38:	f8 1a       	sub	r15, r24
    2b3a:	33 fe       	sbrs	r3, 3
    2b3c:	1e c0       	rjmp	.+60     	; 0x2b7a <vfprintf+0x6cc>
    2b3e:	21 10       	cpse	r2, r1
    2b40:	26 c0       	rjmp	.+76     	; 0x2b8e <vfprintf+0x6e0>
    2b42:	03 ff       	sbrs	r16, 3
    2b44:	2a c0       	rjmp	.+84     	; 0x2b9a <vfprintf+0x6ec>
    2b46:	0c e0       	ldi	r16, 0x0C	; 12
    2b48:	12 e0       	ldi	r17, 0x02	; 2
    2b4a:	f3 2d       	mov	r31, r3
    2b4c:	f0 71       	andi	r31, 0x10	; 16
    2b4e:	3f 2e       	mov	r3, r31
    2b50:	f8 01       	movw	r30, r16
    2b52:	84 91       	lpm	r24, Z
    2b54:	81 11       	cpse	r24, r1
    2b56:	24 c0       	rjmp	.+72     	; 0x2ba0 <vfprintf+0x6f2>
    2b58:	ff 20       	and	r15, r15
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <vfprintf+0x6b0>
    2b5c:	e5 cc       	rjmp	.-1590   	; 0x2528 <vfprintf+0x7a>
    2b5e:	b6 01       	movw	r22, r12
    2b60:	80 e2       	ldi	r24, 0x20	; 32
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b68:	fa 94       	dec	r15
    2b6a:	f6 cf       	rjmp	.-20     	; 0x2b58 <vfprintf+0x6aa>
    2b6c:	f6 01       	movw	r30, r12
    2b6e:	86 81       	ldd	r24, Z+6	; 0x06
    2b70:	97 81       	ldd	r25, Z+7	; 0x07
    2b72:	26 c0       	rjmp	.+76     	; 0x2bc0 <vfprintf+0x712>
    2b74:	8f ef       	ldi	r24, 0xFF	; 255
    2b76:	9f ef       	ldi	r25, 0xFF	; 255
    2b78:	23 c0       	rjmp	.+70     	; 0x2bc0 <vfprintf+0x712>
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	80 e2       	ldi	r24, 0x20	; 32
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b84:	fa 94       	dec	r15
    2b86:	f1 10       	cpse	r15, r1
    2b88:	f8 cf       	rjmp	.-16     	; 0x2b7a <vfprintf+0x6cc>
    2b8a:	d9 cf       	rjmp	.-78     	; 0x2b3e <vfprintf+0x690>
    2b8c:	f1 2c       	mov	r15, r1
    2b8e:	b6 01       	movw	r22, r12
    2b90:	82 2d       	mov	r24, r2
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2b98:	d4 cf       	rjmp	.-88     	; 0x2b42 <vfprintf+0x694>
    2b9a:	00 e1       	ldi	r16, 0x10	; 16
    2b9c:	12 e0       	ldi	r17, 0x02	; 2
    2b9e:	d5 cf       	rjmp	.-86     	; 0x2b4a <vfprintf+0x69c>
    2ba0:	31 10       	cpse	r3, r1
    2ba2:	80 52       	subi	r24, 0x20	; 32
    2ba4:	b6 01       	movw	r22, r12
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <fputc>
    2bac:	0f 5f       	subi	r16, 0xFF	; 255
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	cf cf       	rjmp	.-98     	; 0x2b50 <vfprintf+0x6a2>
    2bb2:	23 e0       	ldi	r18, 0x03	; 3
    2bb4:	2f 15       	cp	r18, r15
    2bb6:	10 f4       	brcc	.+4      	; 0x2bbc <vfprintf+0x70e>
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	be cf       	rjmp	.-132    	; 0x2b38 <vfprintf+0x68a>
    2bbc:	f1 2c       	mov	r15, r1
    2bbe:	c1 cf       	rjmp	.-126    	; 0x2b42 <vfprintf+0x694>
    2bc0:	63 96       	adiw	r28, 0x13	; 19
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	de bf       	out	0x3e, r29	; 62
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
    2bda:	9f 90       	pop	r9
    2bdc:	8f 90       	pop	r8
    2bde:	7f 90       	pop	r7
    2be0:	6f 90       	pop	r6
    2be2:	5f 90       	pop	r5
    2be4:	4f 90       	pop	r4
    2be6:	3f 90       	pop	r3
    2be8:	2f 90       	pop	r2
    2bea:	08 95       	ret

00002bec <__udivmodsi4>:
    2bec:	a1 e2       	ldi	r26, 0x21	; 33
    2bee:	1a 2e       	mov	r1, r26
    2bf0:	aa 1b       	sub	r26, r26
    2bf2:	bb 1b       	sub	r27, r27
    2bf4:	fd 01       	movw	r30, r26
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <__udivmodsi4_ep>

00002bf8 <__udivmodsi4_loop>:
    2bf8:	aa 1f       	adc	r26, r26
    2bfa:	bb 1f       	adc	r27, r27
    2bfc:	ee 1f       	adc	r30, r30
    2bfe:	ff 1f       	adc	r31, r31
    2c00:	a2 17       	cp	r26, r18
    2c02:	b3 07       	cpc	r27, r19
    2c04:	e4 07       	cpc	r30, r20
    2c06:	f5 07       	cpc	r31, r21
    2c08:	20 f0       	brcs	.+8      	; 0x2c12 <__udivmodsi4_ep>
    2c0a:	a2 1b       	sub	r26, r18
    2c0c:	b3 0b       	sbc	r27, r19
    2c0e:	e4 0b       	sbc	r30, r20
    2c10:	f5 0b       	sbc	r31, r21

00002c12 <__udivmodsi4_ep>:
    2c12:	66 1f       	adc	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	1a 94       	dec	r1
    2c1c:	69 f7       	brne	.-38     	; 0x2bf8 <__udivmodsi4_loop>
    2c1e:	60 95       	com	r22
    2c20:	70 95       	com	r23
    2c22:	80 95       	com	r24
    2c24:	90 95       	com	r25
    2c26:	9b 01       	movw	r18, r22
    2c28:	ac 01       	movw	r20, r24
    2c2a:	bd 01       	movw	r22, r26
    2c2c:	cf 01       	movw	r24, r30
    2c2e:	08 95       	ret

00002c30 <__ashrdi3>:
    2c30:	97 fb       	bst	r25, 7
    2c32:	10 f8       	bld	r1, 0

00002c34 <__lshrdi3>:
    2c34:	16 94       	lsr	r1
    2c36:	00 08       	sbc	r0, r0
    2c38:	0f 93       	push	r16
    2c3a:	08 30       	cpi	r16, 0x08	; 8
    2c3c:	98 f0       	brcs	.+38     	; 0x2c64 <__lshrdi3+0x30>
    2c3e:	08 50       	subi	r16, 0x08	; 8
    2c40:	23 2f       	mov	r18, r19
    2c42:	34 2f       	mov	r19, r20
    2c44:	45 2f       	mov	r20, r21
    2c46:	56 2f       	mov	r21, r22
    2c48:	67 2f       	mov	r22, r23
    2c4a:	78 2f       	mov	r23, r24
    2c4c:	89 2f       	mov	r24, r25
    2c4e:	90 2d       	mov	r25, r0
    2c50:	f4 cf       	rjmp	.-24     	; 0x2c3a <__lshrdi3+0x6>
    2c52:	05 94       	asr	r0
    2c54:	97 95       	ror	r25
    2c56:	87 95       	ror	r24
    2c58:	77 95       	ror	r23
    2c5a:	67 95       	ror	r22
    2c5c:	57 95       	ror	r21
    2c5e:	47 95       	ror	r20
    2c60:	37 95       	ror	r19
    2c62:	27 95       	ror	r18
    2c64:	0a 95       	dec	r16
    2c66:	aa f7       	brpl	.-22     	; 0x2c52 <__lshrdi3+0x1e>
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <__ftoa_engine>:
    2c6c:	28 30       	cpi	r18, 0x08	; 8
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <__ftoa_engine+0x6>
    2c70:	27 e0       	ldi	r18, 0x07	; 7
    2c72:	33 27       	eor	r19, r19
    2c74:	da 01       	movw	r26, r20
    2c76:	99 0f       	add	r25, r25
    2c78:	31 1d       	adc	r19, r1
    2c7a:	87 fd       	sbrc	r24, 7
    2c7c:	91 60       	ori	r25, 0x01	; 1
    2c7e:	00 96       	adiw	r24, 0x00	; 0
    2c80:	61 05       	cpc	r22, r1
    2c82:	71 05       	cpc	r23, r1
    2c84:	39 f4       	brne	.+14     	; 0x2c94 <__ftoa_engine+0x28>
    2c86:	32 60       	ori	r19, 0x02	; 2
    2c88:	2e 5f       	subi	r18, 0xFE	; 254
    2c8a:	3d 93       	st	X+, r19
    2c8c:	30 e3       	ldi	r19, 0x30	; 48
    2c8e:	2a 95       	dec	r18
    2c90:	e1 f7       	brne	.-8      	; 0x2c8a <__ftoa_engine+0x1e>
    2c92:	08 95       	ret
    2c94:	9f 3f       	cpi	r25, 0xFF	; 255
    2c96:	30 f0       	brcs	.+12     	; 0x2ca4 <__ftoa_engine+0x38>
    2c98:	80 38       	cpi	r24, 0x80	; 128
    2c9a:	71 05       	cpc	r23, r1
    2c9c:	61 05       	cpc	r22, r1
    2c9e:	09 f0       	breq	.+2      	; 0x2ca2 <__ftoa_engine+0x36>
    2ca0:	3c 5f       	subi	r19, 0xFC	; 252
    2ca2:	3c 5f       	subi	r19, 0xFC	; 252
    2ca4:	3d 93       	st	X+, r19
    2ca6:	91 30       	cpi	r25, 0x01	; 1
    2ca8:	08 f0       	brcs	.+2      	; 0x2cac <__ftoa_engine+0x40>
    2caa:	80 68       	ori	r24, 0x80	; 128
    2cac:	91 1d       	adc	r25, r1
    2cae:	df 93       	push	r29
    2cb0:	cf 93       	push	r28
    2cb2:	1f 93       	push	r17
    2cb4:	0f 93       	push	r16
    2cb6:	ff 92       	push	r15
    2cb8:	ef 92       	push	r14
    2cba:	19 2f       	mov	r17, r25
    2cbc:	98 7f       	andi	r25, 0xF8	; 248
    2cbe:	96 95       	lsr	r25
    2cc0:	e9 2f       	mov	r30, r25
    2cc2:	96 95       	lsr	r25
    2cc4:	96 95       	lsr	r25
    2cc6:	e9 0f       	add	r30, r25
    2cc8:	ff 27       	eor	r31, r31
    2cca:	e2 59       	subi	r30, 0x92	; 146
    2ccc:	fd 4f       	sbci	r31, 0xFD	; 253
    2cce:	99 27       	eor	r25, r25
    2cd0:	33 27       	eor	r19, r19
    2cd2:	ee 24       	eor	r14, r14
    2cd4:	ff 24       	eor	r15, r15
    2cd6:	a7 01       	movw	r20, r14
    2cd8:	e7 01       	movw	r28, r14
    2cda:	05 90       	lpm	r0, Z+
    2cdc:	08 94       	sec
    2cde:	07 94       	ror	r0
    2ce0:	28 f4       	brcc	.+10     	; 0x2cec <__ftoa_engine+0x80>
    2ce2:	36 0f       	add	r19, r22
    2ce4:	e7 1e       	adc	r14, r23
    2ce6:	f8 1e       	adc	r15, r24
    2ce8:	49 1f       	adc	r20, r25
    2cea:	51 1d       	adc	r21, r1
    2cec:	66 0f       	add	r22, r22
    2cee:	77 1f       	adc	r23, r23
    2cf0:	88 1f       	adc	r24, r24
    2cf2:	99 1f       	adc	r25, r25
    2cf4:	06 94       	lsr	r0
    2cf6:	a1 f7       	brne	.-24     	; 0x2ce0 <__ftoa_engine+0x74>
    2cf8:	05 90       	lpm	r0, Z+
    2cfa:	07 94       	ror	r0
    2cfc:	28 f4       	brcc	.+10     	; 0x2d08 <__ftoa_engine+0x9c>
    2cfe:	e7 0e       	add	r14, r23
    2d00:	f8 1e       	adc	r15, r24
    2d02:	49 1f       	adc	r20, r25
    2d04:	56 1f       	adc	r21, r22
    2d06:	c1 1d       	adc	r28, r1
    2d08:	77 0f       	add	r23, r23
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	66 1f       	adc	r22, r22
    2d10:	06 94       	lsr	r0
    2d12:	a1 f7       	brne	.-24     	; 0x2cfc <__ftoa_engine+0x90>
    2d14:	05 90       	lpm	r0, Z+
    2d16:	07 94       	ror	r0
    2d18:	28 f4       	brcc	.+10     	; 0x2d24 <__ftoa_engine+0xb8>
    2d1a:	f8 0e       	add	r15, r24
    2d1c:	49 1f       	adc	r20, r25
    2d1e:	56 1f       	adc	r21, r22
    2d20:	c7 1f       	adc	r28, r23
    2d22:	d1 1d       	adc	r29, r1
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	66 1f       	adc	r22, r22
    2d2a:	77 1f       	adc	r23, r23
    2d2c:	06 94       	lsr	r0
    2d2e:	a1 f7       	brne	.-24     	; 0x2d18 <__ftoa_engine+0xac>
    2d30:	05 90       	lpm	r0, Z+
    2d32:	07 94       	ror	r0
    2d34:	20 f4       	brcc	.+8      	; 0x2d3e <__ftoa_engine+0xd2>
    2d36:	49 0f       	add	r20, r25
    2d38:	56 1f       	adc	r21, r22
    2d3a:	c7 1f       	adc	r28, r23
    2d3c:	d8 1f       	adc	r29, r24
    2d3e:	99 0f       	add	r25, r25
    2d40:	66 1f       	adc	r22, r22
    2d42:	77 1f       	adc	r23, r23
    2d44:	88 1f       	adc	r24, r24
    2d46:	06 94       	lsr	r0
    2d48:	a9 f7       	brne	.-22     	; 0x2d34 <__ftoa_engine+0xc8>
    2d4a:	84 91       	lpm	r24, Z
    2d4c:	10 95       	com	r17
    2d4e:	17 70       	andi	r17, 0x07	; 7
    2d50:	41 f0       	breq	.+16     	; 0x2d62 <__ftoa_engine+0xf6>
    2d52:	d6 95       	lsr	r29
    2d54:	c7 95       	ror	r28
    2d56:	57 95       	ror	r21
    2d58:	47 95       	ror	r20
    2d5a:	f7 94       	ror	r15
    2d5c:	e7 94       	ror	r14
    2d5e:	1a 95       	dec	r17
    2d60:	c1 f7       	brne	.-16     	; 0x2d52 <__ftoa_engine+0xe6>
    2d62:	e4 e1       	ldi	r30, 0x14	; 20
    2d64:	f2 e0       	ldi	r31, 0x02	; 2
    2d66:	68 94       	set
    2d68:	15 90       	lpm	r1, Z+
    2d6a:	15 91       	lpm	r17, Z+
    2d6c:	35 91       	lpm	r19, Z+
    2d6e:	65 91       	lpm	r22, Z+
    2d70:	95 91       	lpm	r25, Z+
    2d72:	05 90       	lpm	r0, Z+
    2d74:	7f e2       	ldi	r23, 0x2F	; 47
    2d76:	73 95       	inc	r23
    2d78:	e1 18       	sub	r14, r1
    2d7a:	f1 0a       	sbc	r15, r17
    2d7c:	43 0b       	sbc	r20, r19
    2d7e:	56 0b       	sbc	r21, r22
    2d80:	c9 0b       	sbc	r28, r25
    2d82:	d0 09       	sbc	r29, r0
    2d84:	c0 f7       	brcc	.-16     	; 0x2d76 <__ftoa_engine+0x10a>
    2d86:	e1 0c       	add	r14, r1
    2d88:	f1 1e       	adc	r15, r17
    2d8a:	43 1f       	adc	r20, r19
    2d8c:	56 1f       	adc	r21, r22
    2d8e:	c9 1f       	adc	r28, r25
    2d90:	d0 1d       	adc	r29, r0
    2d92:	7e f4       	brtc	.+30     	; 0x2db2 <__ftoa_engine+0x146>
    2d94:	70 33       	cpi	r23, 0x30	; 48
    2d96:	11 f4       	brne	.+4      	; 0x2d9c <__ftoa_engine+0x130>
    2d98:	8a 95       	dec	r24
    2d9a:	e6 cf       	rjmp	.-52     	; 0x2d68 <__ftoa_engine+0xfc>
    2d9c:	e8 94       	clt
    2d9e:	01 50       	subi	r16, 0x01	; 1
    2da0:	30 f0       	brcs	.+12     	; 0x2dae <__ftoa_engine+0x142>
    2da2:	08 0f       	add	r16, r24
    2da4:	0a f4       	brpl	.+2      	; 0x2da8 <__ftoa_engine+0x13c>
    2da6:	00 27       	eor	r16, r16
    2da8:	02 17       	cp	r16, r18
    2daa:	08 f4       	brcc	.+2      	; 0x2dae <__ftoa_engine+0x142>
    2dac:	20 2f       	mov	r18, r16
    2dae:	23 95       	inc	r18
    2db0:	02 2f       	mov	r16, r18
    2db2:	7a 33       	cpi	r23, 0x3A	; 58
    2db4:	28 f0       	brcs	.+10     	; 0x2dc0 <__ftoa_engine+0x154>
    2db6:	79 e3       	ldi	r23, 0x39	; 57
    2db8:	7d 93       	st	X+, r23
    2dba:	2a 95       	dec	r18
    2dbc:	e9 f7       	brne	.-6      	; 0x2db8 <__ftoa_engine+0x14c>
    2dbe:	10 c0       	rjmp	.+32     	; 0x2de0 <__ftoa_engine+0x174>
    2dc0:	7d 93       	st	X+, r23
    2dc2:	2a 95       	dec	r18
    2dc4:	89 f6       	brne	.-94     	; 0x2d68 <__ftoa_engine+0xfc>
    2dc6:	06 94       	lsr	r0
    2dc8:	97 95       	ror	r25
    2dca:	67 95       	ror	r22
    2dcc:	37 95       	ror	r19
    2dce:	17 95       	ror	r17
    2dd0:	17 94       	ror	r1
    2dd2:	e1 18       	sub	r14, r1
    2dd4:	f1 0a       	sbc	r15, r17
    2dd6:	43 0b       	sbc	r20, r19
    2dd8:	56 0b       	sbc	r21, r22
    2dda:	c9 0b       	sbc	r28, r25
    2ddc:	d0 09       	sbc	r29, r0
    2dde:	98 f0       	brcs	.+38     	; 0x2e06 <__ftoa_engine+0x19a>
    2de0:	23 95       	inc	r18
    2de2:	7e 91       	ld	r23, -X
    2de4:	73 95       	inc	r23
    2de6:	7a 33       	cpi	r23, 0x3A	; 58
    2de8:	08 f0       	brcs	.+2      	; 0x2dec <__ftoa_engine+0x180>
    2dea:	70 e3       	ldi	r23, 0x30	; 48
    2dec:	7c 93       	st	X, r23
    2dee:	20 13       	cpse	r18, r16
    2df0:	b8 f7       	brcc	.-18     	; 0x2de0 <__ftoa_engine+0x174>
    2df2:	7e 91       	ld	r23, -X
    2df4:	70 61       	ori	r23, 0x10	; 16
    2df6:	7d 93       	st	X+, r23
    2df8:	30 f0       	brcs	.+12     	; 0x2e06 <__ftoa_engine+0x19a>
    2dfa:	83 95       	inc	r24
    2dfc:	71 e3       	ldi	r23, 0x31	; 49
    2dfe:	7d 93       	st	X+, r23
    2e00:	70 e3       	ldi	r23, 0x30	; 48
    2e02:	2a 95       	dec	r18
    2e04:	e1 f7       	brne	.-8      	; 0x2dfe <__ftoa_engine+0x192>
    2e06:	11 24       	eor	r1, r1
    2e08:	ef 90       	pop	r14
    2e0a:	ff 90       	pop	r15
    2e0c:	0f 91       	pop	r16
    2e0e:	1f 91       	pop	r17
    2e10:	cf 91       	pop	r28
    2e12:	df 91       	pop	r29
    2e14:	99 27       	eor	r25, r25
    2e16:	87 fd       	sbrc	r24, 7
    2e18:	90 95       	com	r25
    2e1a:	08 95       	ret

00002e1c <strnlen_P>:
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	05 90       	lpm	r0, Z+
    2e20:	61 50       	subi	r22, 0x01	; 1
    2e22:	70 40       	sbci	r23, 0x00	; 0
    2e24:	01 10       	cpse	r0, r1
    2e26:	d8 f7       	brcc	.-10     	; 0x2e1e <strnlen_P+0x2>
    2e28:	80 95       	com	r24
    2e2a:	90 95       	com	r25
    2e2c:	8e 0f       	add	r24, r30
    2e2e:	9f 1f       	adc	r25, r31
    2e30:	08 95       	ret

00002e32 <strtok>:
    2e32:	46 e2       	ldi	r20, 0x26	; 38
    2e34:	53 e2       	ldi	r21, 0x23	; 35
    2e36:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <strtok_r>

00002e3a <strcmp>:
    2e3a:	fb 01       	movw	r30, r22
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	8d 91       	ld	r24, X+
    2e40:	01 90       	ld	r0, Z+
    2e42:	80 19       	sub	r24, r0
    2e44:	01 10       	cpse	r0, r1
    2e46:	d9 f3       	breq	.-10     	; 0x2e3e <strcmp+0x4>
    2e48:	99 0b       	sbc	r25, r25
    2e4a:	08 95       	ret

00002e4c <strnlen>:
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	61 50       	subi	r22, 0x01	; 1
    2e50:	70 40       	sbci	r23, 0x00	; 0
    2e52:	01 90       	ld	r0, Z+
    2e54:	01 10       	cpse	r0, r1
    2e56:	d8 f7       	brcc	.-10     	; 0x2e4e <strnlen+0x2>
    2e58:	80 95       	com	r24
    2e5a:	90 95       	com	r25
    2e5c:	8e 0f       	add	r24, r30
    2e5e:	9f 1f       	adc	r25, r31
    2e60:	08 95       	ret

00002e62 <strtok_r>:
    2e62:	fa 01       	movw	r30, r20
    2e64:	a1 91       	ld	r26, Z+
    2e66:	b0 81       	ld	r27, Z
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	19 f4       	brne	.+6      	; 0x2e72 <strtok_r+0x10>
    2e6c:	10 97       	sbiw	r26, 0x00	; 0
    2e6e:	e1 f0       	breq	.+56     	; 0x2ea8 <strtok_r+0x46>
    2e70:	cd 01       	movw	r24, r26
    2e72:	dc 01       	movw	r26, r24
    2e74:	cd 01       	movw	r24, r26
    2e76:	0d 90       	ld	r0, X+
    2e78:	00 20       	and	r0, r0
    2e7a:	11 f4       	brne	.+4      	; 0x2e80 <strtok_r+0x1e>
    2e7c:	c0 01       	movw	r24, r0
    2e7e:	13 c0       	rjmp	.+38     	; 0x2ea6 <strtok_r+0x44>
    2e80:	fb 01       	movw	r30, r22
    2e82:	21 91       	ld	r18, Z+
    2e84:	22 23       	and	r18, r18
    2e86:	19 f0       	breq	.+6      	; 0x2e8e <strtok_r+0x2c>
    2e88:	20 15       	cp	r18, r0
    2e8a:	d9 f7       	brne	.-10     	; 0x2e82 <strtok_r+0x20>
    2e8c:	f3 cf       	rjmp	.-26     	; 0x2e74 <strtok_r+0x12>
    2e8e:	fb 01       	movw	r30, r22
    2e90:	21 91       	ld	r18, Z+
    2e92:	20 15       	cp	r18, r0
    2e94:	19 f4       	brne	.+6      	; 0x2e9c <strtok_r+0x3a>
    2e96:	1e 92       	st	-X, r1
    2e98:	11 96       	adiw	r26, 0x01	; 1
    2e9a:	06 c0       	rjmp	.+12     	; 0x2ea8 <strtok_r+0x46>
    2e9c:	22 23       	and	r18, r18
    2e9e:	c1 f7       	brne	.-16     	; 0x2e90 <strtok_r+0x2e>
    2ea0:	0d 90       	ld	r0, X+
    2ea2:	00 20       	and	r0, r0
    2ea4:	a1 f7       	brne	.-24     	; 0x2e8e <strtok_r+0x2c>
    2ea6:	d0 01       	movw	r26, r0
    2ea8:	fa 01       	movw	r30, r20
    2eaa:	a1 93       	st	Z+, r26
    2eac:	b0 83       	st	Z, r27
    2eae:	08 95       	ret

00002eb0 <fputc>:
    2eb0:	0f 93       	push	r16
    2eb2:	1f 93       	push	r17
    2eb4:	cf 93       	push	r28
    2eb6:	df 93       	push	r29
    2eb8:	fb 01       	movw	r30, r22
    2eba:	23 81       	ldd	r18, Z+3	; 0x03
    2ebc:	21 fd       	sbrc	r18, 1
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <fputc+0x16>
    2ec0:	8f ef       	ldi	r24, 0xFF	; 255
    2ec2:	9f ef       	ldi	r25, 0xFF	; 255
    2ec4:	28 c0       	rjmp	.+80     	; 0x2f16 <fputc+0x66>
    2ec6:	22 ff       	sbrs	r18, 2
    2ec8:	16 c0       	rjmp	.+44     	; 0x2ef6 <fputc+0x46>
    2eca:	46 81       	ldd	r20, Z+6	; 0x06
    2ecc:	57 81       	ldd	r21, Z+7	; 0x07
    2ece:	24 81       	ldd	r18, Z+4	; 0x04
    2ed0:	35 81       	ldd	r19, Z+5	; 0x05
    2ed2:	42 17       	cp	r20, r18
    2ed4:	53 07       	cpc	r21, r19
    2ed6:	44 f4       	brge	.+16     	; 0x2ee8 <fputc+0x38>
    2ed8:	a0 81       	ld	r26, Z
    2eda:	b1 81       	ldd	r27, Z+1	; 0x01
    2edc:	9d 01       	movw	r18, r26
    2ede:	2f 5f       	subi	r18, 0xFF	; 255
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	20 83       	st	Z, r18
    2ee4:	31 83       	std	Z+1, r19	; 0x01
    2ee6:	8c 93       	st	X, r24
    2ee8:	26 81       	ldd	r18, Z+6	; 0x06
    2eea:	37 81       	ldd	r19, Z+7	; 0x07
    2eec:	2f 5f       	subi	r18, 0xFF	; 255
    2eee:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef0:	26 83       	std	Z+6, r18	; 0x06
    2ef2:	37 83       	std	Z+7, r19	; 0x07
    2ef4:	10 c0       	rjmp	.+32     	; 0x2f16 <fputc+0x66>
    2ef6:	eb 01       	movw	r28, r22
    2ef8:	09 2f       	mov	r16, r25
    2efa:	18 2f       	mov	r17, r24
    2efc:	00 84       	ldd	r0, Z+8	; 0x08
    2efe:	f1 85       	ldd	r31, Z+9	; 0x09
    2f00:	e0 2d       	mov	r30, r0
    2f02:	19 95       	eicall
    2f04:	89 2b       	or	r24, r25
    2f06:	e1 f6       	brne	.-72     	; 0x2ec0 <fputc+0x10>
    2f08:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	8e 83       	std	Y+6, r24	; 0x06
    2f10:	9f 83       	std	Y+7, r25	; 0x07
    2f12:	81 2f       	mov	r24, r17
    2f14:	90 2f       	mov	r25, r16
    2f16:	df 91       	pop	r29
    2f18:	cf 91       	pop	r28
    2f1a:	1f 91       	pop	r17
    2f1c:	0f 91       	pop	r16
    2f1e:	08 95       	ret

00002f20 <sprintf>:
    2f20:	0f 93       	push	r16
    2f22:	1f 93       	push	r17
    2f24:	cf 93       	push	r28
    2f26:	df 93       	push	r29
    2f28:	cd b7       	in	r28, 0x3d	; 61
    2f2a:	de b7       	in	r29, 0x3e	; 62
    2f2c:	2e 97       	sbiw	r28, 0x0e	; 14
    2f2e:	cd bf       	out	0x3d, r28	; 61
    2f30:	de bf       	out	0x3e, r29	; 62
    2f32:	0e 89       	ldd	r16, Y+22	; 0x16
    2f34:	1f 89       	ldd	r17, Y+23	; 0x17
    2f36:	86 e0       	ldi	r24, 0x06	; 6
    2f38:	8c 83       	std	Y+4, r24	; 0x04
    2f3a:	09 83       	std	Y+1, r16	; 0x01
    2f3c:	1a 83       	std	Y+2, r17	; 0x02
    2f3e:	8f ef       	ldi	r24, 0xFF	; 255
    2f40:	9f e7       	ldi	r25, 0x7F	; 127
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	9e 83       	std	Y+6, r25	; 0x06
    2f46:	ae 01       	movw	r20, r28
    2f48:	46 5e       	subi	r20, 0xE6	; 230
    2f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f4c:	68 8d       	ldd	r22, Y+24	; 0x18
    2f4e:	79 8d       	ldd	r23, Y+25	; 0x19
    2f50:	ce 01       	movw	r24, r28
    2f52:	01 96       	adiw	r24, 0x01	; 1
    2f54:	0e 94 57 12 	call	0x24ae	; 0x24ae <vfprintf>
    2f58:	2f 81       	ldd	r18, Y+7	; 0x07
    2f5a:	38 85       	ldd	r19, Y+8	; 0x08
    2f5c:	f8 01       	movw	r30, r16
    2f5e:	e2 0f       	add	r30, r18
    2f60:	f3 1f       	adc	r31, r19
    2f62:	10 82       	st	Z, r1
    2f64:	2e 96       	adiw	r28, 0x0e	; 14
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	1f 91       	pop	r17
    2f70:	0f 91       	pop	r16
    2f72:	08 95       	ret

00002f74 <__ultoa_invert>:
    2f74:	fa 01       	movw	r30, r20
    2f76:	aa 27       	eor	r26, r26
    2f78:	28 30       	cpi	r18, 0x08	; 8
    2f7a:	51 f1       	breq	.+84     	; 0x2fd0 <__ultoa_invert+0x5c>
    2f7c:	20 31       	cpi	r18, 0x10	; 16
    2f7e:	81 f1       	breq	.+96     	; 0x2fe0 <__ultoa_invert+0x6c>
    2f80:	e8 94       	clt
    2f82:	6f 93       	push	r22
    2f84:	6e 7f       	andi	r22, 0xFE	; 254
    2f86:	6e 5f       	subi	r22, 0xFE	; 254
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f8e:	af 4f       	sbci	r26, 0xFF	; 255
    2f90:	b1 e0       	ldi	r27, 0x01	; 1
    2f92:	3e d0       	rcall	.+124    	; 0x3010 <__ultoa_invert+0x9c>
    2f94:	b4 e0       	ldi	r27, 0x04	; 4
    2f96:	3c d0       	rcall	.+120    	; 0x3010 <__ultoa_invert+0x9c>
    2f98:	67 0f       	add	r22, r23
    2f9a:	78 1f       	adc	r23, r24
    2f9c:	89 1f       	adc	r24, r25
    2f9e:	9a 1f       	adc	r25, r26
    2fa0:	a1 1d       	adc	r26, r1
    2fa2:	68 0f       	add	r22, r24
    2fa4:	79 1f       	adc	r23, r25
    2fa6:	8a 1f       	adc	r24, r26
    2fa8:	91 1d       	adc	r25, r1
    2faa:	a1 1d       	adc	r26, r1
    2fac:	6a 0f       	add	r22, r26
    2fae:	71 1d       	adc	r23, r1
    2fb0:	81 1d       	adc	r24, r1
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	a1 1d       	adc	r26, r1
    2fb6:	20 d0       	rcall	.+64     	; 0x2ff8 <__ultoa_invert+0x84>
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <__ultoa_invert+0x48>
    2fba:	68 94       	set
    2fbc:	3f 91       	pop	r19
    2fbe:	2a e0       	ldi	r18, 0x0A	; 10
    2fc0:	26 9f       	mul	r18, r22
    2fc2:	11 24       	eor	r1, r1
    2fc4:	30 19       	sub	r19, r0
    2fc6:	30 5d       	subi	r19, 0xD0	; 208
    2fc8:	31 93       	st	Z+, r19
    2fca:	de f6       	brtc	.-74     	; 0x2f82 <__ultoa_invert+0xe>
    2fcc:	cf 01       	movw	r24, r30
    2fce:	08 95       	ret
    2fd0:	46 2f       	mov	r20, r22
    2fd2:	47 70       	andi	r20, 0x07	; 7
    2fd4:	40 5d       	subi	r20, 0xD0	; 208
    2fd6:	41 93       	st	Z+, r20
    2fd8:	b3 e0       	ldi	r27, 0x03	; 3
    2fda:	0f d0       	rcall	.+30     	; 0x2ffa <__ultoa_invert+0x86>
    2fdc:	c9 f7       	brne	.-14     	; 0x2fd0 <__ultoa_invert+0x5c>
    2fde:	f6 cf       	rjmp	.-20     	; 0x2fcc <__ultoa_invert+0x58>
    2fe0:	46 2f       	mov	r20, r22
    2fe2:	4f 70       	andi	r20, 0x0F	; 15
    2fe4:	40 5d       	subi	r20, 0xD0	; 208
    2fe6:	4a 33       	cpi	r20, 0x3A	; 58
    2fe8:	18 f0       	brcs	.+6      	; 0x2ff0 <__ultoa_invert+0x7c>
    2fea:	49 5d       	subi	r20, 0xD9	; 217
    2fec:	31 fd       	sbrc	r19, 1
    2fee:	40 52       	subi	r20, 0x20	; 32
    2ff0:	41 93       	st	Z+, r20
    2ff2:	02 d0       	rcall	.+4      	; 0x2ff8 <__ultoa_invert+0x84>
    2ff4:	a9 f7       	brne	.-22     	; 0x2fe0 <__ultoa_invert+0x6c>
    2ff6:	ea cf       	rjmp	.-44     	; 0x2fcc <__ultoa_invert+0x58>
    2ff8:	b4 e0       	ldi	r27, 0x04	; 4
    2ffa:	a6 95       	lsr	r26
    2ffc:	97 95       	ror	r25
    2ffe:	87 95       	ror	r24
    3000:	77 95       	ror	r23
    3002:	67 95       	ror	r22
    3004:	ba 95       	dec	r27
    3006:	c9 f7       	brne	.-14     	; 0x2ffa <__ultoa_invert+0x86>
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	61 05       	cpc	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	08 95       	ret
    3010:	9b 01       	movw	r18, r22
    3012:	ac 01       	movw	r20, r24
    3014:	0a 2e       	mov	r0, r26
    3016:	06 94       	lsr	r0
    3018:	57 95       	ror	r21
    301a:	47 95       	ror	r20
    301c:	37 95       	ror	r19
    301e:	27 95       	ror	r18
    3020:	ba 95       	dec	r27
    3022:	c9 f7       	brne	.-14     	; 0x3016 <__ultoa_invert+0xa2>
    3024:	62 0f       	add	r22, r18
    3026:	73 1f       	adc	r23, r19
    3028:	84 1f       	adc	r24, r20
    302a:	95 1f       	adc	r25, r21
    302c:	a0 1d       	adc	r26, r0
    302e:	08 95       	ret

00003030 <_exit>:
    3030:	f8 94       	cli

00003032 <__stop_program>:
    3032:	ff cf       	rjmp	.-2      	; 0x3032 <__stop_program>
