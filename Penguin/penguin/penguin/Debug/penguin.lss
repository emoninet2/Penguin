
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000322  00802000  00003dc0  00003e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000075e4  00802322  00802322  00004176  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004176  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a38  00000000  00000000  00004214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000111ba  00000000  00000000  00004c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003003  00000000  00000000  00015e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006ea0  00000000  00000000  00018e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c58  00000000  00000000  0001fcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a14  00000000  00000000  00021904  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008356  00000000  00000000  00028318  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce0  00000000  00000000  0003066e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 02 	jmp	0x40a	; 0x40a <__ctors_end>
       4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
       8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
       c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      10:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      14:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      18:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      1c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      20:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      24:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      28:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      2c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      30:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      34:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      38:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <__vector_14>
      3c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      40:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      44:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      48:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      4c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      50:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      54:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      58:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      5c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      60:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      64:	0c 94 39 18 	jmp	0x3072	; 0x3072 <__vector_25>
      68:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__vector_26>
      6c:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__vector_27>
      70:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__vector_28>
      74:	0c 94 6b 18 	jmp	0x30d6	; 0x30d6 <__vector_29>
      78:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_30>
      7c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      80:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      84:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      88:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      8c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      90:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      94:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      98:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      9c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      a0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      a4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      a8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      ac:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      b0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      b4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      b8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      bc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      c0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      c4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      c8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      cc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      d0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      d4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      d8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      dc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      e0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      e4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      e8:	0c 94 93 18 	jmp	0x3126	; 0x3126 <__vector_58>
      ec:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_59>
      f0:	0c 94 9d 18 	jmp	0x313a	; 0x313a <__vector_60>
      f4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      f8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
      fc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     100:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     104:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     108:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     10c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     110:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     114:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     118:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     11c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     120:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     124:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     128:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     12c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     130:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     134:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     138:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     13c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     140:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     144:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     148:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     14c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     150:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     154:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     158:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     15c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     160:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__vector_88>
     164:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__vector_89>
     168:	0c 94 7f 18 	jmp	0x30fe	; 0x30fe <__vector_90>
     16c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     170:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     174:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     178:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     17c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     180:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     184:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     188:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     18c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     190:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     194:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     198:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     19c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1a0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1a4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1a8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1ac:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1b0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1b4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1b8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1bc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1c0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1c4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1c8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1cc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1d0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1d4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1d8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1dc:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1e0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1e4:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1e8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1ec:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1f0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1f4:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__vector_125>
     1f8:	0c 94 26 02 	jmp	0x44c	; 0x44c <__bad_interrupt>
     1fc:	3e 0d       	add	r19, r14
     1fe:	69 0d       	add	r22, r9
     200:	40 0e       	add	r4, r16
     202:	69 0d       	add	r22, r9
     204:	40 0e       	add	r4, r16
     206:	a4 0d       	add	r26, r4
     208:	bb 0d       	add	r27, r11
     20a:	40 0e       	add	r4, r16
     20c:	12 0e       	add	r1, r18
     20e:	1f 0e       	add	r1, r31

00000210 <__trampolines_start>:
     210:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <USB_Device_ProcessControlRequest+0xbc>
     214:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <USB_Device_ProcessControlRequest+0x20e>
     218:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <USB_Device_ProcessControlRequest+0x228>
     21c:	0c 94 3e 0d 	jmp	0x1a7c	; 0x1a7c <USB_Device_ProcessControlRequest+0x66>
     220:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <USB_Device_ProcessControlRequest+0x160>
     224:	0c 94 af 07 	jmp	0xf5e	; 0xf5e <prvIdleTask>
     228:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
     22c:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <USBThread>
     230:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <CDC_Device_putchar>
     234:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <USB_Device_ProcessControlRequest+0x132>
     238:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <CDC_Device_getchar>
     23c:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <thread_4>

00000240 <ProductString>:
     240:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     250:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

0000025e <ManufacturerString>:
     25e:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     26e:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000278 <LanguageString>:
     278:	04 03 09 04                                         ....

0000027c <ConfigurationDescriptor>:
     27c:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     28c:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     29c:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2ac:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002ba <DeviceDescriptor>:
     2ba:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2ca:	dc 01                                               ..

000002cc <__c.2242>:
     2cc:	6e 61 6e 00                                         nan.

000002d0 <__c.2240>:
     2d0:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     300:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     310:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     320:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     330:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     340:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     350:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     360:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     370:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     380:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     390:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003ce <ascdays>:
     3ce:	53 75 6e 4d 6f 6e 54 75 65 57 65 64 54 68 75 46     SunMonTueWedThuF
     3de:	72 69 53 61 74 00                                   riSat.

000003e4 <ascmonths>:
     3e4:	4a 61 6e 46 65 62 4d 61 72 41 70 72 4d 61 79 4a     JanFebMarAprMayJ
     3f4:	75 6e 4a 75 6c 41 75 67 53 65 70 4f 63 74 4e 6f     unJulAugSepOctNo
     404:	76 44 65 63 00 00                                   vDec..

0000040a <__ctors_end>:
     40a:	11 24       	eor	r1, r1
     40c:	1f be       	out	0x3f, r1	; 63
     40e:	cf ef       	ldi	r28, 0xFF	; 255
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df e9       	ldi	r29, 0x9F	; 159
     414:	de bf       	out	0x3e, r29	; 62
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	0c bf       	out	0x3c, r16	; 60

0000041a <__do_copy_data>:
     41a:	13 e2       	ldi	r17, 0x23	; 35
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b0 e2       	ldi	r27, 0x20	; 32
     420:	e0 ec       	ldi	r30, 0xC0	; 192
     422:	fd e3       	ldi	r31, 0x3D	; 61
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	a2 32       	cpi	r26, 0x22	; 34
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	29 e9       	ldi	r18, 0x99	; 153
     436:	a2 e2       	ldi	r26, 0x22	; 34
     438:	b3 e2       	ldi	r27, 0x23	; 35
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a6 30       	cpi	r26, 0x06	; 6
     440:	b2 07       	cpc	r27, r18
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	0e 94 00 17 	call	0x2e00	; 0x2e00 <main>
     448:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <_exit>

0000044c <__bad_interrupt>:
     44c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000450 <ctime>:
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
     458:	2c 97       	sbiw	r28, 0x0c	; 12
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	be 01       	movw	r22, r28
     460:	6f 5f       	subi	r22, 0xFF	; 255
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 4d 02 	call	0x49a	; 0x49a <localtime_r>
     468:	60 91 00 20 	lds	r22, 0x2000
     46c:	70 91 01 20 	lds	r23, 0x2001
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 04 03 	call	0x608	; 0x608 <asctime_r>
     478:	80 91 00 20 	lds	r24, 0x2000
     47c:	90 91 01 20 	lds	r25, 0x2001
     480:	2c 96       	adiw	r28, 0x0c	; 12
     482:	cd bf       	out	0x3d, r28	; 61
     484:	de bf       	out	0x3e, r29	; 62
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <localtime>:
     48c:	6a ed       	ldi	r22, 0xDA	; 218
     48e:	78 e9       	ldi	r23, 0x98	; 152
     490:	0e 94 4d 02 	call	0x49a	; 0x49a <localtime_r>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	98 e9       	ldi	r25, 0x98	; 152
     498:	08 95       	ret

0000049a <localtime_r>:
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	0f 93       	push	r16
     4a4:	1f 93       	push	r17
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <localtime_r+0x12>
     4ac:	1f 92       	push	r1
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	6c 01       	movw	r12, r24
     4b4:	7b 01       	movw	r14, r22
     4b6:	e0 91 04 99 	lds	r30, 0x9904
     4ba:	f0 91 05 99 	lds	r31, 0x9905
     4be:	30 97       	sbiw	r30, 0x00	; 0
     4c0:	29 f0       	breq	.+10     	; 0x4cc <localtime_r+0x32>
     4c2:	66 ee       	ldi	r22, 0xE6	; 230
     4c4:	78 e9       	ldi	r23, 0x98	; 152
     4c6:	19 95       	eicall
     4c8:	8c 01       	movw	r16, r24
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <localtime_r+0x36>
     4cc:	0f ef       	ldi	r16, 0xFF	; 255
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	f6 01       	movw	r30, r12
     4d2:	40 81       	ld	r20, Z
     4d4:	51 81       	ldd	r21, Z+1	; 0x01
     4d6:	62 81       	ldd	r22, Z+2	; 0x02
     4d8:	73 81       	ldd	r23, Z+3	; 0x03
     4da:	80 91 e6 98 	lds	r24, 0x98E6
     4de:	90 91 e7 98 	lds	r25, 0x98E7
     4e2:	a0 91 e8 98 	lds	r26, 0x98E8
     4e6:	b0 91 e9 98 	lds	r27, 0x98E9
     4ea:	48 0f       	add	r20, r24
     4ec:	59 1f       	adc	r21, r25
     4ee:	6a 1f       	adc	r22, r26
     4f0:	7b 1f       	adc	r23, r27
     4f2:	10 16       	cp	r1, r16
     4f4:	11 06       	cpc	r1, r17
     4f6:	4c f4       	brge	.+18     	; 0x50a <localtime_r+0x70>
     4f8:	c8 01       	movw	r24, r16
     4fa:	01 2e       	mov	r0, r17
     4fc:	00 0c       	add	r0, r0
     4fe:	aa 0b       	sbc	r26, r26
     500:	bb 0b       	sbc	r27, r27
     502:	48 0f       	add	r20, r24
     504:	59 1f       	adc	r21, r25
     506:	6a 1f       	adc	r22, r26
     508:	7b 1f       	adc	r23, r27
     50a:	49 83       	std	Y+1, r20	; 0x01
     50c:	5a 83       	std	Y+2, r21	; 0x02
     50e:	6b 83       	std	Y+3, r22	; 0x03
     510:	7c 83       	std	Y+4, r23	; 0x04
     512:	b7 01       	movw	r22, r14
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 8b 03 	call	0x716	; 0x716 <gmtime_r>
     51c:	f7 01       	movw	r30, r14
     51e:	02 87       	std	Z+10, r16	; 0x0a
     520:	13 87       	std	Z+11, r17	; 0x0b
     522:	24 96       	adiw	r28, 0x04	; 4
     524:	cd bf       	out	0x3d, r28	; 61
     526:	de bf       	out	0x3e, r29	; 62
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	1f 91       	pop	r17
     52e:	0f 91       	pop	r16
     530:	ff 90       	pop	r15
     532:	ef 90       	pop	r14
     534:	df 90       	pop	r13
     536:	cf 90       	pop	r12
     538:	08 95       	ret

0000053a <mktime>:
     53a:	cf 92       	push	r12
     53c:	df 92       	push	r13
     53e:	ef 92       	push	r14
     540:	ff 92       	push	r15
     542:	0f 93       	push	r16
     544:	1f 93       	push	r17
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	00 d0       	rcall	.+0      	; 0x54c <mktime+0x12>
     54c:	1f 92       	push	r1
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	8c 01       	movw	r16, r24
     554:	0e 94 61 04 	call	0x8c2	; 0x8c2 <mk_gmtime>
     558:	69 83       	std	Y+1, r22	; 0x01
     55a:	7a 83       	std	Y+2, r23	; 0x02
     55c:	8b 83       	std	Y+3, r24	; 0x03
     55e:	9c 83       	std	Y+4, r25	; 0x04
     560:	f8 01       	movw	r30, r16
     562:	82 85       	ldd	r24, Z+10	; 0x0a
     564:	93 85       	ldd	r25, Z+11	; 0x0b
     566:	97 ff       	sbrs	r25, 7
     568:	0e c0       	rjmp	.+28     	; 0x586 <mktime+0x4c>
     56a:	e0 91 04 99 	lds	r30, 0x9904
     56e:	f0 91 05 99 	lds	r31, 0x9905
     572:	30 97       	sbiw	r30, 0x00	; 0
     574:	41 f0       	breq	.+16     	; 0x586 <mktime+0x4c>
     576:	66 ee       	ldi	r22, 0xE6	; 230
     578:	78 e9       	ldi	r23, 0x98	; 152
     57a:	ce 01       	movw	r24, r28
     57c:	01 96       	adiw	r24, 0x01	; 1
     57e:	19 95       	eicall
     580:	f8 01       	movw	r30, r16
     582:	82 87       	std	Z+10, r24	; 0x0a
     584:	93 87       	std	Z+11, r25	; 0x0b
     586:	f8 01       	movw	r30, r16
     588:	82 85       	ldd	r24, Z+10	; 0x0a
     58a:	93 85       	ldd	r25, Z+11	; 0x0b
     58c:	18 16       	cp	r1, r24
     58e:	19 06       	cpc	r1, r25
     590:	94 f4       	brge	.+36     	; 0x5b6 <mktime+0x7c>
     592:	09 2e       	mov	r0, r25
     594:	00 0c       	add	r0, r0
     596:	aa 0b       	sbc	r26, r26
     598:	bb 0b       	sbc	r27, r27
     59a:	49 81       	ldd	r20, Y+1	; 0x01
     59c:	5a 81       	ldd	r21, Y+2	; 0x02
     59e:	6b 81       	ldd	r22, Y+3	; 0x03
     5a0:	7c 81       	ldd	r23, Y+4	; 0x04
     5a2:	6a 01       	movw	r12, r20
     5a4:	7b 01       	movw	r14, r22
     5a6:	c8 1a       	sub	r12, r24
     5a8:	d9 0a       	sbc	r13, r25
     5aa:	ea 0a       	sbc	r14, r26
     5ac:	fb 0a       	sbc	r15, r27
     5ae:	c9 82       	std	Y+1, r12	; 0x01
     5b0:	da 82       	std	Y+2, r13	; 0x02
     5b2:	eb 82       	std	Y+3, r14	; 0x03
     5b4:	fc 82       	std	Y+4, r15	; 0x04
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ba:	ab 81       	ldd	r26, Y+3	; 0x03
     5bc:	bc 81       	ldd	r27, Y+4	; 0x04
     5be:	40 91 e6 98 	lds	r20, 0x98E6
     5c2:	50 91 e7 98 	lds	r21, 0x98E7
     5c6:	60 91 e8 98 	lds	r22, 0x98E8
     5ca:	70 91 e9 98 	lds	r23, 0x98E9
     5ce:	84 1b       	sub	r24, r20
     5d0:	95 0b       	sbc	r25, r21
     5d2:	a6 0b       	sbc	r26, r22
     5d4:	b7 0b       	sbc	r27, r23
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	9a 83       	std	Y+2, r25	; 0x02
     5da:	ab 83       	std	Y+3, r26	; 0x03
     5dc:	bc 83       	std	Y+4, r27	; 0x04
     5de:	b8 01       	movw	r22, r16
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	0e 94 4d 02 	call	0x49a	; 0x49a <localtime_r>
     5e8:	69 81       	ldd	r22, Y+1	; 0x01
     5ea:	7a 81       	ldd	r23, Y+2	; 0x02
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
     5f0:	24 96       	adiw	r28, 0x04	; 4
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	cf 90       	pop	r12
     606:	08 95       	ret

00000608 <asctime_r>:
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	8c 01       	movw	r16, r24
     61a:	eb 01       	movw	r28, r22
     61c:	fc 01       	movw	r30, r24
     61e:	84 81       	ldd	r24, Z+4	; 0x04
     620:	b8 2f       	mov	r27, r24
     622:	bb 0f       	add	r27, r27
     624:	b8 0f       	add	r27, r24
     626:	85 81       	ldd	r24, Z+5	; 0x05
     628:	78 2f       	mov	r23, r24
     62a:	77 0f       	add	r23, r23
     62c:	78 0f       	add	r23, r24
     62e:	7e 01       	movw	r14, r28
     630:	9e 01       	movw	r18, r28
     632:	2c 5f       	subi	r18, 0xFC	; 252
     634:	3f 4f       	sbci	r19, 0xFF	; 255
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	84 2f       	mov	r24, r20
     63a:	8b 0f       	add	r24, r27
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	82 53       	subi	r24, 0x32	; 50
     642:	9c 4f       	sbci	r25, 0xFC	; 252
     644:	af 4f       	sbci	r26, 0xFF	; 255
     646:	fc 01       	movw	r30, r24
     648:	5a 2f       	mov	r21, r26
     64a:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__xload_1>
     64e:	f7 01       	movw	r30, r14
     650:	61 93       	st	Z+, r22
     652:	7f 01       	movw	r14, r30
     654:	84 2f       	mov	r24, r20
     656:	87 0f       	add	r24, r23
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	a0 e0       	ldi	r26, 0x00	; 0
     65c:	8c 51       	subi	r24, 0x1C	; 28
     65e:	9c 4f       	sbci	r25, 0xFC	; 252
     660:	af 4f       	sbci	r26, 0xFF	; 255
     662:	fc 01       	movw	r30, r24
     664:	5a 2f       	mov	r21, r26
     666:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__xload_1>
     66a:	f9 01       	movw	r30, r18
     66c:	61 93       	st	Z+, r22
     66e:	9f 01       	movw	r18, r30
     670:	4f 5f       	subi	r20, 0xFF	; 255
     672:	43 30       	cpi	r20, 0x03	; 3
     674:	09 f7       	brne	.-62     	; 0x638 <asctime_r+0x30>
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	8f 83       	std	Y+7, r24	; 0x07
     67a:	8b 83       	std	Y+3, r24	; 0x03
     67c:	be 01       	movw	r22, r28
     67e:	68 5f       	subi	r22, 0xF8	; 248
     680:	7f 4f       	sbci	r23, 0xFF	; 255
     682:	f8 01       	movw	r30, r16
     684:	83 81       	ldd	r24, Z+3	; 0x03
     686:	40 e2       	ldi	r20, 0x20	; 32
     688:	08 2e       	mov	r0, r24
     68a:	00 0c       	add	r0, r0
     68c:	99 0b       	sbc	r25, r25
     68e:	0e 94 1c 05 	call	0xa38	; 0xa38 <__print_lz>
     692:	be 01       	movw	r22, r28
     694:	65 5f       	subi	r22, 0xF5	; 245
     696:	7f 4f       	sbci	r23, 0xFF	; 255
     698:	f8 01       	movw	r30, r16
     69a:	82 81       	ldd	r24, Z+2	; 0x02
     69c:	4a e3       	ldi	r20, 0x3A	; 58
     69e:	08 2e       	mov	r0, r24
     6a0:	00 0c       	add	r0, r0
     6a2:	99 0b       	sbc	r25, r25
     6a4:	0e 94 1c 05 	call	0xa38	; 0xa38 <__print_lz>
     6a8:	be 01       	movw	r22, r28
     6aa:	62 5f       	subi	r22, 0xF2	; 242
     6ac:	7f 4f       	sbci	r23, 0xFF	; 255
     6ae:	f8 01       	movw	r30, r16
     6b0:	81 81       	ldd	r24, Z+1	; 0x01
     6b2:	4a e3       	ldi	r20, 0x3A	; 58
     6b4:	08 2e       	mov	r0, r24
     6b6:	00 0c       	add	r0, r0
     6b8:	99 0b       	sbc	r25, r25
     6ba:	0e 94 1c 05 	call	0xa38	; 0xa38 <__print_lz>
     6be:	be 01       	movw	r22, r28
     6c0:	6f 5e       	subi	r22, 0xEF	; 239
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	40 e2       	ldi	r20, 0x20	; 32
     6ca:	08 2e       	mov	r0, r24
     6cc:	00 0c       	add	r0, r0
     6ce:	99 0b       	sbc	r25, r25
     6d0:	0e 94 1c 05 	call	0xa38	; 0xa38 <__print_lz>
     6d4:	f8 01       	movw	r30, r16
     6d6:	86 81       	ldd	r24, Z+6	; 0x06
     6d8:	97 81       	ldd	r25, Z+7	; 0x07
     6da:	64 e6       	ldi	r22, 0x64	; 100
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	84 59       	subi	r24, 0x94	; 148
     6e0:	98 4f       	sbci	r25, 0xF8	; 248
     6e2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     6e6:	6b 01       	movw	r12, r22
     6e8:	7c 01       	movw	r14, r24
     6ea:	be 01       	movw	r22, r28
     6ec:	6c 5e       	subi	r22, 0xEC	; 236
     6ee:	7f 4f       	sbci	r23, 0xFF	; 255
     6f0:	40 e2       	ldi	r20, 0x20	; 32
     6f2:	c6 01       	movw	r24, r12
     6f4:	0e 94 1c 05 	call	0xa38	; 0xa38 <__print_lz>
     6f8:	be 01       	movw	r22, r28
     6fa:	6a 5e       	subi	r22, 0xEA	; 234
     6fc:	7f 4f       	sbci	r23, 0xFF	; 255
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	c7 01       	movw	r24, r14
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__print_lz>

00000716 <gmtime_r>:
     716:	cf 92       	push	r12
     718:	df 92       	push	r13
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	28 97       	sbiw	r28, 0x08	; 8
     72c:	cd bf       	out	0x3d, r28	; 61
     72e:	de bf       	out	0x3e, r29	; 62
     730:	8b 01       	movw	r16, r22
     732:	fc 01       	movw	r30, r24
     734:	60 81       	ld	r22, Z
     736:	71 81       	ldd	r23, Z+1	; 0x01
     738:	82 81       	ldd	r24, Z+2	; 0x02
     73a:	93 81       	ldd	r25, Z+3	; 0x03
     73c:	20 e8       	ldi	r18, 0x80	; 128
     73e:	31 e5       	ldi	r19, 0x51	; 81
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	0e 94 b5 1c 	call	0x396a	; 0x396a <__udivmodsi4>
     748:	69 01       	movw	r12, r18
     74a:	7a 01       	movw	r14, r20
     74c:	2c e3       	ldi	r18, 0x3C	; 60
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__divmodsi4>
     758:	29 83       	std	Y+1, r18	; 0x01
     75a:	3a 83       	std	Y+2, r19	; 0x02
     75c:	4b 83       	std	Y+3, r20	; 0x03
     75e:	5c 83       	std	Y+4, r21	; 0x04
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	9a 81       	ldd	r25, Y+2	; 0x02
     764:	ab 81       	ldd	r26, Y+3	; 0x03
     766:	bc 81       	ldd	r27, Y+4	; 0x04
     768:	f8 01       	movw	r30, r16
     76a:	60 83       	st	Z, r22
     76c:	6c e3       	ldi	r22, 0x3C	; 60
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     774:	dc 01       	movw	r26, r24
     776:	cb 01       	movw	r24, r22
     778:	f8 01       	movw	r30, r16
     77a:	a1 83       	std	Z+1, r26	; 0x01
     77c:	82 83       	std	Z+2, r24	; 0x02
     77e:	c6 01       	movw	r24, r12
     780:	06 96       	adiw	r24, 0x06	; 6
     782:	67 e0       	ldi	r22, 0x07	; 7
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	0e 94 df 1c 	call	0x39be	; 0x39be <__udivmodhi4>
     78a:	84 83       	std	Z+4, r24	; 0x04
     78c:	2d ea       	ldi	r18, 0xAD	; 173
     78e:	3e e8       	ldi	r19, 0x8E	; 142
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	c7 01       	movw	r24, r14
     796:	b6 01       	movw	r22, r12
     798:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__divmodsi4>
     79c:	29 83       	std	Y+1, r18	; 0x01
     79e:	3a 83       	std	Y+2, r19	; 0x02
     7a0:	6d 83       	std	Y+5, r22	; 0x05
     7a2:	7e 83       	std	Y+6, r23	; 0x06
     7a4:	8f 83       	std	Y+7, r24	; 0x07
     7a6:	98 87       	std	Y+8, r25	; 0x08
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	24 e6       	ldi	r18, 0x64	; 100
     7ae:	28 9f       	mul	r18, r24
     7b0:	60 01       	movw	r12, r0
     7b2:	29 9f       	mul	r18, r25
     7b4:	d0 0c       	add	r13, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	6d 81       	ldd	r22, Y+5	; 0x05
     7ba:	7e 81       	ldd	r23, Y+6	; 0x06
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	98 85       	ldd	r25, Y+8	; 0x08
     7c0:	25 eb       	ldi	r18, 0xB5	; 181
     7c2:	35 e0       	ldi	r19, 0x05	; 5
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <__divmodsi4>
     7cc:	29 83       	std	Y+1, r18	; 0x01
     7ce:	3a 83       	std	Y+2, r19	; 0x02
     7d0:	6d 83       	std	Y+5, r22	; 0x05
     7d2:	7e 83       	std	Y+6, r23	; 0x06
     7d4:	e9 80       	ldd	r14, Y+1	; 0x01
     7d6:	fa 80       	ldd	r15, Y+2	; 0x02
     7d8:	ee 0c       	add	r14, r14
     7da:	ff 1c       	adc	r15, r15
     7dc:	ee 0c       	add	r14, r14
     7de:	ff 1c       	adc	r15, r15
     7e0:	ec 0c       	add	r14, r12
     7e2:	fd 1c       	adc	r15, r13
     7e4:	8d 81       	ldd	r24, Y+5	; 0x05
     7e6:	9e 81       	ldd	r25, Y+6	; 0x06
     7e8:	f5 e6       	ldi	r31, 0x65	; 101
     7ea:	ef 16       	cp	r14, r31
     7ec:	f1 04       	cpc	r15, r1
     7ee:	10 f0       	brcs	.+4      	; 0x7f4 <gmtime_r+0xde>
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	04 c0       	rjmp	.+8      	; 0x7fc <gmtime_r+0xe6>
     7f4:	24 e6       	ldi	r18, 0x64	; 100
     7f6:	e2 16       	cp	r14, r18
     7f8:	f1 04       	cpc	r15, r1
     7fa:	19 f0       	breq	.+6      	; 0x802 <gmtime_r+0xec>
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	02 c0       	rjmp	.+4      	; 0x806 <gmtime_r+0xf0>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	a9 01       	movw	r20, r18
     808:	44 59       	subi	r20, 0x94	; 148
     80a:	5e 4f       	sbci	r21, 0xFE	; 254
     80c:	48 17       	cp	r20, r24
     80e:	59 07       	cpc	r21, r25
     810:	68 f4       	brcc	.+26     	; 0x82c <gmtime_r+0x116>
     812:	6d e6       	ldi	r22, 0x6D	; 109
     814:	71 e0       	ldi	r23, 0x01	; 1
     816:	82 1b       	sub	r24, r18
     818:	93 0b       	sbc	r25, r19
     81a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     81e:	dc 01       	movw	r26, r24
     820:	cb 01       	movw	r24, r22
     822:	e8 0e       	add	r14, r24
     824:	f9 1e       	adc	r15, r25
     826:	cd 01       	movw	r24, r26
     828:	20 e0       	ldi	r18, 0x00	; 0
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	44 e6       	ldi	r20, 0x64	; 100
     82e:	e4 0e       	add	r14, r20
     830:	f1 1c       	adc	r15, r1
     832:	f8 01       	movw	r30, r16
     834:	e6 82       	std	Z+6, r14	; 0x06
     836:	f7 82       	std	Z+7, r15	; 0x07
     838:	80 87       	std	Z+8, r24	; 0x08
     83a:	91 87       	std	Z+9, r25	; 0x09
     83c:	25 5c       	subi	r18, 0xC5	; 197
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	82 17       	cp	r24, r18
     842:	93 07       	cpc	r25, r19
     844:	48 f4       	brcc	.+18     	; 0x858 <gmtime_r+0x142>
     846:	6f e1       	ldi	r22, 0x1F	; 31
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	f8 01       	movw	r30, r16
     854:	85 83       	std	Z+5, r24	; 0x05
     856:	22 c0       	rjmp	.+68     	; 0x89c <gmtime_r+0x186>
     858:	69 e9       	ldi	r22, 0x99	; 153
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	82 1b       	sub	r24, r18
     85e:	93 0b       	sbc	r25, r19
     860:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	f8 2e       	mov	r15, r24
     86a:	ff 0c       	add	r15, r15
     86c:	ff 0c       	add	r15, r15
     86e:	f8 0e       	add	r15, r24
     870:	6d e3       	ldi	r22, 0x3D	; 61
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	cd 01       	movw	r24, r26
     876:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     87a:	dc 01       	movw	r26, r24
     87c:	cb 01       	movw	r24, r22
     87e:	e8 2e       	mov	r14, r24
     880:	ee 0c       	add	r14, r14
     882:	6f e1       	ldi	r22, 0x1F	; 31
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	cd 01       	movw	r24, r26
     888:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	22 e0       	ldi	r18, 0x02	; 2
     892:	28 0f       	add	r18, r24
     894:	f2 0e       	add	r15, r18
     896:	fe 0c       	add	r15, r14
     898:	f8 01       	movw	r30, r16
     89a:	f5 82       	std	Z+5, r15	; 0x05
     89c:	a3 83       	std	Z+3, r26	; 0x03
     89e:	f8 01       	movw	r30, r16
     8a0:	12 86       	std	Z+10, r1	; 0x0a
     8a2:	13 86       	std	Z+11, r1	; 0x0b
     8a4:	83 81       	ldd	r24, Z+3	; 0x03
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	83 83       	std	Z+3, r24	; 0x03
     8aa:	28 96       	adiw	r28, 0x08	; 8
     8ac:	cd bf       	out	0x3d, r28	; 61
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	08 95       	ret

000008c2 <mk_gmtime>:
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
     8dc:	ee 81       	ldd	r30, Y+6	; 0x06
     8de:	ff 81       	ldd	r31, Y+7	; 0x07
     8e0:	8f 01       	movw	r16, r30
     8e2:	04 56       	subi	r16, 0x64	; 100
     8e4:	11 09       	sbc	r17, r1
     8e6:	b9 f0       	breq	.+46     	; 0x916 <mk_gmtime+0x54>
     8e8:	cf 01       	movw	r24, r30
     8ea:	85 56       	subi	r24, 0x65	; 101
     8ec:	91 09       	sbc	r25, r1
     8ee:	6c 01       	movw	r12, r24
     8f0:	97 ff       	sbrs	r25, 7
     8f2:	03 c0       	rjmp	.+6      	; 0x8fa <mk_gmtime+0x38>
     8f4:	23 e0       	ldi	r18, 0x03	; 3
     8f6:	c2 0e       	add	r12, r18
     8f8:	d1 1c       	adc	r13, r1
     8fa:	d5 94       	asr	r13
     8fc:	c7 94       	ror	r12
     8fe:	d5 94       	asr	r13
     900:	c7 94       	ror	r12
     902:	6c e9       	ldi	r22, 0x9C	; 156
     904:	7f ef       	ldi	r23, 0xFF	; 255
     906:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     90a:	c6 0e       	add	r12, r22
     90c:	d7 1e       	adc	r13, r23
     90e:	8f ef       	ldi	r24, 0xFF	; 255
     910:	c8 1a       	sub	r12, r24
     912:	d8 0a       	sbc	r13, r24
     914:	02 c0       	rjmp	.+4      	; 0x91a <mk_gmtime+0x58>
     916:	c1 2c       	mov	r12, r1
     918:	d1 2c       	mov	r13, r1
     91a:	0d 2c       	mov	r0, r13
     91c:	00 0c       	add	r0, r0
     91e:	ee 08       	sbc	r14, r14
     920:	ff 08       	sbc	r15, r15
     922:	2d e6       	ldi	r18, 0x6D	; 109
     924:	31 e0       	ldi	r19, 0x01	; 1
     926:	d8 01       	movw	r26, r16
     928:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__usmulhisi3>
     92c:	c6 0e       	add	r12, r22
     92e:	d7 1e       	adc	r13, r23
     930:	e8 1e       	adc	r14, r24
     932:	f9 1e       	adc	r15, r25
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	08 2e       	mov	r0, r24
     938:	00 0c       	add	r0, r0
     93a:	99 0b       	sbc	r25, r25
     93c:	8c 01       	movw	r16, r24
     93e:	01 50       	subi	r16, 0x01	; 1
     940:	11 09       	sbc	r17, r1
     942:	2d 81       	ldd	r18, Y+5	; 0x05
     944:	22 30       	cpi	r18, 0x02	; 2
     946:	2c f4       	brge	.+10     	; 0x952 <mk_gmtime+0x90>
     948:	22 23       	and	r18, r18
     94a:	79 f1       	breq	.+94     	; 0x9aa <mk_gmtime+0xe8>
     94c:	01 5e       	subi	r16, 0xE1	; 225
     94e:	1f 4f       	sbci	r17, 0xFF	; 255
     950:	2c c0       	rjmp	.+88     	; 0x9aa <mk_gmtime+0xe8>
     952:	cf 01       	movw	r24, r30
     954:	84 59       	subi	r24, 0x94	; 148
     956:	98 4f       	sbci	r25, 0xF8	; 248
     958:	0e 94 36 05 	call	0xa6c	; 0xa6c <is_leap_year>
     95c:	e8 2f       	mov	r30, r24
     95e:	f0 e0       	ldi	r31, 0x00	; 0
     960:	fb 96       	adiw	r30, 0x3b	; 59
     962:	e0 0f       	add	r30, r16
     964:	f1 1f       	adc	r31, r17
     966:	8d 81       	ldd	r24, Y+5	; 0x05
     968:	08 2e       	mov	r0, r24
     96a:	00 0c       	add	r0, r0
     96c:	99 0b       	sbc	r25, r25
     96e:	02 97       	sbiw	r24, 0x02	; 2
     970:	85 30       	cpi	r24, 0x05	; 5
     972:	91 05       	cpc	r25, r1
     974:	14 f0       	brlt	.+4      	; 0x97a <mk_gmtime+0xb8>
     976:	e7 56       	subi	r30, 0x67	; 103
     978:	ff 4f       	sbci	r31, 0xFF	; 255
     97a:	65 e0       	ldi	r22, 0x05	; 5
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     982:	9c 01       	movw	r18, r24
     984:	97 ff       	sbrs	r25, 7
     986:	02 c0       	rjmp	.+4      	; 0x98c <mk_gmtime+0xca>
     988:	2f 5f       	subi	r18, 0xFF	; 255
     98a:	3f 4f       	sbci	r19, 0xFF	; 255
     98c:	35 95       	asr	r19
     98e:	27 95       	ror	r18
     990:	9d e3       	ldi	r25, 0x3D	; 61
     992:	92 9f       	mul	r25, r18
     994:	a0 01       	movw	r20, r0
     996:	93 9f       	mul	r25, r19
     998:	50 0d       	add	r21, r0
     99a:	11 24       	eor	r1, r1
     99c:	8f 01       	movw	r16, r30
     99e:	04 0f       	add	r16, r20
     9a0:	15 1f       	adc	r17, r21
     9a2:	80 ff       	sbrs	r24, 0
     9a4:	02 c0       	rjmp	.+4      	; 0x9aa <mk_gmtime+0xe8>
     9a6:	01 5e       	subi	r16, 0xE1	; 225
     9a8:	1f 4f       	sbci	r17, 0xFF	; 255
     9aa:	a8 01       	movw	r20, r16
     9ac:	11 0f       	add	r17, r17
     9ae:	66 0b       	sbc	r22, r22
     9b0:	77 0b       	sbc	r23, r23
     9b2:	9a 01       	movw	r18, r20
     9b4:	ab 01       	movw	r20, r22
     9b6:	2c 0d       	add	r18, r12
     9b8:	3d 1d       	adc	r19, r13
     9ba:	4e 1d       	adc	r20, r14
     9bc:	5f 1d       	adc	r21, r15
     9be:	60 e8       	ldi	r22, 0x80	; 128
     9c0:	71 e5       	ldi	r23, 0x51	; 81
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__mulsi3>
     9ca:	6b 01       	movw	r12, r22
     9cc:	7c 01       	movw	r14, r24
     9ce:	aa 81       	ldd	r26, Y+2	; 0x02
     9d0:	0a 2e       	mov	r0, r26
     9d2:	00 0c       	add	r0, r0
     9d4:	bb 0b       	sbc	r27, r27
     9d6:	20 e1       	ldi	r18, 0x10	; 16
     9d8:	3e e0       	ldi	r19, 0x0E	; 14
     9da:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__usmulhisi3>
     9de:	4b 01       	movw	r8, r22
     9e0:	5c 01       	movw	r10, r24
     9e2:	a9 81       	ldd	r26, Y+1	; 0x01
     9e4:	0a 2e       	mov	r0, r26
     9e6:	00 0c       	add	r0, r0
     9e8:	bb 0b       	sbc	r27, r27
     9ea:	2c e3       	ldi	r18, 0x3C	; 60
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <__usmulhisi3>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	88 0d       	add	r24, r8
     9f8:	99 1d       	adc	r25, r9
     9fa:	aa 1d       	adc	r26, r10
     9fc:	bb 1d       	adc	r27, r11
     9fe:	48 81       	ld	r20, Y
     a00:	04 2e       	mov	r0, r20
     a02:	00 0c       	add	r0, r0
     a04:	55 0b       	sbc	r21, r21
     a06:	66 0b       	sbc	r22, r22
     a08:	77 0b       	sbc	r23, r23
     a0a:	84 0f       	add	r24, r20
     a0c:	95 1f       	adc	r25, r21
     a0e:	a6 1f       	adc	r26, r22
     a10:	b7 1f       	adc	r27, r23
     a12:	bc 01       	movw	r22, r24
     a14:	cd 01       	movw	r24, r26
     a16:	6c 0d       	add	r22, r12
     a18:	7d 1d       	adc	r23, r13
     a1a:	8e 1d       	adc	r24, r14
     a1c:	9f 1d       	adc	r25, r15
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	df 90       	pop	r13
     a2c:	cf 90       	pop	r12
     a2e:	bf 90       	pop	r11
     a30:	af 90       	pop	r10
     a32:	9f 90       	pop	r9
     a34:	8f 90       	pop	r8
     a36:	08 95       	ret

00000a38 <__print_lz>:
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	cf 93       	push	r28
     a3e:	df 93       	push	r29
     a40:	1f 92       	push	r1
     a42:	cd b7       	in	r28, 0x3d	; 61
     a44:	de b7       	in	r29, 0x3e	; 62
     a46:	8b 01       	movw	r16, r22
     a48:	6a e0       	ldi	r22, 0x0A	; 10
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	49 83       	std	Y+1, r20	; 0x01
     a4e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     a52:	60 5d       	subi	r22, 0xD0	; 208
     a54:	f8 01       	movw	r30, r16
     a56:	60 83       	st	Z, r22
     a58:	80 5d       	subi	r24, 0xD0	; 208
     a5a:	81 83       	std	Z+1, r24	; 0x01
     a5c:	49 81       	ldd	r20, Y+1	; 0x01
     a5e:	42 83       	std	Z+2, r20	; 0x02
     a60:	0f 90       	pop	r0
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	1f 91       	pop	r17
     a68:	0f 91       	pop	r16
     a6a:	08 95       	ret

00000a6c <is_leap_year>:
     a6c:	9c 01       	movw	r18, r24
     a6e:	23 70       	andi	r18, 0x03	; 3
     a70:	33 27       	eor	r19, r19
     a72:	23 2b       	or	r18, r19
     a74:	59 f4       	brne	.+22     	; 0xa8c <is_leap_year+0x20>
     a76:	64 e6       	ldi	r22, 0x64	; 100
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
     a7e:	89 2b       	or	r24, r25
     a80:	39 f4       	brne	.+14     	; 0xa90 <is_leap_year+0x24>
     a82:	63 70       	andi	r22, 0x03	; 3
     a84:	77 27       	eor	r23, r23
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	67 2b       	or	r22, r23
     a8a:	19 f0       	breq	.+6      	; 0xa92 <is_leap_year+0x26>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 95       	ret
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	08 95       	ret

00000a94 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     a94:	29 2f       	mov	r18, r25
     a96:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     a98:	22 30       	cpi	r18, 0x02	; 2
     a9a:	31 05       	cpc	r19, r1
     a9c:	59 f0       	breq	.+22     	; 0xab4 <CALLBACK_USB_GetDescriptor+0x20>
     a9e:	23 30       	cpi	r18, 0x03	; 3
     aa0:	31 05       	cpc	r19, r1
     aa2:	69 f0       	breq	.+26     	; 0xabe <CALLBACK_USB_GetDescriptor+0x2a>
     aa4:	21 30       	cpi	r18, 0x01	; 1
     aa6:	31 05       	cpc	r19, r1
     aa8:	29 f5       	brne	.+74     	; 0xaf4 <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     aaa:	82 e1       	ldi	r24, 0x12	; 18
     aac:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     aae:	2a eb       	ldi	r18, 0xBA	; 186
     ab0:	32 e0       	ldi	r19, 0x02	; 2
     ab2:	29 c0       	rjmp	.+82     	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     ab4:	8e e3       	ldi	r24, 0x3E	; 62
     ab6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     ab8:	2c e7       	ldi	r18, 0x7C	; 124
     aba:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     abc:	24 c0       	rjmp	.+72     	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
     abe:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	91 05       	cpc	r25, r1
     ac4:	59 f0       	breq	.+22     	; 0xadc <CALLBACK_USB_GetDescriptor+0x48>
     ac6:	82 30       	cpi	r24, 0x02	; 2
     ac8:	91 05       	cpc	r25, r1
     aca:	71 f0       	breq	.+28     	; 0xae8 <CALLBACK_USB_GetDescriptor+0x54>
     acc:	89 2b       	or	r24, r25
     ace:	b9 f4       	brne	.+46     	; 0xafe <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     ad0:	e8 e7       	ldi	r30, 0x78	; 120
     ad2:	f2 e0       	ldi	r31, 0x02	; 2
     ad4:	84 91       	lpm	r24, Z
     ad6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     ad8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     ada:	15 c0       	rjmp	.+42     	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     adc:	ee e5       	ldi	r30, 0x5E	; 94
     ade:	f2 e0       	ldi	r31, 0x02	; 2
     ae0:	84 91       	lpm	r24, Z
     ae2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     ae4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     ae6:	0f c0       	rjmp	.+30     	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     ae8:	e0 e4       	ldi	r30, 0x40	; 64
     aea:	f2 e0       	ldi	r31, 0x02	; 2
     aec:	84 91       	lpm	r24, Z
     aee:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     af0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     af2:	09 c0       	rjmp	.+18     	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	04 c0       	rjmp	.+8      	; 0xb06 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     b06:	fa 01       	movw	r30, r20
     b08:	20 83       	st	Z, r18
     b0a:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     b0c:	08 95       	ret

00000b0e <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     b0e:	31 e1       	ldi	r19, 0x11	; 17
     b10:	fc 01       	movw	r30, r24
     b12:	30 83       	st	Z, r19
     b14:	31 97       	sbiw	r30, 0x01	; 1
     b16:	22 e2       	ldi	r18, 0x22	; 34
     b18:	20 83       	st	Z, r18
     b1a:	31 97       	sbiw	r30, 0x01	; 1
     b1c:	a3 e3       	ldi	r26, 0x33	; 51
     b1e:	a0 83       	st	Z, r26
     b20:	31 97       	sbiw	r30, 0x01	; 1
     b22:	60 83       	st	Z, r22
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	70 83       	st	Z, r23
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	10 82       	st	Z, r1
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	10 82       	st	Z, r1
     b30:	31 97       	sbiw	r30, 0x01	; 1
     b32:	60 e8       	ldi	r22, 0x80	; 128
     b34:	60 83       	st	Z, r22
     b36:	31 97       	sbiw	r30, 0x01	; 1
     b38:	10 82       	st	Z, r1
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	62 e0       	ldi	r22, 0x02	; 2
     b3e:	60 83       	st	Z, r22
     b40:	31 97       	sbiw	r30, 0x01	; 1
     b42:	63 e0       	ldi	r22, 0x03	; 3
     b44:	60 83       	st	Z, r22
     b46:	31 97       	sbiw	r30, 0x01	; 1
     b48:	64 e0       	ldi	r22, 0x04	; 4
     b4a:	60 83       	st	Z, r22
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	65 e0       	ldi	r22, 0x05	; 5
     b50:	60 83       	st	Z, r22
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	66 e0       	ldi	r22, 0x06	; 6
     b56:	60 83       	st	Z, r22
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	67 e0       	ldi	r22, 0x07	; 7
     b5c:	60 83       	st	Z, r22
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	68 e0       	ldi	r22, 0x08	; 8
     b62:	60 83       	st	Z, r22
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	69 e0       	ldi	r22, 0x09	; 9
     b68:	60 83       	st	Z, r22
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	60 e1       	ldi	r22, 0x10	; 16
     b6e:	60 83       	st	Z, r22
     b70:	31 97       	sbiw	r30, 0x01	; 1
     b72:	30 83       	st	Z, r19
     b74:	31 97       	sbiw	r30, 0x01	; 1
     b76:	32 e1       	ldi	r19, 0x12	; 18
     b78:	30 83       	st	Z, r19
     b7a:	31 97       	sbiw	r30, 0x01	; 1
     b7c:	33 e1       	ldi	r19, 0x13	; 19
     b7e:	30 83       	st	Z, r19
     b80:	31 97       	sbiw	r30, 0x01	; 1
     b82:	34 e1       	ldi	r19, 0x14	; 20
     b84:	30 83       	st	Z, r19
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	35 e1       	ldi	r19, 0x15	; 21
     b8a:	30 83       	st	Z, r19
     b8c:	31 97       	sbiw	r30, 0x01	; 1
     b8e:	36 e1       	ldi	r19, 0x16	; 22
     b90:	30 83       	st	Z, r19
     b92:	31 97       	sbiw	r30, 0x01	; 1
     b94:	37 e1       	ldi	r19, 0x17	; 23
     b96:	30 83       	st	Z, r19
     b98:	31 97       	sbiw	r30, 0x01	; 1
     b9a:	38 e1       	ldi	r19, 0x18	; 24
     b9c:	30 83       	st	Z, r19
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	39 e1       	ldi	r19, 0x19	; 25
     ba2:	30 83       	st	Z, r19
     ba4:	31 97       	sbiw	r30, 0x01	; 1
     ba6:	30 e2       	ldi	r19, 0x20	; 32
     ba8:	30 83       	st	Z, r19
     baa:	31 97       	sbiw	r30, 0x01	; 1
     bac:	31 e2       	ldi	r19, 0x21	; 33
     bae:	30 83       	st	Z, r19
     bb0:	31 97       	sbiw	r30, 0x01	; 1
     bb2:	20 83       	st	Z, r18
     bb4:	31 97       	sbiw	r30, 0x01	; 1
     bb6:	23 e2       	ldi	r18, 0x23	; 35
     bb8:	20 83       	st	Z, r18
     bba:	31 97       	sbiw	r30, 0x01	; 1
     bbc:	40 83       	st	Z, r20
     bbe:	31 97       	sbiw	r30, 0x01	; 1
     bc0:	50 83       	st	Z, r21
     bc2:	31 97       	sbiw	r30, 0x01	; 1
     bc4:	26 e2       	ldi	r18, 0x26	; 38
     bc6:	20 83       	st	Z, r18
     bc8:	31 97       	sbiw	r30, 0x01	; 1
     bca:	27 e2       	ldi	r18, 0x27	; 39
     bcc:	20 83       	st	Z, r18
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	28 e2       	ldi	r18, 0x28	; 40
     bd2:	20 83       	st	Z, r18
     bd4:	31 97       	sbiw	r30, 0x01	; 1
     bd6:	29 e2       	ldi	r18, 0x29	; 41
     bd8:	20 83       	st	Z, r18
     bda:	31 97       	sbiw	r30, 0x01	; 1
     bdc:	20 e3       	ldi	r18, 0x30	; 48
     bde:	20 83       	st	Z, r18
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	21 e3       	ldi	r18, 0x31	; 49
     be4:	20 83       	st	Z, r18
     be6:	87 97       	sbiw	r24, 0x27	; 39
     be8:	08 95       	ret

00000bea <xPortStartScheduler>:
     bea:	65 e0       	ldi	r22, 0x05	; 5
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	98 e0       	ldi	r25, 0x08	; 8
     bf0:	0e 94 e5 18 	call	0x31ca	; 0x31ca <TC0_ConfigClockSource>
     bf4:	83 ef       	ldi	r24, 0xF3	; 243
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	80 93 26 08 	sts	0x0826, r24
     bfc:	90 93 27 08 	sts	0x0827, r25
     c00:	61 e0       	ldi	r22, 0x01	; 1
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	98 e0       	ldi	r25, 0x08	; 8
     c06:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TC0_SetOverflowIntLevel>
     c0a:	e0 ea       	ldi	r30, 0xA0	; 160
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	81 60       	ori	r24, 0x01	; 1
     c12:	82 83       	std	Z+2, r24	; 0x02
     c14:	a0 91 73 93 	lds	r26, 0x9373
     c18:	b0 91 74 93 	lds	r27, 0x9374
     c1c:	cd 91       	ld	r28, X+
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	dd 91       	ld	r29, X+
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	ff 90       	pop	r15
     c46:	ef 90       	pop	r14
     c48:	df 90       	pop	r13
     c4a:	cf 90       	pop	r12
     c4c:	bf 90       	pop	r11
     c4e:	af 90       	pop	r10
     c50:	9f 90       	pop	r9
     c52:	8f 90       	pop	r8
     c54:	7f 90       	pop	r7
     c56:	6f 90       	pop	r6
     c58:	5f 90       	pop	r5
     c5a:	4f 90       	pop	r4
     c5c:	3f 90       	pop	r3
     c5e:	2f 90       	pop	r2
     c60:	1f 90       	pop	r1
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	08 95       	ret
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	08 95       	ret

00000c6e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     c6e:	0f 92       	push	r0
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	0f 92       	push	r0
     c76:	1f 92       	push	r1
     c78:	11 24       	eor	r1, r1
     c7a:	2f 92       	push	r2
     c7c:	3f 92       	push	r3
     c7e:	4f 92       	push	r4
     c80:	5f 92       	push	r5
     c82:	6f 92       	push	r6
     c84:	7f 92       	push	r7
     c86:	8f 92       	push	r8
     c88:	9f 92       	push	r9
     c8a:	af 92       	push	r10
     c8c:	bf 92       	push	r11
     c8e:	cf 92       	push	r12
     c90:	df 92       	push	r13
     c92:	ef 92       	push	r14
     c94:	ff 92       	push	r15
     c96:	0f 93       	push	r16
     c98:	1f 93       	push	r17
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	cf 93       	push	r28
     cb0:	df 93       	push	r29
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	a0 91 73 93 	lds	r26, 0x9373
     cba:	b0 91 74 93 	lds	r27, 0x9374
     cbe:	0d b6       	in	r0, 0x3d	; 61
     cc0:	0d 92       	st	X+, r0
     cc2:	0e b6       	in	r0, 0x3e	; 62
     cc4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     cc6:	0e 94 98 0a 	call	0x1530	; 0x1530 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     cca:	a0 91 73 93 	lds	r26, 0x9373
     cce:	b0 91 74 93 	lds	r27, 0x9374
     cd2:	cd 91       	ld	r28, X+
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	dd 91       	ld	r29, X+
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	bf 91       	pop	r27
     ce4:	af 91       	pop	r26
     ce6:	9f 91       	pop	r25
     ce8:	8f 91       	pop	r24
     cea:	7f 91       	pop	r23
     cec:	6f 91       	pop	r22
     cee:	5f 91       	pop	r21
     cf0:	4f 91       	pop	r20
     cf2:	3f 91       	pop	r19
     cf4:	2f 91       	pop	r18
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	bf 90       	pop	r11
     d04:	af 90       	pop	r10
     d06:	9f 90       	pop	r9
     d08:	8f 90       	pop	r8
     d0a:	7f 90       	pop	r7
     d0c:	6f 90       	pop	r6
     d0e:	5f 90       	pop	r5
     d10:	4f 90       	pop	r4
     d12:	3f 90       	pop	r3
     d14:	2f 90       	pop	r2
     d16:	1f 90       	pop	r1
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d1e:	08 95       	ret

00000d20 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     d20:	0f 92       	push	r0
     d22:	0f b6       	in	r0, 0x3f	; 63
     d24:	f8 94       	cli
     d26:	0f 92       	push	r0
     d28:	1f 92       	push	r1
     d2a:	11 24       	eor	r1, r1
     d2c:	2f 92       	push	r2
     d2e:	3f 92       	push	r3
     d30:	4f 92       	push	r4
     d32:	5f 92       	push	r5
     d34:	6f 92       	push	r6
     d36:	7f 92       	push	r7
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	2f 93       	push	r18
     d4e:	3f 93       	push	r19
     d50:	4f 93       	push	r20
     d52:	5f 93       	push	r21
     d54:	6f 93       	push	r22
     d56:	7f 93       	push	r23
     d58:	8f 93       	push	r24
     d5a:	9f 93       	push	r25
     d5c:	af 93       	push	r26
     d5e:	bf 93       	push	r27
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ef 93       	push	r30
     d66:	ff 93       	push	r31
     d68:	a0 91 73 93 	lds	r26, 0x9373
     d6c:	b0 91 74 93 	lds	r27, 0x9374
     d70:	0d b6       	in	r0, 0x3d	; 61
     d72:	0d 92       	st	X+, r0
     d74:	0e b6       	in	r0, 0x3e	; 62
     d76:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     d78:	0e 94 20 09 	call	0x1240	; 0x1240 <xTaskIncrementTick>
     d7c:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     d7e:	0e 94 98 0a 	call	0x1530	; 0x1530 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     d82:	a0 91 73 93 	lds	r26, 0x9373
     d86:	b0 91 74 93 	lds	r27, 0x9374
     d8a:	cd 91       	ld	r28, X+
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	dd 91       	ld	r29, X+
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	ff 91       	pop	r31
     d94:	ef 91       	pop	r30
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	bf 91       	pop	r27
     d9c:	af 91       	pop	r26
     d9e:	9f 91       	pop	r25
     da0:	8f 91       	pop	r24
     da2:	7f 91       	pop	r23
     da4:	6f 91       	pop	r22
     da6:	5f 91       	pop	r21
     da8:	4f 91       	pop	r20
     daa:	3f 91       	pop	r19
     dac:	2f 91       	pop	r18
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	7f 90       	pop	r7
     dc4:	6f 90       	pop	r6
     dc6:	5f 90       	pop	r5
     dc8:	4f 90       	pop	r4
     dca:	3f 90       	pop	r3
     dcc:	2f 90       	pop	r2
     dce:	1f 90       	pop	r1
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	0f 90       	pop	r0

	asm volatile ( "ret" );
     dd6:	08 95       	ret

00000dd8 <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
     dd8:	0e 94 90 06 	call	0xd20	; 0xd20 <vPortYieldFromTick>
		asm volatile ( "reti" );
     ddc:	18 95       	reti

00000dde <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     de4:	0e 94 1a 09 	call	0x1234	; 0x1234 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     de8:	80 91 22 23 	lds	r24, 0x2322
     dec:	90 91 23 23 	lds	r25, 0x2323
     df0:	89 2b       	or	r24, r25
     df2:	31 f4       	brne	.+12     	; 0xe00 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     df4:	87 e2       	ldi	r24, 0x27	; 39
     df6:	93 e2       	ldi	r25, 0x23	; 35
     df8:	80 93 22 23 	sts	0x2322, r24
     dfc:	90 93 23 23 	sts	0x2323, r25
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     e00:	20 91 24 23 	lds	r18, 0x2324
     e04:	30 91 25 23 	lds	r19, 0x2325
     e08:	ce 01       	movw	r24, r28
     e0a:	82 0f       	add	r24, r18
     e0c:	93 1f       	adc	r25, r19
     e0e:	8f 3f       	cpi	r24, 0xFF	; 255
     e10:	4f e6       	ldi	r20, 0x6F	; 111
     e12:	94 07       	cpc	r25, r20
     e14:	70 f4       	brcc	.+28     	; 0xe32 <pvPortMalloc+0x54>
     e16:	28 17       	cp	r18, r24
     e18:	39 07       	cpc	r19, r25
     e1a:	70 f4       	brcc	.+28     	; 0xe38 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     e1c:	c0 91 22 23 	lds	r28, 0x2322
     e20:	d0 91 23 23 	lds	r29, 0x2323
     e24:	c2 0f       	add	r28, r18
     e26:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     e28:	80 93 24 23 	sts	0x2324, r24
     e2c:	90 93 25 23 	sts	0x2325, r25
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     e32:	c0 e0       	ldi	r28, 0x00	; 0
     e34:	d0 e0       	ldi	r29, 0x00	; 0
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <pvPortMalloc+0x5e>
     e38:	c0 e0       	ldi	r28, 0x00	; 0
     e3a:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     e3c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     e40:	ce 01       	movw	r24, r28
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     e48:	08 95       	ret

00000e4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     e4a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e4c:	03 96       	adiw	r24, 0x03	; 3
     e4e:	81 83       	std	Z+1, r24	; 0x01
     e50:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     e52:	2f ef       	ldi	r18, 0xFF	; 255
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	23 83       	std	Z+3, r18	; 0x03
     e58:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e5a:	85 83       	std	Z+5, r24	; 0x05
     e5c:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e5e:	87 83       	std	Z+7, r24	; 0x07
     e60:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     e62:	10 82       	st	Z, r1
     e64:	08 95       	ret

00000e66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     e66:	fc 01       	movw	r30, r24
     e68:	10 86       	std	Z+8, r1	; 0x08
     e6a:	11 86       	std	Z+9, r1	; 0x09
     e6c:	08 95       	ret

00000e6e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	9c 01       	movw	r18, r24
     e74:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     e76:	dc 01       	movw	r26, r24
     e78:	11 96       	adiw	r26, 0x01	; 1
     e7a:	cd 91       	ld	r28, X+
     e7c:	dc 91       	ld	r29, X
     e7e:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     e80:	c2 83       	std	Z+2, r28	; 0x02
     e82:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	84 83       	std	Z+4, r24	; 0x04
     e8a:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	dc 01       	movw	r26, r24
     e92:	12 96       	adiw	r26, 0x02	; 2
     e94:	6d 93       	st	X+, r22
     e96:	7c 93       	st	X, r23
     e98:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     e9a:	6c 83       	std	Y+4, r22	; 0x04
     e9c:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e9e:	20 87       	std	Z+8, r18	; 0x08
     ea0:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     ea2:	f9 01       	movw	r30, r18
     ea4:	80 81       	ld	r24, Z
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 83       	st	Z, r24
}
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     eb6:	48 81       	ld	r20, Y
     eb8:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     eba:	4f 3f       	cpi	r20, 0xFF	; 255
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	52 07       	cpc	r21, r18
     ec0:	21 f4       	brne	.+8      	; 0xeca <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     ec2:	fc 01       	movw	r30, r24
     ec4:	a7 81       	ldd	r26, Z+7	; 0x07
     ec6:	b0 85       	ldd	r27, Z+8	; 0x08
     ec8:	0d c0       	rjmp	.+26     	; 0xee4 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     eca:	dc 01       	movw	r26, r24
     ecc:	13 96       	adiw	r26, 0x03	; 3
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <vListInsert+0x22>
     ed0:	df 01       	movw	r26, r30
     ed2:	12 96       	adiw	r26, 0x02	; 2
     ed4:	ed 91       	ld	r30, X+
     ed6:	fc 91       	ld	r31, X
     ed8:	13 97       	sbiw	r26, 0x03	; 3
     eda:	20 81       	ld	r18, Z
     edc:	31 81       	ldd	r19, Z+1	; 0x01
     ede:	42 17       	cp	r20, r18
     ee0:	53 07       	cpc	r21, r19
     ee2:	b0 f7       	brcc	.-20     	; 0xed0 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     ee4:	12 96       	adiw	r26, 0x02	; 2
     ee6:	ed 91       	ld	r30, X+
     ee8:	fc 91       	ld	r31, X
     eea:	13 97       	sbiw	r26, 0x03	; 3
     eec:	ea 83       	std	Y+2, r30	; 0x02
     eee:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ef0:	c4 83       	std	Z+4, r28	; 0x04
     ef2:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     ef4:	ac 83       	std	Y+4, r26	; 0x04
     ef6:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     ef8:	12 96       	adiw	r26, 0x02	; 2
     efa:	cd 93       	st	X+, r28
     efc:	dc 93       	st	X, r29
     efe:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f00:	88 87       	std	Y+8, r24	; 0x08
     f02:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     f04:	fc 01       	movw	r30, r24
     f06:	20 81       	ld	r18, Z
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	20 83       	st	Z, r18
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     f18:	a0 85       	ldd	r26, Z+8	; 0x08
     f1a:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f1c:	c2 81       	ldd	r28, Z+2	; 0x02
     f1e:	d3 81       	ldd	r29, Z+3	; 0x03
     f20:	84 81       	ldd	r24, Z+4	; 0x04
     f22:	95 81       	ldd	r25, Z+5	; 0x05
     f24:	8c 83       	std	Y+4, r24	; 0x04
     f26:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f28:	c4 81       	ldd	r28, Z+4	; 0x04
     f2a:	d5 81       	ldd	r29, Z+5	; 0x05
     f2c:	82 81       	ldd	r24, Z+2	; 0x02
     f2e:	93 81       	ldd	r25, Z+3	; 0x03
     f30:	8a 83       	std	Y+2, r24	; 0x02
     f32:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     f34:	11 96       	adiw	r26, 0x01	; 1
     f36:	cd 91       	ld	r28, X+
     f38:	dc 91       	ld	r29, X
     f3a:	12 97       	sbiw	r26, 0x02	; 2
     f3c:	ce 17       	cp	r28, r30
     f3e:	df 07       	cpc	r29, r31
     f40:	31 f4       	brne	.+12     	; 0xf4e <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	8d 93       	st	X+, r24
     f4a:	9c 93       	st	X, r25
     f4c:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     f4e:	10 86       	std	Z+8, r1	; 0x08
     f50:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     f52:	8c 91       	ld	r24, X
     f54:	81 50       	subi	r24, 0x01	; 1
     f56:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     f5e:	ff cf       	rjmp	.-2      	; 0xf5e <prvIdleTask>

00000f60 <prvAddCurrentTaskToDelayedList>:
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	ec 01       	movw	r28, r24
     f66:	e0 91 73 93 	lds	r30, 0x9373
     f6a:	f0 91 74 93 	lds	r31, 0x9374
     f6e:	82 83       	std	Z+2, r24	; 0x02
     f70:	93 83       	std	Z+3, r25	; 0x03
     f72:	80 91 2d 93 	lds	r24, 0x932D
     f76:	90 91 2e 93 	lds	r25, 0x932E
     f7a:	c8 17       	cp	r28, r24
     f7c:	d9 07       	cpc	r29, r25
     f7e:	68 f4       	brcc	.+26     	; 0xf9a <prvAddCurrentTaskToDelayedList+0x3a>
     f80:	60 91 73 93 	lds	r22, 0x9373
     f84:	70 91 74 93 	lds	r23, 0x9374
     f88:	80 91 39 93 	lds	r24, 0x9339
     f8c:	90 91 3a 93 	lds	r25, 0x933A
     f90:	6e 5f       	subi	r22, 0xFE	; 254
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	0e 94 58 07 	call	0xeb0	; 0xeb0 <vListInsert>
     f98:	17 c0       	rjmp	.+46     	; 0xfc8 <prvAddCurrentTaskToDelayedList+0x68>
     f9a:	60 91 73 93 	lds	r22, 0x9373
     f9e:	70 91 74 93 	lds	r23, 0x9374
     fa2:	80 91 3b 93 	lds	r24, 0x933B
     fa6:	90 91 3c 93 	lds	r25, 0x933C
     faa:	6e 5f       	subi	r22, 0xFE	; 254
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	0e 94 58 07 	call	0xeb0	; 0xeb0 <vListInsert>
     fb2:	80 91 8b 22 	lds	r24, 0x228B
     fb6:	90 91 8c 22 	lds	r25, 0x228C
     fba:	c8 17       	cp	r28, r24
     fbc:	d9 07       	cpc	r29, r25
     fbe:	20 f4       	brcc	.+8      	; 0xfc8 <prvAddCurrentTaskToDelayedList+0x68>
     fc0:	c0 93 8b 22 	sts	0x228B, r28
     fc4:	d0 93 8c 22 	sts	0x228C, r29
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <xTaskGenericCreate>:
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	4c 01       	movw	r8, r24
     ff0:	eb 01       	movw	r28, r22
     ff2:	5a 01       	movw	r10, r20
     ff4:	29 01       	movw	r4, r18
     ff6:	81 e2       	ldi	r24, 0x21	; 33
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 ef 06 	call	0xdde	; 0xdde <pvPortMalloc>
     ffe:	3c 01       	movw	r6, r24
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	09 f4       	brne	.+2      	; 0x1006 <xTaskGenericCreate+0x38>
    1004:	da c0       	rjmp	.+436    	; 0x11ba <xTaskGenericCreate+0x1ec>
    1006:	c1 14       	cp	r12, r1
    1008:	d1 04       	cpc	r13, r1
    100a:	09 f0       	breq	.+2      	; 0x100e <xTaskGenericCreate+0x40>
    100c:	d2 c0       	rjmp	.+420    	; 0x11b2 <xTaskGenericCreate+0x1e4>
    100e:	c5 01       	movw	r24, r10
    1010:	0e 94 ef 06 	call	0xdde	; 0xdde <pvPortMalloc>
    1014:	f3 01       	movw	r30, r6
    1016:	87 8b       	std	Z+23, r24	; 0x17
    1018:	90 8f       	std	Z+24, r25	; 0x18
    101a:	89 2b       	or	r24, r25
    101c:	21 f4       	brne	.+8      	; 0x1026 <xTaskGenericCreate+0x58>
    101e:	c3 01       	movw	r24, r6
    1020:	0e 94 24 07 	call	0xe48	; 0xe48 <vPortFree>
    1024:	ca c0       	rjmp	.+404    	; 0x11ba <xTaskGenericCreate+0x1ec>
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	af 1a       	sub	r10, r31
    102a:	b1 08       	sbc	r11, r1
    102c:	f3 01       	movw	r30, r6
    102e:	87 89       	ldd	r24, Z+23	; 0x17
    1030:	90 8d       	ldd	r25, Z+24	; 0x18
    1032:	a8 0e       	add	r10, r24
    1034:	b9 1e       	adc	r11, r25
    1036:	88 81       	ld	r24, Y
    1038:	81 8f       	std	Z+25, r24	; 0x19
    103a:	88 81       	ld	r24, Y
    103c:	88 23       	and	r24, r24
    103e:	81 f0       	breq	.+32     	; 0x1060 <xTaskGenericCreate+0x92>
    1040:	d3 01       	movw	r26, r6
    1042:	5a 96       	adiw	r26, 0x1a	; 26
    1044:	fe 01       	movw	r30, r28
    1046:	31 96       	adiw	r30, 0x01	; 1
    1048:	9e 01       	movw	r18, r28
    104a:	28 5f       	subi	r18, 0xF8	; 248
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	ef 01       	movw	r28, r30
    1050:	81 91       	ld	r24, Z+
    1052:	8d 93       	st	X+, r24
    1054:	88 81       	ld	r24, Y
    1056:	88 23       	and	r24, r24
    1058:	19 f0       	breq	.+6      	; 0x1060 <xTaskGenericCreate+0x92>
    105a:	e2 17       	cp	r30, r18
    105c:	f3 07       	cpc	r31, r19
    105e:	b9 f7       	brne	.-18     	; 0x104e <xTaskGenericCreate+0x80>
    1060:	f3 01       	movw	r30, r6
    1062:	10 a2       	std	Z+32, r1	; 0x20
    1064:	10 2f       	mov	r17, r16
    1066:	04 30       	cpi	r16, 0x04	; 4
    1068:	08 f0       	brcs	.+2      	; 0x106c <xTaskGenericCreate+0x9e>
    106a:	13 e0       	ldi	r17, 0x03	; 3
    106c:	f3 01       	movw	r30, r6
    106e:	16 8b       	std	Z+22, r17	; 0x16
    1070:	e3 01       	movw	r28, r6
    1072:	22 96       	adiw	r28, 0x02	; 2
    1074:	ce 01       	movw	r24, r28
    1076:	0e 94 33 07 	call	0xe66	; 0xe66 <vListInitialiseItem>
    107a:	c3 01       	movw	r24, r6
    107c:	0c 96       	adiw	r24, 0x0c	; 12
    107e:	0e 94 33 07 	call	0xe66	; 0xe66 <vListInitialiseItem>
    1082:	f3 01       	movw	r30, r6
    1084:	60 86       	std	Z+8, r6	; 0x08
    1086:	71 86       	std	Z+9, r7	; 0x09
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	81 1b       	sub	r24, r17
    108e:	91 09       	sbc	r25, r1
    1090:	84 87       	std	Z+12, r24	; 0x0c
    1092:	95 87       	std	Z+13, r25	; 0x0d
    1094:	62 8a       	std	Z+18, r6	; 0x12
    1096:	73 8a       	std	Z+19, r7	; 0x13
    1098:	a2 01       	movw	r20, r4
    109a:	b4 01       	movw	r22, r8
    109c:	c5 01       	movw	r24, r10
    109e:	0e 94 87 05 	call	0xb0e	; 0xb0e <pxPortInitialiseStack>
    10a2:	f3 01       	movw	r30, r6
    10a4:	80 83       	st	Z, r24
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	e1 14       	cp	r14, r1
    10aa:	f1 04       	cpc	r15, r1
    10ac:	19 f0       	breq	.+6      	; 0x10b4 <xTaskGenericCreate+0xe6>
    10ae:	f7 01       	movw	r30, r14
    10b0:	60 82       	st	Z, r6
    10b2:	71 82       	std	Z+1, r7	; 0x01
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	0f 92       	push	r0
    10ba:	80 91 2f 93 	lds	r24, 0x932F
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	80 93 2f 93 	sts	0x932F, r24
    10c4:	80 91 73 93 	lds	r24, 0x9373
    10c8:	90 91 74 93 	lds	r25, 0x9374
    10cc:	89 2b       	or	r24, r25
    10ce:	89 f5       	brne	.+98     	; 0x1132 <xTaskGenericCreate+0x164>
    10d0:	60 92 73 93 	sts	0x9373, r6
    10d4:	70 92 74 93 	sts	0x9374, r7
    10d8:	80 91 2f 93 	lds	r24, 0x932F
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	c1 f5       	brne	.+112    	; 0x1150 <xTaskGenericCreate+0x182>
    10e0:	8f e4       	ldi	r24, 0x4F	; 79
    10e2:	93 e9       	ldi	r25, 0x93	; 147
    10e4:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    10e8:	88 e5       	ldi	r24, 0x58	; 88
    10ea:	93 e9       	ldi	r25, 0x93	; 147
    10ec:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    10f0:	81 e6       	ldi	r24, 0x61	; 97
    10f2:	93 e9       	ldi	r25, 0x93	; 147
    10f4:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    10f8:	8a e6       	ldi	r24, 0x6A	; 106
    10fa:	93 e9       	ldi	r25, 0x93	; 147
    10fc:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    1100:	86 e4       	ldi	r24, 0x46	; 70
    1102:	93 e9       	ldi	r25, 0x93	; 147
    1104:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    1108:	8d e3       	ldi	r24, 0x3D	; 61
    110a:	93 e9       	ldi	r25, 0x93	; 147
    110c:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	93 e9       	ldi	r25, 0x93	; 147
    1114:	0e 94 25 07 	call	0xe4a	; 0xe4a <vListInitialise>
    1118:	86 e4       	ldi	r24, 0x46	; 70
    111a:	93 e9       	ldi	r25, 0x93	; 147
    111c:	80 93 3b 93 	sts	0x933B, r24
    1120:	90 93 3c 93 	sts	0x933C, r25
    1124:	8d e3       	ldi	r24, 0x3D	; 61
    1126:	93 e9       	ldi	r25, 0x93	; 147
    1128:	80 93 39 93 	sts	0x9339, r24
    112c:	90 93 3a 93 	sts	0x933A, r25
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <xTaskGenericCreate+0x182>
    1132:	80 91 2b 93 	lds	r24, 0x932B
    1136:	81 11       	cpse	r24, r1
    1138:	0b c0       	rjmp	.+22     	; 0x1150 <xTaskGenericCreate+0x182>
    113a:	e0 91 73 93 	lds	r30, 0x9373
    113e:	f0 91 74 93 	lds	r31, 0x9374
    1142:	86 89       	ldd	r24, Z+22	; 0x16
    1144:	08 17       	cp	r16, r24
    1146:	20 f0       	brcs	.+8      	; 0x1150 <xTaskGenericCreate+0x182>
    1148:	60 92 73 93 	sts	0x9373, r6
    114c:	70 92 74 93 	sts	0x9374, r7
    1150:	80 91 27 93 	lds	r24, 0x9327
    1154:	8f 5f       	subi	r24, 0xFF	; 255
    1156:	80 93 27 93 	sts	0x9327, r24
    115a:	f3 01       	movw	r30, r6
    115c:	86 89       	ldd	r24, Z+22	; 0x16
    115e:	90 91 2c 93 	lds	r25, 0x932C
    1162:	98 17       	cp	r25, r24
    1164:	10 f4       	brcc	.+4      	; 0x116a <xTaskGenericCreate+0x19c>
    1166:	80 93 2c 93 	sts	0x932C, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	9c 01       	movw	r18, r24
    116e:	22 0f       	add	r18, r18
    1170:	33 1f       	adc	r19, r19
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	22 0f       	add	r18, r18
    1178:	33 1f       	adc	r19, r19
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	be 01       	movw	r22, r28
    1180:	81 5b       	subi	r24, 0xB1	; 177
    1182:	9c 46       	sbci	r25, 0x6C	; 108
    1184:	0e 94 37 07 	call	0xe6e	; 0xe6e <vListInsertEnd>
    1188:	0f 90       	pop	r0
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	80 91 2b 93 	lds	r24, 0x932B
    1190:	88 23       	and	r24, r24
    1192:	59 f0       	breq	.+22     	; 0x11aa <xTaskGenericCreate+0x1dc>
    1194:	e0 91 73 93 	lds	r30, 0x9373
    1198:	f0 91 74 93 	lds	r31, 0x9374
    119c:	86 89       	ldd	r24, Z+22	; 0x16
    119e:	80 17       	cp	r24, r16
    11a0:	30 f4       	brcc	.+12     	; 0x11ae <xTaskGenericCreate+0x1e0>
    11a2:	0e 94 37 06 	call	0xc6e	; 0xc6e <vPortYield>
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	09 c0       	rjmp	.+18     	; 0x11bc <xTaskGenericCreate+0x1ee>
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <xTaskGenericCreate+0x1ee>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <xTaskGenericCreate+0x1ee>
    11b2:	fc 01       	movw	r30, r24
    11b4:	c7 8a       	std	Z+23, r12	; 0x17
    11b6:	d0 8e       	std	Z+24, r13	; 0x18
    11b8:	36 cf       	rjmp	.-404    	; 0x1026 <xTaskGenericCreate+0x58>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	df 91       	pop	r29
    11be:	cf 91       	pop	r28
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	5f 90       	pop	r5
    11da:	4f 90       	pop	r4
    11dc:	08 95       	ret

000011de <vTaskStartScheduler>:
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	a1 2c       	mov	r10, r1
    11ee:	b1 2c       	mov	r11, r1
    11f0:	c1 2c       	mov	r12, r1
    11f2:	d1 2c       	mov	r13, r1
    11f4:	e1 2c       	mov	r14, r1
    11f6:	f1 2c       	mov	r15, r1
    11f8:	00 e0       	ldi	r16, 0x00	; 0
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	44 e6       	ldi	r20, 0x64	; 100
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	67 eb       	ldi	r22, 0xB7	; 183
    1204:	72 e2       	ldi	r23, 0x22	; 34
    1206:	8f ea       	ldi	r24, 0xAF	; 175
    1208:	97 e0       	ldi	r25, 0x07	; 7
    120a:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskGenericCreate>
    120e:	81 30       	cpi	r24, 0x01	; 1
    1210:	49 f4       	brne	.+18     	; 0x1224 <vTaskStartScheduler+0x46>
    1212:	f8 94       	cli
    1214:	80 93 2b 93 	sts	0x932B, r24
    1218:	10 92 2d 93 	sts	0x932D, r1
    121c:	10 92 2e 93 	sts	0x932E, r1
    1220:	0e 94 f5 05 	call	0xbea	; 0xbea <xPortStartScheduler>
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	bf 90       	pop	r11
    1230:	af 90       	pop	r10
    1232:	08 95       	ret

00001234 <vTaskSuspendAll>:
    1234:	80 91 26 93 	lds	r24, 0x9326
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	80 93 26 93 	sts	0x9326, r24
    123e:	08 95       	ret

00001240 <xTaskIncrementTick>:
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	80 91 26 93 	lds	r24, 0x9326
    1252:	81 11       	cpse	r24, r1
    1254:	b6 c0       	rjmp	.+364    	; 0x13c2 <xTaskIncrementTick+0x182>
    1256:	80 91 2d 93 	lds	r24, 0x932D
    125a:	90 91 2e 93 	lds	r25, 0x932E
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	80 93 2d 93 	sts	0x932D, r24
    1264:	90 93 2e 93 	sts	0x932E, r25
    1268:	e0 90 2d 93 	lds	r14, 0x932D
    126c:	f0 90 2e 93 	lds	r15, 0x932E
    1270:	e1 14       	cp	r14, r1
    1272:	f1 04       	cpc	r15, r1
    1274:	99 f5       	brne	.+102    	; 0x12dc <xTaskIncrementTick+0x9c>
    1276:	80 91 3b 93 	lds	r24, 0x933B
    127a:	90 91 3c 93 	lds	r25, 0x933C
    127e:	20 91 39 93 	lds	r18, 0x9339
    1282:	30 91 3a 93 	lds	r19, 0x933A
    1286:	20 93 3b 93 	sts	0x933B, r18
    128a:	30 93 3c 93 	sts	0x933C, r19
    128e:	80 93 39 93 	sts	0x9339, r24
    1292:	90 93 3a 93 	sts	0x933A, r25
    1296:	80 91 28 93 	lds	r24, 0x9328
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	80 93 28 93 	sts	0x9328, r24
    12a0:	e0 91 3b 93 	lds	r30, 0x933B
    12a4:	f0 91 3c 93 	lds	r31, 0x933C
    12a8:	80 81       	ld	r24, Z
    12aa:	81 11       	cpse	r24, r1
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <xTaskIncrementTick+0x7c>
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	9f ef       	ldi	r25, 0xFF	; 255
    12b2:	80 93 8b 22 	sts	0x228B, r24
    12b6:	90 93 8c 22 	sts	0x228C, r25
    12ba:	10 c0       	rjmp	.+32     	; 0x12dc <xTaskIncrementTick+0x9c>
    12bc:	e0 91 3b 93 	lds	r30, 0x933B
    12c0:	f0 91 3c 93 	lds	r31, 0x933C
    12c4:	05 80       	ldd	r0, Z+5	; 0x05
    12c6:	f6 81       	ldd	r31, Z+6	; 0x06
    12c8:	e0 2d       	mov	r30, r0
    12ca:	06 80       	ldd	r0, Z+6	; 0x06
    12cc:	f7 81       	ldd	r31, Z+7	; 0x07
    12ce:	e0 2d       	mov	r30, r0
    12d0:	82 81       	ldd	r24, Z+2	; 0x02
    12d2:	93 81       	ldd	r25, Z+3	; 0x03
    12d4:	80 93 8b 22 	sts	0x228B, r24
    12d8:	90 93 8c 22 	sts	0x228C, r25
    12dc:	80 91 8b 22 	lds	r24, 0x228B
    12e0:	90 91 8c 22 	lds	r25, 0x228C
    12e4:	e8 16       	cp	r14, r24
    12e6:	f9 06       	cpc	r15, r25
    12e8:	10 f4       	brcc	.+4      	; 0x12ee <xTaskIncrementTick+0xae>
    12ea:	d1 2c       	mov	r13, r1
    12ec:	52 c0       	rjmp	.+164    	; 0x1392 <xTaskIncrementTick+0x152>
    12ee:	d1 2c       	mov	r13, r1
    12f0:	e0 91 3b 93 	lds	r30, 0x933B
    12f4:	f0 91 3c 93 	lds	r31, 0x933C
    12f8:	90 81       	ld	r25, Z
    12fa:	91 11       	cpse	r25, r1
    12fc:	07 c0       	rjmp	.+14     	; 0x130c <xTaskIncrementTick+0xcc>
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	9f ef       	ldi	r25, 0xFF	; 255
    1302:	80 93 8b 22 	sts	0x228B, r24
    1306:	90 93 8c 22 	sts	0x228C, r25
    130a:	43 c0       	rjmp	.+134    	; 0x1392 <xTaskIncrementTick+0x152>
    130c:	e0 91 3b 93 	lds	r30, 0x933B
    1310:	f0 91 3c 93 	lds	r31, 0x933C
    1314:	05 80       	ldd	r0, Z+5	; 0x05
    1316:	f6 81       	ldd	r31, Z+6	; 0x06
    1318:	e0 2d       	mov	r30, r0
    131a:	c6 81       	ldd	r28, Z+6	; 0x06
    131c:	d7 81       	ldd	r29, Z+7	; 0x07
    131e:	2a 81       	ldd	r18, Y+2	; 0x02
    1320:	3b 81       	ldd	r19, Y+3	; 0x03
    1322:	e2 16       	cp	r14, r18
    1324:	f3 06       	cpc	r15, r19
    1326:	28 f4       	brcc	.+10     	; 0x1332 <xTaskIncrementTick+0xf2>
    1328:	20 93 8b 22 	sts	0x228B, r18
    132c:	30 93 8c 22 	sts	0x228C, r19
    1330:	30 c0       	rjmp	.+96     	; 0x1392 <xTaskIncrementTick+0x152>
    1332:	8e 01       	movw	r16, r28
    1334:	0e 5f       	subi	r16, 0xFE	; 254
    1336:	1f 4f       	sbci	r17, 0xFF	; 255
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    133e:	8c 89       	ldd	r24, Y+20	; 0x14
    1340:	9d 89       	ldd	r25, Y+21	; 0x15
    1342:	89 2b       	or	r24, r25
    1344:	21 f0       	breq	.+8      	; 0x134e <xTaskIncrementTick+0x10e>
    1346:	ce 01       	movw	r24, r28
    1348:	0c 96       	adiw	r24, 0x0c	; 12
    134a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    134e:	2e 89       	ldd	r18, Y+22	; 0x16
    1350:	80 91 2c 93 	lds	r24, 0x932C
    1354:	82 17       	cp	r24, r18
    1356:	10 f4       	brcc	.+4      	; 0x135c <xTaskIncrementTick+0x11c>
    1358:	20 93 2c 93 	sts	0x932C, r18
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	c9 01       	movw	r24, r18
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	82 0f       	add	r24, r18
    136e:	93 1f       	adc	r25, r19
    1370:	b8 01       	movw	r22, r16
    1372:	81 5b       	subi	r24, 0xB1	; 177
    1374:	9c 46       	sbci	r25, 0x6C	; 108
    1376:	0e 94 37 07 	call	0xe6e	; 0xe6e <vListInsertEnd>
    137a:	e0 91 73 93 	lds	r30, 0x9373
    137e:	f0 91 74 93 	lds	r31, 0x9374
    1382:	9e 89       	ldd	r25, Y+22	; 0x16
    1384:	86 89       	ldd	r24, Z+22	; 0x16
    1386:	98 17       	cp	r25, r24
    1388:	08 f4       	brcc	.+2      	; 0x138c <xTaskIncrementTick+0x14c>
    138a:	b2 cf       	rjmp	.-156    	; 0x12f0 <xTaskIncrementTick+0xb0>
    138c:	dd 24       	eor	r13, r13
    138e:	d3 94       	inc	r13
    1390:	af cf       	rjmp	.-162    	; 0x12f0 <xTaskIncrementTick+0xb0>
    1392:	e0 91 73 93 	lds	r30, 0x9373
    1396:	f0 91 74 93 	lds	r31, 0x9374
    139a:	86 89       	ldd	r24, Z+22	; 0x16
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	fc 01       	movw	r30, r24
    13a0:	ee 0f       	add	r30, r30
    13a2:	ff 1f       	adc	r31, r31
    13a4:	ee 0f       	add	r30, r30
    13a6:	ff 1f       	adc	r31, r31
    13a8:	ee 0f       	add	r30, r30
    13aa:	ff 1f       	adc	r31, r31
    13ac:	8e 0f       	add	r24, r30
    13ae:	9f 1f       	adc	r25, r31
    13b0:	fc 01       	movw	r30, r24
    13b2:	e1 5b       	subi	r30, 0xB1	; 177
    13b4:	fc 46       	sbci	r31, 0x6C	; 108
    13b6:	80 81       	ld	r24, Z
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	48 f0       	brcs	.+18     	; 0x13ce <xTaskIncrementTick+0x18e>
    13bc:	dd 24       	eor	r13, r13
    13be:	d3 94       	inc	r13
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <xTaskIncrementTick+0x18e>
    13c2:	80 91 2a 93 	lds	r24, 0x932A
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 2a 93 	sts	0x932A, r24
    13cc:	d1 2c       	mov	r13, r1
    13ce:	80 91 29 93 	lds	r24, 0x9329
    13d2:	88 23       	and	r24, r24
    13d4:	11 f0       	breq	.+4      	; 0x13da <xTaskIncrementTick+0x19a>
    13d6:	dd 24       	eor	r13, r13
    13d8:	d3 94       	inc	r13
    13da:	8d 2d       	mov	r24, r13
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	ef 90       	pop	r14
    13e8:	df 90       	pop	r13
    13ea:	08 95       	ret

000013ec <xTaskResumeAll>:
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	0f 92       	push	r0
    1400:	80 91 26 93 	lds	r24, 0x9326
    1404:	81 50       	subi	r24, 0x01	; 1
    1406:	80 93 26 93 	sts	0x9326, r24
    140a:	80 91 26 93 	lds	r24, 0x9326
    140e:	81 11       	cpse	r24, r1
    1410:	62 c0       	rjmp	.+196    	; 0x14d6 <xTaskResumeAll+0xea>
    1412:	80 91 2f 93 	lds	r24, 0x932F
    1416:	81 11       	cpse	r24, r1
    1418:	33 c0       	rjmp	.+102    	; 0x1480 <xTaskResumeAll+0x94>
    141a:	60 c0       	rjmp	.+192    	; 0x14dc <xTaskResumeAll+0xf0>
    141c:	d7 01       	movw	r26, r14
    141e:	15 96       	adiw	r26, 0x05	; 5
    1420:	ed 91       	ld	r30, X+
    1422:	fc 91       	ld	r31, X
    1424:	16 97       	sbiw	r26, 0x06	; 6
    1426:	c6 81       	ldd	r28, Z+6	; 0x06
    1428:	d7 81       	ldd	r29, Z+7	; 0x07
    142a:	ce 01       	movw	r24, r28
    142c:	0c 96       	adiw	r24, 0x0c	; 12
    142e:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    1432:	8e 01       	movw	r16, r28
    1434:	0e 5f       	subi	r16, 0xFE	; 254
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
    143e:	2e 89       	ldd	r18, Y+22	; 0x16
    1440:	80 91 2c 93 	lds	r24, 0x932C
    1444:	82 17       	cp	r24, r18
    1446:	10 f4       	brcc	.+4      	; 0x144c <xTaskResumeAll+0x60>
    1448:	20 93 2c 93 	sts	0x932C, r18
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	c9 01       	movw	r24, r18
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	82 0f       	add	r24, r18
    145e:	93 1f       	adc	r25, r19
    1460:	b8 01       	movw	r22, r16
    1462:	81 5b       	subi	r24, 0xB1	; 177
    1464:	9c 46       	sbci	r25, 0x6C	; 108
    1466:	0e 94 37 07 	call	0xe6e	; 0xe6e <vListInsertEnd>
    146a:	e0 91 73 93 	lds	r30, 0x9373
    146e:	f0 91 74 93 	lds	r31, 0x9374
    1472:	9e 89       	ldd	r25, Y+22	; 0x16
    1474:	86 89       	ldd	r24, Z+22	; 0x16
    1476:	98 17       	cp	r25, r24
    1478:	58 f0       	brcs	.+22     	; 0x1490 <xTaskResumeAll+0xa4>
    147a:	d0 92 29 93 	sts	0x9329, r13
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <xTaskResumeAll+0xa4>
    1480:	0f 2e       	mov	r0, r31
    1482:	f0 e3       	ldi	r31, 0x30	; 48
    1484:	ef 2e       	mov	r14, r31
    1486:	f3 e9       	ldi	r31, 0x93	; 147
    1488:	ff 2e       	mov	r15, r31
    148a:	f0 2d       	mov	r31, r0
    148c:	dd 24       	eor	r13, r13
    148e:	d3 94       	inc	r13
    1490:	f7 01       	movw	r30, r14
    1492:	80 81       	ld	r24, Z
    1494:	81 11       	cpse	r24, r1
    1496:	c2 cf       	rjmp	.-124    	; 0x141c <xTaskResumeAll+0x30>
    1498:	80 91 2a 93 	lds	r24, 0x932A
    149c:	88 23       	and	r24, r24
    149e:	99 f0       	breq	.+38     	; 0x14c6 <xTaskResumeAll+0xda>
    14a0:	80 91 2a 93 	lds	r24, 0x932A
    14a4:	88 23       	and	r24, r24
    14a6:	79 f0       	breq	.+30     	; 0x14c6 <xTaskResumeAll+0xda>
    14a8:	c1 e0       	ldi	r28, 0x01	; 1
    14aa:	0e 94 20 09 	call	0x1240	; 0x1240 <xTaskIncrementTick>
    14ae:	81 11       	cpse	r24, r1
    14b0:	c0 93 29 93 	sts	0x9329, r28
    14b4:	80 91 2a 93 	lds	r24, 0x932A
    14b8:	81 50       	subi	r24, 0x01	; 1
    14ba:	80 93 2a 93 	sts	0x932A, r24
    14be:	80 91 2a 93 	lds	r24, 0x932A
    14c2:	81 11       	cpse	r24, r1
    14c4:	f2 cf       	rjmp	.-28     	; 0x14aa <xTaskResumeAll+0xbe>
    14c6:	80 91 29 93 	lds	r24, 0x9329
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	31 f4       	brne	.+12     	; 0x14da <xTaskResumeAll+0xee>
    14ce:	0e 94 37 06 	call	0xc6e	; 0xc6e <vPortYield>
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	03 c0       	rjmp	.+6      	; 0x14dc <xTaskResumeAll+0xf0>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	01 c0       	rjmp	.+2      	; 0x14dc <xTaskResumeAll+0xf0>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	ef 90       	pop	r14
    14ec:	df 90       	pop	r13
    14ee:	08 95       	ret

000014f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    14f6:	89 2b       	or	r24, r25
    14f8:	b1 f0       	breq	.+44     	; 0x1526 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    14fa:	0e 94 1a 09 	call	0x1234	; 0x1234 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    14fe:	80 91 2d 93 	lds	r24, 0x932D
    1502:	90 91 2e 93 	lds	r25, 0x932E
    1506:	c8 0f       	add	r28, r24
    1508:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    150a:	80 91 73 93 	lds	r24, 0x9373
    150e:	90 91 74 93 	lds	r25, 0x9374
    1512:	02 96       	adiw	r24, 0x02	; 2
    1514:	0e 94 89 07 	call	0xf12	; 0xf12 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1518:	ce 01       	movw	r24, r28
    151a:	0e 94 b0 07 	call	0xf60	; 0xf60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    151e:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1522:	81 11       	cpse	r24, r1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    1526:	0e 94 37 06 	call	0xc6e	; 0xc6e <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	08 95       	ret

00001530 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1530:	80 91 26 93 	lds	r24, 0x9326
    1534:	88 23       	and	r24, r24
    1536:	21 f0       	breq	.+8      	; 0x1540 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	80 93 29 93 	sts	0x9329, r24
    153e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1540:	10 92 29 93 	sts	0x9329, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1544:	80 91 2c 93 	lds	r24, 0x932C
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	fc 01       	movw	r30, r24
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	ee 0f       	add	r30, r30
    1552:	ff 1f       	adc	r31, r31
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	8e 0f       	add	r24, r30
    155a:	9f 1f       	adc	r25, r31
    155c:	fc 01       	movw	r30, r24
    155e:	e1 5b       	subi	r30, 0xB1	; 177
    1560:	fc 46       	sbci	r31, 0x6C	; 108
    1562:	80 81       	ld	r24, Z
    1564:	81 11       	cpse	r24, r1
    1566:	17 c0       	rjmp	.+46     	; 0x1596 <vTaskSwitchContext+0x66>
    1568:	80 91 2c 93 	lds	r24, 0x932C
    156c:	81 50       	subi	r24, 0x01	; 1
    156e:	80 93 2c 93 	sts	0x932C, r24
    1572:	80 91 2c 93 	lds	r24, 0x932C
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	fc 01       	movw	r30, r24
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	ee 0f       	add	r30, r30
    1584:	ff 1f       	adc	r31, r31
    1586:	8e 0f       	add	r24, r30
    1588:	9f 1f       	adc	r25, r31
    158a:	fc 01       	movw	r30, r24
    158c:	e1 5b       	subi	r30, 0xB1	; 177
    158e:	fc 46       	sbci	r31, 0x6C	; 108
    1590:	80 81       	ld	r24, Z
    1592:	88 23       	and	r24, r24
    1594:	49 f3       	breq	.-46     	; 0x1568 <vTaskSwitchContext+0x38>
    1596:	80 91 2c 93 	lds	r24, 0x932C
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9c 01       	movw	r18, r24
    159e:	22 0f       	add	r18, r18
    15a0:	33 1f       	adc	r19, r19
    15a2:	22 0f       	add	r18, r18
    15a4:	33 1f       	adc	r19, r19
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	28 0f       	add	r18, r24
    15ac:	39 1f       	adc	r19, r25
    15ae:	d9 01       	movw	r26, r18
    15b0:	a1 5b       	subi	r26, 0xB1	; 177
    15b2:	bc 46       	sbci	r27, 0x6C	; 108
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	ed 91       	ld	r30, X+
    15b8:	fc 91       	ld	r31, X
    15ba:	12 97       	sbiw	r26, 0x02	; 2
    15bc:	02 80       	ldd	r0, Z+2	; 0x02
    15be:	f3 81       	ldd	r31, Z+3	; 0x03
    15c0:	e0 2d       	mov	r30, r0
    15c2:	11 96       	adiw	r26, 0x01	; 1
    15c4:	ed 93       	st	X+, r30
    15c6:	fc 93       	st	X, r31
    15c8:	12 97       	sbiw	r26, 0x02	; 2
    15ca:	2e 5a       	subi	r18, 0xAE	; 174
    15cc:	3c 46       	sbci	r19, 0x6C	; 108
    15ce:	e2 17       	cp	r30, r18
    15d0:	f3 07       	cpc	r31, r19
    15d2:	29 f4       	brne	.+10     	; 0x15de <vTaskSwitchContext+0xae>
    15d4:	22 81       	ldd	r18, Z+2	; 0x02
    15d6:	33 81       	ldd	r19, Z+3	; 0x03
    15d8:	fd 01       	movw	r30, r26
    15da:	21 83       	std	Z+1, r18	; 0x01
    15dc:	32 83       	std	Z+2, r19	; 0x02
    15de:	fc 01       	movw	r30, r24
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	ee 0f       	add	r30, r30
    15ea:	ff 1f       	adc	r31, r31
    15ec:	8e 0f       	add	r24, r30
    15ee:	9f 1f       	adc	r25, r31
    15f0:	fc 01       	movw	r30, r24
    15f2:	e1 5b       	subi	r30, 0xB1	; 177
    15f4:	fc 46       	sbci	r31, 0x6C	; 108
    15f6:	01 80       	ldd	r0, Z+1	; 0x01
    15f8:	f2 81       	ldd	r31, Z+2	; 0x02
    15fa:	e0 2d       	mov	r30, r0
    15fc:	86 81       	ldd	r24, Z+6	; 0x06
    15fe:	97 81       	ldd	r25, Z+7	; 0x07
    1600:	80 93 73 93 	sts	0x9373, r24
    1604:	90 93 74 93 	sts	0x9374, r25
    1608:	08 95       	ret

0000160a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	fc 01       	movw	r30, r24
    1612:	70 96       	adiw	r30, 0x10	; 16
    1614:	8b e0       	ldi	r24, 0x0B	; 11
    1616:	df 01       	movw	r26, r30
    1618:	1d 92       	st	X+, r1
    161a:	8a 95       	dec	r24
    161c:	e9 f7       	brne	.-6      	; 0x1618 <CDC_Device_ConfigureEndpoints+0xe>
    161e:	82 e0       	ldi	r24, 0x02	; 2
    1620:	8c 83       	std	Y+4, r24	; 0x04
    1622:	89 87       	std	Y+9, r24	; 0x09
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	8e 87       	std	Y+14, r24	; 0x0e
    1628:	61 e0       	ldi	r22, 0x01	; 1
    162a:	ce 01       	movw	r24, r28
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <Endpoint_ConfigureEndpointTable>
    1632:	88 23       	and	r24, r24
    1634:	61 f0       	breq	.+24     	; 0x164e <CDC_Device_ConfigureEndpoints+0x44>
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	ce 01       	movw	r24, r28
    163a:	06 96       	adiw	r24, 0x06	; 6
    163c:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <Endpoint_ConfigureEndpointTable>
    1640:	88 23       	and	r24, r24
    1642:	29 f0       	breq	.+10     	; 0x164e <CDC_Device_ConfigureEndpoints+0x44>
    1644:	61 e0       	ldi	r22, 0x01	; 1
    1646:	ce 01       	movw	r24, r28
    1648:	0b 96       	adiw	r24, 0x0b	; 11
    164a:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <Endpoint_ConfigureEndpointTable>
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <CDC_Device_SendByte>:
    1654:	cf 93       	push	r28
    1656:	fc 01       	movw	r30, r24
    1658:	90 91 a4 95 	lds	r25, 0x95A4
    165c:	94 30       	cpi	r25, 0x04	; 4
    165e:	19 f5       	brne	.+70     	; 0x16a6 <CDC_Device_SendByte+0x52>
    1660:	84 89       	ldd	r24, Z+20	; 0x14
    1662:	95 89       	ldd	r25, Z+21	; 0x15
    1664:	a6 89       	ldd	r26, Z+22	; 0x16
    1666:	b7 89       	ldd	r27, Z+23	; 0x17
    1668:	89 2b       	or	r24, r25
    166a:	8a 2b       	or	r24, r26
    166c:	8b 2b       	or	r24, r27
    166e:	e9 f0       	breq	.+58     	; 0x16aa <CDC_Device_SendByte+0x56>
    1670:	c6 2f       	mov	r28, r22
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
    1678:	80 91 ad 95 	lds	r24, 0x95AD
    167c:	90 91 ae 95 	lds	r25, 0x95AE
    1680:	fc 01       	movw	r30, r24
    1682:	ef 5b       	subi	r30, 0xBF	; 191
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	20 81       	ld	r18, Z
    1688:	31 97       	sbiw	r30, 0x01	; 1
    168a:	80 81       	ld	r24, Z
    168c:	28 17       	cp	r18, r24
    168e:	30 f0       	brcs	.+12     	; 0x169c <CDC_Device_SendByte+0x48>
    1690:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1694:	0e 94 aa 11 	call	0x2354	; 0x2354 <Endpoint_WaitUntilReady>
    1698:	81 11       	cpse	r24, r1
    169a:	08 c0       	rjmp	.+16     	; 0x16ac <CDC_Device_SendByte+0x58>
    169c:	8c 2f       	mov	r24, r28
    169e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <CDC_Device_SendByte+0x58>
    16a6:	82 e0       	ldi	r24, 0x02	; 2
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <CDC_Device_SendByte+0x58>
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <CDC_Device_putchar>:
    16b0:	fb 01       	movw	r30, r22
    16b2:	68 2f       	mov	r22, r24
    16b4:	84 85       	ldd	r24, Z+12	; 0x0c
    16b6:	95 85       	ldd	r25, Z+13	; 0x0d
    16b8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <CDC_Device_SendByte>
    16bc:	21 e0       	ldi	r18, 0x01	; 1
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 11       	cpse	r24, r1
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <CDC_Device_putchar+0x18>
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	88 27       	eor	r24, r24
    16ca:	99 27       	eor	r25, r25
    16cc:	82 1b       	sub	r24, r18
    16ce:	93 0b       	sbc	r25, r19
    16d0:	08 95       	ret

000016d2 <CDC_Device_Flush>:
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	fc 01       	movw	r30, r24
    16d8:	90 91 a4 95 	lds	r25, 0x95A4
    16dc:	94 30       	cpi	r25, 0x04	; 4
    16de:	f1 f5       	brne	.+124    	; 0x175c <CDC_Device_Flush+0x8a>
    16e0:	84 89       	ldd	r24, Z+20	; 0x14
    16e2:	95 89       	ldd	r25, Z+21	; 0x15
    16e4:	a6 89       	ldd	r26, Z+22	; 0x16
    16e6:	b7 89       	ldd	r27, Z+23	; 0x17
    16e8:	89 2b       	or	r24, r25
    16ea:	8a 2b       	or	r24, r26
    16ec:	8b 2b       	or	r24, r27
    16ee:	c1 f1       	breq	.+112    	; 0x1760 <CDC_Device_Flush+0x8e>
    16f0:	81 81       	ldd	r24, Z+1	; 0x01
    16f2:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
    16f6:	80 91 b1 95 	lds	r24, 0x95B1
    16fa:	88 23       	and	r24, r24
    16fc:	4c f4       	brge	.+18     	; 0x1710 <CDC_Device_Flush+0x3e>
    16fe:	e0 91 ad 95 	lds	r30, 0x95AD
    1702:	f0 91 ae 95 	lds	r31, 0x95AE
    1706:	ef 5b       	subi	r30, 0xBF	; 191
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0d c0       	rjmp	.+26     	; 0x172a <CDC_Device_Flush+0x58>
    1710:	20 91 ad 95 	lds	r18, 0x95AD
    1714:	30 91 ae 95 	lds	r19, 0x95AE
    1718:	f9 01       	movw	r30, r18
    171a:	e0 5c       	subi	r30, 0xC0	; 192
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	31 96       	adiw	r30, 0x01	; 1
    1722:	20 81       	ld	r18, Z
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	82 1b       	sub	r24, r18
    1728:	91 09       	sbc	r25, r1
    172a:	89 2b       	or	r24, r25
    172c:	d9 f0       	breq	.+54     	; 0x1764 <CDC_Device_Flush+0x92>
    172e:	80 91 ad 95 	lds	r24, 0x95AD
    1732:	90 91 ae 95 	lds	r25, 0x95AE
    1736:	fc 01       	movw	r30, r24
    1738:	ef 5b       	subi	r30, 0xBF	; 191
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	d0 81       	ld	r29, Z
    173e:	31 97       	sbiw	r30, 0x01	; 1
    1740:	c0 81       	ld	r28, Z
    1742:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1746:	dc 17       	cp	r29, r28
    1748:	78 f0       	brcs	.+30     	; 0x1768 <CDC_Device_Flush+0x96>
    174a:	0e 94 aa 11 	call	0x2354	; 0x2354 <Endpoint_WaitUntilReady>
    174e:	c8 2f       	mov	r28, r24
    1750:	81 11       	cpse	r24, r1
    1752:	0c c0       	rjmp	.+24     	; 0x176c <CDC_Device_Flush+0x9a>
    1754:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1758:	8c 2f       	mov	r24, r28
    175a:	08 c0       	rjmp	.+16     	; 0x176c <CDC_Device_Flush+0x9a>
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	06 c0       	rjmp	.+12     	; 0x176c <CDC_Device_Flush+0x9a>
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	04 c0       	rjmp	.+8      	; 0x176c <CDC_Device_Flush+0x9a>
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <CDC_Device_Flush+0x9a>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	00 c0       	rjmp	.+0      	; 0x176c <CDC_Device_Flush+0x9a>
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <CDC_Device_USBTask>:
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	fc 01       	movw	r30, r24
    1778:	90 91 a4 95 	lds	r25, 0x95A4
    177c:	94 30       	cpi	r25, 0x04	; 4
    177e:	99 f4       	brne	.+38     	; 0x17a6 <CDC_Device_USBTask+0x34>
    1780:	84 89       	ldd	r24, Z+20	; 0x14
    1782:	95 89       	ldd	r25, Z+21	; 0x15
    1784:	a6 89       	ldd	r26, Z+22	; 0x16
    1786:	b7 89       	ldd	r27, Z+23	; 0x17
    1788:	89 2b       	or	r24, r25
    178a:	8a 2b       	or	r24, r26
    178c:	8b 2b       	or	r24, r27
    178e:	59 f0       	breq	.+22     	; 0x17a6 <CDC_Device_USBTask+0x34>
    1790:	ef 01       	movw	r28, r30
    1792:	81 81       	ldd	r24, Z+1	; 0x01
    1794:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
    1798:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    179c:	88 23       	and	r24, r24
    179e:	19 f0       	breq	.+6      	; 0x17a6 <CDC_Device_USBTask+0x34>
    17a0:	ce 01       	movw	r24, r28
    17a2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <CDC_Device_Flush>
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <CDC_Device_ReceiveByte>:
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	20 91 a4 95 	lds	r18, 0x95A4
    17b4:	24 30       	cpi	r18, 0x04	; 4
    17b6:	09 f0       	breq	.+2      	; 0x17ba <CDC_Device_ReceiveByte+0xe>
    17b8:	56 c0       	rjmp	.+172    	; 0x1866 <CDC_Device_ReceiveByte+0xba>
    17ba:	fc 01       	movw	r30, r24
    17bc:	44 89       	ldd	r20, Z+20	; 0x14
    17be:	55 89       	ldd	r21, Z+21	; 0x15
    17c0:	66 89       	ldd	r22, Z+22	; 0x16
    17c2:	77 89       	ldd	r23, Z+23	; 0x17
    17c4:	45 2b       	or	r20, r21
    17c6:	46 2b       	or	r20, r22
    17c8:	47 2b       	or	r20, r23
    17ca:	09 f4       	brne	.+2      	; 0x17ce <CDC_Device_ReceiveByte+0x22>
    17cc:	4f c0       	rjmp	.+158    	; 0x186c <CDC_Device_ReceiveByte+0xc0>
    17ce:	86 81       	ldd	r24, Z+6	; 0x06
    17d0:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
    17d4:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    17d8:	88 23       	and	r24, r24
    17da:	09 f4       	brne	.+2      	; 0x17de <CDC_Device_ReceiveByte+0x32>
    17dc:	4a c0       	rjmp	.+148    	; 0x1872 <CDC_Device_ReceiveByte+0xc6>
    17de:	80 91 b1 95 	lds	r24, 0x95B1
    17e2:	88 23       	and	r24, r24
    17e4:	4c f4       	brge	.+18     	; 0x17f8 <CDC_Device_ReceiveByte+0x4c>
    17e6:	e0 91 ad 95 	lds	r30, 0x95AD
    17ea:	f0 91 ae 95 	lds	r31, 0x95AE
    17ee:	ef 5b       	subi	r30, 0xBF	; 191
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	80 81       	ld	r24, Z
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <CDC_Device_ReceiveByte+0x66>
    17f8:	20 91 ad 95 	lds	r18, 0x95AD
    17fc:	30 91 ae 95 	lds	r19, 0x95AE
    1800:	f9 01       	movw	r30, r18
    1802:	e0 5c       	subi	r30, 0xC0	; 192
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	31 96       	adiw	r30, 0x01	; 1
    180a:	20 81       	ld	r18, Z
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	82 1b       	sub	r24, r18
    1810:	91 09       	sbc	r25, r1
    1812:	89 2b       	or	r24, r25
    1814:	29 f0       	breq	.+10     	; 0x1820 <CDC_Device_ReceiveByte+0x74>
    1816:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    181a:	c8 2f       	mov	r28, r24
    181c:	d0 e0       	ldi	r29, 0x00	; 0
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <CDC_Device_ReceiveByte+0x78>
    1820:	cf ef       	ldi	r28, 0xFF	; 255
    1822:	df ef       	ldi	r29, 0xFF	; 255
    1824:	80 91 b1 95 	lds	r24, 0x95B1
    1828:	88 23       	and	r24, r24
    182a:	4c f4       	brge	.+18     	; 0x183e <CDC_Device_ReceiveByte+0x92>
    182c:	e0 91 ad 95 	lds	r30, 0x95AD
    1830:	f0 91 ae 95 	lds	r31, 0x95AE
    1834:	ef 5b       	subi	r30, 0xBF	; 191
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	20 81       	ld	r18, Z
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <CDC_Device_ReceiveByte+0xac>
    183e:	40 91 ad 95 	lds	r20, 0x95AD
    1842:	50 91 ae 95 	lds	r21, 0x95AE
    1846:	fa 01       	movw	r30, r20
    1848:	e0 5c       	subi	r30, 0xC0	; 192
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	20 81       	ld	r18, Z
    184e:	31 96       	adiw	r30, 0x01	; 1
    1850:	80 81       	ld	r24, Z
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	28 1b       	sub	r18, r24
    1856:	31 09       	sbc	r19, r1
    1858:	23 2b       	or	r18, r19
    185a:	71 f4       	brne	.+28     	; 0x1878 <CDC_Device_ReceiveByte+0xcc>
    185c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Endpoint_ClearOUT>
    1860:	8c 2f       	mov	r24, r28
    1862:	9d 2f       	mov	r25, r29
    1864:	0b c0       	rjmp	.+22     	; 0x187c <CDC_Device_ReceiveByte+0xd0>
    1866:	8f ef       	ldi	r24, 0xFF	; 255
    1868:	9f ef       	ldi	r25, 0xFF	; 255
    186a:	08 c0       	rjmp	.+16     	; 0x187c <CDC_Device_ReceiveByte+0xd0>
    186c:	8f ef       	ldi	r24, 0xFF	; 255
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	05 c0       	rjmp	.+10     	; 0x187c <CDC_Device_ReceiveByte+0xd0>
    1872:	8f ef       	ldi	r24, 0xFF	; 255
    1874:	9f ef       	ldi	r25, 0xFF	; 255
    1876:	02 c0       	rjmp	.+4      	; 0x187c <CDC_Device_ReceiveByte+0xd0>
    1878:	8c 2f       	mov	r24, r28
    187a:	9d 2f       	mov	r25, r29
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	08 95       	ret

00001882 <CDC_Device_getchar>:
    1882:	fc 01       	movw	r30, r24
    1884:	84 85       	ldd	r24, Z+12	; 0x0c
    1886:	95 85       	ldd	r25, Z+13	; 0x0d
    1888:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <CDC_Device_ReceiveByte>
    188c:	99 23       	and	r25, r25
    188e:	14 f4       	brge	.+4      	; 0x1894 <CDC_Device_getchar+0x12>
    1890:	8e ef       	ldi	r24, 0xFE	; 254
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	08 95       	ret

00001896 <CDC_Device_CreateStream>:
    1896:	fb 01       	movw	r30, r22
    1898:	2e e0       	ldi	r18, 0x0E	; 14
    189a:	db 01       	movw	r26, r22
    189c:	1d 92       	st	X+, r1
    189e:	2a 95       	dec	r18
    18a0:	e9 f7       	brne	.-6      	; 0x189c <CDC_Device_CreateStream+0x6>
    18a2:	23 e0       	ldi	r18, 0x03	; 3
    18a4:	23 83       	std	Z+3, r18	; 0x03
    18a6:	28 e5       	ldi	r18, 0x58	; 88
    18a8:	3b e0       	ldi	r19, 0x0B	; 11
    18aa:	20 87       	std	Z+8, r18	; 0x08
    18ac:	31 87       	std	Z+9, r19	; 0x09
    18ae:	21 e4       	ldi	r18, 0x41	; 65
    18b0:	3c e0       	ldi	r19, 0x0C	; 12
    18b2:	22 87       	std	Z+10, r18	; 0x0a
    18b4:	33 87       	std	Z+11, r19	; 0x0b
    18b6:	84 87       	std	Z+12, r24	; 0x0c
    18b8:	95 87       	std	Z+13, r25	; 0x0d
    18ba:	08 95       	ret

000018bc <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    18bc:	08 95       	ret

000018be <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    18be:	ff 92       	push	r15
    18c0:	0f 93       	push	r16
    18c2:	1f 93       	push	r17
    18c4:	cf 93       	push	r28
    18c6:	df 93       	push	r29
    18c8:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    18ca:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    18ce:	88 23       	and	r24, r24
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <CDC_Device_ProcessControlRequest+0x16>
    18d2:	9b c0       	rjmp	.+310    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    18d4:	28 81       	ld	r18, Y
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	80 91 a9 95 	lds	r24, 0x95A9
    18dc:	90 91 aa 95 	lds	r25, 0x95AA
    18e0:	82 17       	cp	r24, r18
    18e2:	93 07       	cpc	r25, r19
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <CDC_Device_ProcessControlRequest+0x2a>
    18e6:	91 c0       	rjmp	.+290    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	switch (USB_ControlRequest.bRequest)
    18e8:	80 91 a6 95 	lds	r24, 0x95A6
    18ec:	81 32       	cpi	r24, 0x21	; 33
    18ee:	59 f0       	breq	.+22     	; 0x1906 <CDC_Device_ProcessControlRequest+0x48>
    18f0:	18 f4       	brcc	.+6      	; 0x18f8 <CDC_Device_ProcessControlRequest+0x3a>
    18f2:	80 32       	cpi	r24, 0x20	; 32
    18f4:	81 f1       	breq	.+96     	; 0x1956 <CDC_Device_ProcessControlRequest+0x98>
    18f6:	89 c0       	rjmp	.+274    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
    18f8:	82 32       	cpi	r24, 0x22	; 34
    18fa:	09 f4       	brne	.+2      	; 0x18fe <CDC_Device_ProcessControlRequest+0x40>
    18fc:	67 c0       	rjmp	.+206    	; 0x19cc <CDC_Device_ProcessControlRequest+0x10e>
    18fe:	83 32       	cpi	r24, 0x23	; 35
    1900:	09 f4       	brne	.+2      	; 0x1904 <CDC_Device_ProcessControlRequest+0x46>
    1902:	76 c0       	rjmp	.+236    	; 0x19f0 <CDC_Device_ProcessControlRequest+0x132>
    1904:	82 c0       	rjmp	.+260    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1906:	80 91 a5 95 	lds	r24, 0x95A5
    190a:	81 3a       	cpi	r24, 0xA1	; 161
    190c:	09 f0       	breq	.+2      	; 0x1910 <CDC_Device_ProcessControlRequest+0x52>
    190e:	7d c0       	rjmp	.+250    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1910:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    1914:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    1918:	88 23       	and	r24, r24
    191a:	e1 f3       	breq	.-8      	; 0x1914 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    191c:	8c 89       	ldd	r24, Y+20	; 0x14
    191e:	fd 88       	ldd	r15, Y+21	; 0x15
    1920:	0e 89       	ldd	r16, Y+22	; 0x16
    1922:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1924:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1928:	8f 2d       	mov	r24, r15
    192a:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    192e:	80 2f       	mov	r24, r16
    1930:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    1934:	81 2f       	mov	r24, r17
    1936:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    193a:	88 8d       	ldd	r24, Y+24	; 0x18
    193c:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1940:	89 8d       	ldd	r24, Y+25	; 0x19
    1942:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1946:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1948:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>

				Endpoint_ClearIN();
    194c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    1950:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>
    1954:	5a c0       	rjmp	.+180    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1956:	80 91 a5 95 	lds	r24, 0x95A5
    195a:	81 32       	cpi	r24, 0x21	; 33
    195c:	09 f0       	breq	.+2      	; 0x1960 <CDC_Device_ProcessControlRequest+0xa2>
    195e:	55 c0       	rjmp	.+170    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1960:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <CDC_Device_ProcessControlRequest+0xb2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1966:	80 91 a4 95 	lds	r24, 0x95A4
    196a:	88 23       	and	r24, r24
    196c:	09 f4       	brne	.+2      	; 0x1970 <CDC_Device_ProcessControlRequest+0xb2>
    196e:	4d c0       	rjmp	.+154    	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1970:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    1974:	88 23       	and	r24, r24
    1976:	b9 f3       	breq	.-18     	; 0x1966 <CDC_Device_ProcessControlRequest+0xa8>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    1978:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    197c:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    197e:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    1982:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    1984:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    1988:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    198a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    198e:	40 2f       	mov	r20, r16
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    1996:	ba 01       	movw	r22, r20
    1998:	55 27       	eor	r21, r21
    199a:	44 27       	eor	r20, r20
    199c:	78 2b       	or	r23, r24
    199e:	4f 29       	or	r20, r15
    19a0:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    19a2:	4c 8b       	std	Y+20, r20	; 0x14
    19a4:	5d 8b       	std	Y+21, r21	; 0x15
    19a6:	6e 8b       	std	Y+22, r22	; 0x16
    19a8:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    19aa:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    19ae:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    19b0:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    19b4:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    19b6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    19ba:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    19bc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    19c0:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <CDC_Device_Event_Stub>
    19ca:	1f c0       	rjmp	.+62     	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19cc:	80 91 a5 95 	lds	r24, 0x95A5
    19d0:	81 32       	cpi	r24, 0x21	; 33
    19d2:	d9 f4       	brne	.+54     	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    19d4:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    19d8:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    19dc:	80 91 a7 95 	lds	r24, 0x95A7
    19e0:	90 91 a8 95 	lds	r25, 0x95A8
    19e4:	88 8b       	std	Y+16, r24	; 0x10
    19e6:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    19e8:	ce 01       	movw	r24, r28
    19ea:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <EVENT_CDC_Device_ControLineStateChanged>
    19ee:	0d c0       	rjmp	.+26     	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    19f0:	80 91 a5 95 	lds	r24, 0x95A5
    19f4:	81 32       	cpi	r24, 0x21	; 33
    19f6:	49 f4       	brne	.+18     	; 0x1a0a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    19f8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    19fc:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1a00:	60 91 a7 95 	lds	r22, 0x95A7
    1a04:	ce 01       	movw	r24, r28
    1a06:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	08 95       	ret

00001a16 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	ea 97       	sbiw	r28, 0x3a	; 58
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	05 ea       	ldi	r16, 0xA5	; 165
    1a2e:	15 e9       	ldi	r17, 0x95	; 149
    1a30:	0f 2e       	mov	r0, r31
    1a32:	fd ea       	ldi	r31, 0xAD	; 173
    1a34:	ef 2e       	mov	r14, r31
    1a36:	f5 e9       	ldi	r31, 0x95	; 149
    1a38:	ff 2e       	mov	r15, r31
    1a3a:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1a3c:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_Read_8>
    1a40:	f8 01       	movw	r30, r16
    1a42:	81 93       	st	Z+, r24
    1a44:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1a46:	ee 15       	cp	r30, r14
    1a48:	ff 05       	cpc	r31, r15
    1a4a:	c1 f7       	brne	.-16     	; 0x1a3c <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1a4c:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1a50:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1a54:	88 23       	and	r24, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <USB_Device_ProcessControlRequest+0x44>
    1a58:	13 c1       	rjmp	.+550    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1a5a:	e5 ea       	ldi	r30, 0xA5	; 165
    1a5c:	f5 e9       	ldi	r31, 0x95	; 149
    1a5e:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    1a60:	31 81       	ldd	r19, Z+1	; 0x01
    1a62:	83 2f       	mov	r24, r19
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	8a 30       	cpi	r24, 0x0A	; 10
    1a68:	91 05       	cpc	r25, r1
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <USB_Device_ProcessControlRequest+0x58>
    1a6c:	09 c1       	rjmp	.+530    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
    1a6e:	fc 01       	movw	r30, r24
    1a70:	88 27       	eor	r24, r24
    1a72:	e2 50       	subi	r30, 0x02	; 2
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	8f 4f       	sbci	r24, 0xFF	; 255
    1a78:	0c 94 d7 1c 	jmp	0x39ae	; 0x39ae <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1a7c:	20 38       	cpi	r18, 0x80	; 128
    1a7e:	21 f0       	breq	.+8      	; 0x1a88 <USB_Device_ProcessControlRequest+0x72>
    1a80:	22 38       	cpi	r18, 0x82	; 130
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <USB_Device_ProcessControlRequest+0x70>
    1a84:	fd c0       	rjmp	.+506    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
    1a86:	08 c0       	rjmp	.+16     	; 0x1a98 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1a88:	10 91 a1 95 	lds	r17, 0x95A1
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1a8c:	80 91 a2 95 	lds	r24, 0x95A2
    1a90:	88 23       	and	r24, r24
    1a92:	91 f0       	breq	.+36     	; 0x1ab8 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1a94:	12 60       	ori	r17, 0x02	; 2
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1a98:	80 91 a9 95 	lds	r24, 0x95A9
    1a9c:	8f 70       	andi	r24, 0x0F	; 15
    1a9e:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    1aa2:	e0 91 af 95 	lds	r30, 0x95AF
    1aa6:	f0 91 b0 95 	lds	r31, 0x95B0
    1aaa:	11 81       	ldd	r17, Z+1	; 0x01
    1aac:	12 fb       	bst	r17, 2
    1aae:	11 27       	eor	r17, r17
    1ab0:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    1ab8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1abc:	81 2f       	mov	r24, r17
    1abe:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    1ac8:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1acc:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>
    1ad0:	d7 c0       	rjmp	.+430    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ad2:	22 23       	and	r18, r18
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <USB_Device_ProcessControlRequest+0xc2>
    1ad6:	dd c0       	rjmp	.+442    	; 0x1c92 <USB_Device_ProcessControlRequest+0x27c>
    1ad8:	22 30       	cpi	r18, 0x02	; 2
    1ada:	09 f0       	breq	.+2      	; 0x1ade <USB_Device_ProcessControlRequest+0xc8>
    1adc:	d1 c0       	rjmp	.+418    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
    1ade:	de c0       	rjmp	.+444    	; 0x1c9c <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	33 30       	cpi	r19, 0x03	; 3
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <USB_Device_ProcessControlRequest+0xd2>
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	80 93 a2 95 	sts	0x95A2, r24
    1aec:	25 c0       	rjmp	.+74     	; 0x1b38 <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1aee:	e0 91 a9 95 	lds	r30, 0x95A9
    1af2:	1e 2f       	mov	r17, r30
    1af4:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1af6:	09 f4       	brne	.+2      	; 0x1afa <USB_Device_ProcessControlRequest+0xe4>
    1af8:	c3 c0       	rjmp	.+390    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    1afa:	81 2f       	mov	r24, r17
    1afc:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1b00:	80 91 a6 95 	lds	r24, 0x95A6
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	19 f4       	brne	.+6      	; 0x1b0e <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    1b08:	0e 94 99 10 	call	0x2132	; 0x2132 <Endpoint_StallTransaction>
    1b0c:	15 c0       	rjmp	.+42     	; 0x1b38 <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1b0e:	e0 91 af 95 	lds	r30, 0x95AF
    1b12:	f0 91 b0 95 	lds	r31, 0x95B0
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	8b 7f       	andi	r24, 0xFB	; 251
    1b1a:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    1b1c:	24 e8       	ldi	r18, 0x84	; 132
    1b1e:	12 9f       	mul	r17, r18
    1b20:	f0 01       	movw	r30, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	ed 50       	subi	r30, 0x0D	; 13
    1b26:	fa 46       	sbci	r31, 0x6A	; 106
    1b28:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    1b2a:	e0 91 af 95 	lds	r30, 0x95AF
    1b2e:	f0 91 b0 95 	lds	r31, 0x95B0
    1b32:	80 81       	ld	r24, Z
    1b34:	8e 7f       	andi	r24, 0xFE	; 254
    1b36:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1b3e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1b42:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>
    1b46:	9c c0       	rjmp	.+312    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1b48:	21 11       	cpse	r18, r1
    1b4a:	9a c0       	rjmp	.+308    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1b4c:	10 91 a7 95 	lds	r17, 0x95A7
    1b50:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1b52:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1b56:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    1b5a:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    1b5e:	88 23       	and	r24, r24
    1b60:	e1 f3       	breq	.-8      	; 0x1b5a <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1b62:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1b66:	11 11       	cpse	r17, r1
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <USB_Device_ProcessControlRequest+0x158>
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <USB_Device_ProcessControlRequest+0x15a>
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	80 93 a4 95 	sts	0x95A4, r24
    1b74:	85 c0       	rjmp	.+266    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1b76:	20 58       	subi	r18, 0x80	; 128
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	08 f0       	brcs	.+2      	; 0x1b7e <USB_Device_ProcessControlRequest+0x168>
    1b7c:	81 c0       	rjmp	.+258    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1b7e:	80 91 a7 95 	lds	r24, 0x95A7
    1b82:	90 91 a8 95 	lds	r25, 0x95A8
    1b86:	8c 3d       	cpi	r24, 0xDC	; 220
    1b88:	e3 e0       	ldi	r30, 0x03	; 3
    1b8a:	9e 07       	cpc	r25, r30
    1b8c:	b9 f5       	brne	.+110    	; 0x1bfc <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1b8e:	83 e0       	ldi	r24, 0x03	; 3
    1b90:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1b92:	8a e3       	ldi	r24, 0x3A	; 58
    1b94:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1b96:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1b98:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    1b9a:	ae 01       	movw	r20, r28
    1b9c:	4d 5f       	subi	r20, 0xFD	; 253
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ba2:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    1ba4:	a0 ec       	ldi	r26, 0xC0	; 192
    1ba6:	b1 e0       	ldi	r27, 0x01	; 1
    1ba8:	62 e0       	ldi	r22, 0x02	; 2
    1baa:	1a 96       	adiw	r26, 0x0a	; 10
    1bac:	6c 93       	st	X, r22
    1bae:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    1bb0:	e3 2f       	mov	r30, r19
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    1bb6:	1a 96       	adiw	r26, 0x0a	; 10
    1bb8:	1c 92       	st	X, r1
    1bba:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    1bbc:	20 ff       	sbrs	r18, 0
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    1bc0:	82 95       	swap	r24
    1bc2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1bc4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1bc6:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1bc8:	8a 30       	cpi	r24, 0x0A	; 10
    1bca:	18 f0       	brcs	.+6      	; 0x1bd2 <USB_Device_ProcessControlRequest+0x1bc>
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	c7 96       	adiw	r24, 0x37	; 55
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <USB_Device_ProcessControlRequest+0x1c0>
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	c0 96       	adiw	r24, 0x30	; 48
    1bd6:	fa 01       	movw	r30, r20
    1bd8:	81 93       	st	Z+, r24
    1bda:	91 93       	st	Z+, r25
    1bdc:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1bde:	2f 5f       	subi	r18, 0xFF	; 255
    1be0:	2c 31       	cpi	r18, 0x1C	; 28
    1be2:	19 f7       	brne	.-58     	; 0x1baa <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1be4:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1be6:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1bea:	6a e3       	ldi	r22, 0x3A	; 58
    1bec:	70 e0       	ldi	r23, 0x00	; 0
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1bf6:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Endpoint_ClearOUT>
    1bfa:	42 c0       	rjmp	.+132    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1bfc:	ae 01       	movw	r20, r28
    1bfe:	4f 5f       	subi	r20, 0xFF	; 255
    1c00:	5f 4f       	sbci	r21, 0xFF	; 255
    1c02:	60 91 a9 95 	lds	r22, 0x95A9
    1c06:	0e 94 4a 05 	call	0xa94	; 0xa94 <CALLBACK_USB_GetDescriptor>
    1c0a:	8c 01       	movw	r16, r24
    1c0c:	89 2b       	or	r24, r25
    1c0e:	c1 f1       	breq	.+112    	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1c10:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1c14:	b8 01       	movw	r22, r16
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1c1e:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Endpoint_ClearOUT>
    1c22:	2e c0       	rjmp	.+92     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1c24:	20 38       	cpi	r18, 0x80	; 128
    1c26:	61 f5       	brne	.+88     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1c28:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1c2c:	80 91 a0 95 	lds	r24, 0x95A0
    1c30:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
	Endpoint_ClearIN();
    1c34:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1c38:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>
    1c3c:	21 c0       	rjmp	.+66     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1c3e:	21 11       	cpse	r18, r1
    1c40:	1f c0       	rjmp	.+62     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1c42:	80 91 a7 95 	lds	r24, 0x95A7
    1c46:	82 30       	cpi	r24, 0x02	; 2
    1c48:	d8 f4       	brcc	.+54     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1c4a:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1c4e:	80 91 a7 95 	lds	r24, 0x95A7
    1c52:	80 93 a0 95 	sts	0x95A0, r24

	Endpoint_ClearStatusStage();
    1c56:	0e 94 8f 11 	call	0x231e	; 0x231e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1c5a:	80 91 a0 95 	lds	r24, 0x95A0
    1c5e:	88 23       	and	r24, r24
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1c62:	84 e0       	ldi	r24, 0x04	; 4
    1c64:	80 93 a4 95 	sts	0x95A4, r24
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1c6a:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1c6e:	81 11       	cpse	r24, r1
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <USB_Device_ProcessControlRequest+0x260>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <USB_Device_ProcessControlRequest+0x262>
    1c76:	84 e0       	ldi	r24, 0x04	; 4
    1c78:	80 93 a4 95 	sts	0x95A4, r24

	EVENT_USB_Device_ConfigurationChanged();
    1c7c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1c80:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1c84:	88 23       	and	r24, r24
    1c86:	81 f0       	breq	.+32     	; 0x1ca8 <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    1c88:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    1c8c:	0e 94 99 10 	call	0x2132	; 0x2132 <Endpoint_StallTransaction>
    1c90:	0b c0       	rjmp	.+22     	; 0x1ca8 <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1c92:	80 91 a7 95 	lds	r24, 0x95A7
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	99 f7       	brne	.-26     	; 0x1c80 <USB_Device_ProcessControlRequest+0x26a>
    1c9a:	22 cf       	rjmp	.-444    	; 0x1ae0 <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1c9c:	80 91 a7 95 	lds	r24, 0x95A7
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <USB_Device_ProcessControlRequest+0x290>
    1ca4:	24 cf       	rjmp	.-440    	; 0x1aee <USB_Device_ProcessControlRequest+0xd8>
    1ca6:	48 cf       	rjmp	.-368    	; 0x1b38 <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1ca8:	ea 96       	adiw	r28, 0x3a	; 58
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	08 95       	ret

00001cbc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1cbc:	08 95       	ret

00001cbe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1cbe:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cc0:	80 91 a4 95 	lds	r24, 0x95A4
    1cc4:	88 23       	and	r24, r24
    1cc6:	69 f0       	breq	.+26     	; 0x1ce2 <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    1cc8:	c0 91 b1 95 	lds	r28, 0x95B1
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    1cd2:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1cd6:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    1cd8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    1cdc:	8c 2f       	mov	r24, r28
    1cde:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret

00001ce6 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ce6:	cf 92       	push	r12
    1ce8:	df 92       	push	r13
    1cea:	ef 92       	push	r14
    1cec:	ff 92       	push	r15
    1cee:	0f 93       	push	r16
    1cf0:	1f 93       	push	r17
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	c8 2e       	mov	r12, r24
    1cf8:	d9 2e       	mov	r13, r25
    1cfa:	8b 01       	movw	r16, r22
    1cfc:	80 91 b1 95 	lds	r24, 0x95B1
    1d00:	80 68       	ori	r24, 0x80	; 128
    1d02:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
    1d06:	c0 91 ab 95 	lds	r28, 0x95AB
    1d0a:	d0 91 ac 95 	lds	r29, 0x95AC
    1d0e:	c0 17       	cp	r28, r16
    1d10:	d1 07       	cpc	r29, r17
    1d12:	40 f0       	brcs	.+16     	; 0x1d24 <Endpoint_Write_Control_Stream_LE+0x3e>
    1d14:	01 15       	cp	r16, r1
    1d16:	11 05       	cpc	r17, r1
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <Endpoint_Write_Control_Stream_LE+0x3c>
    1d1a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1d1e:	e8 01       	movw	r28, r16
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <Endpoint_Write_Control_Stream_LE+0x3e>
    1d22:	e8 01       	movw	r28, r16
    1d24:	ec 2c       	mov	r14, r12
    1d26:	fd 2c       	mov	r15, r13
    1d28:	d1 2c       	mov	r13, r1
    1d2a:	49 c0       	rjmp	.+146    	; 0x1dbe <Endpoint_Write_Control_Stream_LE+0xd8>
    1d2c:	80 91 a4 95 	lds	r24, 0x95A4
    1d30:	88 23       	and	r24, r24
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <Endpoint_Write_Control_Stream_LE+0x50>
    1d34:	5a c0       	rjmp	.+180    	; 0x1dea <Endpoint_Write_Control_Stream_LE+0x104>
    1d36:	85 30       	cpi	r24, 0x05	; 5
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <Endpoint_Write_Control_Stream_LE+0x56>
    1d3a:	59 c0       	rjmp	.+178    	; 0x1dee <Endpoint_Write_Control_Stream_LE+0x108>
    1d3c:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1d40:	81 11       	cpse	r24, r1
    1d42:	57 c0       	rjmp	.+174    	; 0x1df2 <Endpoint_Write_Control_Stream_LE+0x10c>
    1d44:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    1d48:	81 11       	cpse	r24, r1
    1d4a:	49 c0       	rjmp	.+146    	; 0x1dde <Endpoint_Write_Control_Stream_LE+0xf8>
    1d4c:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    1d50:	88 23       	and	r24, r24
    1d52:	a9 f1       	breq	.+106    	; 0x1dbe <Endpoint_Write_Control_Stream_LE+0xd8>
    1d54:	80 91 b1 95 	lds	r24, 0x95B1
    1d58:	88 23       	and	r24, r24
    1d5a:	74 f4       	brge	.+28     	; 0x1d78 <Endpoint_Write_Control_Stream_LE+0x92>
    1d5c:	e0 91 ad 95 	lds	r30, 0x95AD
    1d60:	f0 91 ae 95 	lds	r31, 0x95AE
    1d64:	ef 5b       	subi	r30, 0xBF	; 191
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	00 81       	ld	r16, Z
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	20 97       	sbiw	r28, 0x00	; 0
    1d6e:	f9 f0       	breq	.+62     	; 0x1dae <Endpoint_Write_Control_Stream_LE+0xc8>
    1d70:	08 30       	cpi	r16, 0x08	; 8
    1d72:	11 05       	cpc	r17, r1
    1d74:	78 f0       	brcs	.+30     	; 0x1d94 <Endpoint_Write_Control_Stream_LE+0xae>
    1d76:	1b c0       	rjmp	.+54     	; 0x1dae <Endpoint_Write_Control_Stream_LE+0xc8>
    1d78:	80 91 ad 95 	lds	r24, 0x95AD
    1d7c:	90 91 ae 95 	lds	r25, 0x95AE
    1d80:	fc 01       	movw	r30, r24
    1d82:	e0 5c       	subi	r30, 0xC0	; 192
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	00 81       	ld	r16, Z
    1d88:	31 96       	adiw	r30, 0x01	; 1
    1d8a:	80 81       	ld	r24, Z
    1d8c:	10 e0       	ldi	r17, 0x00	; 0
    1d8e:	08 1b       	sub	r16, r24
    1d90:	11 09       	sbc	r17, r1
    1d92:	ec cf       	rjmp	.-40     	; 0x1d6c <Endpoint_Write_Control_Stream_LE+0x86>
    1d94:	f7 01       	movw	r30, r14
    1d96:	81 91       	ld	r24, Z+
    1d98:	7f 01       	movw	r14, r30
    1d9a:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
    1d9e:	21 97       	sbiw	r28, 0x01	; 1
    1da0:	0f 5f       	subi	r16, 0xFF	; 255
    1da2:	1f 4f       	sbci	r17, 0xFF	; 255
    1da4:	20 97       	sbiw	r28, 0x00	; 0
    1da6:	19 f0       	breq	.+6      	; 0x1dae <Endpoint_Write_Control_Stream_LE+0xc8>
    1da8:	08 30       	cpi	r16, 0x08	; 8
    1daa:	11 05       	cpc	r17, r1
    1dac:	99 f7       	brne	.-26     	; 0x1d94 <Endpoint_Write_Control_Stream_LE+0xae>
    1dae:	dd 24       	eor	r13, r13
    1db0:	d3 94       	inc	r13
    1db2:	08 30       	cpi	r16, 0x08	; 8
    1db4:	11 05       	cpc	r17, r1
    1db6:	09 f0       	breq	.+2      	; 0x1dba <Endpoint_Write_Control_Stream_LE+0xd4>
    1db8:	d1 2c       	mov	r13, r1
    1dba:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1dbe:	20 97       	sbiw	r28, 0x00	; 0
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <Endpoint_Write_Control_Stream_LE+0xde>
    1dc2:	b4 cf       	rjmp	.-152    	; 0x1d2c <Endpoint_Write_Control_Stream_LE+0x46>
    1dc4:	d1 10       	cpse	r13, r1
    1dc6:	b2 cf       	rjmp	.-156    	; 0x1d2c <Endpoint_Write_Control_Stream_LE+0x46>
    1dc8:	0a c0       	rjmp	.+20     	; 0x1dde <Endpoint_Write_Control_Stream_LE+0xf8>
    1dca:	80 91 a4 95 	lds	r24, 0x95A4
    1dce:	88 23       	and	r24, r24
    1dd0:	91 f0       	breq	.+36     	; 0x1df6 <Endpoint_Write_Control_Stream_LE+0x110>
    1dd2:	85 30       	cpi	r24, 0x05	; 5
    1dd4:	91 f0       	breq	.+36     	; 0x1dfa <Endpoint_Write_Control_Stream_LE+0x114>
    1dd6:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1dda:	81 11       	cpse	r24, r1
    1ddc:	10 c0       	rjmp	.+32     	; 0x1dfe <Endpoint_Write_Control_Stream_LE+0x118>
    1dde:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    1de2:	88 23       	and	r24, r24
    1de4:	91 f3       	breq	.-28     	; 0x1dca <Endpoint_Write_Control_Stream_LE+0xe4>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1dee:	83 e0       	ldi	r24, 0x03	; 3
    1df0:	07 c0       	rjmp	.+14     	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1df6:	82 e0       	ldi	r24, 0x02	; 2
    1df8:	03 c0       	rjmp	.+6      	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	01 c0       	rjmp	.+2      	; 0x1e00 <Endpoint_Write_Control_Stream_LE+0x11a>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	1f 91       	pop	r17
    1e06:	0f 91       	pop	r16
    1e08:	ff 90       	pop	r15
    1e0a:	ef 90       	pop	r14
    1e0c:	df 90       	pop	r13
    1e0e:	cf 90       	pop	r12
    1e10:	08 95       	ret

00001e12 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1e12:	df 92       	push	r13
    1e14:	ef 92       	push	r14
    1e16:	ff 92       	push	r15
    1e18:	0f 93       	push	r16
    1e1a:	1f 93       	push	r17
    1e1c:	cf 93       	push	r28
    1e1e:	df 93       	push	r29
    1e20:	e8 2e       	mov	r14, r24
    1e22:	f9 2e       	mov	r15, r25
    1e24:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1e26:	80 91 b1 95 	lds	r24, 0x95B1
    1e2a:	80 68       	ori	r24, 0x80	; 128
    1e2c:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    1e30:	c0 91 ab 95 	lds	r28, 0x95AB
    1e34:	d0 91 ac 95 	lds	r29, 0x95AC
    1e38:	c0 17       	cp	r28, r16
    1e3a:	d1 07       	cpc	r29, r17
    1e3c:	40 f0       	brcs	.+16     	; 0x1e4e <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1e3e:	01 15       	cp	r16, r1
    1e40:	11 05       	cpc	r17, r1
    1e42:	21 f4       	brne	.+8      	; 0x1e4c <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    1e44:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    1e48:	e8 01       	movw	r28, r16
    1e4a:	01 c0       	rjmp	.+2      	; 0x1e4e <Endpoint_Write_Control_PStream_LE+0x3c>
    1e4c:	e8 01       	movw	r28, r16
    1e4e:	0e 2d       	mov	r16, r14
    1e50:	1f 2d       	mov	r17, r15
    1e52:	d1 2c       	mov	r13, r1
    1e54:	4e c0       	rjmp	.+156    	; 0x1ef2 <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e56:	80 91 a4 95 	lds	r24, 0x95A4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <Endpoint_Write_Control_PStream_LE+0x4e>
    1e5e:	5f c0       	rjmp	.+190    	; 0x1f1e <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e60:	85 30       	cpi	r24, 0x05	; 5
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <Endpoint_Write_Control_PStream_LE+0x54>
    1e64:	5e c0       	rjmp	.+188    	; 0x1f22 <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1e66:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	5c c0       	rjmp	.+184    	; 0x1f26 <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1e6e:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    1e72:	81 11       	cpse	r24, r1
    1e74:	4e c0       	rjmp	.+156    	; 0x1f12 <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    1e76:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    1e7a:	88 23       	and	r24, r24
    1e7c:	d1 f1       	breq	.+116    	; 0x1ef2 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1e7e:	80 91 b1 95 	lds	r24, 0x95B1
    1e82:	88 23       	and	r24, r24
    1e84:	7c f4       	brge	.+30     	; 0x1ea4 <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1e86:	e0 91 ad 95 	lds	r30, 0x95AD
    1e8a:	f0 91 ae 95 	lds	r31, 0x95AE
    1e8e:	ef 5b       	subi	r30, 0xBF	; 191
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	e0 80       	ld	r14, Z
    1e94:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1e96:	20 97       	sbiw	r28, 0x00	; 0
    1e98:	19 f1       	breq	.+70     	; 0x1ee0 <Endpoint_Write_Control_PStream_LE+0xce>
    1e9a:	88 e0       	ldi	r24, 0x08	; 8
    1e9c:	e8 16       	cp	r14, r24
    1e9e:	f1 04       	cpc	r15, r1
    1ea0:	78 f0       	brcs	.+30     	; 0x1ec0 <Endpoint_Write_Control_PStream_LE+0xae>
    1ea2:	1e c0       	rjmp	.+60     	; 0x1ee0 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1ea4:	80 91 ad 95 	lds	r24, 0x95AD
    1ea8:	90 91 ae 95 	lds	r25, 0x95AE
    1eac:	fc 01       	movw	r30, r24
    1eae:	e0 5c       	subi	r30, 0xC0	; 192
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	e0 80       	ld	r14, Z
    1eb4:	31 96       	adiw	r30, 0x01	; 1
    1eb6:	80 81       	ld	r24, Z
    1eb8:	f1 2c       	mov	r15, r1
    1eba:	e8 1a       	sub	r14, r24
    1ebc:	f1 08       	sbc	r15, r1
    1ebe:	eb cf       	rjmp	.-42     	; 0x1e96 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	84 91       	lpm	r24, Z
    1ec4:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1ec8:	0f 5f       	subi	r16, 0xFF	; 255
    1eca:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1ecc:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1ece:	ff ef       	ldi	r31, 0xFF	; 255
    1ed0:	ef 1a       	sub	r14, r31
    1ed2:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1ed4:	20 97       	sbiw	r28, 0x00	; 0
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <Endpoint_Write_Control_PStream_LE+0xce>
    1ed8:	88 e0       	ldi	r24, 0x08	; 8
    1eda:	e8 16       	cp	r14, r24
    1edc:	f1 04       	cpc	r15, r1
    1ede:	81 f7       	brne	.-32     	; 0x1ec0 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1ee0:	dd 24       	eor	r13, r13
    1ee2:	d3 94       	inc	r13
    1ee4:	e8 e0       	ldi	r30, 0x08	; 8
    1ee6:	ee 16       	cp	r14, r30
    1ee8:	f1 04       	cpc	r15, r1
    1eea:	09 f0       	breq	.+2      	; 0x1eee <Endpoint_Write_Control_PStream_LE+0xdc>
    1eec:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1eee:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1ef2:	20 97       	sbiw	r28, 0x00	; 0
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <Endpoint_Write_Control_PStream_LE+0xe6>
    1ef6:	af cf       	rjmp	.-162    	; 0x1e56 <Endpoint_Write_Control_PStream_LE+0x44>
    1ef8:	d1 10       	cpse	r13, r1
    1efa:	ad cf       	rjmp	.-166    	; 0x1e56 <Endpoint_Write_Control_PStream_LE+0x44>
    1efc:	0a c0       	rjmp	.+20     	; 0x1f12 <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1efe:	80 91 a4 95 	lds	r24, 0x95A4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1f02:	88 23       	and	r24, r24
    1f04:	91 f0       	breq	.+36     	; 0x1f2a <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1f06:	85 30       	cpi	r24, 0x05	; 5
    1f08:	91 f0       	breq	.+36     	; 0x1f2e <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1f0a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <Endpoint_IsSETUPReceived>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	10 c0       	rjmp	.+32     	; 0x1f32 <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1f12:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    1f16:	88 23       	and	r24, r24
    1f18:	91 f3       	breq	.-28     	; 0x1efe <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	0b c0       	rjmp	.+22     	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	09 c0       	rjmp	.+18     	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1f22:	83 e0       	ldi	r24, 0x03	; 3
    1f24:	07 c0       	rjmp	.+14     	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	05 c0       	rjmp	.+10     	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1f2a:	82 e0       	ldi	r24, 0x02	; 2
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1f2e:	83 e0       	ldi	r24, 0x03	; 3
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	08 95       	ret

00001f44 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1f44:	e0 91 af 95 	lds	r30, 0x95AF
    1f48:	f0 91 b0 95 	lds	r31, 0x95B0
    1f4c:	a0 91 ad 95 	lds	r26, 0x95AD
    1f50:	b0 91 ae 95 	lds	r27, 0x95AE
    1f54:	af 5b       	subi	r26, 0xBF	; 191
    1f56:	bf 4f       	sbci	r27, 0xFF	; 255
    1f58:	8c 91       	ld	r24, X
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	82 83       	std	Z+2, r24	; 0x02
    1f5e:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1f60:	80 81       	ld	r24, Z
    1f62:	8d 79       	andi	r24, 0x9D	; 157
    1f64:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f66:	e0 91 ad 95 	lds	r30, 0x95AD
    1f6a:	f0 91 ae 95 	lds	r31, 0x95AE
    1f6e:	ef 5b       	subi	r30, 0xBF	; 191
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	10 82       	st	Z, r1
    1f74:	08 95       	ret

00001f76 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1f76:	e0 91 af 95 	lds	r30, 0x95AF
    1f7a:	f0 91 b0 95 	lds	r31, 0x95B0
    1f7e:	80 81       	ld	r24, Z
    1f80:	8d 79       	andi	r24, 0x9D	; 157
    1f82:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f84:	e0 91 ad 95 	lds	r30, 0x95AD
    1f88:	f0 91 ae 95 	lds	r31, 0x95AE
    1f8c:	ef 5b       	subi	r30, 0xBF	; 191
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	10 82       	st	Z, r1
    1f92:	08 95       	ret

00001f94 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1f94:	80 91 ad 95 	lds	r24, 0x95AD
    1f98:	90 91 ae 95 	lds	r25, 0x95AE
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	ef 5b       	subi	r30, 0xBF	; 191
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	20 81       	ld	r18, Z
    1fa4:	31 e0       	ldi	r19, 0x01	; 1
    1fa6:	32 0f       	add	r19, r18
    1fa8:	30 83       	st	Z, r19
    1faa:	fc 01       	movw	r30, r24
    1fac:	e2 0f       	add	r30, r18
    1fae:	f1 1d       	adc	r31, r1
    1fb0:	80 81       	ld	r24, Z
}
    1fb2:	08 95       	ret

00001fb4 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1fb4:	20 91 ad 95 	lds	r18, 0x95AD
    1fb8:	30 91 ae 95 	lds	r19, 0x95AE
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	ef 5b       	subi	r30, 0xBF	; 191
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	90 81       	ld	r25, Z
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	49 0f       	add	r20, r25
    1fc8:	40 83       	st	Z, r20
    1fca:	f9 01       	movw	r30, r18
    1fcc:	e9 0f       	add	r30, r25
    1fce:	f1 1d       	adc	r31, r1
    1fd0:	80 83       	st	Z, r24
    1fd2:	08 95       	ret

00001fd4 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1fd4:	80 93 b1 95 	sts	0x95B1, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1fd8:	28 2f       	mov	r18, r24
    1fda:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1fde:	40 91 c6 04 	lds	r20, 0x04C6
    1fe2:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1fe6:	88 23       	and	r24, r24
    1fe8:	e4 f4       	brge	.+56     	; 0x2022 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1fea:	64 e8       	ldi	r22, 0x84	; 132
    1fec:	62 9f       	mul	r22, r18
    1fee:	c0 01       	movw	r24, r0
    1ff0:	63 9f       	mul	r22, r19
    1ff2:	90 0d       	add	r25, r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	8c 50       	subi	r24, 0x0C	; 12
    1ff8:	9a 46       	sbci	r25, 0x6A	; 106
    1ffa:	80 93 ad 95 	sts	0x95AD, r24
    1ffe:	90 93 ae 95 	sts	0x95AE, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    2002:	c9 01       	movw	r24, r18
    2004:	82 95       	swap	r24
    2006:	92 95       	swap	r25
    2008:	90 7f       	andi	r25, 0xF0	; 240
    200a:	98 27       	eor	r25, r24
    200c:	80 7f       	andi	r24, 0xF0	; 240
    200e:	98 27       	eor	r25, r24
    2010:	08 96       	adiw	r24, 0x08	; 8
    2012:	9a 01       	movw	r18, r20
    2014:	28 0f       	add	r18, r24
    2016:	39 1f       	adc	r19, r25
    2018:	20 93 af 95 	sts	0x95AF, r18
    201c:	30 93 b0 95 	sts	0x95B0, r19
    2020:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    2022:	64 e8       	ldi	r22, 0x84	; 132
    2024:	62 9f       	mul	r22, r18
    2026:	c0 01       	movw	r24, r0
    2028:	63 9f       	mul	r22, r19
    202a:	90 0d       	add	r25, r0
    202c:	11 24       	eor	r1, r1
    202e:	8e 54       	subi	r24, 0x4E	; 78
    2030:	9a 46       	sbci	r25, 0x6A	; 106
    2032:	80 93 ad 95 	sts	0x95AD, r24
    2036:	90 93 ae 95 	sts	0x95AE, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    203a:	22 95       	swap	r18
    203c:	32 95       	swap	r19
    203e:	30 7f       	andi	r19, 0xF0	; 240
    2040:	32 27       	eor	r19, r18
    2042:	20 7f       	andi	r18, 0xF0	; 240
    2044:	32 27       	eor	r19, r18
    2046:	24 0f       	add	r18, r20
    2048:	35 1f       	adc	r19, r21
    204a:	20 93 af 95 	sts	0x95AF, r18
    204e:	30 93 b0 95 	sts	0x95B0, r19
    2052:	08 95       	ret

00002054 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    2054:	80 91 b1 95 	lds	r24, 0x95B1
    2058:	80 68       	ori	r24, 0x80	; 128
    205a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    205e:	e0 91 af 95 	lds	r30, 0x95AF
    2062:	f0 91 b0 95 	lds	r31, 0x95B0
    2066:	80 81       	ld	r24, Z
}
    2068:	86 95       	lsr	r24
    206a:	81 70       	andi	r24, 0x01	; 1
    206c:	08 95       	ret

0000206e <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    206e:	80 91 b1 95 	lds	r24, 0x95B1
    2072:	8f 77       	andi	r24, 0x7F	; 127
    2074:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    2078:	e0 91 af 95 	lds	r30, 0x95AF
    207c:	f0 91 b0 95 	lds	r31, 0x95B0
    2080:	80 81       	ld	r24, Z
    2082:	85 ff       	sbrs	r24, 5
    2084:	0c c0       	rjmp	.+24     	; 0x209e <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    2086:	80 91 ad 95 	lds	r24, 0x95AD
    208a:	90 91 ae 95 	lds	r25, 0x95AE
    208e:	22 81       	ldd	r18, Z+2	; 0x02
    2090:	33 81       	ldd	r19, Z+3	; 0x03
    2092:	fc 01       	movw	r30, r24
    2094:	e0 5c       	subi	r30, 0xC0	; 192
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	20 83       	st	Z, r18
		return true;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	08 95       	ret
	}

	return false;
    209e:	80 e0       	ldi	r24, 0x00	; 0
}
    20a0:	08 95       	ret

000020a2 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    20a2:	80 91 b1 95 	lds	r24, 0x95B1
    20a6:	8f 77       	andi	r24, 0x7F	; 127
    20a8:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    20ac:	e0 91 af 95 	lds	r30, 0x95AF
    20b0:	f0 91 b0 95 	lds	r31, 0x95B0
    20b4:	80 81       	ld	r24, Z
    20b6:	84 ff       	sbrs	r24, 4
    20b8:	0c c0       	rjmp	.+24     	; 0x20d2 <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    20ba:	80 91 ad 95 	lds	r24, 0x95AD
    20be:	90 91 ae 95 	lds	r25, 0x95AE
    20c2:	22 81       	ldd	r18, Z+2	; 0x02
    20c4:	33 81       	ldd	r19, Z+3	; 0x03
    20c6:	fc 01       	movw	r30, r24
    20c8:	e0 5c       	subi	r30, 0xC0	; 192
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	20 83       	st	Z, r18
		return true;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	08 95       	ret
	}

	return false;
    20d2:	80 e0       	ldi	r24, 0x00	; 0
}
    20d4:	08 95       	ret

000020d6 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    20d6:	80 91 b1 95 	lds	r24, 0x95B1
    20da:	8f 77       	andi	r24, 0x7F	; 127
    20dc:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    20e0:	e0 91 af 95 	lds	r30, 0x95AF
    20e4:	f0 91 b0 95 	lds	r31, 0x95B0
    20e8:	80 81       	ld	r24, Z
    20ea:	8d 78       	andi	r24, 0x8D	; 141
    20ec:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    20ee:	e0 91 af 95 	lds	r30, 0x95AF
    20f2:	f0 91 b0 95 	lds	r31, 0x95B0
    20f6:	80 81       	ld	r24, Z
    20f8:	81 60       	ori	r24, 0x01	; 1
    20fa:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    20fc:	e0 91 ad 95 	lds	r30, 0x95AD
    2100:	f0 91 ae 95 	lds	r31, 0x95AE
    2104:	ef 5b       	subi	r30, 0xBF	; 191
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    210a:	80 91 b1 95 	lds	r24, 0x95B1
    210e:	80 68       	ori	r24, 0x80	; 128
    2110:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    2114:	e0 91 af 95 	lds	r30, 0x95AF
    2118:	f0 91 b0 95 	lds	r31, 0x95B0
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    2122:	e0 91 ad 95 	lds	r30, 0x95AD
    2126:	f0 91 ae 95 	lds	r31, 0x95AE
    212a:	ef 5b       	subi	r30, 0xBF	; 191
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	10 82       	st	Z, r1
    2130:	08 95       	ret

00002132 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    2132:	e0 91 af 95 	lds	r30, 0x95AF
    2136:	f0 91 b0 95 	lds	r31, 0x95B0
    213a:	81 81       	ldd	r24, Z+1	; 0x01
    213c:	84 60       	ori	r24, 0x04	; 4
    213e:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    2140:	e0 91 af 95 	lds	r30, 0x95AF
    2144:	f0 91 b0 95 	lds	r31, 0x95B0
    2148:	81 81       	ldd	r24, Z+1	; 0x01
    214a:	80 7c       	andi	r24, 0xC0	; 192
    214c:	80 34       	cpi	r24, 0x40	; 64
    214e:	61 f4       	brne	.+24     	; 0x2168 <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    2150:	80 91 b1 95 	lds	r24, 0x95B1
    2154:	80 58       	subi	r24, 0x80	; 128
    2156:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    215a:	e0 91 af 95 	lds	r30, 0x95AF
    215e:	f0 91 b0 95 	lds	r31, 0x95B0
    2162:	81 81       	ldd	r24, Z+1	; 0x01
    2164:	84 60       	ori	r24, 0x04	; 4
    2166:	81 83       	std	Z+1, r24	; 0x01
    2168:	08 95       	ret

0000216a <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	d8 2f       	mov	r29, r24
    2172:	16 2f       	mov	r17, r22
    2174:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    2176:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    217a:	e0 91 af 95 	lds	r30, 0x95AF
    217e:	f0 91 b0 95 	lds	r31, 0x95B0
    2182:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    2184:	e0 91 af 95 	lds	r30, 0x95AF
    2188:	f0 91 b0 95 	lds	r31, 0x95B0
    218c:	dd 23       	and	r29, r29
    218e:	a4 f0       	brlt	.+40     	; 0x21b8 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    2190:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    2192:	e0 91 af 95 	lds	r30, 0x95AF
    2196:	f0 91 b0 95 	lds	r31, 0x95B0
    219a:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    219c:	e0 91 af 95 	lds	r30, 0x95AF
    21a0:	f0 91 b0 95 	lds	r31, 0x95B0
    21a4:	12 82       	std	Z+2, r1	; 0x02
    21a6:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    21a8:	80 91 ad 95 	lds	r24, 0x95AD
    21ac:	90 91 ae 95 	lds	r25, 0x95AE
    21b0:	84 83       	std	Z+4, r24	; 0x04
    21b2:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	14 c0       	rjmp	.+40     	; 0x21e0 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    21bc:	e0 91 af 95 	lds	r30, 0x95AF
    21c0:	f0 91 b0 95 	lds	r31, 0x95B0
    21c4:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    21c6:	e0 91 af 95 	lds	r30, 0x95AF
    21ca:	f0 91 b0 95 	lds	r31, 0x95B0
    21ce:	12 82       	std	Z+2, r1	; 0x02
    21d0:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    21d2:	80 91 ad 95 	lds	r24, 0x95AD
    21d6:	90 91 ae 95 	lds	r25, 0x95AE
    21da:	84 83       	std	Z+4, r24	; 0x04
    21dc:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    21de:	4c 2f       	mov	r20, r28
    21e0:	fc 01       	movw	r30, r24
    21e2:	e0 5c       	subi	r30, 0xC0	; 192
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    21e8:	31 96       	adiw	r30, 0x01	; 1
    21ea:	10 82       	st	Z, r1

	return true;
}
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	08 95       	ret

000021f6 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    21f6:	af 92       	push	r10
    21f8:	bf 92       	push	r11
    21fa:	cf 92       	push	r12
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    220a:	66 23       	and	r22, r22
    220c:	09 f4       	brne	.+2      	; 0x2210 <Endpoint_ConfigureEndpointTable+0x1a>
    220e:	57 c0       	rjmp	.+174    	; 0x22be <Endpoint_ConfigureEndpointTable+0xc8>
    2210:	a6 2e       	mov	r10, r22
    2212:	7c 01       	movw	r14, r24
    2214:	8c 01       	movw	r16, r24
    2216:	84 e0       	ldi	r24, 0x04	; 4
    2218:	e8 0e       	add	r14, r24
    221a:	f1 1c       	adc	r15, r1
    221c:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    221e:	f8 01       	movw	r30, r16
    2220:	c0 80       	ld	r12, Z
    2222:	cc 20       	and	r12, r12
    2224:	09 f4       	brne	.+2      	; 0x2228 <Endpoint_ConfigureEndpointTable+0x32>
    2226:	41 c0       	rjmp	.+130    	; 0x22aa <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    2228:	c1 81       	ldd	r28, Z+1	; 0x01
    222a:	d2 81       	ldd	r29, Z+2	; 0x02
    222c:	f7 01       	movw	r30, r14
    222e:	31 97       	sbiw	r30, 0x01	; 1
    2230:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    2232:	f7 01       	movw	r30, r14
    2234:	90 81       	ld	r25, Z
    2236:	92 30       	cpi	r25, 0x02	; 2
    2238:	10 f4       	brcc	.+4      	; 0x223e <Endpoint_ConfigureEndpointTable+0x48>
    223a:	48 e0       	ldi	r20, 0x08	; 8
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <Endpoint_ConfigureEndpointTable+0x4a>
    223e:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    2240:	c9 30       	cpi	r28, 0x09	; 9
    2242:	d1 05       	cpc	r29, r1
    2244:	50 f0       	brcs	.+20     	; 0x225a <Endpoint_ConfigureEndpointTable+0x64>
    2246:	28 e0       	ldi	r18, 0x08	; 8
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    224c:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    2252:	2c 17       	cp	r18, r28
    2254:	3d 07       	cpc	r19, r29
    2256:	d0 f3       	brcs	.-12     	; 0x224c <Endpoint_ConfigureEndpointTable+0x56>
    2258:	01 c0       	rjmp	.+2      	; 0x225c <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    225a:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    225c:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    225e:	2c 2d       	mov	r18, r12
    2260:	2f 70       	andi	r18, 0x0F	; 15
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	25 30       	cpi	r18, 0x05	; 5
    2266:	31 05       	cpc	r19, r1
    2268:	64 f5       	brge	.+88     	; 0x22c2 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    226a:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    226c:	c1 34       	cpi	r28, 0x41	; 65
    226e:	d1 05       	cpc	r29, r1
    2270:	50 f5       	brcc	.+84     	; 0x22c6 <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    2272:	88 23       	and	r24, r24
    2274:	19 f0       	breq	.+6      	; 0x227c <Endpoint_ConfigureEndpointTable+0x86>
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	21 f0       	breq	.+8      	; 0x2282 <Endpoint_ConfigureEndpointTable+0x8c>
    227a:	06 c0       	rjmp	.+12     	; 0x2288 <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    227c:	90 64       	ori	r25, 0x40	; 64
    227e:	d9 2e       	mov	r13, r25
    2280:	07 c0       	rjmp	.+14     	; 0x2290 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    2282:	90 6c       	ori	r25, 0xC0	; 192
    2284:	d9 2e       	mov	r13, r25
    2286:	0a c0       	rjmp	.+20     	; 0x229c <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    2288:	90 68       	ori	r25, 0x80	; 128
    228a:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    228c:	81 11       	cpse	r24, r1
    228e:	06 c0       	rjmp	.+12     	; 0x229c <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2290:	4c 2f       	mov	r20, r28
    2292:	6d 2d       	mov	r22, r13
    2294:	80 e8       	ldi	r24, 0x80	; 128
    2296:	8c 0d       	add	r24, r12
    2298:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    229c:	4c 2f       	mov	r20, r28
    229e:	6d 2d       	mov	r22, r13
    22a0:	8c 2d       	mov	r24, r12
    22a2:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>
    22a6:	88 23       	and	r24, r24
    22a8:	79 f0       	breq	.+30     	; 0x22c8 <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    22aa:	b3 94       	inc	r11
    22ac:	0b 5f       	subi	r16, 0xFB	; 251
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	f5 e0       	ldi	r31, 0x05	; 5
    22b2:	ef 0e       	add	r14, r31
    22b4:	f1 1c       	adc	r15, r1
    22b6:	ba 10       	cpse	r11, r10
    22b8:	b2 cf       	rjmp	.-156    	; 0x221e <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <Endpoint_ConfigureEndpointTable+0xd2>
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	03 c0       	rjmp	.+6      	; 0x22c8 <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <Endpoint_ConfigureEndpointTable+0xd2>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	08 95       	ret

000022de <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    22e2:	a0 ec       	ldi	r26, 0xC0	; 192
    22e4:	b4 e0       	ldi	r27, 0x04	; 4
    22e6:	16 96       	adiw	r26, 0x06	; 6
    22e8:	ed 91       	ld	r30, X+
    22ea:	fc 91       	ld	r31, X
    22ec:	17 97       	sbiw	r26, 0x07	; 7
    22ee:	c9 01       	movw	r24, r18
    22f0:	82 95       	swap	r24
    22f2:	92 95       	swap	r25
    22f4:	90 7f       	andi	r25, 0xF0	; 240
    22f6:	98 27       	eor	r25, r24
    22f8:	80 7f       	andi	r24, 0xF0	; 240
    22fa:	98 27       	eor	r25, r24
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    2302:	16 96       	adiw	r26, 0x06	; 6
    2304:	4d 91       	ld	r20, X+
    2306:	5c 91       	ld	r21, X
    2308:	17 97       	sbiw	r26, 0x07	; 7
    230a:	fa 01       	movw	r30, r20
    230c:	e8 0f       	add	r30, r24
    230e:	f9 1f       	adc	r31, r25
    2310:	11 82       	std	Z+1, r1	; 0x01
    2312:	2f 5f       	subi	r18, 0xFF	; 255
    2314:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2316:	25 30       	cpi	r18, 0x05	; 5
    2318:	31 05       	cpc	r19, r1
    231a:	29 f7       	brne	.-54     	; 0x22e6 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    231c:	08 95       	ret

0000231e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    231e:	80 91 a5 95 	lds	r24, 0x95A5
    2322:	88 23       	and	r24, r24
    2324:	84 f4       	brge	.+32     	; 0x2346 <Endpoint_ClearStatusStage+0x28>
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2328:	80 91 a4 95 	lds	r24, 0x95A4
    232c:	88 23       	and	r24, r24
    232e:	89 f0       	breq	.+34     	; 0x2352 <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2330:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    2334:	88 23       	and	r24, r24
    2336:	c1 f3       	breq	.-16     	; 0x2328 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    2338:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Endpoint_ClearOUT>
    233c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    233e:	80 91 a4 95 	lds	r24, 0x95A4
    2342:	88 23       	and	r24, r24
    2344:	31 f0       	breq	.+12     	; 0x2352 <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    2346:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    234a:	88 23       	and	r24, r24
    234c:	c1 f3       	breq	.-16     	; 0x233e <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    234e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Endpoint_ClearIN>
    2352:	08 95       	ret

00002354 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    2354:	ff 92       	push	r15
    2356:	0f 93       	push	r16
    2358:	1f 93       	push	r17
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    235e:	e0 91 c6 04 	lds	r30, 0x04C6
    2362:	f0 91 c7 04 	lds	r31, 0x04C7
    2366:	e0 5b       	subi	r30, 0xB0	; 176
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	c0 81       	ld	r28, Z
    236c:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    236e:	0f 2e       	mov	r0, r31
    2370:	f4 e6       	ldi	r31, 0x64	; 100
    2372:	ff 2e       	mov	r15, r31
    2374:	f0 2d       	mov	r31, r0
    2376:	00 ec       	ldi	r16, 0xC0	; 192
    2378:	14 e0       	ldi	r17, 0x04	; 4
    237a:	02 c0       	rjmp	.+4      	; 0x2380 <Endpoint_WaitUntilReady+0x2c>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    237c:	f2 2e       	mov	r15, r18
    237e:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    2380:	80 91 b1 95 	lds	r24, 0x95B1

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    2384:	88 23       	and	r24, r24
    2386:	2c f4       	brge	.+10     	; 0x2392 <Endpoint_WaitUntilReady+0x3e>
		{
			if (Endpoint_IsINReady())
    2388:	0e 94 2a 10 	call	0x2054	; 0x2054 <Endpoint_IsINReady>
    238c:	88 23       	and	r24, r24
    238e:	29 f0       	breq	.+10     	; 0x239a <Endpoint_WaitUntilReady+0x46>
    2390:	23 c0       	rjmp	.+70     	; 0x23d8 <Endpoint_WaitUntilReady+0x84>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2392:	0e 94 37 10 	call	0x206e	; 0x206e <Endpoint_IsOUTReceived>
    2396:	81 11       	cpse	r24, r1
    2398:	21 c0       	rjmp	.+66     	; 0x23dc <Endpoint_WaitUntilReady+0x88>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    239a:	80 91 a4 95 	lds	r24, 0x95A4

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    239e:	88 23       	and	r24, r24
    23a0:	f9 f0       	breq	.+62     	; 0x23e0 <Endpoint_WaitUntilReady+0x8c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    23a2:	85 30       	cpi	r24, 0x05	; 5
    23a4:	f9 f0       	breq	.+62     	; 0x23e4 <Endpoint_WaitUntilReady+0x90>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    23a6:	e0 91 af 95 	lds	r30, 0x95AF
    23aa:	f0 91 b0 95 	lds	r31, 0x95B0
    23ae:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    23b0:	82 fd       	sbrc	r24, 2
    23b2:	1a c0       	rjmp	.+52     	; 0x23e8 <Endpoint_WaitUntilReady+0x94>
    23b4:	d8 01       	movw	r26, r16
    23b6:	16 96       	adiw	r26, 0x06	; 6
    23b8:	ed 91       	ld	r30, X+
    23ba:	fc 91       	ld	r31, X
    23bc:	17 97       	sbiw	r26, 0x07	; 7
    23be:	e0 5b       	subi	r30, 0xB0	; 176
    23c0:	ff 4f       	sbci	r31, 0xFF	; 255
    23c2:	80 81       	ld	r24, Z
    23c4:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    23c6:	c8 17       	cp	r28, r24
    23c8:	d9 07       	cpc	r29, r25
    23ca:	c9 f2       	breq	.-78     	; 0x237e <Endpoint_WaitUntilReady+0x2a>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    23cc:	2f ef       	ldi	r18, 0xFF	; 255
    23ce:	2f 0d       	add	r18, r15
    23d0:	f1 10       	cpse	r15, r1
    23d2:	d4 cf       	rjmp	.-88     	; 0x237c <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_Timeout;
    23d4:	84 e0       	ldi	r24, 0x04	; 4
    23d6:	09 c0       	rjmp	.+18     	; 0x23ea <Endpoint_WaitUntilReady+0x96>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	07 c0       	rjmp	.+14     	; 0x23ea <Endpoint_WaitUntilReady+0x96>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	05 c0       	rjmp	.+10     	; 0x23ea <Endpoint_WaitUntilReady+0x96>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	03 c0       	rjmp	.+6      	; 0x23ea <Endpoint_WaitUntilReady+0x96>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    23e4:	83 e0       	ldi	r24, 0x03	; 3
    23e6:	01 c0       	rjmp	.+2      	; 0x23ea <Endpoint_WaitUntilReady+0x96>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    23e8:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    23ea:	df 91       	pop	r29
    23ec:	cf 91       	pop	r28
    23ee:	1f 91       	pop	r17
    23f0:	0f 91       	pop	r16
    23f2:	ff 90       	pop	r15
    23f4:	08 95       	ret

000023f6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    23fa:	e0 e4       	ldi	r30, 0x40	; 64
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    2400:	84 81       	ldd	r24, Z+4	; 0x04
    2402:	83 60       	ori	r24, 0x03	; 3
    2404:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    2406:	0e 94 59 12 	call	0x24b2	; 0x24b2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    240a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    240e:	c0 ec       	ldi	r28, 0xC0	; 192
    2410:	d4 e0       	ldi	r29, 0x04	; 4
    2412:	88 81       	ld	r24, Y
    2414:	8f 77       	andi	r24, 0x7F	; 127
    2416:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    2418:	88 81       	ld	r24, Y
    241a:	80 68       	ori	r24, 0x80	; 128
    241c:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    241e:	10 92 a4 95 	sts	0x95A4, r1
	USB_Device_ConfigurationNumber  = 0;
    2422:	10 92 a0 95 	sts	0x95A0, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2426:	10 92 a2 95 	sts	0x95A2, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    242a:	10 92 a1 95 	sts	0x95A1, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    242e:	88 81       	ld	r24, Y
    2430:	80 64       	ori	r24, 0x40	; 64
    2432:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2434:	48 e0       	ldi	r20, 0x08	; 8
    2436:	68 e4       	ldi	r22, 0x48	; 72
    2438:	80 e8       	ldi	r24, 0x80	; 128
    243a:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    243e:	48 e0       	ldi	r20, 0x08	; 8
    2440:	68 e4       	ldi	r22, 0x48	; 72
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    2448:	88 85       	ldd	r24, Y+8	; 0x08
    244a:	80 64       	ori	r24, 0x40	; 64
    244c:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	81 60       	ori	r24, 0x01	; 1
    2452:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    2454:	df 91       	pop	r29
    2456:	cf 91       	pop	r28
    2458:	08 95       	ret

0000245a <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    245a:	cf 93       	push	r28
    245c:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    245e:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2460:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    2462:	c0 ec       	ldi	r28, 0xC0	; 192
    2464:	d1 e0       	ldi	r29, 0x01	; 1
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    246a:	ea e1       	ldi	r30, 0x1A	; 26
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	e4 91       	lpm	r30, Z
    2470:	a0 ec       	ldi	r26, 0xC0	; 192
    2472:	b4 e0       	ldi	r27, 0x04	; 4
    2474:	da 96       	adiw	r26, 0x3a	; 58
    2476:	ec 93       	st	X, r30
    2478:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    247a:	eb e1       	ldi	r30, 0x1B	; 27
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	e4 91       	lpm	r30, Z
    2480:	db 96       	adiw	r26, 0x3b	; 59
    2482:	ec 93       	st	X, r30
    2484:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    2486:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    2488:	87 e4       	ldi	r24, 0x47	; 71
    248a:	98 e9       	ldi	r25, 0x98	; 152
    248c:	8e 7f       	andi	r24, 0xFE	; 254
    248e:	16 96       	adiw	r26, 0x06	; 6
    2490:	8d 93       	st	X+, r24
    2492:	9c 93       	st	X, r25
    2494:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    2496:	84 e1       	ldi	r24, 0x14	; 20
    2498:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    249a:	83 e0       	ldi	r24, 0x03	; 3
    249c:	18 96       	adiw	r26, 0x08	; 8
    249e:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    24a0:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	80 93 a3 95 	sts	0x95A3, r24

	USB_ResetInterface();
    24a8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <USB_ResetInterface>
}
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	08 95       	ret

000024b2 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    24b2:	e0 ec       	ldi	r30, 0xC0	; 192
    24b4:	f4 e0       	ldi	r31, 0x04	; 4
    24b6:	80 85       	ldd	r24, Z+8	; 0x08
    24b8:	83 70       	andi	r24, 0x03	; 3
    24ba:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    24bc:	11 86       	std	Z+9, r1	; 0x09
    24be:	08 95       	ret

000024c0 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    24c0:	e0 ec       	ldi	r30, 0xC0	; 192
    24c2:	f4 e0       	ldi	r31, 0x04	; 4
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    24c8:	84 87       	std	Z+12, r24	; 0x0c
    24ca:	08 95       	ret

000024cc <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    24cc:	1f 92       	push	r1
    24ce:	0f 92       	push	r0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	0b b6       	in	r0, 0x3b	; 59
    24d8:	0f 92       	push	r0
    24da:	2f 93       	push	r18
    24dc:	3f 93       	push	r19
    24de:	4f 93       	push	r20
    24e0:	5f 93       	push	r21
    24e2:	6f 93       	push	r22
    24e4:	7f 93       	push	r23
    24e6:	8f 93       	push	r24
    24e8:	9f 93       	push	r25
    24ea:	af 93       	push	r26
    24ec:	bf 93       	push	r27
    24ee:	ef 93       	push	r30
    24f0:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    24f2:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    24f6:	88 23       	and	r24, r24
    24f8:	4c f4       	brge	.+18     	; 0x250c <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    24fa:	80 91 c8 04 	lds	r24, 0x04C8
    24fe:	88 23       	and	r24, r24
    2500:	2c f4       	brge	.+10     	; 0x250c <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    2502:	80 e8       	ldi	r24, 0x80	; 128
    2504:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2508:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    250c:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    2510:	86 ff       	sbrs	r24, 6
    2512:	07 c0       	rjmp	.+14     	; 0x2522 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    2514:	80 e4       	ldi	r24, 0x40	; 64
    2516:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    251a:	10 92 a4 95 	sts	0x95A4, r1
		EVENT_USB_Device_Disconnect();
    251e:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    2522:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    2526:	85 ff       	sbrs	r24, 5
    2528:	16 c0       	rjmp	.+44     	; 0x2556 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    252a:	80 e2       	ldi	r24, 0x20	; 32
    252c:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    2530:	80 91 a0 95 	lds	r24, 0x95A0
    2534:	88 23       	and	r24, r24
    2536:	21 f0       	breq	.+8      	; 0x2540 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2538:	84 e0       	ldi	r24, 0x04	; 4
    253a:	80 93 a4 95 	sts	0x95A4, r24
    253e:	09 c0       	rjmp	.+18     	; 0x2552 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    2540:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2544:	81 11       	cpse	r24, r1
    2546:	02 c0       	rjmp	.+4      	; 0x254c <__vector_125+0x80>
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	01 c0       	rjmp	.+2      	; 0x254e <__vector_125+0x82>
    254c:	83 e0       	ldi	r24, 0x03	; 3
    254e:	80 93 a4 95 	sts	0x95A4, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    2552:	0e 94 94 17 	call	0x2f28	; 0x2f28 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    2556:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    255a:	84 ff       	sbrs	r24, 4
    255c:	18 c0       	rjmp	.+48     	; 0x258e <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    255e:	e0 ec       	ldi	r30, 0xC0	; 192
    2560:	f4 e0       	ldi	r31, 0x04	; 4
    2562:	80 e1       	ldi	r24, 0x10	; 16
    2564:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	80 93 a4 95 	sts	0x95A4, r24
		USB_Device_ConfigurationNumber = 0;
    256c:	10 92 a0 95 	sts	0x95A0, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    2570:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    2572:	0e 94 6f 11 	call	0x22de	; 0x22de <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2576:	48 e0       	ldi	r20, 0x08	; 8
    2578:	68 e4       	ldi	r22, 0x48	; 72
    257a:	80 e8       	ldi	r24, 0x80	; 128
    257c:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    2580:	48 e0       	ldi	r20, 0x08	; 8
    2582:	68 e4       	ldi	r22, 0x48	; 72
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	0e 94 b5 10 	call	0x216a	; 0x216a <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    258a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <USB_Event_Stub>
	}
}
    258e:	ff 91       	pop	r31
    2590:	ef 91       	pop	r30
    2592:	bf 91       	pop	r27
    2594:	af 91       	pop	r26
    2596:	9f 91       	pop	r25
    2598:	8f 91       	pop	r24
    259a:	7f 91       	pop	r23
    259c:	6f 91       	pop	r22
    259e:	5f 91       	pop	r21
    25a0:	4f 91       	pop	r20
    25a2:	3f 91       	pop	r19
    25a4:	2f 91       	pop	r18
    25a6:	0f 90       	pop	r0
    25a8:	0b be       	out	0x3b, r0	; 59
    25aa:	0f 90       	pop	r0
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	0f 90       	pop	r0
    25b0:	1f 90       	pop	r1
    25b2:	18 95       	reti

000025b4 <USBThread>:
// 		ssd1306_clear();
// 		ssd1306_set_page_address(0);
// 		ssd1306_write_text("EMON");
		//fprintf(&USBSerialStream, "timestamp : %lu\r\n",system_time);
		//vTaskDelay(1000);
	}
    25b4:	0e 94 1a 09 	call	0x1234	; 0x1234 <vTaskSuspendAll>
    25b8:	8d e8       	ldi	r24, 0x8D	; 141
    25ba:	92 e2       	ldi	r25, 0x22	; 34
    25bc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <CDC_Device_USBTask>
    25c0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <USB_USBTask>
    25c4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xTaskResumeAll>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    25d0:	f1 cf       	rjmp	.-30     	; 0x25b4 <USBThread>

000025d2 <usart_spi_transmit_receive>:
    25d2:	fc 01       	movw	r30, r24
    25d4:	81 81       	ldd	r24, Z+1	; 0x01
    25d6:	85 ff       	sbrs	r24, 5
    25d8:	fd cf       	rjmp	.-6      	; 0x25d4 <usart_spi_transmit_receive+0x2>
    25da:	60 83       	st	Z, r22
    25dc:	81 81       	ldd	r24, Z+1	; 0x01
    25de:	86 ff       	sbrs	r24, 6
    25e0:	fd cf       	rjmp	.-6      	; 0x25dc <usart_spi_transmit_receive+0xa>
    25e2:	80 e4       	ldi	r24, 0x40	; 64
    25e4:	81 83       	std	Z+1, r24	; 0x01
    25e6:	80 81       	ld	r24, Z
    25e8:	08 95       	ret

000025ea <ssd1306_write_command>:
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	c0 ea       	ldi	r28, 0xA0	; 160
    25f2:	d6 e0       	ldi	r29, 0x06	; 6
    25f4:	18 e0       	ldi	r17, 0x08	; 8
    25f6:	1e 83       	std	Y+6, r17	; 0x06
    25f8:	e0 e6       	ldi	r30, 0x60	; 96
    25fa:	f6 e0       	ldi	r31, 0x06	; 6
    25fc:	91 e0       	ldi	r25, 0x01	; 1
    25fe:	96 83       	std	Z+6, r25	; 0x06
    2600:	96 83       	std	Z+6, r25	; 0x06
    2602:	68 2f       	mov	r22, r24
    2604:	80 ea       	ldi	r24, 0xA0	; 160
    2606:	99 e0       	ldi	r25, 0x09	; 9
    2608:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <usart_spi_transmit_receive>
    260c:	1d 83       	std	Y+5, r17	; 0x05
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	08 95       	ret

00002616 <ssd1306_write_data>:
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
    2622:	c0 ea       	ldi	r28, 0xA0	; 160
    2624:	d6 e0       	ldi	r29, 0x06	; 6
    2626:	18 e0       	ldi	r17, 0x08	; 8
    2628:	1e 83       	std	Y+6, r17	; 0x06
    262a:	0f 2e       	mov	r0, r31
    262c:	f0 e6       	ldi	r31, 0x60	; 96
    262e:	ef 2e       	mov	r14, r31
    2630:	f6 e0       	ldi	r31, 0x06	; 6
    2632:	ff 2e       	mov	r15, r31
    2634:	f0 2d       	mov	r31, r0
    2636:	01 e0       	ldi	r16, 0x01	; 1
    2638:	f7 01       	movw	r30, r14
    263a:	05 83       	std	Z+5, r16	; 0x05
    263c:	68 2f       	mov	r22, r24
    263e:	80 ea       	ldi	r24, 0xA0	; 160
    2640:	99 e0       	ldi	r25, 0x09	; 9
    2642:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <usart_spi_transmit_receive>
    2646:	f7 01       	movw	r30, r14
    2648:	06 83       	std	Z+6, r16	; 0x06
    264a:	1d 83       	std	Y+5, r17	; 0x05
    264c:	df 91       	pop	r29
    264e:	cf 91       	pop	r28
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	08 95       	ret

0000265a <ssd1306_set_page_address>:
    265a:	87 70       	andi	r24, 0x07	; 7
    265c:	80 6b       	ori	r24, 0xB0	; 176
    265e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2662:	08 95       	ret

00002664 <ssd1306_set_column_address>:
    2664:	cf 93       	push	r28
    2666:	c8 2f       	mov	r28, r24
    2668:	98 2f       	mov	r25, r24
    266a:	9f 77       	andi	r25, 0x7F	; 127
    266c:	89 2f       	mov	r24, r25
    266e:	82 95       	swap	r24
    2670:	8f 70       	andi	r24, 0x0F	; 15
    2672:	80 61       	ori	r24, 0x10	; 16
    2674:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2678:	8c 2f       	mov	r24, r28
    267a:	8f 70       	andi	r24, 0x0F	; 15
    267c:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2680:	cf 91       	pop	r28
    2682:	08 95       	ret

00002684 <usart_init_spi>:
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	ec 01       	movw	r28, r24
    268a:	fb 01       	movw	r30, r22
    268c:	8c 81       	ldd	r24, Y+4	; 0x04
    268e:	8f 7e       	andi	r24, 0xEF	; 239
    2690:	8c 83       	std	Y+4, r24	; 0x04
    2692:	a0 e6       	ldi	r26, 0x60	; 96
    2694:	b6 e0       	ldi	r27, 0x06	; 6
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	11 96       	adiw	r26, 0x01	; 1
    269a:	8c 93       	st	X, r24
    269c:	11 97       	sbiw	r26, 0x01	; 1
    269e:	15 96       	adiw	r26, 0x05	; 5
    26a0:	8c 93       	st	X, r24
    26a2:	8d 81       	ldd	r24, Y+5	; 0x05
    26a4:	80 6c       	ori	r24, 0xC0	; 192
    26a6:	8d 83       	std	Y+5, r24	; 0x05
    26a8:	84 81       	ldd	r24, Z+4	; 0x04
    26aa:	8d 7f       	andi	r24, 0xFD	; 253
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	21 f4       	brne	.+8      	; 0x26b8 <usart_init_spi+0x34>
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	82 60       	ori	r24, 0x02	; 2
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	03 c0       	rjmp	.+6      	; 0x26be <usart_init_spi+0x3a>
    26b8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ba:	8d 7f       	andi	r24, 0xFD	; 253
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	85 81       	ldd	r24, Z+5	; 0x05
    26c0:	88 23       	and	r24, r24
    26c2:	21 f0       	breq	.+8      	; 0x26cc <usart_init_spi+0x48>
    26c4:	8d 81       	ldd	r24, Y+5	; 0x05
    26c6:	84 60       	ori	r24, 0x04	; 4
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <usart_init_spi+0x4e>
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	8b 7f       	andi	r24, 0xFB	; 251
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	80 81       	ld	r24, Z
    26d4:	91 81       	ldd	r25, Z+1	; 0x01
    26d6:	a2 81       	ldd	r26, Z+2	; 0x02
    26d8:	b3 81       	ldd	r27, Z+3	; 0x03
    26da:	9c 01       	movw	r18, r24
    26dc:	ad 01       	movw	r20, r26
    26de:	22 0f       	add	r18, r18
    26e0:	33 1f       	adc	r19, r19
    26e2:	44 1f       	adc	r20, r20
    26e4:	55 1f       	adc	r21, r21
    26e6:	60 e0       	ldi	r22, 0x00	; 0
    26e8:	78 e4       	ldi	r23, 0x48	; 72
    26ea:	88 ee       	ldi	r24, 0xE8	; 232
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	0e 94 b5 1c 	call	0x396a	; 0x396a <__udivmodsi4>
    26f2:	21 50       	subi	r18, 0x01	; 1
    26f4:	31 09       	sbc	r19, r1
    26f6:	83 2f       	mov	r24, r19
    26f8:	8f 70       	andi	r24, 0x0F	; 15
    26fa:	8f 83       	std	Y+7, r24	; 0x07
    26fc:	2e 83       	std	Y+6, r18	; 0x06
    26fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2700:	88 60       	ori	r24, 0x08	; 8
    2702:	8c 83       	std	Y+4, r24	; 0x04
    2704:	df 91       	pop	r29
    2706:	cf 91       	pop	r28
    2708:	08 95       	ret

0000270a <ssd1306_init>:
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	00 d0       	rcall	.+0      	; 0x2710 <ssd1306_init+0x6>
    2710:	00 d0       	rcall	.+0      	; 0x2712 <ssd1306_init+0x8>
    2712:	cd b7       	in	r28, 0x3d	; 61
    2714:	de b7       	in	r29, 0x3e	; 62
    2716:	20 ea       	ldi	r18, 0xA0	; 160
    2718:	36 e0       	ldi	r19, 0x06	; 6
    271a:	88 e0       	ldi	r24, 0x08	; 8
    271c:	d9 01       	movw	r26, r18
    271e:	11 96       	adiw	r26, 0x01	; 1
    2720:	8c 93       	st	X, r24
    2722:	a0 e6       	ldi	r26, 0x60	; 96
    2724:	b6 e0       	ldi	r27, 0x06	; 6
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	9c 93       	st	X, r25
    272c:	11 97       	sbiw	r26, 0x01	; 1
    272e:	e0 e0       	ldi	r30, 0x00	; 0
    2730:	f6 e0       	ldi	r31, 0x06	; 6
    2732:	81 83       	std	Z+1, r24	; 0x01
    2734:	92 e0       	ldi	r25, 0x02	; 2
    2736:	11 96       	adiw	r26, 0x01	; 1
    2738:	9c 93       	st	X, r25
    273a:	11 97       	sbiw	r26, 0x01	; 1
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	8c 93       	st	X, r24
    2740:	d9 01       	movw	r26, r18
    2742:	15 96       	adiw	r26, 0x05	; 5
    2744:	8c 93       	st	X, r24
    2746:	86 83       	std	Z+6, r24	; 0x06
    2748:	ba e6       	ldi	r27, 0x6A	; 106
    274a:	ba 95       	dec	r27
    274c:	f1 f7       	brne	.-4      	; 0x274a <ssd1306_init+0x40>
    274e:	00 c0       	rjmp	.+0      	; 0x2750 <ssd1306_init+0x46>
    2750:	85 83       	std	Z+5, r24	; 0x05
    2752:	ea e6       	ldi	r30, 0x6A	; 106
    2754:	ea 95       	dec	r30
    2756:	f1 f7       	brne	.-4      	; 0x2754 <ssd1306_init+0x4a>
    2758:	00 c0       	rjmp	.+0      	; 0x275a <ssd1306_init+0x50>
    275a:	e0 e7       	ldi	r30, 0x70	; 112
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	84 81       	ldd	r24, Z+4	; 0x04
    2760:	8f 7e       	andi	r24, 0xEF	; 239
    2762:	84 83       	std	Z+4, r24	; 0x04
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	9b e1       	ldi	r25, 0x1B	; 27
    2768:	a7 eb       	ldi	r26, 0xB7	; 183
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	9a 83       	std	Y+2, r25	; 0x02
    2770:	ab 83       	std	Y+3, r26	; 0x03
    2772:	bc 83       	std	Y+4, r27	; 0x04
    2774:	1d 82       	std	Y+5, r1	; 0x05
    2776:	1e 82       	std	Y+6, r1	; 0x06
    2778:	be 01       	movw	r22, r28
    277a:	6f 5f       	subi	r22, 0xFF	; 255
    277c:	7f 4f       	sbci	r23, 0xFF	; 255
    277e:	80 ea       	ldi	r24, 0xA0	; 160
    2780:	99 e0       	ldi	r25, 0x09	; 9
    2782:	0e 94 42 13 	call	0x2684	; 0x2684 <usart_init_spi>
    2786:	88 ea       	ldi	r24, 0xA8	; 168
    2788:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    278c:	8f e1       	ldi	r24, 0x1F	; 31
    278e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2792:	83 ed       	ldi	r24, 0xD3	; 211
    2794:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    279e:	80 e4       	ldi	r24, 0x40	; 64
    27a0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27a4:	81 ea       	ldi	r24, 0xA1	; 161
    27a6:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27aa:	88 ec       	ldi	r24, 0xC8	; 200
    27ac:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27b0:	8a ed       	ldi	r24, 0xDA	; 218
    27b2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27b6:	82 e0       	ldi	r24, 0x02	; 2
    27b8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27bc:	81 e8       	ldi	r24, 0x81	; 129
    27be:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27c2:	8f e8       	ldi	r24, 0x8F	; 143
    27c4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27c8:	84 ea       	ldi	r24, 0xA4	; 164
    27ca:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27ce:	86 ea       	ldi	r24, 0xA6	; 166
    27d0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27d4:	85 ed       	ldi	r24, 0xD5	; 213
    27d6:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27da:	80 e8       	ldi	r24, 0x80	; 128
    27dc:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27e0:	8d e8       	ldi	r24, 0x8D	; 141
    27e2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27e6:	84 e1       	ldi	r24, 0x14	; 20
    27e8:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27ec:	8b ed       	ldi	r24, 0xDB	; 219
    27ee:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27f2:	80 e4       	ldi	r24, 0x40	; 64
    27f4:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27f8:	89 ed       	ldi	r24, 0xD9	; 217
    27fa:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    27fe:	81 ef       	ldi	r24, 0xF1	; 241
    2800:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    2804:	8f ea       	ldi	r24, 0xAF	; 175
    2806:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
    280a:	26 96       	adiw	r28, 0x06	; 6
    280c:	cd bf       	out	0x3d, r28	; 61
    280e:	de bf       	out	0x3e, r29	; 62
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	08 95       	ret

00002816 <ssd1306_write_text>:
    2816:	ef 92       	push	r14
    2818:	ff 92       	push	r15
    281a:	0f 93       	push	r16
    281c:	1f 93       	push	r17
    281e:	cf 93       	push	r28
    2820:	dc 01       	movw	r26, r24
    2822:	ec 91       	ld	r30, X
    2824:	ee 23       	and	r30, r30
    2826:	29 f1       	breq	.+74     	; 0x2872 <ssd1306_write_text+0x5c>
    2828:	7c 01       	movw	r14, r24
    282a:	bf ef       	ldi	r27, 0xFF	; 255
    282c:	eb 1a       	sub	r14, r27
    282e:	fb 0a       	sbc	r15, r27
    2830:	ef 37       	cpi	r30, 0x7F	; 127
    2832:	d0 f4       	brcc	.+52     	; 0x2868 <ssd1306_write_text+0x52>
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e3 57       	subi	r30, 0x73	; 115
    283c:	fe 4d       	sbci	r31, 0xDE	; 222
    283e:	00 81       	ld	r16, Z
    2840:	11 81       	ldd	r17, Z+1	; 0x01
    2842:	f8 01       	movw	r30, r16
    2844:	80 81       	ld	r24, Z
    2846:	88 23       	and	r24, r24
    2848:	61 f0       	breq	.+24     	; 0x2862 <ssd1306_write_text+0x4c>
    284a:	c1 e0       	ldi	r28, 0x01	; 1
    284c:	f8 01       	movw	r30, r16
    284e:	ec 0f       	add	r30, r28
    2850:	f1 1d       	adc	r31, r1
    2852:	80 81       	ld	r24, Z
    2854:	0e 94 0b 13 	call	0x2616	; 0x2616 <ssd1306_write_data>
    2858:	cf 5f       	subi	r28, 0xFF	; 255
    285a:	d8 01       	movw	r26, r16
    285c:	9c 91       	ld	r25, X
    285e:	9c 17       	cp	r25, r28
    2860:	a8 f7       	brcc	.-22     	; 0x284c <ssd1306_write_text+0x36>
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 0b 13 	call	0x2616	; 0x2616 <ssd1306_write_data>
    2868:	d7 01       	movw	r26, r14
    286a:	ed 91       	ld	r30, X+
    286c:	7d 01       	movw	r14, r26
    286e:	e1 11       	cpse	r30, r1
    2870:	df cf       	rjmp	.-66     	; 0x2830 <ssd1306_write_text+0x1a>
    2872:	cf 91       	pop	r28
    2874:	1f 91       	pop	r17
    2876:	0f 91       	pop	r16
    2878:	ff 90       	pop	r15
    287a:	ef 90       	pop	r14
    287c:	08 95       	ret

0000287e <gfx_mono_framebuffer_put_byte>:
    287e:	20 e8       	ldi	r18, 0x80	; 128
    2880:	82 9f       	mul	r24, r18
    2882:	c0 01       	movw	r24, r0
    2884:	11 24       	eor	r1, r1
    2886:	86 0f       	add	r24, r22
    2888:	91 1d       	adc	r25, r1
    288a:	e0 91 83 93 	lds	r30, 0x9383
    288e:	f0 91 84 93 	lds	r31, 0x9384
    2892:	e8 0f       	add	r30, r24
    2894:	f9 1f       	adc	r31, r25
    2896:	40 83       	st	Z, r20
    2898:	08 95       	ret

0000289a <gfx_mono_framebuffer_get_byte>:
    289a:	20 e8       	ldi	r18, 0x80	; 128
    289c:	82 9f       	mul	r24, r18
    289e:	c0 01       	movw	r24, r0
    28a0:	11 24       	eor	r1, r1
    28a2:	86 0f       	add	r24, r22
    28a4:	91 1d       	adc	r25, r1
    28a6:	e0 91 83 93 	lds	r30, 0x9383
    28aa:	f0 91 84 93 	lds	r31, 0x9384
    28ae:	e8 0f       	add	r30, r24
    28b0:	f9 1f       	adc	r31, r25
    28b2:	80 81       	ld	r24, Z
    28b4:	08 95       	ret

000028b6 <gfx_mono_ssd1306_put_byte>:
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	18 2f       	mov	r17, r24
    28be:	d6 2f       	mov	r29, r22
    28c0:	c4 2f       	mov	r28, r20
    28c2:	21 11       	cpse	r18, r1
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <gfx_mono_ssd1306_put_byte+0x18>
    28c6:	0e 94 4d 14 	call	0x289a	; 0x289a <gfx_mono_framebuffer_get_byte>
    28ca:	8c 17       	cp	r24, r28
    28cc:	71 f0       	breq	.+28     	; 0x28ea <gfx_mono_ssd1306_put_byte+0x34>
    28ce:	4c 2f       	mov	r20, r28
    28d0:	6d 2f       	mov	r22, r29
    28d2:	81 2f       	mov	r24, r17
    28d4:	0e 94 3f 14 	call	0x287e	; 0x287e <gfx_mono_framebuffer_put_byte>
    28d8:	81 2f       	mov	r24, r17
    28da:	0e 94 2d 13 	call	0x265a	; 0x265a <ssd1306_set_page_address>
    28de:	8d 2f       	mov	r24, r29
    28e0:	0e 94 32 13 	call	0x2664	; 0x2664 <ssd1306_set_column_address>
    28e4:	8c 2f       	mov	r24, r28
    28e6:	0e 94 0b 13 	call	0x2616	; 0x2616 <ssd1306_write_data>
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	08 95       	ret

000028f2 <ds1302_arch_initialize>:
    28f2:	0f 93       	push	r16
    28f4:	07 e0       	ldi	r16, 0x07	; 7
    28f6:	20 e1       	ldi	r18, 0x10	; 16
    28f8:	40 e0       	ldi	r20, 0x00	; 0
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	81 eb       	ldi	r24, 0xB1	; 177
    28fe:	92 e2       	ldi	r25, 0x22	; 34
    2900:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <DigitalPin_Config>
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <ds1302_initialize>:
    2908:	61 e0       	ldi	r22, 0x01	; 1
    290a:	81 eb       	ldi	r24, 0xB1	; 177
    290c:	92 e2       	ldi	r25, 0x22	; 34
    290e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	81 eb       	ldi	r24, 0xB1	; 177
    2916:	92 e2       	ldi	r25, 0x22	; 34
    2918:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    291c:	61 e0       	ldi	r22, 0x01	; 1
    291e:	84 eb       	ldi	r24, 0xB4	; 180
    2920:	92 e2       	ldi	r25, 0x22	; 34
    2922:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	8e ea       	ldi	r24, 0xAE	; 174
    292a:	92 e2       	ldi	r25, 0x22	; 34
    292c:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    2930:	0e 94 79 14 	call	0x28f2	; 0x28f2 <ds1302_arch_initialize>
    2934:	08 95       	ret

00002936 <ds1302_writeByte>:
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	18 2f       	mov	r17, r24
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	81 eb       	ldi	r24, 0xB1	; 177
    2942:	92 e2       	ldi	r25, 0x22	; 34
    2944:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    2948:	c8 e0       	ldi	r28, 0x08	; 8
    294a:	d0 e0       	ldi	r29, 0x00	; 0
    294c:	10 ff       	sbrs	r17, 0
    294e:	05 c0       	rjmp	.+10     	; 0x295a <ds1302_writeByte+0x24>
    2950:	81 eb       	ldi	r24, 0xB1	; 177
    2952:	92 e2       	ldi	r25, 0x22	; 34
    2954:	0e 94 08 18 	call	0x3010	; 0x3010 <DigitalPin_SetValue>
    2958:	04 c0       	rjmp	.+8      	; 0x2962 <ds1302_writeByte+0x2c>
    295a:	81 eb       	ldi	r24, 0xB1	; 177
    295c:	92 e2       	ldi	r25, 0x22	; 34
    295e:	0e 94 18 18 	call	0x3030	; 0x3030 <DigitalPin_ClearValue>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    296a:	84 eb       	ldi	r24, 0xB4	; 180
    296c:	92 e2       	ldi	r25, 0x22	; 34
    296e:	0e 94 08 18 	call	0x3010	; 0x3010 <DigitalPin_SetValue>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    297a:	84 eb       	ldi	r24, 0xB4	; 180
    297c:	92 e2       	ldi	r25, 0x22	; 34
    297e:	0e 94 18 18 	call	0x3030	; 0x3030 <DigitalPin_ClearValue>
    2982:	16 95       	lsr	r17
    2984:	21 97       	sbiw	r28, 0x01	; 1
    2986:	11 f7       	brne	.-60     	; 0x294c <ds1302_writeByte+0x16>
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	81 eb       	ldi	r24, 0xB1	; 177
    298c:	92 e2       	ldi	r25, 0x22	; 34
    298e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	08 95       	ret

0000299a <ds1302_readByte>:
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	81 eb       	ldi	r24, 0xB1	; 177
    29a4:	92 e2       	ldi	r25, 0x22	; 34
    29a6:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
    29aa:	c0 e0       	ldi	r28, 0x00	; 0
    29ac:	d0 e0       	ldi	r29, 0x00	; 0
    29ae:	10 e0       	ldi	r17, 0x00	; 0
    29b0:	81 eb       	ldi	r24, 0xB1	; 177
    29b2:	92 e2       	ldi	r25, 0x22	; 34
    29b4:	0e 94 28 18 	call	0x3050	; 0x3050 <DigitalPin_GetValue>
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	0c 2e       	mov	r0, r28
    29be:	02 c0       	rjmp	.+4      	; 0x29c4 <ds1302_readByte+0x2a>
    29c0:	22 0f       	add	r18, r18
    29c2:	33 1f       	adc	r19, r19
    29c4:	0a 94       	dec	r0
    29c6:	e2 f7       	brpl	.-8      	; 0x29c0 <ds1302_readByte+0x26>
    29c8:	12 2b       	or	r17, r18
    29ca:	81 e0       	ldi	r24, 0x01	; 1
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    29d2:	84 eb       	ldi	r24, 0xB4	; 180
    29d4:	92 e2       	ldi	r25, 0x22	; 34
    29d6:	0e 94 08 18 	call	0x3010	; 0x3010 <DigitalPin_SetValue>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    29e2:	84 eb       	ldi	r24, 0xB4	; 180
    29e4:	92 e2       	ldi	r25, 0x22	; 34
    29e6:	0e 94 18 18 	call	0x3030	; 0x3030 <DigitalPin_ClearValue>
    29ea:	21 96       	adiw	r28, 0x01	; 1
    29ec:	c8 30       	cpi	r28, 0x08	; 8
    29ee:	d1 05       	cpc	r29, r1
    29f0:	f9 f6       	brne	.-66     	; 0x29b0 <ds1302_readByte+0x16>
    29f2:	81 2f       	mov	r24, r17
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	1f 91       	pop	r17
    29fa:	08 95       	ret

000029fc <ds1302_writeReg>:
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	d8 2f       	mov	r29, r24
    2a02:	c6 2f       	mov	r28, r22
    2a04:	80 91 d9 98 	lds	r24, 0x98D9
    2a08:	88 23       	and	r24, r24
    2a0a:	31 f0       	breq	.+12     	; 0x2a18 <ds1302_writeReg+0x1c>
    2a0c:	10 92 d9 98 	sts	0x98D9, r1
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	8e e8       	ldi	r24, 0x8E	; 142
    2a14:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2a18:	8e ea       	ldi	r24, 0xAE	; 174
    2a1a:	92 e2       	ldi	r25, 0x22	; 34
    2a1c:	0e 94 08 18 	call	0x3010	; 0x3010 <DigitalPin_SetValue>
    2a20:	84 e0       	ldi	r24, 0x04	; 4
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    2a28:	8d 2f       	mov	r24, r29
    2a2a:	0e 94 9b 14 	call	0x2936	; 0x2936 <ds1302_writeByte>
    2a2e:	8c 2f       	mov	r24, r28
    2a30:	0e 94 9b 14 	call	0x2936	; 0x2936 <ds1302_writeByte>
    2a34:	84 e0       	ldi	r24, 0x04	; 4
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    2a3c:	8e ea       	ldi	r24, 0xAE	; 174
    2a3e:	92 e2       	ldi	r25, 0x22	; 34
    2a40:	0e 94 18 18 	call	0x3030	; 0x3030 <DigitalPin_ClearValue>
    2a44:	df 91       	pop	r29
    2a46:	cf 91       	pop	r28
    2a48:	08 95       	ret

00002a4a <ds1302_setTimestamp>:
    2a4a:	ef 92       	push	r14
    2a4c:	ff 92       	push	r15
    2a4e:	0f 93       	push	r16
    2a50:	1f 93       	push	r17
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <ds1302_setTimestamp+0xe>
    2a58:	1f 92       	push	r1
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	69 83       	std	Y+1, r22	; 0x01
    2a60:	7a 83       	std	Y+2, r23	; 0x02
    2a62:	8b 83       	std	Y+3, r24	; 0x03
    2a64:	9c 83       	std	Y+4, r25	; 0x04
    2a66:	ce 01       	movw	r24, r28
    2a68:	01 96       	adiw	r24, 0x01	; 1
    2a6a:	0e 94 46 02 	call	0x48c	; 0x48c <localtime>
    2a6e:	7c 01       	movw	r14, r24
    2a70:	00 00       	nop
    2a72:	fc 01       	movw	r30, r24
    2a74:	60 81       	ld	r22, Z
    2a76:	17 e6       	ldi	r17, 0x67	; 103
    2a78:	61 02       	muls	r22, r17
    2a7a:	81 2d       	mov	r24, r1
    2a7c:	11 24       	eor	r1, r1
    2a7e:	85 95       	asr	r24
    2a80:	85 95       	asr	r24
    2a82:	67 fd       	sbrc	r22, 7
    2a84:	83 95       	inc	r24
    2a86:	28 2f       	mov	r18, r24
    2a88:	22 0f       	add	r18, r18
    2a8a:	92 2f       	mov	r25, r18
    2a8c:	99 0f       	add	r25, r25
    2a8e:	99 0f       	add	r25, r25
    2a90:	92 0f       	add	r25, r18
    2a92:	69 1b       	sub	r22, r25
    2a94:	f0 e1       	ldi	r31, 0x10	; 16
    2a96:	8f 9f       	mul	r24, r31
    2a98:	60 0d       	add	r22, r0
    2a9a:	11 24       	eor	r1, r1
    2a9c:	80 e8       	ldi	r24, 0x80	; 128
    2a9e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2aa2:	f7 01       	movw	r30, r14
    2aa4:	61 81       	ldd	r22, Z+1	; 0x01
    2aa6:	61 02       	muls	r22, r17
    2aa8:	81 2d       	mov	r24, r1
    2aaa:	11 24       	eor	r1, r1
    2aac:	85 95       	asr	r24
    2aae:	85 95       	asr	r24
    2ab0:	67 fd       	sbrc	r22, 7
    2ab2:	83 95       	inc	r24
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	22 0f       	add	r18, r18
    2ab8:	92 2f       	mov	r25, r18
    2aba:	99 0f       	add	r25, r25
    2abc:	99 0f       	add	r25, r25
    2abe:	92 0f       	add	r25, r18
    2ac0:	69 1b       	sub	r22, r25
    2ac2:	f0 e1       	ldi	r31, 0x10	; 16
    2ac4:	8f 9f       	mul	r24, r31
    2ac6:	60 0d       	add	r22, r0
    2ac8:	11 24       	eor	r1, r1
    2aca:	82 e8       	ldi	r24, 0x82	; 130
    2acc:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2ad0:	f7 01       	movw	r30, r14
    2ad2:	62 81       	ldd	r22, Z+2	; 0x02
    2ad4:	61 02       	muls	r22, r17
    2ad6:	81 2d       	mov	r24, r1
    2ad8:	11 24       	eor	r1, r1
    2ada:	85 95       	asr	r24
    2adc:	85 95       	asr	r24
    2ade:	67 fd       	sbrc	r22, 7
    2ae0:	83 95       	inc	r24
    2ae2:	28 2f       	mov	r18, r24
    2ae4:	22 0f       	add	r18, r18
    2ae6:	92 2f       	mov	r25, r18
    2ae8:	99 0f       	add	r25, r25
    2aea:	99 0f       	add	r25, r25
    2aec:	92 0f       	add	r25, r18
    2aee:	69 1b       	sub	r22, r25
    2af0:	f0 e1       	ldi	r31, 0x10	; 16
    2af2:	8f 9f       	mul	r24, r31
    2af4:	60 0d       	add	r22, r0
    2af6:	11 24       	eor	r1, r1
    2af8:	84 e8       	ldi	r24, 0x84	; 132
    2afa:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2afe:	f7 01       	movw	r30, r14
    2b00:	63 81       	ldd	r22, Z+3	; 0x03
    2b02:	61 02       	muls	r22, r17
    2b04:	11 2d       	mov	r17, r1
    2b06:	11 24       	eor	r1, r1
    2b08:	15 95       	asr	r17
    2b0a:	15 95       	asr	r17
    2b0c:	67 fd       	sbrc	r22, 7
    2b0e:	13 95       	inc	r17
    2b10:	91 2f       	mov	r25, r17
    2b12:	99 0f       	add	r25, r25
    2b14:	89 2f       	mov	r24, r25
    2b16:	88 0f       	add	r24, r24
    2b18:	88 0f       	add	r24, r24
    2b1a:	89 0f       	add	r24, r25
    2b1c:	68 1b       	sub	r22, r24
    2b1e:	f0 e1       	ldi	r31, 0x10	; 16
    2b20:	1f 9f       	mul	r17, r31
    2b22:	60 0d       	add	r22, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	86 e8       	ldi	r24, 0x86	; 134
    2b28:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2b2c:	f7 01       	movw	r30, r14
    2b2e:	85 81       	ldd	r24, Z+5	; 0x05
    2b30:	08 2e       	mov	r0, r24
    2b32:	00 0c       	add	r0, r0
    2b34:	99 0b       	sbc	r25, r25
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	0a e0       	ldi	r16, 0x0A	; 10
    2b3a:	10 e0       	ldi	r17, 0x00	; 0
    2b3c:	b8 01       	movw	r22, r16
    2b3e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
    2b42:	f0 e1       	ldi	r31, 0x10	; 16
    2b44:	6f 9f       	mul	r22, r31
    2b46:	80 0d       	add	r24, r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	68 2f       	mov	r22, r24
    2b4c:	88 e8       	ldi	r24, 0x88	; 136
    2b4e:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2b52:	f7 01       	movw	r30, r14
    2b54:	64 81       	ldd	r22, Z+4	; 0x04
    2b56:	6f 5f       	subi	r22, 0xFF	; 255
    2b58:	8a e8       	ldi	r24, 0x8A	; 138
    2b5a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2b5e:	f7 01       	movw	r30, r14
    2b60:	86 81       	ldd	r24, Z+6	; 0x06
    2b62:	97 81       	ldd	r25, Z+7	; 0x07
    2b64:	84 56       	subi	r24, 0x64	; 100
    2b66:	91 09       	sbc	r25, r1
    2b68:	b8 01       	movw	r22, r16
    2b6a:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__divmodhi4>
    2b6e:	f0 e1       	ldi	r31, 0x10	; 16
    2b70:	6f 9f       	mul	r22, r31
    2b72:	80 0d       	add	r24, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	68 2f       	mov	r22, r24
    2b78:	8c e8       	ldi	r24, 0x8C	; 140
    2b7a:	0e 94 fe 14 	call	0x29fc	; 0x29fc <ds1302_writeReg>
    2b7e:	24 96       	adiw	r28, 0x04	; 4
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	08 95       	ret

00002b92 <ds1302_getTimestamp>:
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	63 97       	sbiw	r28, 0x13	; 19
    2ba4:	cd bf       	out	0x3d, r28	; 61
    2ba6:	de bf       	out	0x3e, r29	; 62
    2ba8:	8e ea       	ldi	r24, 0xAE	; 174
    2baa:	92 e2       	ldi	r25, 0x22	; 34
    2bac:	0e 94 08 18 	call	0x3010	; 0x3010 <DigitalPin_SetValue>
    2bb0:	84 e0       	ldi	r24, 0x04	; 4
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    2bb8:	8f eb       	ldi	r24, 0xBF	; 191
    2bba:	0e 94 9b 14 	call	0x2936	; 0x2936 <ds1302_writeByte>
    2bbe:	8e 01       	movw	r16, r28
    2bc0:	0f 5f       	subi	r16, 0xFF	; 255
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	7e 01       	movw	r14, r28
    2bc6:	88 e0       	ldi	r24, 0x08	; 8
    2bc8:	e8 0e       	add	r14, r24
    2bca:	f1 1c       	adc	r15, r1
    2bcc:	0e 94 cd 14 	call	0x299a	; 0x299a <ds1302_readByte>
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	81 93       	st	Z+, r24
    2bd4:	8f 01       	movw	r16, r30
    2bd6:	ee 15       	cp	r30, r14
    2bd8:	ff 05       	cpc	r31, r15
    2bda:	c1 f7       	brne	.-16     	; 0x2bcc <ds1302_getTimestamp+0x3a>
    2bdc:	8e ea       	ldi	r24, 0xAE	; 174
    2bde:	92 e2       	ldi	r25, 0x22	; 34
    2be0:	0e 94 18 18 	call	0x3030	; 0x3030 <DigitalPin_ClearValue>
    2be4:	00 00       	nop
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	98 2f       	mov	r25, r24
    2bea:	92 95       	swap	r25
    2bec:	9f 70       	andi	r25, 0x0F	; 15
    2bee:	99 0f       	add	r25, r25
    2bf0:	29 2f       	mov	r18, r25
    2bf2:	22 0f       	add	r18, r18
    2bf4:	22 0f       	add	r18, r18
    2bf6:	92 0f       	add	r25, r18
    2bf8:	8f 70       	andi	r24, 0x0F	; 15
    2bfa:	89 0f       	add	r24, r25
    2bfc:	88 87       	std	Y+8, r24	; 0x08
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	98 2f       	mov	r25, r24
    2c02:	92 95       	swap	r25
    2c04:	9f 70       	andi	r25, 0x0F	; 15
    2c06:	99 0f       	add	r25, r25
    2c08:	29 2f       	mov	r18, r25
    2c0a:	22 0f       	add	r18, r18
    2c0c:	22 0f       	add	r18, r18
    2c0e:	92 0f       	add	r25, r18
    2c10:	8f 70       	andi	r24, 0x0F	; 15
    2c12:	89 0f       	add	r24, r25
    2c14:	89 87       	std	Y+9, r24	; 0x09
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	98 2f       	mov	r25, r24
    2c1a:	92 95       	swap	r25
    2c1c:	9f 70       	andi	r25, 0x0F	; 15
    2c1e:	99 0f       	add	r25, r25
    2c20:	29 2f       	mov	r18, r25
    2c22:	22 0f       	add	r18, r18
    2c24:	22 0f       	add	r18, r18
    2c26:	92 0f       	add	r25, r18
    2c28:	8f 70       	andi	r24, 0x0F	; 15
    2c2a:	89 0f       	add	r24, r25
    2c2c:	8a 87       	std	Y+10, r24	; 0x0a
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	98 2f       	mov	r25, r24
    2c32:	92 95       	swap	r25
    2c34:	9f 70       	andi	r25, 0x0F	; 15
    2c36:	99 0f       	add	r25, r25
    2c38:	29 2f       	mov	r18, r25
    2c3a:	22 0f       	add	r18, r18
    2c3c:	22 0f       	add	r18, r18
    2c3e:	92 0f       	add	r25, r18
    2c40:	8f 70       	andi	r24, 0x0F	; 15
    2c42:	89 0f       	add	r24, r25
    2c44:	8b 87       	std	Y+11, r24	; 0x0b
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	28 2f       	mov	r18, r24
    2c4a:	2f 70       	andi	r18, 0x0F	; 15
    2c4c:	21 50       	subi	r18, 0x01	; 1
    2c4e:	82 95       	swap	r24
    2c50:	8f 70       	andi	r24, 0x0F	; 15
    2c52:	88 0f       	add	r24, r24
    2c54:	98 2f       	mov	r25, r24
    2c56:	99 0f       	add	r25, r25
    2c58:	99 0f       	add	r25, r25
    2c5a:	89 0f       	add	r24, r25
    2c5c:	82 0f       	add	r24, r18
    2c5e:	8d 87       	std	Y+13, r24	; 0x0d
    2c60:	8f 81       	ldd	r24, Y+7	; 0x07
    2c62:	28 2f       	mov	r18, r24
    2c64:	2f 70       	andi	r18, 0x0F	; 15
    2c66:	82 95       	swap	r24
    2c68:	8f 70       	andi	r24, 0x0F	; 15
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	ac 01       	movw	r20, r24
    2c6e:	44 0f       	add	r20, r20
    2c70:	55 1f       	adc	r21, r21
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25
    2c7e:	84 0f       	add	r24, r20
    2c80:	95 1f       	adc	r25, r21
    2c82:	82 0f       	add	r24, r18
    2c84:	91 1d       	adc	r25, r1
    2c86:	8c 59       	subi	r24, 0x9C	; 156
    2c88:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8a:	8e 87       	std	Y+14, r24	; 0x0e
    2c8c:	9f 87       	std	Y+15, r25	; 0x0f
    2c8e:	00 00       	nop
    2c90:	ce 01       	movw	r24, r28
    2c92:	08 96       	adiw	r24, 0x08	; 8
    2c94:	0e 94 9d 02 	call	0x53a	; 0x53a <mktime>
    2c98:	63 96       	adiw	r28, 0x13	; 19
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	08 95       	ret

00002cac <thread_4>:
    2cac:	0e 94 84 14 	call	0x2908	; 0x2908 <ds1302_initialize>
    2cb0:	6d e8       	ldi	r22, 0x8D	; 141
    2cb2:	75 ea       	ldi	r23, 0xA5	; 165
    2cb4:	81 e2       	ldi	r24, 0x21	; 33
    2cb6:	9f e1       	ldi	r25, 0x1F	; 31
    2cb8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <ds1302_setTimestamp>
    2cbc:	0f 2e       	mov	r0, r31
    2cbe:	fc eb       	ldi	r31, 0xBC	; 188
    2cc0:	ef 2e       	mov	r14, r31
    2cc2:	f2 e2       	ldi	r31, 0x22	; 34
    2cc4:	ff 2e       	mov	r15, r31
    2cc6:	f0 2d       	mov	r31, r0
    2cc8:	c5 e7       	ldi	r28, 0x75	; 117
    2cca:	d3 e9       	ldi	r29, 0x93	; 147
    2ccc:	03 ed       	ldi	r16, 0xD3	; 211
    2cce:	12 e2       	ldi	r17, 0x22	; 34
    2cd0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <ds1302_getTimestamp>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	80 5c       	subi	r24, 0xC0	; 192
    2cda:	97 4c       	sbci	r25, 0xC7	; 199
    2cdc:	af 4f       	sbci	r26, 0xFF	; 255
    2cde:	bf 4f       	sbci	r27, 0xFF	; 255
    2ce0:	80 93 99 98 	sts	0x9899, r24
    2ce4:	90 93 9a 98 	sts	0x989A, r25
    2ce8:	a0 93 9b 98 	sts	0x989B, r26
    2cec:	b0 93 9c 98 	sts	0x989C, r27
    2cf0:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <ds1302_getTimestamp>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	80 58       	subi	r24, 0x80	; 128
    2cfa:	9c 4b       	sbci	r25, 0xBC	; 188
    2cfc:	a2 49       	sbci	r26, 0x92	; 146
    2cfe:	b7 4c       	sbci	r27, 0xC7	; 199
    2d00:	bf 93       	push	r27
    2d02:	af 93       	push	r26
    2d04:	9f 93       	push	r25
    2d06:	8f 93       	push	r24
    2d08:	ff 92       	push	r15
    2d0a:	ef 92       	push	r14
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <fprintf>
    2d14:	89 e9       	ldi	r24, 0x99	; 153
    2d16:	98 e9       	ldi	r25, 0x98	; 152
    2d18:	0e 94 28 02 	call	0x450	; 0x450 <ctime>
    2d1c:	9f 93       	push	r25
    2d1e:	8f 93       	push	r24
    2d20:	1f 93       	push	r17
    2d22:	0f 93       	push	r16
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <fprintf>
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <vTaskDelay>
    2d34:	8d b7       	in	r24, 0x3d	; 61
    2d36:	9e b7       	in	r25, 0x3e	; 62
    2d38:	0e 96       	adiw	r24, 0x0e	; 14
    2d3a:	8d bf       	out	0x3d, r24	; 61
    2d3c:	9e bf       	out	0x3e, r25	; 62
    2d3e:	c8 cf       	rjmp	.-112    	; 0x2cd0 <thread_4+0x24>

00002d40 <SetupHardware>:
}


/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
    2d44:	e0 e5       	ldi	r30, 0x50	; 80
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 e1       	ldi	r24, 0x10	; 16
    2d4a:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
    2d4c:	80 81       	ld	r24, Z
    2d4e:	80 61       	ori	r24, 0x10	; 16
    2d50:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
    2d52:	81 81       	ldd	r24, Z+1	; 0x01
    2d54:	84 ff       	sbrs	r24, 4
    2d56:	fd cf       	rjmp	.-6      	; 0x2d52 <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    2d58:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2d5a:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
    2d5c:	a0 e4       	ldi	r26, 0x40	; 64
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	94 e0       	ldi	r25, 0x04	; 4
    2d62:	28 ed       	ldi	r18, 0xD8	; 216
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	1b be       	out	0x3b, r1	; 59
    2d68:	fd 01       	movw	r30, r26
    2d6a:	24 bf       	out	0x34, r18	; 52
    2d6c:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2d6e:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d70:	8f e3       	ldi	r24, 0x3F	; 63
    2d72:	9f e1       	ldi	r25, 0x1F	; 31
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <SetupHardware+0x34>
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <SetupHardware+0x3a>
    2d7a:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
    2d7c:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
    2d7e:	e0 e5       	ldi	r30, 0x50	; 80
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	82 60       	ori	r24, 0x02	; 2
    2d86:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    2d88:	81 81       	ldd	r24, Z+1	; 0x01
    2d8a:	81 ff       	sbrs	r24, 1
    2d8c:	fd cf       	rjmp	.-6      	; 0x2d88 <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
    2d8e:	e0 e5       	ldi	r30, 0x50	; 80
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	86 81       	ldd	r24, Z+6	; 0x06
    2d94:	84 60       	ori	r24, 0x04	; 4
    2d96:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
    2d98:	a0 e6       	ldi	r26, 0x60	; 96
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	8b e1       	ldi	r24, 0x1B	; 27
    2d9e:	15 96       	adiw	r26, 0x05	; 5
    2da0:	8c 93       	st	X, r24
    2da2:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
    2da4:	87 eb       	ldi	r24, 0xB7	; 183
    2da6:	16 96       	adiw	r26, 0x06	; 6
    2da8:	8c 93       	st	X, r24
    2daa:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
    2dac:	c0 ec       	ldi	r28, 0xC0	; 192
    2dae:	d1 e0       	ldi	r29, 0x01	; 1
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
    2db4:	ed e1       	ldi	r30, 0x1D	; 29
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	e4 91       	lpm	r30, Z
    2dba:	12 96       	adiw	r26, 0x02	; 2
    2dbc:	ec 93       	st	X, r30
    2dbe:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
    2dc0:	ec e1       	ldi	r30, 0x1C	; 28
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	e4 91       	lpm	r30, Z
    2dc6:	13 96       	adiw	r26, 0x03	; 3
    2dc8:	ec 93       	st	X, r30
    2dca:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
    2dcc:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2dd2:	87 e0       	ldi	r24, 0x07	; 7
    2dd4:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
    2dd8:	e0 ee       	ldi	r30, 0xE0	; 224
    2dda:	f7 e0       	ldi	r31, 0x07	; 7
    2ddc:	83 e0       	ldi	r24, 0x03	; 3
    2dde:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
    2de0:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
    2de2:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
    2de6:	80 e4       	ldi	r24, 0x40	; 64
    2de8:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
    2dea:	e0 e6       	ldi	r30, 0x60	; 96
    2dec:	f6 e0       	ldi	r31, 0x06	; 6
    2dee:	90 e3       	ldi	r25, 0x30	; 48
    2df0:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
    2df2:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
    2df4:	84 8b       	std	Z+20, r24	; 0x14
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    2df6:	0e 94 2d 12 	call	0x245a	; 0x245a <USB_Init>
}
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	08 95       	ret

00002e00 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	DigitalPin_SetDIr(&led,1);
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	8b ea       	ldi	r24, 0xAB	; 171
    2e04:	92 e2       	ldi	r25, 0x22	; 34
    2e06:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	88 ea       	ldi	r24, 0xA8	; 168
    2e0e:	92 e2       	ldi	r25, 0x22	; 34
    2e10:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
	
	SetupHardware();
    2e14:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <SetupHardware>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    2e18:	85 e8       	ldi	r24, 0x85	; 133
    2e1a:	93 e9       	ldi	r25, 0x93	; 147
    2e1c:	80 93 83 93 	sts	0x9383, r24
    2e20:	90 93 84 93 	sts	0x9384, r25

	uint8_t page;
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
    2e24:	0e 94 85 13 	call	0x270a	; 0x270a <ssd1306_init>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2e28:	d0 e0       	ldi	r29, 0x00	; 0
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <main+0x4a>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
    2e2c:	8d 2f       	mov	r24, r29
    2e2e:	0e 94 2d 13 	call	0x265a	; 0x265a <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
    2e32:	8c 2f       	mov	r24, r28
    2e34:	0e 94 32 13 	call	0x2664	; 0x2664 <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	0e 94 0b 13 	call	0x2616	; 0x2616 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    2e3e:	cf 5f       	subi	r28, 0xFF	; 255
    2e40:	c0 38       	cpi	r28, 0x80	; 128
    2e42:	a1 f7       	brne	.-24     	; 0x2e2c <main+0x2c>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2e44:	df 5f       	subi	r29, 0xFF	; 255
    2e46:	d4 30       	cpi	r29, 0x04	; 4
    2e48:	11 f0       	breq	.+4      	; 0x2e4e <main+0x4e>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    2e4a:	c0 e0       	ldi	r28, 0x00	; 0
    2e4c:	ef cf       	rjmp	.-34     	; 0x2e2c <main+0x2c>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    2e4e:	80 e4       	ldi	r24, 0x40	; 64
    2e50:	0e 94 f5 12 	call	0x25ea	; 0x25ea <ssd1306_write_command>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2e54:	d0 e0       	ldi	r29, 0x00	; 0
    2e56:	0c c0       	rjmp	.+24     	; 0x2e70 <main+0x70>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    2e58:	21 e0       	ldi	r18, 0x01	; 1
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	6c 2f       	mov	r22, r28
    2e5e:	8d 2f       	mov	r24, r29
    2e60:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <gfx_mono_ssd1306_put_byte>
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    2e64:	cf 5f       	subi	r28, 0xFF	; 255
    2e66:	c0 38       	cpi	r28, 0x80	; 128
    2e68:	b9 f7       	brne	.-18     	; 0x2e58 <main+0x58>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2e6a:	df 5f       	subi	r29, 0xFF	; 255
    2e6c:	d4 30       	cpi	r29, 0x04	; 4
    2e6e:	11 f0       	breq	.+4      	; 0x2e74 <main+0x74>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2e70:	c0 e0       	ldi	r28, 0x00	; 0
    2e72:	f2 cf       	rjmp	.-28     	; 0x2e58 <main+0x58>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
    2e74:	00 00       	nop
	ssd1306_set_page_address(0);
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	0e 94 2d 13 	call	0x265a	; 0x265a <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    2e7c:	86 e1       	ldi	r24, 0x16	; 22
    2e7e:	93 e2       	ldi	r25, 0x23	; 35
    2e80:	0e 94 0b 14 	call	0x2816	; 0x2816 <ssd1306_write_text>


	DigitalPin_SetDIr(&led,1);
    2e84:	61 e0       	ldi	r22, 0x01	; 1
    2e86:	8b ea       	ldi	r24, 0xAB	; 171
    2e88:	92 e2       	ldi	r25, 0x22	; 34
    2e8a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2e8e:	61 e0       	ldi	r22, 0x01	; 1
    2e90:	88 ea       	ldi	r24, 0xA8	; 168
    2e92:	92 e2       	ldi	r25, 0x22	; 34
    2e94:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
    2e98:	e0 e5       	ldi	r30, 0x50	; 80
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	82 60       	ori	r24, 0x02	; 2
    2ea0:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    2ea2:	81 81       	ldd	r24, Z+1	; 0x01
    2ea4:	81 ff       	sbrs	r24, 1
    2ea6:	fd cf       	rjmp	.-6      	; 0x2ea2 <main+0xa2>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	0e 94 c6 18 	call	0x318c	; 0x318c <CLKSYS_Disable>

	char time_string[20];
	uint8_t rxData[33];


	PORTR.DIRSET = (1<<0);
    2eb4:	e0 ee       	ldi	r30, 0xE0	; 224
    2eb6:	f7 e0       	ldi	r31, 0x07	; 7
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = (1<<1);
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = (1<<4);
    2ec0:	80 e1       	ldi	r24, 0x10	; 16
    2ec2:	80 93 61 06 	sts	0x0661, r24

	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2ec6:	65 e7       	ldi	r22, 0x75	; 117
    2ec8:	73 e9       	ldi	r23, 0x93	; 147
    2eca:	8d e8       	ldi	r24, 0x8D	; 141
    2ecc:	92 e2       	ldi	r25, 0x22	; 34
    2ece:	0e 94 4b 0c 	call	0x1896	; 0x1896 <CDC_Device_CreateStream>
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
    2ed2:	78 94       	sei
	GlobalInterruptEnable();

	asm("nop");
    2ed4:	00 00       	nop

	TWI_MasterInit(&lcd03i2c,
    2ed6:	2b e9       	ldi	r18, 0x9B	; 155
    2ed8:	40 e0       	ldi	r20, 0x00	; 0
    2eda:	60 ea       	ldi	r22, 0xA0	; 160
    2edc:	74 e0       	ldi	r23, 0x04	; 4
    2ede:	85 e8       	ldi	r24, 0x85	; 133
    2ee0:	95 e9       	ldi	r25, 0x95	; 149
    2ee2:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <TWI_MasterInit>
	&TWIE,
	TWI_MASTER_INTLVL_OFF_gc,
	TWI_BAUD(F_CPU, 100000));
	
	asm("nop");
    2ee6:	00 00       	nop
// 		while(!(TWIE.MASTER.STATUS&TWI_MASTER_WIF_bm));
// 	}
	


	asm("nop");
    2ee8:	00 00       	nop





	asm("nop");
    2eea:	00 00       	nop

	
	//xTaskCreate(thread_1,(signed portCHAR *) "t1", 100, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_2,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_3,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
	xTaskCreate(thread_4,(signed portCHAR *) "t4", 500, NULL, tskIDLE_PRIORITY, NULL );
    2eec:	a1 2c       	mov	r10, r1
    2eee:	b1 2c       	mov	r11, r1
    2ef0:	c1 2c       	mov	r12, r1
    2ef2:	d1 2c       	mov	r13, r1
    2ef4:	e1 2c       	mov	r14, r1
    2ef6:	f1 2c       	mov	r15, r1
    2ef8:	00 e0       	ldi	r16, 0x00	; 0
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	44 ef       	ldi	r20, 0xF4	; 244
    2f00:	51 e0       	ldi	r21, 0x01	; 1
    2f02:	6b e1       	ldi	r22, 0x1B	; 27
    2f04:	73 e2       	ldi	r23, 0x23	; 35
    2f06:	86 e5       	ldi	r24, 0x56	; 86
    2f08:	96 e1       	ldi	r25, 0x16	; 22
    2f0a:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskGenericCreate>
	xTaskCreate(USBThread,(signed portCHAR *) "usb", 200, NULL, tskIDLE_PRIORITY, NULL );
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	48 ec       	ldi	r20, 0xC8	; 200
    2f14:	50 e0       	ldi	r21, 0x00	; 0
    2f16:	6e e1       	ldi	r22, 0x1E	; 30
    2f18:	73 e2       	ldi	r23, 0x23	; 35
    2f1a:	8a ed       	ldi	r24, 0xDA	; 218
    2f1c:	92 e1       	ldi	r25, 0x12	; 18
    2f1e:	0e 94 e7 07 	call	0xfce	; 0xfce <xTaskGenericCreate>
	

	//starting the scheduler
	vTaskStartScheduler();
    2f22:	0e 94 ef 08 	call	0x11de	; 0x11de <vTaskStartScheduler>

	for (;;)
	{
// 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
// 		USB_USBTask();
	}
    2f26:	ff cf       	rjmp	.-2      	; 0x2f26 <main+0x126>

00002f28 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2f28:	83 e0       	ldi	r24, 0x03	; 3
    2f2a:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2f2e:	80 e3       	ldi	r24, 0x30	; 48
    2f30:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2f34:	82 e0       	ldi	r24, 0x02	; 2
    2f36:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2f3a:	80 e1       	ldi	r24, 0x10	; 16
    2f3c:	80 93 65 06 	sts	0x0665, r24
    2f40:	08 95       	ret

00002f42 <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2f42:	83 e0       	ldi	r24, 0x03	; 3
    2f44:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2f48:	80 e3       	ldi	r24, 0x30	; 48
    2f4a:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2f4e:	81 e0       	ldi	r24, 0x01	; 1
    2f50:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2f54:	10 92 65 06 	sts	0x0665, r1
    2f58:	08 95       	ret

00002f5a <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    2f5a:	8d e8       	ldi	r24, 0x8D	; 141
    2f5c:	92 e2       	ldi	r25, 0x22	; 34
    2f5e:	0e 94 05 0b 	call	0x160a	; 0x160a <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    2f62:	81 11       	cpse	r24, r1
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <EVENT_USB_Device_ConfigurationChanged+0x10>
    2f66:	81 e1       	ldi	r24, 0x11	; 17
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <EVENT_USB_Device_ConfigurationChanged+0x12>
    2f6a:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2f6c:	93 e0       	ldi	r25, 0x03	; 3
    2f6e:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2f72:	90 e3       	ldi	r25, 0x30	; 48
    2f74:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2f78:	98 2f       	mov	r25, r24
    2f7a:	93 70       	andi	r25, 0x03	; 3
    2f7c:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2f80:	80 73       	andi	r24, 0x30	; 48
    2f82:	80 93 65 06 	sts	0x0665, r24
    2f86:	08 95       	ret

00002f88 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    2f88:	8d e8       	ldi	r24, 0x8D	; 141
    2f8a:	92 e2       	ldi	r25, 0x22	; 34
    2f8c:	0e 94 5f 0c 	call	0x18be	; 0x18be <CDC_Device_ProcessControlRequest>
    2f90:	08 95       	ret

00002f92 <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    2f92:	08 95       	ret

00002f94 <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    2f94:	0f 93       	push	r16
    2f96:	20 2b       	or	r18, r16
    2f98:	61 11       	cpse	r22, r1
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <DigitalPin_Config+0xc>
    2f9c:	00 e0       	ldi	r16, 0x00	; 0
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <DigitalPin_Config+0xe>
    2fa0:	00 e8       	ldi	r16, 0x80	; 128
    2fa2:	20 2b       	or	r18, r16
    2fa4:	41 11       	cpse	r20, r1
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <DigitalPin_Config+0x18>
    2fa8:	00 e0       	ldi	r16, 0x00	; 0
    2faa:	01 c0       	rjmp	.+2      	; 0x2fae <DigitalPin_Config+0x1a>
    2fac:	00 e4       	ldi	r16, 0x40	; 64
    2fae:	20 2b       	or	r18, r16
    2fb0:	3f b7       	in	r19, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	12 96       	adiw	r26, 0x02	; 2
    2fb8:	4c 91       	ld	r20, X
    2fba:	12 97       	sbiw	r26, 0x02	; 2
    2fbc:	40 93 b0 00 	sts	0x00B0, r20
    2fc0:	ed 91       	ld	r30, X+
    2fc2:	fc 91       	ld	r31, X
    2fc4:	20 8b       	std	Z+16, r18	; 0x10
    2fc6:	3f bf       	out	0x3f, r19	; 63
    2fc8:	0f 91       	pop	r16
    2fca:	08 95       	ret

00002fcc <DigitalPin_SetDIr>:
    2fcc:	66 23       	and	r22, r22
    2fce:	81 f0       	breq	.+32     	; 0x2ff0 <DigitalPin_SetDIr+0x24>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	11 97       	sbiw	r26, 0x01	; 1
    2fd8:	21 e0       	ldi	r18, 0x01	; 1
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	a9 01       	movw	r20, r18
    2fde:	12 96       	adiw	r26, 0x02	; 2
    2fe0:	0c 90       	ld	r0, X
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <DigitalPin_SetDIr+0x1c>
    2fe4:	44 0f       	add	r20, r20
    2fe6:	55 1f       	adc	r21, r21
    2fe8:	0a 94       	dec	r0
    2fea:	e2 f7       	brpl	.-8      	; 0x2fe4 <DigitalPin_SetDIr+0x18>
    2fec:	41 83       	std	Z+1, r20	; 0x01
    2fee:	08 95       	ret
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	ed 91       	ld	r30, X+
    2ff4:	fc 91       	ld	r31, X
    2ff6:	11 97       	sbiw	r26, 0x01	; 1
    2ff8:	21 e0       	ldi	r18, 0x01	; 1
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	a9 01       	movw	r20, r18
    2ffe:	12 96       	adiw	r26, 0x02	; 2
    3000:	0c 90       	ld	r0, X
    3002:	02 c0       	rjmp	.+4      	; 0x3008 <DigitalPin_SetDIr+0x3c>
    3004:	44 0f       	add	r20, r20
    3006:	55 1f       	adc	r21, r21
    3008:	0a 94       	dec	r0
    300a:	e2 f7       	brpl	.-8      	; 0x3004 <DigitalPin_SetDIr+0x38>
    300c:	42 83       	std	Z+2, r20	; 0x02
    300e:	08 95       	ret

00003010 <DigitalPin_SetValue>:
    3010:	dc 01       	movw	r26, r24
    3012:	ed 91       	ld	r30, X+
    3014:	fc 91       	ld	r31, X
    3016:	11 97       	sbiw	r26, 0x01	; 1
    3018:	21 e0       	ldi	r18, 0x01	; 1
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	a9 01       	movw	r20, r18
    301e:	12 96       	adiw	r26, 0x02	; 2
    3020:	0c 90       	ld	r0, X
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <DigitalPin_SetValue+0x18>
    3024:	44 0f       	add	r20, r20
    3026:	55 1f       	adc	r21, r21
    3028:	0a 94       	dec	r0
    302a:	e2 f7       	brpl	.-8      	; 0x3024 <DigitalPin_SetValue+0x14>
    302c:	45 83       	std	Z+5, r20	; 0x05
    302e:	08 95       	ret

00003030 <DigitalPin_ClearValue>:
    3030:	dc 01       	movw	r26, r24
    3032:	ed 91       	ld	r30, X+
    3034:	fc 91       	ld	r31, X
    3036:	11 97       	sbiw	r26, 0x01	; 1
    3038:	21 e0       	ldi	r18, 0x01	; 1
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	a9 01       	movw	r20, r18
    303e:	12 96       	adiw	r26, 0x02	; 2
    3040:	0c 90       	ld	r0, X
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <DigitalPin_ClearValue+0x18>
    3044:	44 0f       	add	r20, r20
    3046:	55 1f       	adc	r21, r21
    3048:	0a 94       	dec	r0
    304a:	e2 f7       	brpl	.-8      	; 0x3044 <DigitalPin_ClearValue+0x14>
    304c:	46 83       	std	Z+6, r20	; 0x06
    304e:	08 95       	ret

00003050 <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    3050:	dc 01       	movw	r26, r24
    3052:	ed 91       	ld	r30, X+
    3054:	fc 91       	ld	r31, X
    3056:	11 97       	sbiw	r26, 0x01	; 1
    3058:	20 85       	ldd	r18, Z+8	; 0x08
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	f9 01       	movw	r30, r18
    305e:	12 96       	adiw	r26, 0x02	; 2
    3060:	0c 90       	ld	r0, X
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <DigitalPin_GetValue+0x18>
    3064:	f5 95       	asr	r31
    3066:	e7 95       	ror	r30
    3068:	0a 94       	dec	r0
    306a:	e2 f7       	brpl	.-8      	; 0x3064 <DigitalPin_GetValue+0x14>
    306c:	cf 01       	movw	r24, r30
	else pinValue = 0;
	return pinValue;
    306e:	81 70       	andi	r24, 0x01	; 1
    3070:	08 95       	ret

00003072 <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    3072:	1f 92       	push	r1
    3074:	0f 92       	push	r0
    3076:	0f b6       	in	r0, 0x3f	; 63
    3078:	0f 92       	push	r0
    307a:	11 24       	eor	r1, r1

}
    307c:	0f 90       	pop	r0
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	0f 90       	pop	r0
    3082:	1f 90       	pop	r1
    3084:	18 95       	reti

00003086 <__vector_27>:

ISR(USARTC0_TXC_vect){
    3086:	1f 92       	push	r1
    3088:	0f 92       	push	r0
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	0f 92       	push	r0
    308e:	11 24       	eor	r1, r1
	
}
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63
    3094:	0f 90       	pop	r0
    3096:	1f 90       	pop	r1
    3098:	18 95       	reti

0000309a <__vector_26>:

ISR(USARTC0_DRE_vect){
    309a:	1f 92       	push	r1
    309c:	0f 92       	push	r0
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	0f 92       	push	r0
    30a2:	11 24       	eor	r1, r1
	
}
    30a4:	0f 90       	pop	r0
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	0f 90       	pop	r0
    30aa:	1f 90       	pop	r1
    30ac:	18 95       	reti

000030ae <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    30ae:	1f 92       	push	r1
    30b0:	0f 92       	push	r0
    30b2:	0f b6       	in	r0, 0x3f	; 63
    30b4:	0f 92       	push	r0
    30b6:	11 24       	eor	r1, r1
	
}
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <__vector_30>:

ISR(USARTC1_TXC_vect){
    30c2:	1f 92       	push	r1
    30c4:	0f 92       	push	r0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	0f 92       	push	r0
    30ca:	11 24       	eor	r1, r1
	
}
    30cc:	0f 90       	pop	r0
    30ce:	0f be       	out	0x3f, r0	; 63
    30d0:	0f 90       	pop	r0
    30d2:	1f 90       	pop	r1
    30d4:	18 95       	reti

000030d6 <__vector_29>:

ISR(USARTC1_DRE_vect){
    30d6:	1f 92       	push	r1
    30d8:	0f 92       	push	r0
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	0f 92       	push	r0
    30de:	11 24       	eor	r1, r1
	
}
    30e0:	0f 90       	pop	r0
    30e2:	0f be       	out	0x3f, r0	; 63
    30e4:	0f 90       	pop	r0
    30e6:	1f 90       	pop	r1
    30e8:	18 95       	reti

000030ea <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    30ea:	1f 92       	push	r1
    30ec:	0f 92       	push	r0
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	0f 92       	push	r0
    30f2:	11 24       	eor	r1, r1
	
}
    30f4:	0f 90       	pop	r0
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	0f 90       	pop	r0
    30fa:	1f 90       	pop	r1
    30fc:	18 95       	reti

000030fe <__vector_90>:

ISR(USARTD0_TXC_vect){
    30fe:	1f 92       	push	r1
    3100:	0f 92       	push	r0
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	0f 92       	push	r0
    3106:	11 24       	eor	r1, r1
	
}
    3108:	0f 90       	pop	r0
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	0f 90       	pop	r0
    310e:	1f 90       	pop	r1
    3110:	18 95       	reti

00003112 <__vector_89>:

ISR(USARTD0_DRE_vect){
    3112:	1f 92       	push	r1
    3114:	0f 92       	push	r0
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	0f 92       	push	r0
    311a:	11 24       	eor	r1, r1
	
}
    311c:	0f 90       	pop	r0
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	0f 90       	pop	r0
    3122:	1f 90       	pop	r1
    3124:	18 95       	reti

00003126 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    3126:	1f 92       	push	r1
    3128:	0f 92       	push	r0
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	0f 92       	push	r0
    312e:	11 24       	eor	r1, r1
	
}
    3130:	0f 90       	pop	r0
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	0f 90       	pop	r0
    3136:	1f 90       	pop	r1
    3138:	18 95       	reti

0000313a <__vector_60>:

ISR(USARTE0_TXC_vect){
    313a:	1f 92       	push	r1
    313c:	0f 92       	push	r0
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	0f 92       	push	r0
    3142:	11 24       	eor	r1, r1
	
}
    3144:	0f 90       	pop	r0
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	0f 90       	pop	r0
    314a:	1f 90       	pop	r1
    314c:	18 95       	reti

0000314e <__vector_59>:

ISR(USARTE0_DRE_vect){
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
	
}
    3158:	0f 90       	pop	r0
    315a:	0f be       	out	0x3f, r0	; 63
    315c:	0f 90       	pop	r0
    315e:	1f 90       	pop	r1
    3160:	18 95       	reti

00003162 <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    3162:	0f 93       	push	r16
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	1f 92       	push	r1
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	2f b7       	in	r18, 0x3f	; 63
    3170:	29 83       	std	Y+1, r18	; 0x01
    3172:	f8 94       	cli
    3174:	1b be       	out	0x3b, r1	; 59
    3176:	fc 01       	movw	r30, r24
    3178:	08 ed       	ldi	r16, 0xD8	; 216
    317a:	04 bf       	out	0x34, r16	; 52
    317c:	60 83       	st	Z, r22
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	8f bf       	out	0x3f, r24	; 63
    3182:	0f 90       	pop	r0
    3184:	df 91       	pop	r29
    3186:	cf 91       	pop	r28
    3188:	0f 91       	pop	r16
    318a:	08 95       	ret

0000318c <CLKSYS_Disable>:
    318c:	e0 e5       	ldi	r30, 0x50	; 80
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	90 81       	ld	r25, Z
    3192:	28 2f       	mov	r18, r24
    3194:	20 95       	com	r18
    3196:	92 23       	and	r25, r18
    3198:	90 83       	st	Z, r25
    319a:	90 81       	ld	r25, Z
    319c:	89 23       	and	r24, r25
    319e:	08 95       	ret

000031a0 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    31a8:	00 e4       	ldi	r16, 0x40	; 64
    31aa:	10 e0       	ldi	r17, 0x00	; 0
    31ac:	f8 01       	movw	r30, r16
    31ae:	60 81       	ld	r22, Z
    31b0:	68 7f       	andi	r22, 0xF8	; 248
    31b2:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    31b4:	80 e4       	ldi	r24, 0x40	; 64
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	0e 94 b1 18 	call	0x3162	; 0x3162 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    31bc:	f8 01       	movw	r30, r16
    31be:	80 81       	ld	r24, Z
	return clkCtrl;
}
    31c0:	8c 23       	and	r24, r28
    31c2:	cf 91       	pop	r28
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	08 95       	ret

000031ca <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    31ca:	fc 01       	movw	r30, r24
    31cc:	90 81       	ld	r25, Z
    31ce:	90 7f       	andi	r25, 0xF0	; 240
    31d0:	69 2b       	or	r22, r25
    31d2:	60 83       	st	Z, r22
    31d4:	08 95       	ret

000031d6 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    31d6:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    31d8:	96 81       	ldd	r25, Z+6	; 0x06
    31da:	9c 7f       	andi	r25, 0xFC	; 252
    31dc:	69 2b       	or	r22, r25
    31de:	66 83       	std	Z+6, r22	; 0x06
    31e0:	08 95       	ret

000031e2 <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    31e2:	fc 01       	movw	r30, r24
	twi->interface = module;
    31e4:	60 83       	st	Z, r22
    31e6:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    31e8:	48 63       	ori	r20, 0x38	; 56
    31ea:	db 01       	movw	r26, r22
    31ec:	11 96       	adiw	r26, 0x01	; 1
    31ee:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    31f0:	a0 81       	ld	r26, Z
    31f2:	b1 81       	ldd	r27, Z+1	; 0x01
    31f4:	15 96       	adiw	r26, 0x05	; 5
    31f6:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    31f8:	01 90       	ld	r0, Z+
    31fa:	f0 81       	ld	r31, Z
    31fc:	e0 2d       	mov	r30, r0
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	84 83       	std	Z+4, r24	; 0x04
    3202:	08 95       	ret

00003204 <vfprintf>:
    3204:	2f 92       	push	r2
    3206:	3f 92       	push	r3
    3208:	4f 92       	push	r4
    320a:	5f 92       	push	r5
    320c:	6f 92       	push	r6
    320e:	7f 92       	push	r7
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	cf 92       	push	r12
    321a:	df 92       	push	r13
    321c:	ef 92       	push	r14
    321e:	ff 92       	push	r15
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	63 97       	sbiw	r28, 0x13	; 19
    322e:	cd bf       	out	0x3d, r28	; 61
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	6c 01       	movw	r12, r24
    3234:	4b 01       	movw	r8, r22
    3236:	2a 01       	movw	r4, r20
    3238:	fc 01       	movw	r30, r24
    323a:	16 82       	std	Z+6, r1	; 0x06
    323c:	17 82       	std	Z+7, r1	; 0x07
    323e:	83 81       	ldd	r24, Z+3	; 0x03
    3240:	81 ff       	sbrs	r24, 1
    3242:	43 c3       	rjmp	.+1670   	; 0x38ca <vfprintf+0x6c6>
    3244:	ae 01       	movw	r20, r28
    3246:	4f 5f       	subi	r20, 0xFF	; 255
    3248:	5f 4f       	sbci	r21, 0xFF	; 255
    324a:	3a 01       	movw	r6, r20
    324c:	f6 01       	movw	r30, r12
    324e:	93 81       	ldd	r25, Z+3	; 0x03
    3250:	f4 01       	movw	r30, r8
    3252:	93 fd       	sbrc	r25, 3
    3254:	85 91       	lpm	r24, Z+
    3256:	93 ff       	sbrs	r25, 3
    3258:	81 91       	ld	r24, Z+
    325a:	4f 01       	movw	r8, r30
    325c:	88 23       	and	r24, r24
    325e:	09 f4       	brne	.+2      	; 0x3262 <vfprintf+0x5e>
    3260:	30 c3       	rjmp	.+1632   	; 0x38c2 <vfprintf+0x6be>
    3262:	85 32       	cpi	r24, 0x25	; 37
    3264:	39 f4       	brne	.+14     	; 0x3274 <vfprintf+0x70>
    3266:	93 fd       	sbrc	r25, 3
    3268:	85 91       	lpm	r24, Z+
    326a:	93 ff       	sbrs	r25, 3
    326c:	81 91       	ld	r24, Z+
    326e:	4f 01       	movw	r8, r30
    3270:	85 32       	cpi	r24, 0x25	; 37
    3272:	39 f4       	brne	.+14     	; 0x3282 <vfprintf+0x7e>
    3274:	b6 01       	movw	r22, r12
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    327c:	52 01       	movw	r10, r4
    327e:	25 01       	movw	r4, r10
    3280:	e5 cf       	rjmp	.-54     	; 0x324c <vfprintf+0x48>
    3282:	10 e0       	ldi	r17, 0x00	; 0
    3284:	f1 2c       	mov	r15, r1
    3286:	20 e0       	ldi	r18, 0x00	; 0
    3288:	20 32       	cpi	r18, 0x20	; 32
    328a:	a0 f4       	brcc	.+40     	; 0x32b4 <vfprintf+0xb0>
    328c:	8b 32       	cpi	r24, 0x2B	; 43
    328e:	69 f0       	breq	.+26     	; 0x32aa <vfprintf+0xa6>
    3290:	30 f4       	brcc	.+12     	; 0x329e <vfprintf+0x9a>
    3292:	80 32       	cpi	r24, 0x20	; 32
    3294:	59 f0       	breq	.+22     	; 0x32ac <vfprintf+0xa8>
    3296:	83 32       	cpi	r24, 0x23	; 35
    3298:	69 f4       	brne	.+26     	; 0x32b4 <vfprintf+0xb0>
    329a:	20 61       	ori	r18, 0x10	; 16
    329c:	2c c0       	rjmp	.+88     	; 0x32f6 <vfprintf+0xf2>
    329e:	8d 32       	cpi	r24, 0x2D	; 45
    32a0:	39 f0       	breq	.+14     	; 0x32b0 <vfprintf+0xac>
    32a2:	80 33       	cpi	r24, 0x30	; 48
    32a4:	39 f4       	brne	.+14     	; 0x32b4 <vfprintf+0xb0>
    32a6:	21 60       	ori	r18, 0x01	; 1
    32a8:	26 c0       	rjmp	.+76     	; 0x32f6 <vfprintf+0xf2>
    32aa:	22 60       	ori	r18, 0x02	; 2
    32ac:	24 60       	ori	r18, 0x04	; 4
    32ae:	23 c0       	rjmp	.+70     	; 0x32f6 <vfprintf+0xf2>
    32b0:	28 60       	ori	r18, 0x08	; 8
    32b2:	21 c0       	rjmp	.+66     	; 0x32f6 <vfprintf+0xf2>
    32b4:	27 fd       	sbrc	r18, 7
    32b6:	27 c0       	rjmp	.+78     	; 0x3306 <vfprintf+0x102>
    32b8:	30 ed       	ldi	r19, 0xD0	; 208
    32ba:	38 0f       	add	r19, r24
    32bc:	3a 30       	cpi	r19, 0x0A	; 10
    32be:	78 f4       	brcc	.+30     	; 0x32de <vfprintf+0xda>
    32c0:	26 ff       	sbrs	r18, 6
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <vfprintf+0xcc>
    32c4:	fa e0       	ldi	r31, 0x0A	; 10
    32c6:	1f 9f       	mul	r17, r31
    32c8:	30 0d       	add	r19, r0
    32ca:	11 24       	eor	r1, r1
    32cc:	13 2f       	mov	r17, r19
    32ce:	13 c0       	rjmp	.+38     	; 0x32f6 <vfprintf+0xf2>
    32d0:	4a e0       	ldi	r20, 0x0A	; 10
    32d2:	f4 9e       	mul	r15, r20
    32d4:	30 0d       	add	r19, r0
    32d6:	11 24       	eor	r1, r1
    32d8:	f3 2e       	mov	r15, r19
    32da:	20 62       	ori	r18, 0x20	; 32
    32dc:	0c c0       	rjmp	.+24     	; 0x32f6 <vfprintf+0xf2>
    32de:	8e 32       	cpi	r24, 0x2E	; 46
    32e0:	21 f4       	brne	.+8      	; 0x32ea <vfprintf+0xe6>
    32e2:	26 fd       	sbrc	r18, 6
    32e4:	ee c2       	rjmp	.+1500   	; 0x38c2 <vfprintf+0x6be>
    32e6:	20 64       	ori	r18, 0x40	; 64
    32e8:	06 c0       	rjmp	.+12     	; 0x32f6 <vfprintf+0xf2>
    32ea:	8c 36       	cpi	r24, 0x6C	; 108
    32ec:	11 f4       	brne	.+4      	; 0x32f2 <vfprintf+0xee>
    32ee:	20 68       	ori	r18, 0x80	; 128
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <vfprintf+0xf2>
    32f2:	88 36       	cpi	r24, 0x68	; 104
    32f4:	41 f4       	brne	.+16     	; 0x3306 <vfprintf+0x102>
    32f6:	f4 01       	movw	r30, r8
    32f8:	93 fd       	sbrc	r25, 3
    32fa:	85 91       	lpm	r24, Z+
    32fc:	93 ff       	sbrs	r25, 3
    32fe:	81 91       	ld	r24, Z+
    3300:	4f 01       	movw	r8, r30
    3302:	81 11       	cpse	r24, r1
    3304:	c1 cf       	rjmp	.-126    	; 0x3288 <vfprintf+0x84>
    3306:	9b eb       	ldi	r25, 0xBB	; 187
    3308:	98 0f       	add	r25, r24
    330a:	93 30       	cpi	r25, 0x03	; 3
    330c:	18 f4       	brcc	.+6      	; 0x3314 <vfprintf+0x110>
    330e:	20 61       	ori	r18, 0x10	; 16
    3310:	80 5e       	subi	r24, 0xE0	; 224
    3312:	06 c0       	rjmp	.+12     	; 0x3320 <vfprintf+0x11c>
    3314:	9b e9       	ldi	r25, 0x9B	; 155
    3316:	98 0f       	add	r25, r24
    3318:	93 30       	cpi	r25, 0x03	; 3
    331a:	08 f0       	brcs	.+2      	; 0x331e <vfprintf+0x11a>
    331c:	71 c1       	rjmp	.+738    	; 0x3600 <vfprintf+0x3fc>
    331e:	2f 7e       	andi	r18, 0xEF	; 239
    3320:	26 ff       	sbrs	r18, 6
    3322:	16 e0       	ldi	r17, 0x06	; 6
    3324:	2f 73       	andi	r18, 0x3F	; 63
    3326:	32 2e       	mov	r3, r18
    3328:	85 36       	cpi	r24, 0x65	; 101
    332a:	19 f4       	brne	.+6      	; 0x3332 <vfprintf+0x12e>
    332c:	20 64       	ori	r18, 0x40	; 64
    332e:	32 2e       	mov	r3, r18
    3330:	08 c0       	rjmp	.+16     	; 0x3342 <vfprintf+0x13e>
    3332:	86 36       	cpi	r24, 0x66	; 102
    3334:	21 f4       	brne	.+8      	; 0x333e <vfprintf+0x13a>
    3336:	f2 2f       	mov	r31, r18
    3338:	f0 68       	ori	r31, 0x80	; 128
    333a:	3f 2e       	mov	r3, r31
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vfprintf+0x13e>
    333e:	11 11       	cpse	r17, r1
    3340:	11 50       	subi	r17, 0x01	; 1
    3342:	37 fe       	sbrs	r3, 7
    3344:	07 c0       	rjmp	.+14     	; 0x3354 <vfprintf+0x150>
    3346:	1c 33       	cpi	r17, 0x3C	; 60
    3348:	50 f4       	brcc	.+20     	; 0x335e <vfprintf+0x15a>
    334a:	ee 24       	eor	r14, r14
    334c:	e3 94       	inc	r14
    334e:	e1 0e       	add	r14, r17
    3350:	27 e0       	ldi	r18, 0x07	; 7
    3352:	0b c0       	rjmp	.+22     	; 0x336a <vfprintf+0x166>
    3354:	18 30       	cpi	r17, 0x08	; 8
    3356:	38 f0       	brcs	.+14     	; 0x3366 <vfprintf+0x162>
    3358:	27 e0       	ldi	r18, 0x07	; 7
    335a:	17 e0       	ldi	r17, 0x07	; 7
    335c:	05 c0       	rjmp	.+10     	; 0x3368 <vfprintf+0x164>
    335e:	27 e0       	ldi	r18, 0x07	; 7
    3360:	4c e3       	ldi	r20, 0x3C	; 60
    3362:	e4 2e       	mov	r14, r20
    3364:	02 c0       	rjmp	.+4      	; 0x336a <vfprintf+0x166>
    3366:	21 2f       	mov	r18, r17
    3368:	e1 2c       	mov	r14, r1
    336a:	52 01       	movw	r10, r4
    336c:	44 e0       	ldi	r20, 0x04	; 4
    336e:	a4 0e       	add	r10, r20
    3370:	b1 1c       	adc	r11, r1
    3372:	f2 01       	movw	r30, r4
    3374:	60 81       	ld	r22, Z
    3376:	71 81       	ldd	r23, Z+1	; 0x01
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	93 81       	ldd	r25, Z+3	; 0x03
    337c:	0e 2d       	mov	r16, r14
    337e:	a3 01       	movw	r20, r6
    3380:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <__ftoa_engine>
    3384:	2c 01       	movw	r4, r24
    3386:	09 81       	ldd	r16, Y+1	; 0x01
    3388:	00 ff       	sbrs	r16, 0
    338a:	02 c0       	rjmp	.+4      	; 0x3390 <vfprintf+0x18c>
    338c:	03 ff       	sbrs	r16, 3
    338e:	07 c0       	rjmp	.+14     	; 0x339e <vfprintf+0x19a>
    3390:	31 fc       	sbrc	r3, 1
    3392:	08 c0       	rjmp	.+16     	; 0x33a4 <vfprintf+0x1a0>
    3394:	32 fe       	sbrs	r3, 2
    3396:	09 c0       	rjmp	.+18     	; 0x33aa <vfprintf+0x1a6>
    3398:	30 e2       	ldi	r19, 0x20	; 32
    339a:	23 2e       	mov	r2, r19
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <vfprintf+0x1a8>
    339e:	2d e2       	ldi	r18, 0x2D	; 45
    33a0:	22 2e       	mov	r2, r18
    33a2:	04 c0       	rjmp	.+8      	; 0x33ac <vfprintf+0x1a8>
    33a4:	9b e2       	ldi	r25, 0x2B	; 43
    33a6:	29 2e       	mov	r2, r25
    33a8:	01 c0       	rjmp	.+2      	; 0x33ac <vfprintf+0x1a8>
    33aa:	21 2c       	mov	r2, r1
    33ac:	80 2f       	mov	r24, r16
    33ae:	8c 70       	andi	r24, 0x0C	; 12
    33b0:	19 f0       	breq	.+6      	; 0x33b8 <vfprintf+0x1b4>
    33b2:	21 10       	cpse	r2, r1
    33b4:	68 c2       	rjmp	.+1232   	; 0x3886 <vfprintf+0x682>
    33b6:	a8 c2       	rjmp	.+1360   	; 0x3908 <vfprintf+0x704>
    33b8:	37 fe       	sbrs	r3, 7
    33ba:	0f c0       	rjmp	.+30     	; 0x33da <vfprintf+0x1d6>
    33bc:	e4 0c       	add	r14, r4
    33be:	04 ff       	sbrs	r16, 4
    33c0:	04 c0       	rjmp	.+8      	; 0x33ca <vfprintf+0x1c6>
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	81 33       	cpi	r24, 0x31	; 49
    33c6:	09 f4       	brne	.+2      	; 0x33ca <vfprintf+0x1c6>
    33c8:	ea 94       	dec	r14
    33ca:	1e 14       	cp	r1, r14
    33cc:	74 f5       	brge	.+92     	; 0x342a <vfprintf+0x226>
    33ce:	f8 e0       	ldi	r31, 0x08	; 8
    33d0:	fe 15       	cp	r31, r14
    33d2:	78 f5       	brcc	.+94     	; 0x3432 <vfprintf+0x22e>
    33d4:	88 e0       	ldi	r24, 0x08	; 8
    33d6:	e8 2e       	mov	r14, r24
    33d8:	2c c0       	rjmp	.+88     	; 0x3432 <vfprintf+0x22e>
    33da:	36 fc       	sbrc	r3, 6
    33dc:	2a c0       	rjmp	.+84     	; 0x3432 <vfprintf+0x22e>
    33de:	81 2f       	mov	r24, r17
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	84 15       	cp	r24, r4
    33e4:	95 05       	cpc	r25, r5
    33e6:	9c f0       	brlt	.+38     	; 0x340e <vfprintf+0x20a>
    33e8:	2c ef       	ldi	r18, 0xFC	; 252
    33ea:	42 16       	cp	r4, r18
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	52 06       	cpc	r5, r18
    33f0:	74 f0       	brlt	.+28     	; 0x340e <vfprintf+0x20a>
    33f2:	43 2d       	mov	r20, r3
    33f4:	40 68       	ori	r20, 0x80	; 128
    33f6:	34 2e       	mov	r3, r20
    33f8:	0a c0       	rjmp	.+20     	; 0x340e <vfprintf+0x20a>
    33fa:	e2 e0       	ldi	r30, 0x02	; 2
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	ec 0f       	add	r30, r28
    3400:	fd 1f       	adc	r31, r29
    3402:	e1 0f       	add	r30, r17
    3404:	f1 1d       	adc	r31, r1
    3406:	80 81       	ld	r24, Z
    3408:	80 33       	cpi	r24, 0x30	; 48
    340a:	19 f4       	brne	.+6      	; 0x3412 <vfprintf+0x20e>
    340c:	11 50       	subi	r17, 0x01	; 1
    340e:	11 11       	cpse	r17, r1
    3410:	f4 cf       	rjmp	.-24     	; 0x33fa <vfprintf+0x1f6>
    3412:	37 fe       	sbrs	r3, 7
    3414:	0e c0       	rjmp	.+28     	; 0x3432 <vfprintf+0x22e>
    3416:	ee 24       	eor	r14, r14
    3418:	e3 94       	inc	r14
    341a:	e1 0e       	add	r14, r17
    341c:	81 2f       	mov	r24, r17
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	48 16       	cp	r4, r24
    3422:	59 06       	cpc	r5, r25
    3424:	2c f4       	brge	.+10     	; 0x3430 <vfprintf+0x22c>
    3426:	14 19       	sub	r17, r4
    3428:	04 c0       	rjmp	.+8      	; 0x3432 <vfprintf+0x22e>
    342a:	ee 24       	eor	r14, r14
    342c:	e3 94       	inc	r14
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <vfprintf+0x22e>
    3430:	10 e0       	ldi	r17, 0x00	; 0
    3432:	37 fe       	sbrs	r3, 7
    3434:	06 c0       	rjmp	.+12     	; 0x3442 <vfprintf+0x23e>
    3436:	14 14       	cp	r1, r4
    3438:	15 04       	cpc	r1, r5
    343a:	34 f4       	brge	.+12     	; 0x3448 <vfprintf+0x244>
    343c:	c2 01       	movw	r24, r4
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	05 c0       	rjmp	.+10     	; 0x344c <vfprintf+0x248>
    3442:	85 e0       	ldi	r24, 0x05	; 5
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 c0       	rjmp	.+4      	; 0x344c <vfprintf+0x248>
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	21 10       	cpse	r2, r1
    344e:	01 96       	adiw	r24, 0x01	; 1
    3450:	11 23       	and	r17, r17
    3452:	31 f0       	breq	.+12     	; 0x3460 <vfprintf+0x25c>
    3454:	21 2f       	mov	r18, r17
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	82 0f       	add	r24, r18
    345e:	93 1f       	adc	r25, r19
    3460:	2f 2d       	mov	r18, r15
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	82 17       	cp	r24, r18
    3466:	93 07       	cpc	r25, r19
    3468:	14 f4       	brge	.+4      	; 0x346e <vfprintf+0x26a>
    346a:	f8 1a       	sub	r15, r24
    346c:	01 c0       	rjmp	.+2      	; 0x3470 <vfprintf+0x26c>
    346e:	f1 2c       	mov	r15, r1
    3470:	83 2d       	mov	r24, r3
    3472:	89 70       	andi	r24, 0x09	; 9
    3474:	49 f4       	brne	.+18     	; 0x3488 <vfprintf+0x284>
    3476:	ff 20       	and	r15, r15
    3478:	39 f0       	breq	.+14     	; 0x3488 <vfprintf+0x284>
    347a:	b6 01       	movw	r22, r12
    347c:	80 e2       	ldi	r24, 0x20	; 32
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3484:	fa 94       	dec	r15
    3486:	f7 cf       	rjmp	.-18     	; 0x3476 <vfprintf+0x272>
    3488:	22 20       	and	r2, r2
    348a:	29 f0       	breq	.+10     	; 0x3496 <vfprintf+0x292>
    348c:	b6 01       	movw	r22, r12
    348e:	82 2d       	mov	r24, r2
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3496:	33 fc       	sbrc	r3, 3
    3498:	09 c0       	rjmp	.+18     	; 0x34ac <vfprintf+0x2a8>
    349a:	ff 20       	and	r15, r15
    349c:	39 f0       	breq	.+14     	; 0x34ac <vfprintf+0x2a8>
    349e:	b6 01       	movw	r22, r12
    34a0:	80 e3       	ldi	r24, 0x30	; 48
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    34a8:	fa 94       	dec	r15
    34aa:	f7 cf       	rjmp	.-18     	; 0x349a <vfprintf+0x296>
    34ac:	37 fe       	sbrs	r3, 7
    34ae:	5a c0       	rjmp	.+180    	; 0x3564 <vfprintf+0x360>
    34b0:	94 2d       	mov	r25, r4
    34b2:	85 2d       	mov	r24, r5
    34b4:	57 fe       	sbrs	r5, 7
    34b6:	02 c0       	rjmp	.+4      	; 0x34bc <vfprintf+0x2b8>
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	29 2e       	mov	r2, r25
    34be:	38 2e       	mov	r3, r24
    34c0:	20 e0       	ldi	r18, 0x00	; 0
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	a2 01       	movw	r20, r4
    34c6:	4e 19       	sub	r20, r14
    34c8:	51 09       	sbc	r21, r1
    34ca:	4c 87       	std	Y+12, r20	; 0x0c
    34cc:	5d 87       	std	Y+13, r21	; 0x0d
    34ce:	a2 01       	movw	r20, r4
    34d0:	42 19       	sub	r20, r2
    34d2:	53 09       	sbc	r21, r3
    34d4:	4e 87       	std	Y+14, r20	; 0x0e
    34d6:	5f 87       	std	Y+15, r21	; 0x0f
    34d8:	61 2f       	mov	r22, r17
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	44 27       	eor	r20, r20
    34de:	55 27       	eor	r21, r21
    34e0:	46 1b       	sub	r20, r22
    34e2:	57 0b       	sbc	r21, r23
    34e4:	48 8b       	std	Y+16, r20	; 0x10
    34e6:	59 8b       	std	Y+17, r21	; 0x11
    34e8:	5f ef       	ldi	r21, 0xFF	; 255
    34ea:	25 16       	cp	r2, r21
    34ec:	35 06       	cpc	r3, r21
    34ee:	49 f4       	brne	.+18     	; 0x3502 <vfprintf+0x2fe>
    34f0:	b6 01       	movw	r22, r12
    34f2:	8e e2       	ldi	r24, 0x2E	; 46
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	2a 8b       	std	Y+18, r18	; 0x12
    34f8:	3b 8b       	std	Y+19, r19	; 0x13
    34fa:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    34fe:	3b 89       	ldd	r19, Y+19	; 0x13
    3500:	2a 89       	ldd	r18, Y+18	; 0x12
    3502:	42 14       	cp	r4, r2
    3504:	53 04       	cpc	r5, r3
    3506:	6c f0       	brlt	.+26     	; 0x3522 <vfprintf+0x31e>
    3508:	4c 85       	ldd	r20, Y+12	; 0x0c
    350a:	5d 85       	ldd	r21, Y+13	; 0x0d
    350c:	42 15       	cp	r20, r2
    350e:	53 05       	cpc	r21, r3
    3510:	44 f4       	brge	.+16     	; 0x3522 <vfprintf+0x31e>
    3512:	ee 85       	ldd	r30, Y+14	; 0x0e
    3514:	ff 85       	ldd	r31, Y+15	; 0x0f
    3516:	e2 0f       	add	r30, r18
    3518:	f3 1f       	adc	r31, r19
    351a:	e6 0d       	add	r30, r6
    351c:	f7 1d       	adc	r31, r7
    351e:	81 81       	ldd	r24, Z+1	; 0x01
    3520:	01 c0       	rjmp	.+2      	; 0x3524 <vfprintf+0x320>
    3522:	80 e3       	ldi	r24, 0x30	; 48
    3524:	51 e0       	ldi	r21, 0x01	; 1
    3526:	25 1a       	sub	r2, r21
    3528:	31 08       	sbc	r3, r1
    352a:	2f 5f       	subi	r18, 0xFF	; 255
    352c:	3f 4f       	sbci	r19, 0xFF	; 255
    352e:	48 89       	ldd	r20, Y+16	; 0x10
    3530:	59 89       	ldd	r21, Y+17	; 0x11
    3532:	24 16       	cp	r2, r20
    3534:	35 06       	cpc	r3, r21
    3536:	4c f0       	brlt	.+18     	; 0x354a <vfprintf+0x346>
    3538:	b6 01       	movw	r22, r12
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	2a 8b       	std	Y+18, r18	; 0x12
    353e:	3b 8b       	std	Y+19, r19	; 0x13
    3540:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3544:	2a 89       	ldd	r18, Y+18	; 0x12
    3546:	3b 89       	ldd	r19, Y+19	; 0x13
    3548:	cf cf       	rjmp	.-98     	; 0x34e8 <vfprintf+0x2e4>
    354a:	24 14       	cp	r2, r4
    354c:	35 04       	cpc	r3, r5
    354e:	39 f4       	brne	.+14     	; 0x355e <vfprintf+0x35a>
    3550:	9a 81       	ldd	r25, Y+2	; 0x02
    3552:	96 33       	cpi	r25, 0x36	; 54
    3554:	18 f4       	brcc	.+6      	; 0x355c <vfprintf+0x358>
    3556:	95 33       	cpi	r25, 0x35	; 53
    3558:	11 f4       	brne	.+4      	; 0x355e <vfprintf+0x35a>
    355a:	04 ff       	sbrs	r16, 4
    355c:	81 e3       	ldi	r24, 0x31	; 49
    355e:	b6 01       	movw	r22, r12
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	4b c0       	rjmp	.+150    	; 0x35fa <vfprintf+0x3f6>
    3564:	8a 81       	ldd	r24, Y+2	; 0x02
    3566:	81 33       	cpi	r24, 0x31	; 49
    3568:	09 f0       	breq	.+2      	; 0x356c <vfprintf+0x368>
    356a:	0f 7e       	andi	r16, 0xEF	; 239
    356c:	b6 01       	movw	r22, r12
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3574:	11 11       	cpse	r17, r1
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <vfprintf+0x37e>
    3578:	34 fc       	sbrc	r3, 4
    357a:	18 c0       	rjmp	.+48     	; 0x35ac <vfprintf+0x3a8>
    357c:	85 e6       	ldi	r24, 0x65	; 101
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	17 c0       	rjmp	.+46     	; 0x35b0 <vfprintf+0x3ac>
    3582:	b6 01       	movw	r22, r12
    3584:	8e e2       	ldi	r24, 0x2E	; 46
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    358c:	82 e0       	ldi	r24, 0x02	; 2
    358e:	ee 24       	eor	r14, r14
    3590:	e3 94       	inc	r14
    3592:	e8 0e       	add	r14, r24
    3594:	f3 01       	movw	r30, r6
    3596:	e8 0f       	add	r30, r24
    3598:	f1 1d       	adc	r31, r1
    359a:	80 81       	ld	r24, Z
    359c:	b6 01       	movw	r22, r12
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    35a4:	11 50       	subi	r17, 0x01	; 1
    35a6:	8e 2d       	mov	r24, r14
    35a8:	91 f7       	brne	.-28     	; 0x358e <vfprintf+0x38a>
    35aa:	e6 cf       	rjmp	.-52     	; 0x3578 <vfprintf+0x374>
    35ac:	85 e4       	ldi	r24, 0x45	; 69
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	b6 01       	movw	r22, r12
    35b2:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    35b6:	57 fc       	sbrc	r5, 7
    35b8:	05 c0       	rjmp	.+10     	; 0x35c4 <vfprintf+0x3c0>
    35ba:	41 14       	cp	r4, r1
    35bc:	51 04       	cpc	r5, r1
    35be:	39 f4       	brne	.+14     	; 0x35ce <vfprintf+0x3ca>
    35c0:	04 ff       	sbrs	r16, 4
    35c2:	05 c0       	rjmp	.+10     	; 0x35ce <vfprintf+0x3ca>
    35c4:	51 94       	neg	r5
    35c6:	41 94       	neg	r4
    35c8:	51 08       	sbc	r5, r1
    35ca:	8d e2       	ldi	r24, 0x2D	; 45
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <vfprintf+0x3cc>
    35ce:	8b e2       	ldi	r24, 0x2B	; 43
    35d0:	b6 01       	movw	r22, r12
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    35d8:	80 e3       	ldi	r24, 0x30	; 48
    35da:	9a e0       	ldi	r25, 0x0A	; 10
    35dc:	49 16       	cp	r4, r25
    35de:	51 04       	cpc	r5, r1
    35e0:	2c f0       	brlt	.+10     	; 0x35ec <vfprintf+0x3e8>
    35e2:	8f 5f       	subi	r24, 0xFF	; 255
    35e4:	5a e0       	ldi	r21, 0x0A	; 10
    35e6:	45 1a       	sub	r4, r21
    35e8:	51 08       	sbc	r5, r1
    35ea:	f7 cf       	rjmp	.-18     	; 0x35da <vfprintf+0x3d6>
    35ec:	b6 01       	movw	r22, r12
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    35f4:	b6 01       	movw	r22, r12
    35f6:	c2 01       	movw	r24, r4
    35f8:	c0 96       	adiw	r24, 0x30	; 48
    35fa:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    35fe:	57 c1       	rjmp	.+686    	; 0x38ae <vfprintf+0x6aa>
    3600:	83 36       	cpi	r24, 0x63	; 99
    3602:	31 f0       	breq	.+12     	; 0x3610 <vfprintf+0x40c>
    3604:	83 37       	cpi	r24, 0x73	; 115
    3606:	79 f0       	breq	.+30     	; 0x3626 <vfprintf+0x422>
    3608:	83 35       	cpi	r24, 0x53	; 83
    360a:	09 f0       	breq	.+2      	; 0x360e <vfprintf+0x40a>
    360c:	58 c0       	rjmp	.+176    	; 0x36be <vfprintf+0x4ba>
    360e:	21 c0       	rjmp	.+66     	; 0x3652 <vfprintf+0x44e>
    3610:	52 01       	movw	r10, r4
    3612:	e2 e0       	ldi	r30, 0x02	; 2
    3614:	ae 0e       	add	r10, r30
    3616:	b1 1c       	adc	r11, r1
    3618:	f2 01       	movw	r30, r4
    361a:	80 81       	ld	r24, Z
    361c:	89 83       	std	Y+1, r24	; 0x01
    361e:	01 e0       	ldi	r16, 0x01	; 1
    3620:	10 e0       	ldi	r17, 0x00	; 0
    3622:	23 01       	movw	r4, r6
    3624:	14 c0       	rjmp	.+40     	; 0x364e <vfprintf+0x44a>
    3626:	52 01       	movw	r10, r4
    3628:	f2 e0       	ldi	r31, 0x02	; 2
    362a:	af 0e       	add	r10, r31
    362c:	b1 1c       	adc	r11, r1
    362e:	f2 01       	movw	r30, r4
    3630:	40 80       	ld	r4, Z
    3632:	51 80       	ldd	r5, Z+1	; 0x01
    3634:	26 ff       	sbrs	r18, 6
    3636:	03 c0       	rjmp	.+6      	; 0x363e <vfprintf+0x43a>
    3638:	61 2f       	mov	r22, r17
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	02 c0       	rjmp	.+4      	; 0x3642 <vfprintf+0x43e>
    363e:	6f ef       	ldi	r22, 0xFF	; 255
    3640:	7f ef       	ldi	r23, 0xFF	; 255
    3642:	c2 01       	movw	r24, r4
    3644:	2a 8b       	std	Y+18, r18	; 0x12
    3646:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <strnlen>
    364a:	8c 01       	movw	r16, r24
    364c:	2a 89       	ldd	r18, Y+18	; 0x12
    364e:	2f 77       	andi	r18, 0x7F	; 127
    3650:	15 c0       	rjmp	.+42     	; 0x367c <vfprintf+0x478>
    3652:	52 01       	movw	r10, r4
    3654:	f2 e0       	ldi	r31, 0x02	; 2
    3656:	af 0e       	add	r10, r31
    3658:	b1 1c       	adc	r11, r1
    365a:	f2 01       	movw	r30, r4
    365c:	40 80       	ld	r4, Z
    365e:	51 80       	ldd	r5, Z+1	; 0x01
    3660:	26 ff       	sbrs	r18, 6
    3662:	03 c0       	rjmp	.+6      	; 0x366a <vfprintf+0x466>
    3664:	61 2f       	mov	r22, r17
    3666:	70 e0       	ldi	r23, 0x00	; 0
    3668:	02 c0       	rjmp	.+4      	; 0x366e <vfprintf+0x46a>
    366a:	6f ef       	ldi	r22, 0xFF	; 255
    366c:	7f ef       	ldi	r23, 0xFF	; 255
    366e:	c2 01       	movw	r24, r4
    3670:	2a 8b       	std	Y+18, r18	; 0x12
    3672:	0e 94 e5 1d 	call	0x3bca	; 0x3bca <strnlen_P>
    3676:	8c 01       	movw	r16, r24
    3678:	2a 89       	ldd	r18, Y+18	; 0x12
    367a:	20 68       	ori	r18, 0x80	; 128
    367c:	32 2e       	mov	r3, r18
    367e:	23 fd       	sbrc	r18, 3
    3680:	1a c0       	rjmp	.+52     	; 0x36b6 <vfprintf+0x4b2>
    3682:	8f 2d       	mov	r24, r15
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	08 17       	cp	r16, r24
    3688:	19 07       	cpc	r17, r25
    368a:	a8 f4       	brcc	.+42     	; 0x36b6 <vfprintf+0x4b2>
    368c:	b6 01       	movw	r22, r12
    368e:	80 e2       	ldi	r24, 0x20	; 32
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3696:	fa 94       	dec	r15
    3698:	f4 cf       	rjmp	.-24     	; 0x3682 <vfprintf+0x47e>
    369a:	f2 01       	movw	r30, r4
    369c:	37 fc       	sbrc	r3, 7
    369e:	85 91       	lpm	r24, Z+
    36a0:	37 fe       	sbrs	r3, 7
    36a2:	81 91       	ld	r24, Z+
    36a4:	2f 01       	movw	r4, r30
    36a6:	b6 01       	movw	r22, r12
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    36ae:	f1 10       	cpse	r15, r1
    36b0:	fa 94       	dec	r15
    36b2:	01 50       	subi	r16, 0x01	; 1
    36b4:	11 09       	sbc	r17, r1
    36b6:	01 15       	cp	r16, r1
    36b8:	11 05       	cpc	r17, r1
    36ba:	79 f7       	brne	.-34     	; 0x369a <vfprintf+0x496>
    36bc:	f8 c0       	rjmp	.+496    	; 0x38ae <vfprintf+0x6aa>
    36be:	84 36       	cpi	r24, 0x64	; 100
    36c0:	11 f0       	breq	.+4      	; 0x36c6 <vfprintf+0x4c2>
    36c2:	89 36       	cpi	r24, 0x69	; 105
    36c4:	59 f5       	brne	.+86     	; 0x371c <vfprintf+0x518>
    36c6:	52 01       	movw	r10, r4
    36c8:	27 ff       	sbrs	r18, 7
    36ca:	09 c0       	rjmp	.+18     	; 0x36de <vfprintf+0x4da>
    36cc:	f4 e0       	ldi	r31, 0x04	; 4
    36ce:	af 0e       	add	r10, r31
    36d0:	b1 1c       	adc	r11, r1
    36d2:	f2 01       	movw	r30, r4
    36d4:	60 81       	ld	r22, Z
    36d6:	71 81       	ldd	r23, Z+1	; 0x01
    36d8:	82 81       	ldd	r24, Z+2	; 0x02
    36da:	93 81       	ldd	r25, Z+3	; 0x03
    36dc:	0a c0       	rjmp	.+20     	; 0x36f2 <vfprintf+0x4ee>
    36de:	f2 e0       	ldi	r31, 0x02	; 2
    36e0:	af 0e       	add	r10, r31
    36e2:	b1 1c       	adc	r11, r1
    36e4:	f2 01       	movw	r30, r4
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	07 2e       	mov	r0, r23
    36ec:	00 0c       	add	r0, r0
    36ee:	88 0b       	sbc	r24, r24
    36f0:	99 0b       	sbc	r25, r25
    36f2:	2f 76       	andi	r18, 0x6F	; 111
    36f4:	32 2e       	mov	r3, r18
    36f6:	97 ff       	sbrs	r25, 7
    36f8:	09 c0       	rjmp	.+18     	; 0x370c <vfprintf+0x508>
    36fa:	90 95       	com	r25
    36fc:	80 95       	com	r24
    36fe:	70 95       	com	r23
    3700:	61 95       	neg	r22
    3702:	7f 4f       	sbci	r23, 0xFF	; 255
    3704:	8f 4f       	sbci	r24, 0xFF	; 255
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	20 68       	ori	r18, 0x80	; 128
    370a:	32 2e       	mov	r3, r18
    370c:	2a e0       	ldi	r18, 0x0A	; 10
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	a3 01       	movw	r20, r6
    3712:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__ultoa_invert>
    3716:	e8 2e       	mov	r14, r24
    3718:	e6 18       	sub	r14, r6
    371a:	3f c0       	rjmp	.+126    	; 0x379a <vfprintf+0x596>
    371c:	02 2f       	mov	r16, r18
    371e:	85 37       	cpi	r24, 0x75	; 117
    3720:	21 f4       	brne	.+8      	; 0x372a <vfprintf+0x526>
    3722:	0f 7e       	andi	r16, 0xEF	; 239
    3724:	2a e0       	ldi	r18, 0x0A	; 10
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	1d c0       	rjmp	.+58     	; 0x3764 <vfprintf+0x560>
    372a:	09 7f       	andi	r16, 0xF9	; 249
    372c:	8f 36       	cpi	r24, 0x6F	; 111
    372e:	91 f0       	breq	.+36     	; 0x3754 <vfprintf+0x550>
    3730:	18 f4       	brcc	.+6      	; 0x3738 <vfprintf+0x534>
    3732:	88 35       	cpi	r24, 0x58	; 88
    3734:	59 f0       	breq	.+22     	; 0x374c <vfprintf+0x548>
    3736:	c5 c0       	rjmp	.+394    	; 0x38c2 <vfprintf+0x6be>
    3738:	80 37       	cpi	r24, 0x70	; 112
    373a:	19 f0       	breq	.+6      	; 0x3742 <vfprintf+0x53e>
    373c:	88 37       	cpi	r24, 0x78	; 120
    373e:	11 f0       	breq	.+4      	; 0x3744 <vfprintf+0x540>
    3740:	c0 c0       	rjmp	.+384    	; 0x38c2 <vfprintf+0x6be>
    3742:	00 61       	ori	r16, 0x10	; 16
    3744:	04 ff       	sbrs	r16, 4
    3746:	09 c0       	rjmp	.+18     	; 0x375a <vfprintf+0x556>
    3748:	04 60       	ori	r16, 0x04	; 4
    374a:	07 c0       	rjmp	.+14     	; 0x375a <vfprintf+0x556>
    374c:	24 ff       	sbrs	r18, 4
    374e:	08 c0       	rjmp	.+16     	; 0x3760 <vfprintf+0x55c>
    3750:	06 60       	ori	r16, 0x06	; 6
    3752:	06 c0       	rjmp	.+12     	; 0x3760 <vfprintf+0x55c>
    3754:	28 e0       	ldi	r18, 0x08	; 8
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	05 c0       	rjmp	.+10     	; 0x3764 <vfprintf+0x560>
    375a:	20 e1       	ldi	r18, 0x10	; 16
    375c:	30 e0       	ldi	r19, 0x00	; 0
    375e:	02 c0       	rjmp	.+4      	; 0x3764 <vfprintf+0x560>
    3760:	20 e1       	ldi	r18, 0x10	; 16
    3762:	32 e0       	ldi	r19, 0x02	; 2
    3764:	52 01       	movw	r10, r4
    3766:	07 ff       	sbrs	r16, 7
    3768:	09 c0       	rjmp	.+18     	; 0x377c <vfprintf+0x578>
    376a:	f4 e0       	ldi	r31, 0x04	; 4
    376c:	af 0e       	add	r10, r31
    376e:	b1 1c       	adc	r11, r1
    3770:	f2 01       	movw	r30, r4
    3772:	60 81       	ld	r22, Z
    3774:	71 81       	ldd	r23, Z+1	; 0x01
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	08 c0       	rjmp	.+16     	; 0x378c <vfprintf+0x588>
    377c:	f2 e0       	ldi	r31, 0x02	; 2
    377e:	af 0e       	add	r10, r31
    3780:	b1 1c       	adc	r11, r1
    3782:	f2 01       	movw	r30, r4
    3784:	60 81       	ld	r22, Z
    3786:	71 81       	ldd	r23, Z+1	; 0x01
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	a3 01       	movw	r20, r6
    378e:	0e 94 43 1e 	call	0x3c86	; 0x3c86 <__ultoa_invert>
    3792:	e8 2e       	mov	r14, r24
    3794:	e6 18       	sub	r14, r6
    3796:	0f 77       	andi	r16, 0x7F	; 127
    3798:	30 2e       	mov	r3, r16
    379a:	36 fe       	sbrs	r3, 6
    379c:	0b c0       	rjmp	.+22     	; 0x37b4 <vfprintf+0x5b0>
    379e:	33 2d       	mov	r19, r3
    37a0:	3e 7f       	andi	r19, 0xFE	; 254
    37a2:	e1 16       	cp	r14, r17
    37a4:	50 f4       	brcc	.+20     	; 0x37ba <vfprintf+0x5b6>
    37a6:	34 fe       	sbrs	r3, 4
    37a8:	0a c0       	rjmp	.+20     	; 0x37be <vfprintf+0x5ba>
    37aa:	32 fc       	sbrc	r3, 2
    37ac:	08 c0       	rjmp	.+16     	; 0x37be <vfprintf+0x5ba>
    37ae:	33 2d       	mov	r19, r3
    37b0:	3e 7e       	andi	r19, 0xEE	; 238
    37b2:	05 c0       	rjmp	.+10     	; 0x37be <vfprintf+0x5ba>
    37b4:	0e 2d       	mov	r16, r14
    37b6:	33 2d       	mov	r19, r3
    37b8:	03 c0       	rjmp	.+6      	; 0x37c0 <vfprintf+0x5bc>
    37ba:	0e 2d       	mov	r16, r14
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <vfprintf+0x5bc>
    37be:	01 2f       	mov	r16, r17
    37c0:	34 ff       	sbrs	r19, 4
    37c2:	0c c0       	rjmp	.+24     	; 0x37dc <vfprintf+0x5d8>
    37c4:	fe 01       	movw	r30, r28
    37c6:	ee 0d       	add	r30, r14
    37c8:	f1 1d       	adc	r31, r1
    37ca:	80 81       	ld	r24, Z
    37cc:	80 33       	cpi	r24, 0x30	; 48
    37ce:	11 f4       	brne	.+4      	; 0x37d4 <vfprintf+0x5d0>
    37d0:	39 7e       	andi	r19, 0xE9	; 233
    37d2:	08 c0       	rjmp	.+16     	; 0x37e4 <vfprintf+0x5e0>
    37d4:	32 ff       	sbrs	r19, 2
    37d6:	05 c0       	rjmp	.+10     	; 0x37e2 <vfprintf+0x5de>
    37d8:	0e 5f       	subi	r16, 0xFE	; 254
    37da:	04 c0       	rjmp	.+8      	; 0x37e4 <vfprintf+0x5e0>
    37dc:	83 2f       	mov	r24, r19
    37de:	86 78       	andi	r24, 0x86	; 134
    37e0:	09 f0       	breq	.+2      	; 0x37e4 <vfprintf+0x5e0>
    37e2:	0f 5f       	subi	r16, 0xFF	; 255
    37e4:	33 fd       	sbrc	r19, 3
    37e6:	13 c0       	rjmp	.+38     	; 0x380e <vfprintf+0x60a>
    37e8:	30 ff       	sbrs	r19, 0
    37ea:	06 c0       	rjmp	.+12     	; 0x37f8 <vfprintf+0x5f4>
    37ec:	1e 2d       	mov	r17, r14
    37ee:	0f 15       	cp	r16, r15
    37f0:	18 f4       	brcc	.+6      	; 0x37f8 <vfprintf+0x5f4>
    37f2:	1f 0d       	add	r17, r15
    37f4:	10 1b       	sub	r17, r16
    37f6:	0f 2d       	mov	r16, r15
    37f8:	0f 15       	cp	r16, r15
    37fa:	68 f4       	brcc	.+26     	; 0x3816 <vfprintf+0x612>
    37fc:	b6 01       	movw	r22, r12
    37fe:	80 e2       	ldi	r24, 0x20	; 32
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	3b 8b       	std	Y+19, r19	; 0x13
    3804:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3808:	0f 5f       	subi	r16, 0xFF	; 255
    380a:	3b 89       	ldd	r19, Y+19	; 0x13
    380c:	f5 cf       	rjmp	.-22     	; 0x37f8 <vfprintf+0x5f4>
    380e:	0f 15       	cp	r16, r15
    3810:	10 f4       	brcc	.+4      	; 0x3816 <vfprintf+0x612>
    3812:	f0 1a       	sub	r15, r16
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <vfprintf+0x614>
    3816:	f1 2c       	mov	r15, r1
    3818:	34 ff       	sbrs	r19, 4
    381a:	12 c0       	rjmp	.+36     	; 0x3840 <vfprintf+0x63c>
    381c:	b6 01       	movw	r22, r12
    381e:	80 e3       	ldi	r24, 0x30	; 48
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	3b 8b       	std	Y+19, r19	; 0x13
    3824:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3828:	3b 89       	ldd	r19, Y+19	; 0x13
    382a:	32 ff       	sbrs	r19, 2
    382c:	17 c0       	rjmp	.+46     	; 0x385c <vfprintf+0x658>
    382e:	31 fd       	sbrc	r19, 1
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <vfprintf+0x634>
    3832:	88 e7       	ldi	r24, 0x78	; 120
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	02 c0       	rjmp	.+4      	; 0x383c <vfprintf+0x638>
    3838:	88 e5       	ldi	r24, 0x58	; 88
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	b6 01       	movw	r22, r12
    383e:	0c c0       	rjmp	.+24     	; 0x3858 <vfprintf+0x654>
    3840:	83 2f       	mov	r24, r19
    3842:	86 78       	andi	r24, 0x86	; 134
    3844:	59 f0       	breq	.+22     	; 0x385c <vfprintf+0x658>
    3846:	31 ff       	sbrs	r19, 1
    3848:	02 c0       	rjmp	.+4      	; 0x384e <vfprintf+0x64a>
    384a:	8b e2       	ldi	r24, 0x2B	; 43
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <vfprintf+0x64c>
    384e:	80 e2       	ldi	r24, 0x20	; 32
    3850:	37 fd       	sbrc	r19, 7
    3852:	8d e2       	ldi	r24, 0x2D	; 45
    3854:	b6 01       	movw	r22, r12
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    385c:	e1 16       	cp	r14, r17
    385e:	38 f4       	brcc	.+14     	; 0x386e <vfprintf+0x66a>
    3860:	b6 01       	movw	r22, r12
    3862:	80 e3       	ldi	r24, 0x30	; 48
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    386a:	11 50       	subi	r17, 0x01	; 1
    386c:	f7 cf       	rjmp	.-18     	; 0x385c <vfprintf+0x658>
    386e:	ea 94       	dec	r14
    3870:	f3 01       	movw	r30, r6
    3872:	ee 0d       	add	r30, r14
    3874:	f1 1d       	adc	r31, r1
    3876:	80 81       	ld	r24, Z
    3878:	b6 01       	movw	r22, r12
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3880:	e1 10       	cpse	r14, r1
    3882:	f5 cf       	rjmp	.-22     	; 0x386e <vfprintf+0x66a>
    3884:	14 c0       	rjmp	.+40     	; 0x38ae <vfprintf+0x6aa>
    3886:	f4 e0       	ldi	r31, 0x04	; 4
    3888:	ff 15       	cp	r31, r15
    388a:	58 f5       	brcc	.+86     	; 0x38e2 <vfprintf+0x6de>
    388c:	84 e0       	ldi	r24, 0x04	; 4
    388e:	f8 1a       	sub	r15, r24
    3890:	33 fe       	sbrs	r3, 3
    3892:	1e c0       	rjmp	.+60     	; 0x38d0 <vfprintf+0x6cc>
    3894:	21 10       	cpse	r2, r1
    3896:	26 c0       	rjmp	.+76     	; 0x38e4 <vfprintf+0x6e0>
    3898:	03 ff       	sbrs	r16, 3
    389a:	2a c0       	rjmp	.+84     	; 0x38f0 <vfprintf+0x6ec>
    389c:	0c ec       	ldi	r16, 0xCC	; 204
    389e:	12 e0       	ldi	r17, 0x02	; 2
    38a0:	f3 2d       	mov	r31, r3
    38a2:	f0 71       	andi	r31, 0x10	; 16
    38a4:	3f 2e       	mov	r3, r31
    38a6:	f8 01       	movw	r30, r16
    38a8:	84 91       	lpm	r24, Z
    38aa:	81 11       	cpse	r24, r1
    38ac:	24 c0       	rjmp	.+72     	; 0x38f6 <vfprintf+0x6f2>
    38ae:	ff 20       	and	r15, r15
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <vfprintf+0x6b0>
    38b2:	e5 cc       	rjmp	.-1590   	; 0x327e <vfprintf+0x7a>
    38b4:	b6 01       	movw	r22, r12
    38b6:	80 e2       	ldi	r24, 0x20	; 32
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    38be:	fa 94       	dec	r15
    38c0:	f6 cf       	rjmp	.-20     	; 0x38ae <vfprintf+0x6aa>
    38c2:	f6 01       	movw	r30, r12
    38c4:	86 81       	ldd	r24, Z+6	; 0x06
    38c6:	97 81       	ldd	r25, Z+7	; 0x07
    38c8:	26 c0       	rjmp	.+76     	; 0x3916 <vfprintf+0x712>
    38ca:	8f ef       	ldi	r24, 0xFF	; 255
    38cc:	9f ef       	ldi	r25, 0xFF	; 255
    38ce:	23 c0       	rjmp	.+70     	; 0x3916 <vfprintf+0x712>
    38d0:	b6 01       	movw	r22, r12
    38d2:	80 e2       	ldi	r24, 0x20	; 32
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    38da:	fa 94       	dec	r15
    38dc:	f1 10       	cpse	r15, r1
    38de:	f8 cf       	rjmp	.-16     	; 0x38d0 <vfprintf+0x6cc>
    38e0:	d9 cf       	rjmp	.-78     	; 0x3894 <vfprintf+0x690>
    38e2:	f1 2c       	mov	r15, r1
    38e4:	b6 01       	movw	r22, r12
    38e6:	82 2d       	mov	r24, r2
    38e8:	90 e0       	ldi	r25, 0x00	; 0
    38ea:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    38ee:	d4 cf       	rjmp	.-88     	; 0x3898 <vfprintf+0x694>
    38f0:	00 ed       	ldi	r16, 0xD0	; 208
    38f2:	12 e0       	ldi	r17, 0x02	; 2
    38f4:	d5 cf       	rjmp	.-86     	; 0x38a0 <vfprintf+0x69c>
    38f6:	31 10       	cpse	r3, r1
    38f8:	80 52       	subi	r24, 0x20	; 32
    38fa:	b6 01       	movw	r22, r12
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <fputc>
    3902:	0f 5f       	subi	r16, 0xFF	; 255
    3904:	1f 4f       	sbci	r17, 0xFF	; 255
    3906:	cf cf       	rjmp	.-98     	; 0x38a6 <vfprintf+0x6a2>
    3908:	23 e0       	ldi	r18, 0x03	; 3
    390a:	2f 15       	cp	r18, r15
    390c:	10 f4       	brcc	.+4      	; 0x3912 <vfprintf+0x70e>
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	be cf       	rjmp	.-132    	; 0x388e <vfprintf+0x68a>
    3912:	f1 2c       	mov	r15, r1
    3914:	c1 cf       	rjmp	.-126    	; 0x3898 <vfprintf+0x694>
    3916:	63 96       	adiw	r28, 0x13	; 19
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	1f 91       	pop	r17
    3922:	0f 91       	pop	r16
    3924:	ff 90       	pop	r15
    3926:	ef 90       	pop	r14
    3928:	df 90       	pop	r13
    392a:	cf 90       	pop	r12
    392c:	bf 90       	pop	r11
    392e:	af 90       	pop	r10
    3930:	9f 90       	pop	r9
    3932:	8f 90       	pop	r8
    3934:	7f 90       	pop	r7
    3936:	6f 90       	pop	r6
    3938:	5f 90       	pop	r5
    393a:	4f 90       	pop	r4
    393c:	3f 90       	pop	r3
    393e:	2f 90       	pop	r2
    3940:	08 95       	ret

00003942 <__divmodhi4>:
    3942:	97 fb       	bst	r25, 7
    3944:	07 2e       	mov	r0, r23
    3946:	16 f4       	brtc	.+4      	; 0x394c <__divmodhi4+0xa>
    3948:	00 94       	com	r0
    394a:	07 d0       	rcall	.+14     	; 0x395a <__divmodhi4_neg1>
    394c:	77 fd       	sbrc	r23, 7
    394e:	09 d0       	rcall	.+18     	; 0x3962 <__divmodhi4_neg2>
    3950:	0e 94 df 1c 	call	0x39be	; 0x39be <__udivmodhi4>
    3954:	07 fc       	sbrc	r0, 7
    3956:	05 d0       	rcall	.+10     	; 0x3962 <__divmodhi4_neg2>
    3958:	3e f4       	brtc	.+14     	; 0x3968 <__divmodhi4_exit>

0000395a <__divmodhi4_neg1>:
    395a:	90 95       	com	r25
    395c:	81 95       	neg	r24
    395e:	9f 4f       	sbci	r25, 0xFF	; 255
    3960:	08 95       	ret

00003962 <__divmodhi4_neg2>:
    3962:	70 95       	com	r23
    3964:	61 95       	neg	r22
    3966:	7f 4f       	sbci	r23, 0xFF	; 255

00003968 <__divmodhi4_exit>:
    3968:	08 95       	ret

0000396a <__udivmodsi4>:
    396a:	a1 e2       	ldi	r26, 0x21	; 33
    396c:	1a 2e       	mov	r1, r26
    396e:	aa 1b       	sub	r26, r26
    3970:	bb 1b       	sub	r27, r27
    3972:	fd 01       	movw	r30, r26
    3974:	0d c0       	rjmp	.+26     	; 0x3990 <__udivmodsi4_ep>

00003976 <__udivmodsi4_loop>:
    3976:	aa 1f       	adc	r26, r26
    3978:	bb 1f       	adc	r27, r27
    397a:	ee 1f       	adc	r30, r30
    397c:	ff 1f       	adc	r31, r31
    397e:	a2 17       	cp	r26, r18
    3980:	b3 07       	cpc	r27, r19
    3982:	e4 07       	cpc	r30, r20
    3984:	f5 07       	cpc	r31, r21
    3986:	20 f0       	brcs	.+8      	; 0x3990 <__udivmodsi4_ep>
    3988:	a2 1b       	sub	r26, r18
    398a:	b3 0b       	sbc	r27, r19
    398c:	e4 0b       	sbc	r30, r20
    398e:	f5 0b       	sbc	r31, r21

00003990 <__udivmodsi4_ep>:
    3990:	66 1f       	adc	r22, r22
    3992:	77 1f       	adc	r23, r23
    3994:	88 1f       	adc	r24, r24
    3996:	99 1f       	adc	r25, r25
    3998:	1a 94       	dec	r1
    399a:	69 f7       	brne	.-38     	; 0x3976 <__udivmodsi4_loop>
    399c:	60 95       	com	r22
    399e:	70 95       	com	r23
    39a0:	80 95       	com	r24
    39a2:	90 95       	com	r25
    39a4:	9b 01       	movw	r18, r22
    39a6:	ac 01       	movw	r20, r24
    39a8:	bd 01       	movw	r22, r26
    39aa:	cf 01       	movw	r24, r30
    39ac:	08 95       	ret

000039ae <__tablejump2__>:
    39ae:	ee 0f       	add	r30, r30
    39b0:	ff 1f       	adc	r31, r31
    39b2:	88 1f       	adc	r24, r24
    39b4:	8b bf       	out	0x3b, r24	; 59
    39b6:	07 90       	elpm	r0, Z+
    39b8:	f6 91       	elpm	r31, Z
    39ba:	e0 2d       	mov	r30, r0
    39bc:	19 94       	eijmp

000039be <__udivmodhi4>:
    39be:	aa 1b       	sub	r26, r26
    39c0:	bb 1b       	sub	r27, r27
    39c2:	51 e1       	ldi	r21, 0x11	; 17
    39c4:	07 c0       	rjmp	.+14     	; 0x39d4 <__udivmodhi4_ep>

000039c6 <__udivmodhi4_loop>:
    39c6:	aa 1f       	adc	r26, r26
    39c8:	bb 1f       	adc	r27, r27
    39ca:	a6 17       	cp	r26, r22
    39cc:	b7 07       	cpc	r27, r23
    39ce:	10 f0       	brcs	.+4      	; 0x39d4 <__udivmodhi4_ep>
    39d0:	a6 1b       	sub	r26, r22
    39d2:	b7 0b       	sbc	r27, r23

000039d4 <__udivmodhi4_ep>:
    39d4:	88 1f       	adc	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	5a 95       	dec	r21
    39da:	a9 f7       	brne	.-22     	; 0x39c6 <__udivmodhi4_loop>
    39dc:	80 95       	com	r24
    39de:	90 95       	com	r25
    39e0:	bc 01       	movw	r22, r24
    39e2:	cd 01       	movw	r24, r26
    39e4:	08 95       	ret

000039e6 <__muluhisi3>:
    39e6:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__umulhisi3>
    39ea:	a5 9f       	mul	r26, r21
    39ec:	90 0d       	add	r25, r0
    39ee:	b4 9f       	mul	r27, r20
    39f0:	90 0d       	add	r25, r0
    39f2:	a4 9f       	mul	r26, r20
    39f4:	80 0d       	add	r24, r0
    39f6:	91 1d       	adc	r25, r1
    39f8:	11 24       	eor	r1, r1
    39fa:	08 95       	ret

000039fc <__umulhisi3>:
    39fc:	a2 9f       	mul	r26, r18
    39fe:	b0 01       	movw	r22, r0
    3a00:	b3 9f       	mul	r27, r19
    3a02:	c0 01       	movw	r24, r0
    3a04:	a3 9f       	mul	r26, r19
    3a06:	70 0d       	add	r23, r0
    3a08:	81 1d       	adc	r24, r1
    3a0a:	11 24       	eor	r1, r1
    3a0c:	91 1d       	adc	r25, r1
    3a0e:	b2 9f       	mul	r27, r18
    3a10:	70 0d       	add	r23, r0
    3a12:	81 1d       	adc	r24, r1
    3a14:	11 24       	eor	r1, r1
    3a16:	91 1d       	adc	r25, r1
    3a18:	08 95       	ret

00003a1a <__ftoa_engine>:
    3a1a:	28 30       	cpi	r18, 0x08	; 8
    3a1c:	08 f0       	brcs	.+2      	; 0x3a20 <__ftoa_engine+0x6>
    3a1e:	27 e0       	ldi	r18, 0x07	; 7
    3a20:	33 27       	eor	r19, r19
    3a22:	da 01       	movw	r26, r20
    3a24:	99 0f       	add	r25, r25
    3a26:	31 1d       	adc	r19, r1
    3a28:	87 fd       	sbrc	r24, 7
    3a2a:	91 60       	ori	r25, 0x01	; 1
    3a2c:	00 96       	adiw	r24, 0x00	; 0
    3a2e:	61 05       	cpc	r22, r1
    3a30:	71 05       	cpc	r23, r1
    3a32:	39 f4       	brne	.+14     	; 0x3a42 <__ftoa_engine+0x28>
    3a34:	32 60       	ori	r19, 0x02	; 2
    3a36:	2e 5f       	subi	r18, 0xFE	; 254
    3a38:	3d 93       	st	X+, r19
    3a3a:	30 e3       	ldi	r19, 0x30	; 48
    3a3c:	2a 95       	dec	r18
    3a3e:	e1 f7       	brne	.-8      	; 0x3a38 <__ftoa_engine+0x1e>
    3a40:	08 95       	ret
    3a42:	9f 3f       	cpi	r25, 0xFF	; 255
    3a44:	30 f0       	brcs	.+12     	; 0x3a52 <__ftoa_engine+0x38>
    3a46:	80 38       	cpi	r24, 0x80	; 128
    3a48:	71 05       	cpc	r23, r1
    3a4a:	61 05       	cpc	r22, r1
    3a4c:	09 f0       	breq	.+2      	; 0x3a50 <__ftoa_engine+0x36>
    3a4e:	3c 5f       	subi	r19, 0xFC	; 252
    3a50:	3c 5f       	subi	r19, 0xFC	; 252
    3a52:	3d 93       	st	X+, r19
    3a54:	91 30       	cpi	r25, 0x01	; 1
    3a56:	08 f0       	brcs	.+2      	; 0x3a5a <__ftoa_engine+0x40>
    3a58:	80 68       	ori	r24, 0x80	; 128
    3a5a:	91 1d       	adc	r25, r1
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	1f 93       	push	r17
    3a62:	0f 93       	push	r16
    3a64:	ff 92       	push	r15
    3a66:	ef 92       	push	r14
    3a68:	19 2f       	mov	r17, r25
    3a6a:	98 7f       	andi	r25, 0xF8	; 248
    3a6c:	96 95       	lsr	r25
    3a6e:	e9 2f       	mov	r30, r25
    3a70:	96 95       	lsr	r25
    3a72:	96 95       	lsr	r25
    3a74:	e9 0f       	add	r30, r25
    3a76:	ff 27       	eor	r31, r31
    3a78:	e2 5d       	subi	r30, 0xD2	; 210
    3a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a7c:	99 27       	eor	r25, r25
    3a7e:	33 27       	eor	r19, r19
    3a80:	ee 24       	eor	r14, r14
    3a82:	ff 24       	eor	r15, r15
    3a84:	a7 01       	movw	r20, r14
    3a86:	e7 01       	movw	r28, r14
    3a88:	05 90       	lpm	r0, Z+
    3a8a:	08 94       	sec
    3a8c:	07 94       	ror	r0
    3a8e:	28 f4       	brcc	.+10     	; 0x3a9a <__ftoa_engine+0x80>
    3a90:	36 0f       	add	r19, r22
    3a92:	e7 1e       	adc	r14, r23
    3a94:	f8 1e       	adc	r15, r24
    3a96:	49 1f       	adc	r20, r25
    3a98:	51 1d       	adc	r21, r1
    3a9a:	66 0f       	add	r22, r22
    3a9c:	77 1f       	adc	r23, r23
    3a9e:	88 1f       	adc	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	06 94       	lsr	r0
    3aa4:	a1 f7       	brne	.-24     	; 0x3a8e <__ftoa_engine+0x74>
    3aa6:	05 90       	lpm	r0, Z+
    3aa8:	07 94       	ror	r0
    3aaa:	28 f4       	brcc	.+10     	; 0x3ab6 <__ftoa_engine+0x9c>
    3aac:	e7 0e       	add	r14, r23
    3aae:	f8 1e       	adc	r15, r24
    3ab0:	49 1f       	adc	r20, r25
    3ab2:	56 1f       	adc	r21, r22
    3ab4:	c1 1d       	adc	r28, r1
    3ab6:	77 0f       	add	r23, r23
    3ab8:	88 1f       	adc	r24, r24
    3aba:	99 1f       	adc	r25, r25
    3abc:	66 1f       	adc	r22, r22
    3abe:	06 94       	lsr	r0
    3ac0:	a1 f7       	brne	.-24     	; 0x3aaa <__ftoa_engine+0x90>
    3ac2:	05 90       	lpm	r0, Z+
    3ac4:	07 94       	ror	r0
    3ac6:	28 f4       	brcc	.+10     	; 0x3ad2 <__ftoa_engine+0xb8>
    3ac8:	f8 0e       	add	r15, r24
    3aca:	49 1f       	adc	r20, r25
    3acc:	56 1f       	adc	r21, r22
    3ace:	c7 1f       	adc	r28, r23
    3ad0:	d1 1d       	adc	r29, r1
    3ad2:	88 0f       	add	r24, r24
    3ad4:	99 1f       	adc	r25, r25
    3ad6:	66 1f       	adc	r22, r22
    3ad8:	77 1f       	adc	r23, r23
    3ada:	06 94       	lsr	r0
    3adc:	a1 f7       	brne	.-24     	; 0x3ac6 <__ftoa_engine+0xac>
    3ade:	05 90       	lpm	r0, Z+
    3ae0:	07 94       	ror	r0
    3ae2:	20 f4       	brcc	.+8      	; 0x3aec <__ftoa_engine+0xd2>
    3ae4:	49 0f       	add	r20, r25
    3ae6:	56 1f       	adc	r21, r22
    3ae8:	c7 1f       	adc	r28, r23
    3aea:	d8 1f       	adc	r29, r24
    3aec:	99 0f       	add	r25, r25
    3aee:	66 1f       	adc	r22, r22
    3af0:	77 1f       	adc	r23, r23
    3af2:	88 1f       	adc	r24, r24
    3af4:	06 94       	lsr	r0
    3af6:	a9 f7       	brne	.-22     	; 0x3ae2 <__ftoa_engine+0xc8>
    3af8:	84 91       	lpm	r24, Z
    3afa:	10 95       	com	r17
    3afc:	17 70       	andi	r17, 0x07	; 7
    3afe:	41 f0       	breq	.+16     	; 0x3b10 <__ftoa_engine+0xf6>
    3b00:	d6 95       	lsr	r29
    3b02:	c7 95       	ror	r28
    3b04:	57 95       	ror	r21
    3b06:	47 95       	ror	r20
    3b08:	f7 94       	ror	r15
    3b0a:	e7 94       	ror	r14
    3b0c:	1a 95       	dec	r17
    3b0e:	c1 f7       	brne	.-16     	; 0x3b00 <__ftoa_engine+0xe6>
    3b10:	e4 ed       	ldi	r30, 0xD4	; 212
    3b12:	f2 e0       	ldi	r31, 0x02	; 2
    3b14:	68 94       	set
    3b16:	15 90       	lpm	r1, Z+
    3b18:	15 91       	lpm	r17, Z+
    3b1a:	35 91       	lpm	r19, Z+
    3b1c:	65 91       	lpm	r22, Z+
    3b1e:	95 91       	lpm	r25, Z+
    3b20:	05 90       	lpm	r0, Z+
    3b22:	7f e2       	ldi	r23, 0x2F	; 47
    3b24:	73 95       	inc	r23
    3b26:	e1 18       	sub	r14, r1
    3b28:	f1 0a       	sbc	r15, r17
    3b2a:	43 0b       	sbc	r20, r19
    3b2c:	56 0b       	sbc	r21, r22
    3b2e:	c9 0b       	sbc	r28, r25
    3b30:	d0 09       	sbc	r29, r0
    3b32:	c0 f7       	brcc	.-16     	; 0x3b24 <__ftoa_engine+0x10a>
    3b34:	e1 0c       	add	r14, r1
    3b36:	f1 1e       	adc	r15, r17
    3b38:	43 1f       	adc	r20, r19
    3b3a:	56 1f       	adc	r21, r22
    3b3c:	c9 1f       	adc	r28, r25
    3b3e:	d0 1d       	adc	r29, r0
    3b40:	7e f4       	brtc	.+30     	; 0x3b60 <__ftoa_engine+0x146>
    3b42:	70 33       	cpi	r23, 0x30	; 48
    3b44:	11 f4       	brne	.+4      	; 0x3b4a <__ftoa_engine+0x130>
    3b46:	8a 95       	dec	r24
    3b48:	e6 cf       	rjmp	.-52     	; 0x3b16 <__ftoa_engine+0xfc>
    3b4a:	e8 94       	clt
    3b4c:	01 50       	subi	r16, 0x01	; 1
    3b4e:	30 f0       	brcs	.+12     	; 0x3b5c <__ftoa_engine+0x142>
    3b50:	08 0f       	add	r16, r24
    3b52:	0a f4       	brpl	.+2      	; 0x3b56 <__ftoa_engine+0x13c>
    3b54:	00 27       	eor	r16, r16
    3b56:	02 17       	cp	r16, r18
    3b58:	08 f4       	brcc	.+2      	; 0x3b5c <__ftoa_engine+0x142>
    3b5a:	20 2f       	mov	r18, r16
    3b5c:	23 95       	inc	r18
    3b5e:	02 2f       	mov	r16, r18
    3b60:	7a 33       	cpi	r23, 0x3A	; 58
    3b62:	28 f0       	brcs	.+10     	; 0x3b6e <__ftoa_engine+0x154>
    3b64:	79 e3       	ldi	r23, 0x39	; 57
    3b66:	7d 93       	st	X+, r23
    3b68:	2a 95       	dec	r18
    3b6a:	e9 f7       	brne	.-6      	; 0x3b66 <__ftoa_engine+0x14c>
    3b6c:	10 c0       	rjmp	.+32     	; 0x3b8e <__ftoa_engine+0x174>
    3b6e:	7d 93       	st	X+, r23
    3b70:	2a 95       	dec	r18
    3b72:	89 f6       	brne	.-94     	; 0x3b16 <__ftoa_engine+0xfc>
    3b74:	06 94       	lsr	r0
    3b76:	97 95       	ror	r25
    3b78:	67 95       	ror	r22
    3b7a:	37 95       	ror	r19
    3b7c:	17 95       	ror	r17
    3b7e:	17 94       	ror	r1
    3b80:	e1 18       	sub	r14, r1
    3b82:	f1 0a       	sbc	r15, r17
    3b84:	43 0b       	sbc	r20, r19
    3b86:	56 0b       	sbc	r21, r22
    3b88:	c9 0b       	sbc	r28, r25
    3b8a:	d0 09       	sbc	r29, r0
    3b8c:	98 f0       	brcs	.+38     	; 0x3bb4 <__ftoa_engine+0x19a>
    3b8e:	23 95       	inc	r18
    3b90:	7e 91       	ld	r23, -X
    3b92:	73 95       	inc	r23
    3b94:	7a 33       	cpi	r23, 0x3A	; 58
    3b96:	08 f0       	brcs	.+2      	; 0x3b9a <__ftoa_engine+0x180>
    3b98:	70 e3       	ldi	r23, 0x30	; 48
    3b9a:	7c 93       	st	X, r23
    3b9c:	20 13       	cpse	r18, r16
    3b9e:	b8 f7       	brcc	.-18     	; 0x3b8e <__ftoa_engine+0x174>
    3ba0:	7e 91       	ld	r23, -X
    3ba2:	70 61       	ori	r23, 0x10	; 16
    3ba4:	7d 93       	st	X+, r23
    3ba6:	30 f0       	brcs	.+12     	; 0x3bb4 <__ftoa_engine+0x19a>
    3ba8:	83 95       	inc	r24
    3baa:	71 e3       	ldi	r23, 0x31	; 49
    3bac:	7d 93       	st	X+, r23
    3bae:	70 e3       	ldi	r23, 0x30	; 48
    3bb0:	2a 95       	dec	r18
    3bb2:	e1 f7       	brne	.-8      	; 0x3bac <__ftoa_engine+0x192>
    3bb4:	11 24       	eor	r1, r1
    3bb6:	ef 90       	pop	r14
    3bb8:	ff 90       	pop	r15
    3bba:	0f 91       	pop	r16
    3bbc:	1f 91       	pop	r17
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	99 27       	eor	r25, r25
    3bc4:	87 fd       	sbrc	r24, 7
    3bc6:	90 95       	com	r25
    3bc8:	08 95       	ret

00003bca <strnlen_P>:
    3bca:	fc 01       	movw	r30, r24
    3bcc:	05 90       	lpm	r0, Z+
    3bce:	61 50       	subi	r22, 0x01	; 1
    3bd0:	70 40       	sbci	r23, 0x00	; 0
    3bd2:	01 10       	cpse	r0, r1
    3bd4:	d8 f7       	brcc	.-10     	; 0x3bcc <strnlen_P+0x2>
    3bd6:	80 95       	com	r24
    3bd8:	90 95       	com	r25
    3bda:	8e 0f       	add	r24, r30
    3bdc:	9f 1f       	adc	r25, r31
    3bde:	08 95       	ret

00003be0 <strnlen>:
    3be0:	fc 01       	movw	r30, r24
    3be2:	61 50       	subi	r22, 0x01	; 1
    3be4:	70 40       	sbci	r23, 0x00	; 0
    3be6:	01 90       	ld	r0, Z+
    3be8:	01 10       	cpse	r0, r1
    3bea:	d8 f7       	brcc	.-10     	; 0x3be2 <strnlen+0x2>
    3bec:	80 95       	com	r24
    3bee:	90 95       	com	r25
    3bf0:	8e 0f       	add	r24, r30
    3bf2:	9f 1f       	adc	r25, r31
    3bf4:	08 95       	ret

00003bf6 <fprintf>:
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	ae 01       	movw	r20, r28
    3c00:	46 5f       	subi	r20, 0xF6	; 246
    3c02:	5f 4f       	sbci	r21, 0xFF	; 255
    3c04:	68 85       	ldd	r22, Y+8	; 0x08
    3c06:	79 85       	ldd	r23, Y+9	; 0x09
    3c08:	8e 81       	ldd	r24, Y+6	; 0x06
    3c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c0c:	0e 94 02 19 	call	0x3204	; 0x3204 <vfprintf>
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	08 95       	ret

00003c16 <fputc>:
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	fb 01       	movw	r30, r22
    3c20:	23 81       	ldd	r18, Z+3	; 0x03
    3c22:	21 fd       	sbrc	r18, 1
    3c24:	03 c0       	rjmp	.+6      	; 0x3c2c <fputc+0x16>
    3c26:	8f ef       	ldi	r24, 0xFF	; 255
    3c28:	9f ef       	ldi	r25, 0xFF	; 255
    3c2a:	28 c0       	rjmp	.+80     	; 0x3c7c <fputc+0x66>
    3c2c:	22 ff       	sbrs	r18, 2
    3c2e:	16 c0       	rjmp	.+44     	; 0x3c5c <fputc+0x46>
    3c30:	46 81       	ldd	r20, Z+6	; 0x06
    3c32:	57 81       	ldd	r21, Z+7	; 0x07
    3c34:	24 81       	ldd	r18, Z+4	; 0x04
    3c36:	35 81       	ldd	r19, Z+5	; 0x05
    3c38:	42 17       	cp	r20, r18
    3c3a:	53 07       	cpc	r21, r19
    3c3c:	44 f4       	brge	.+16     	; 0x3c4e <fputc+0x38>
    3c3e:	a0 81       	ld	r26, Z
    3c40:	b1 81       	ldd	r27, Z+1	; 0x01
    3c42:	9d 01       	movw	r18, r26
    3c44:	2f 5f       	subi	r18, 0xFF	; 255
    3c46:	3f 4f       	sbci	r19, 0xFF	; 255
    3c48:	20 83       	st	Z, r18
    3c4a:	31 83       	std	Z+1, r19	; 0x01
    3c4c:	8c 93       	st	X, r24
    3c4e:	26 81       	ldd	r18, Z+6	; 0x06
    3c50:	37 81       	ldd	r19, Z+7	; 0x07
    3c52:	2f 5f       	subi	r18, 0xFF	; 255
    3c54:	3f 4f       	sbci	r19, 0xFF	; 255
    3c56:	26 83       	std	Z+6, r18	; 0x06
    3c58:	37 83       	std	Z+7, r19	; 0x07
    3c5a:	10 c0       	rjmp	.+32     	; 0x3c7c <fputc+0x66>
    3c5c:	eb 01       	movw	r28, r22
    3c5e:	09 2f       	mov	r16, r25
    3c60:	18 2f       	mov	r17, r24
    3c62:	00 84       	ldd	r0, Z+8	; 0x08
    3c64:	f1 85       	ldd	r31, Z+9	; 0x09
    3c66:	e0 2d       	mov	r30, r0
    3c68:	19 95       	eicall
    3c6a:	89 2b       	or	r24, r25
    3c6c:	e1 f6       	brne	.-72     	; 0x3c26 <fputc+0x10>
    3c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c70:	9f 81       	ldd	r25, Y+7	; 0x07
    3c72:	01 96       	adiw	r24, 0x01	; 1
    3c74:	8e 83       	std	Y+6, r24	; 0x06
    3c76:	9f 83       	std	Y+7, r25	; 0x07
    3c78:	81 2f       	mov	r24, r17
    3c7a:	90 2f       	mov	r25, r16
    3c7c:	df 91       	pop	r29
    3c7e:	cf 91       	pop	r28
    3c80:	1f 91       	pop	r17
    3c82:	0f 91       	pop	r16
    3c84:	08 95       	ret

00003c86 <__ultoa_invert>:
    3c86:	fa 01       	movw	r30, r20
    3c88:	aa 27       	eor	r26, r26
    3c8a:	28 30       	cpi	r18, 0x08	; 8
    3c8c:	51 f1       	breq	.+84     	; 0x3ce2 <__ultoa_invert+0x5c>
    3c8e:	20 31       	cpi	r18, 0x10	; 16
    3c90:	81 f1       	breq	.+96     	; 0x3cf2 <__ultoa_invert+0x6c>
    3c92:	e8 94       	clt
    3c94:	6f 93       	push	r22
    3c96:	6e 7f       	andi	r22, 0xFE	; 254
    3c98:	6e 5f       	subi	r22, 0xFE	; 254
    3c9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca0:	af 4f       	sbci	r26, 0xFF	; 255
    3ca2:	b1 e0       	ldi	r27, 0x01	; 1
    3ca4:	3e d0       	rcall	.+124    	; 0x3d22 <__ultoa_invert+0x9c>
    3ca6:	b4 e0       	ldi	r27, 0x04	; 4
    3ca8:	3c d0       	rcall	.+120    	; 0x3d22 <__ultoa_invert+0x9c>
    3caa:	67 0f       	add	r22, r23
    3cac:	78 1f       	adc	r23, r24
    3cae:	89 1f       	adc	r24, r25
    3cb0:	9a 1f       	adc	r25, r26
    3cb2:	a1 1d       	adc	r26, r1
    3cb4:	68 0f       	add	r22, r24
    3cb6:	79 1f       	adc	r23, r25
    3cb8:	8a 1f       	adc	r24, r26
    3cba:	91 1d       	adc	r25, r1
    3cbc:	a1 1d       	adc	r26, r1
    3cbe:	6a 0f       	add	r22, r26
    3cc0:	71 1d       	adc	r23, r1
    3cc2:	81 1d       	adc	r24, r1
    3cc4:	91 1d       	adc	r25, r1
    3cc6:	a1 1d       	adc	r26, r1
    3cc8:	20 d0       	rcall	.+64     	; 0x3d0a <__ultoa_invert+0x84>
    3cca:	09 f4       	brne	.+2      	; 0x3cce <__ultoa_invert+0x48>
    3ccc:	68 94       	set
    3cce:	3f 91       	pop	r19
    3cd0:	2a e0       	ldi	r18, 0x0A	; 10
    3cd2:	26 9f       	mul	r18, r22
    3cd4:	11 24       	eor	r1, r1
    3cd6:	30 19       	sub	r19, r0
    3cd8:	30 5d       	subi	r19, 0xD0	; 208
    3cda:	31 93       	st	Z+, r19
    3cdc:	de f6       	brtc	.-74     	; 0x3c94 <__ultoa_invert+0xe>
    3cde:	cf 01       	movw	r24, r30
    3ce0:	08 95       	ret
    3ce2:	46 2f       	mov	r20, r22
    3ce4:	47 70       	andi	r20, 0x07	; 7
    3ce6:	40 5d       	subi	r20, 0xD0	; 208
    3ce8:	41 93       	st	Z+, r20
    3cea:	b3 e0       	ldi	r27, 0x03	; 3
    3cec:	0f d0       	rcall	.+30     	; 0x3d0c <__ultoa_invert+0x86>
    3cee:	c9 f7       	brne	.-14     	; 0x3ce2 <__ultoa_invert+0x5c>
    3cf0:	f6 cf       	rjmp	.-20     	; 0x3cde <__ultoa_invert+0x58>
    3cf2:	46 2f       	mov	r20, r22
    3cf4:	4f 70       	andi	r20, 0x0F	; 15
    3cf6:	40 5d       	subi	r20, 0xD0	; 208
    3cf8:	4a 33       	cpi	r20, 0x3A	; 58
    3cfa:	18 f0       	brcs	.+6      	; 0x3d02 <__ultoa_invert+0x7c>
    3cfc:	49 5d       	subi	r20, 0xD9	; 217
    3cfe:	31 fd       	sbrc	r19, 1
    3d00:	40 52       	subi	r20, 0x20	; 32
    3d02:	41 93       	st	Z+, r20
    3d04:	02 d0       	rcall	.+4      	; 0x3d0a <__ultoa_invert+0x84>
    3d06:	a9 f7       	brne	.-22     	; 0x3cf2 <__ultoa_invert+0x6c>
    3d08:	ea cf       	rjmp	.-44     	; 0x3cde <__ultoa_invert+0x58>
    3d0a:	b4 e0       	ldi	r27, 0x04	; 4
    3d0c:	a6 95       	lsr	r26
    3d0e:	97 95       	ror	r25
    3d10:	87 95       	ror	r24
    3d12:	77 95       	ror	r23
    3d14:	67 95       	ror	r22
    3d16:	ba 95       	dec	r27
    3d18:	c9 f7       	brne	.-14     	; 0x3d0c <__ultoa_invert+0x86>
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	61 05       	cpc	r22, r1
    3d1e:	71 05       	cpc	r23, r1
    3d20:	08 95       	ret
    3d22:	9b 01       	movw	r18, r22
    3d24:	ac 01       	movw	r20, r24
    3d26:	0a 2e       	mov	r0, r26
    3d28:	06 94       	lsr	r0
    3d2a:	57 95       	ror	r21
    3d2c:	47 95       	ror	r20
    3d2e:	37 95       	ror	r19
    3d30:	27 95       	ror	r18
    3d32:	ba 95       	dec	r27
    3d34:	c9 f7       	brne	.-14     	; 0x3d28 <__ultoa_invert+0xa2>
    3d36:	62 0f       	add	r22, r18
    3d38:	73 1f       	adc	r23, r19
    3d3a:	84 1f       	adc	r24, r20
    3d3c:	95 1f       	adc	r25, r21
    3d3e:	a0 1d       	adc	r26, r0
    3d40:	08 95       	ret

00003d42 <__mulsi3>:
    3d42:	db 01       	movw	r26, r22
    3d44:	8f 93       	push	r24
    3d46:	9f 93       	push	r25
    3d48:	0e 94 f3 1c 	call	0x39e6	; 0x39e6 <__muluhisi3>
    3d4c:	bf 91       	pop	r27
    3d4e:	af 91       	pop	r26
    3d50:	a2 9f       	mul	r26, r18
    3d52:	80 0d       	add	r24, r0
    3d54:	91 1d       	adc	r25, r1
    3d56:	a3 9f       	mul	r26, r19
    3d58:	90 0d       	add	r25, r0
    3d5a:	b2 9f       	mul	r27, r18
    3d5c:	90 0d       	add	r25, r0
    3d5e:	11 24       	eor	r1, r1
    3d60:	08 95       	ret

00003d62 <__divmodsi4>:
    3d62:	05 2e       	mov	r0, r21
    3d64:	97 fb       	bst	r25, 7
    3d66:	1e f4       	brtc	.+6      	; 0x3d6e <__divmodsi4+0xc>
    3d68:	00 94       	com	r0
    3d6a:	0e 94 c8 1e 	call	0x3d90	; 0x3d90 <__negsi2>
    3d6e:	57 fd       	sbrc	r21, 7
    3d70:	07 d0       	rcall	.+14     	; 0x3d80 <__divmodsi4_neg2>
    3d72:	0e 94 b5 1c 	call	0x396a	; 0x396a <__udivmodsi4>
    3d76:	07 fc       	sbrc	r0, 7
    3d78:	03 d0       	rcall	.+6      	; 0x3d80 <__divmodsi4_neg2>
    3d7a:	4e f4       	brtc	.+18     	; 0x3d8e <__divmodsi4_exit>
    3d7c:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__negsi2>

00003d80 <__divmodsi4_neg2>:
    3d80:	50 95       	com	r21
    3d82:	40 95       	com	r20
    3d84:	30 95       	com	r19
    3d86:	21 95       	neg	r18
    3d88:	3f 4f       	sbci	r19, 0xFF	; 255
    3d8a:	4f 4f       	sbci	r20, 0xFF	; 255
    3d8c:	5f 4f       	sbci	r21, 0xFF	; 255

00003d8e <__divmodsi4_exit>:
    3d8e:	08 95       	ret

00003d90 <__negsi2>:
    3d90:	90 95       	com	r25
    3d92:	80 95       	com	r24
    3d94:	70 95       	com	r23
    3d96:	61 95       	neg	r22
    3d98:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9e:	08 95       	ret

00003da0 <__usmulhisi3>:
    3da0:	0e 94 fe 1c 	call	0x39fc	; 0x39fc <__umulhisi3>

00003da4 <__usmulhisi3_tail>:
    3da4:	b7 ff       	sbrs	r27, 7
    3da6:	08 95       	ret
    3da8:	82 1b       	sub	r24, r18
    3daa:	93 0b       	sbc	r25, r19
    3dac:	08 95       	ret

00003dae <__xload_1>:
    3dae:	57 fd       	sbrc	r21, 7
    3db0:	03 c0       	rjmp	.+6      	; 0x3db8 <__xload_1+0xa>
    3db2:	5b bf       	out	0x3b, r21	; 59
    3db4:	67 91       	elpm	r22, Z+
    3db6:	08 95       	ret
    3db8:	60 81       	ld	r22, Z
    3dba:	08 95       	ret

00003dbc <_exit>:
    3dbc:	f8 94       	cli

00003dbe <__stop_program>:
    3dbe:	ff cf       	rjmp	.-2      	; 0x3dbe <__stop_program>
