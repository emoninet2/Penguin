
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000326  00802000  00003040  000030d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000735b  00802326  00802326  000033fa  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000033fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000978  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e470  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025bb  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000542b  00000000  00000000  0001486b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000019e4  00000000  00000000  00019c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005029  00000000  00000000  0001b67c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000667a  00000000  00000000  000206a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a0  00000000  00000000  00026d1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__ctors_end>
       4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
       c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      10:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      14:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      18:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      1c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      20:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      24:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      28:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      2c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      30:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      34:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      38:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <__vector_14>
      3c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      40:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      44:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      48:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      4c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      50:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      54:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      58:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      5c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      60:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      64:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__vector_25>
      68:	0c 94 b9 11 	jmp	0x2372	; 0x2372 <__vector_26>
      6c:	0c 94 af 11 	jmp	0x235e	; 0x235e <__vector_27>
      70:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__vector_28>
      74:	0c 94 d7 11 	jmp	0x23ae	; 0x23ae <__vector_29>
      78:	0c 94 cd 11 	jmp	0x239a	; 0x239a <__vector_30>
      7c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      80:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      84:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      88:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      8c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      90:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      94:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      98:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      9c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      b8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      e8:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_58>
      ec:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__vector_59>
      f0:	0c 94 09 12 	jmp	0x2412	; 0x2412 <__vector_60>
      f4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
      fc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     100:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     104:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     108:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     10c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     110:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     114:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     118:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     11c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     120:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     124:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     128:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     12c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     130:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     134:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     138:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     13c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     140:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     144:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     148:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     14c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     150:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     154:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     158:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     15c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     160:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <__vector_88>
     164:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__vector_89>
     168:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__vector_90>
     16c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     170:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     174:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     178:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     17c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     180:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     184:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     188:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     18c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     190:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     194:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     198:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     19c:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1a8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ac:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1b8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1bc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1c8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1cc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1d8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1dc:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e4:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1e8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1ec:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f0:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>
     1f4:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_125>
     1f8:	0c 94 a8 01 	jmp	0x350	; 0x350 <__bad_interrupt>

000001fc <__trampolines_start>:
     1fc:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <glcd_thread>
     200:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <relay_thread>
     204:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <radio_thread>
     208:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <prvIdleTask>

0000020c <__trampolines_end>:
     20c:	6e 61       	ori	r22, 0x1E	; 30
     20e:	6e 00       	.word	0x006e	; ????

00000210 <__c.2240>:
     210:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     220:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     230:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     240:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     250:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     260:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     270:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     280:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     290:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2a0:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2b0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2c0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     2d0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2e0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2f0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     300:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000030e <__ctors_end>:
     30e:	11 24       	eor	r1, r1
     310:	1f be       	out	0x3f, r1	; 63
     312:	cf ef       	ldi	r28, 0xFF	; 255
     314:	cd bf       	out	0x3d, r28	; 61
     316:	df e9       	ldi	r29, 0x9F	; 159
     318:	de bf       	out	0x3e, r29	; 62
     31a:	00 e0       	ldi	r16, 0x00	; 0
     31c:	0c bf       	out	0x3c, r16	; 60

0000031e <__do_copy_data>:
     31e:	13 e2       	ldi	r17, 0x23	; 35
     320:	a0 e0       	ldi	r26, 0x00	; 0
     322:	b0 e2       	ldi	r27, 0x20	; 32
     324:	e0 e4       	ldi	r30, 0x40	; 64
     326:	f0 e3       	ldi	r31, 0x30	; 48
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	0b bf       	out	0x3b, r16	; 59
     32c:	02 c0       	rjmp	.+4      	; 0x332 <__do_copy_data+0x14>
     32e:	07 90       	elpm	r0, Z+
     330:	0d 92       	st	X+, r0
     332:	a6 32       	cpi	r26, 0x26	; 38
     334:	b1 07       	cpc	r27, r17
     336:	d9 f7       	brne	.-10     	; 0x32e <__do_copy_data+0x10>

00000338 <__do_clear_bss>:
     338:	26 e9       	ldi	r18, 0x96	; 150
     33a:	a6 e2       	ldi	r26, 0x26	; 38
     33c:	b3 e2       	ldi	r27, 0x23	; 35
     33e:	01 c0       	rjmp	.+2      	; 0x342 <.do_clear_bss_start>

00000340 <.do_clear_bss_loop>:
     340:	1d 92       	st	X+, r1

00000342 <.do_clear_bss_start>:
     342:	a1 38       	cpi	r26, 0x81	; 129
     344:	b2 07       	cpc	r27, r18
     346:	e1 f7       	brne	.-8      	; 0x340 <.do_clear_bss_loop>
     348:	0e 94 0c 11 	call	0x2218	; 0x2218 <main>
     34c:	0c 94 1e 18 	jmp	0x303c	; 0x303c <_exit>

00000350 <__bad_interrupt>:
     350:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000354 <RadioMode>:
    }
}

ErrorStatus_t writeAckPayload(Payload_t *payload){
    write_ack_payload(payload->pipe, payload->data, payload->length);
}
     354:	82 30       	cpi	r24, 0x02	; 2
     356:	99 f0       	breq	.+38     	; 0x37e <RadioMode+0x2a>
     358:	18 f4       	brcc	.+6      	; 0x360 <RadioMode+0xc>
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	31 f0       	breq	.+12     	; 0x36a <RadioMode+0x16>
     35e:	08 95       	ret
     360:	83 30       	cpi	r24, 0x03	; 3
     362:	11 f1       	breq	.+68     	; 0x3a8 <RadioMode+0x54>
     364:	84 30       	cpi	r24, 0x04	; 4
     366:	c1 f1       	breq	.+112    	; 0x3d8 <RadioMode+0x84>
     368:	08 95       	ret
     36a:	0e 94 8d 04 	call	0x91a	; 0x91a <power_down>
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e2       	ldi	r25, 0x20	; 32
     372:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     37c:	08 95       	ret
     37e:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	49 f4       	brne	.+18     	; 0x398 <RadioMode+0x44>
     386:	0e 94 84 04 	call	0x908	; 0x908 <power_up>
     38a:	8f e9       	ldi	r24, 0x9F	; 159
     38c:	9c e8       	ldi	r25, 0x8C	; 140
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <RadioMode+0x3a>
     392:	00 c0       	rjmp	.+0      	; 0x394 <RadioMode+0x40>
     394:	00 00       	nop
     396:	04 c0       	rjmp	.+8      	; 0x3a0 <RadioMode+0x4c>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e2       	ldi	r25, 0x20	; 32
     39c:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     3a6:	08 95       	ret
     3a8:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     3ac:	83 30       	cpi	r24, 0x03	; 3
     3ae:	59 f1       	breq	.+86     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e2       	ldi	r25, 0x20	; 32
     3b4:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     3b8:	0e 94 96 04 	call	0x92c	; 0x92c <rx_mode>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e2       	ldi	r25, 0x20	; 32
     3c0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     3c4:	8f e0       	ldi	r24, 0x0F	; 15
     3c6:	94 e0       	ldi	r25, 0x04	; 4
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <RadioMode+0x74>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <RadioMode+0x7a>
     3ce:	00 00       	nop
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     3d6:	08 95       	ret
     3d8:	80 91 7c 93 	lds	r24, 0x937C	; 0x80937c <RadioState>
     3dc:	84 30       	cpi	r24, 0x04	; 4
     3de:	99 f0       	breq	.+38     	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e2       	ldi	r25, 0x20	; 32
     3e4:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     3e8:	0e 94 9f 04 	call	0x93e	; 0x93e <tx_mode>
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e2       	ldi	r25, 0x20	; 32
     3f0:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     3f4:	8f e0       	ldi	r24, 0x0F	; 15
     3f6:	94 e0       	ldi	r25, 0x04	; 4
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	f1 f7       	brne	.-4      	; 0x3f8 <RadioMode+0xa4>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <RadioMode+0xaa>
     3fe:	00 00       	nop
     400:	84 e0       	ldi	r24, 0x04	; 4
     402:	80 93 7c 93 	sts	0x937C, r24	; 0x80937c <RadioState>
     406:	08 95       	ret

00000408 <ResetConfigValues>:
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	df 92       	push	r13
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
     414:	1f 93       	push	r17
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	1f 92       	push	r1
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	7c 01       	movw	r14, r24
     424:	8b 01       	movw	r16, r22
     426:	e0 e4       	ldi	r30, 0x40	; 64
     428:	f6 e0       	ldi	r31, 0x06	; 6
     42a:	80 eb       	ldi	r24, 0xB0	; 176
     42c:	81 83       	std	Z+1, r24	; 0x01
     42e:	80 e4       	ldi	r24, 0x40	; 64
     430:	82 83       	std	Z+2, r24	; 0x02
     432:	80 e5       	ldi	r24, 0x50	; 80
     434:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
     438:	80 e1       	ldi	r24, 0x10	; 16
     43a:	81 83       	std	Z+1, r24	; 0x01
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <__TEXT_REGION_LENGTH__+0x700621>
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e2       	ldi	r25, 0x20	; 32
     446:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     44a:	83 e0       	ldi	r24, 0x03	; 3
     44c:	90 e2       	ldi	r25, 0x20	; 32
     44e:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     452:	2f ef       	ldi	r18, 0xFF	; 255
     454:	83 ec       	ldi	r24, 0xC3	; 195
     456:	99 e0       	ldi	r25, 0x09	; 9
     458:	21 50       	subi	r18, 0x01	; 1
     45a:	80 40       	sbci	r24, 0x00	; 0
     45c:	90 40       	sbci	r25, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <ResetConfigValues+0x50>
     460:	00 c0       	rjmp	.+0      	; 0x462 <ResetConfigValues+0x5a>
     462:	00 00       	nop
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	0e 94 aa 01 	call	0x354	; 0x354 <RadioMode>
     46a:	83 e0       	ldi	r24, 0x03	; 3
     46c:	0e 94 aa 01 	call	0x354	; 0x354 <RadioMode>
     470:	0e 94 28 05 	call	0xa50	; 0xa50 <clear_data_ready_flag>
     474:	0e 94 2f 04 	call	0x85e	; 0x85e <flush_rx>
     478:	0e 94 16 04 	call	0x82c	; 0x82c <flush_tx>
     47c:	80 e7       	ldi	r24, 0x70	; 112
     47e:	89 83       	std	Y+1, r24	; 0x01
     480:	41 e0       	ldi	r20, 0x01	; 1
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	be 01       	movw	r22, r28
     486:	6f 5f       	subi	r22, 0xFF	; 255
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	87 e0       	ldi	r24, 0x07	; 7
     48c:	0e 94 c4 03 	call	0x788	; 0x788 <write_register_buffer>
     490:	8b e0       	ldi	r24, 0x0B	; 11
     492:	8a 83       	std	Y+2, r24	; 0x02
     494:	41 e0       	ldi	r20, 0x01	; 1
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	be 01       	movw	r22, r28
     49a:	6e 5f       	subi	r22, 0xFE	; 254
     49c:	7f 4f       	sbci	r23, 0xFF	; 255
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0e 94 c4 03 	call	0x788	; 0x788 <write_register_buffer>
     4a4:	d7 01       	movw	r26, r14
     4a6:	8c 91       	ld	r24, X
     4a8:	ed e7       	ldi	r30, 0x7D	; 125
     4aa:	f3 e9       	ldi	r31, 0x93	; 147
     4ac:	80 83       	st	Z, r24
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	8c 91       	ld	r24, X
     4b2:	11 97       	sbiw	r26, 0x01	; 1
     4b4:	81 83       	std	Z+1, r24	; 0x01
     4b6:	12 96       	adiw	r26, 0x02	; 2
     4b8:	8c 91       	ld	r24, X
     4ba:	12 97       	sbiw	r26, 0x02	; 2
     4bc:	82 83       	std	Z+2, r24	; 0x02
     4be:	13 96       	adiw	r26, 0x03	; 3
     4c0:	8c 91       	ld	r24, X
     4c2:	13 97       	sbiw	r26, 0x03	; 3
     4c4:	83 83       	std	Z+3, r24	; 0x03
     4c6:	14 96       	adiw	r26, 0x04	; 4
     4c8:	8c 91       	ld	r24, X
     4ca:	14 97       	sbiw	r26, 0x04	; 4
     4cc:	84 83       	std	Z+4, r24	; 0x04
     4ce:	15 96       	adiw	r26, 0x05	; 5
     4d0:	8c 91       	ld	r24, X
     4d2:	15 97       	sbiw	r26, 0x05	; 5
     4d4:	85 83       	std	Z+5, r24	; 0x05
     4d6:	16 96       	adiw	r26, 0x06	; 6
     4d8:	8c 91       	ld	r24, X
     4da:	16 97       	sbiw	r26, 0x06	; 6
     4dc:	86 83       	std	Z+6, r24	; 0x06
     4de:	17 96       	adiw	r26, 0x07	; 7
     4e0:	8c 91       	ld	r24, X
     4e2:	17 97       	sbiw	r26, 0x07	; 7
     4e4:	87 83       	std	Z+7, r24	; 0x07
     4e6:	18 96       	adiw	r26, 0x08	; 8
     4e8:	8c 91       	ld	r24, X
     4ea:	18 97       	sbiw	r26, 0x08	; 8
     4ec:	80 87       	std	Z+8, r24	; 0x08
     4ee:	19 96       	adiw	r26, 0x09	; 9
     4f0:	8c 91       	ld	r24, X
     4f2:	19 97       	sbiw	r26, 0x09	; 9
     4f4:	81 87       	std	Z+9, r24	; 0x09
     4f6:	1a 96       	adiw	r26, 0x0a	; 10
     4f8:	8c 91       	ld	r24, X
     4fa:	1a 97       	sbiw	r26, 0x0a	; 10
     4fc:	82 87       	std	Z+10, r24	; 0x0a
     4fe:	1b 96       	adiw	r26, 0x0b	; 11
     500:	8c 91       	ld	r24, X
     502:	1b 97       	sbiw	r26, 0x0b	; 11
     504:	83 87       	std	Z+11, r24	; 0x0b
     506:	1c 96       	adiw	r26, 0x0c	; 12
     508:	9c 91       	ld	r25, X
     50a:	1c 97       	sbiw	r26, 0x0c	; 12
     50c:	94 87       	std	Z+12, r25	; 0x0c
     50e:	1d 96       	adiw	r26, 0x0d	; 13
     510:	9c 91       	ld	r25, X
     512:	95 87       	std	Z+13, r25	; 0x0d
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	9c e0       	ldi	r25, 0x0C	; 12
     51a:	d9 01       	movw	r26, r18
     51c:	ad 56       	subi	r26, 0x6D	; 109
     51e:	bc 46       	sbci	r27, 0x6C	; 108
     520:	f8 01       	movw	r30, r16
     522:	e2 0f       	add	r30, r18
     524:	f3 1f       	adc	r31, r19
     526:	49 2f       	mov	r20, r25
     528:	01 90       	ld	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	4a 95       	dec	r20
     52e:	e1 f7       	brne	.-8      	; 0x528 <ResetConfigValues+0x120>
     530:	24 5f       	subi	r18, 0xF4	; 244
     532:	3f 4f       	sbci	r19, 0xFF	; 255
     534:	28 34       	cpi	r18, 0x48	; 72
     536:	31 05       	cpc	r19, r1
     538:	81 f7       	brne	.-32     	; 0x51a <ResetConfigValues+0x112>
     53a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <enable_dynamic_payload>
     53e:	0d e7       	ldi	r16, 0x7D	; 125
     540:	13 e9       	ldi	r17, 0x93	; 147
     542:	f8 01       	movw	r30, r16
     544:	84 85       	ldd	r24, Z+12	; 0x0c
     546:	0e 94 00 06 	call	0xc00	; 0xc00 <enable_payload_with_ack>
     54a:	d8 01       	movw	r26, r16
     54c:	1d 96       	adiw	r26, 0x0d	; 13
     54e:	8c 91       	ld	r24, X
     550:	0e 94 14 06 	call	0xc28	; 0xc28 <enable_dynamic_payload_with_no_ack>
     554:	f8 01       	movw	r30, r16
     556:	84 81       	ldd	r24, Z+4	; 0x04
     558:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <set_auto_retransmission_count>
     55c:	d8 01       	movw	r26, r16
     55e:	15 96       	adiw	r26, 0x05	; 5
     560:	8c 91       	ld	r24, X
     562:	0e 94 fd 04 	call	0x9fa	; 0x9fa <set_auto_retransmission_delay>
     566:	f8 01       	movw	r30, r16
     568:	87 81       	ldd	r24, Z+7	; 0x07
     56a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <set_DataRate>
     56e:	0f 2e       	mov	r0, r31
     570:	f3 e9       	ldi	r31, 0x93	; 147
     572:	ef 2e       	mov	r14, r31
     574:	f3 e9       	ldi	r31, 0x93	; 147
     576:	ff 2e       	mov	r15, r31
     578:	f0 2d       	mov	r31, r0
     57a:	0f 2e       	mov	r0, r31
     57c:	fe e9       	ldi	r31, 0x9E	; 158
     57e:	af 2e       	mov	r10, r31
     580:	f3 e9       	ldi	r31, 0x93	; 147
     582:	bf 2e       	mov	r11, r31
     584:	f0 2d       	mov	r31, r0
     586:	d1 2c       	mov	r13, r1
     588:	d7 01       	movw	r26, r14
     58a:	6c 91       	ld	r22, X
     58c:	8d 2d       	mov	r24, r13
     58e:	0e 94 cc 04 	call	0x998	; 0x998 <enable_rx_on_pipe>
     592:	f5 01       	movw	r30, r10
     594:	3a 97       	sbiw	r30, 0x0a	; 10
     596:	60 81       	ld	r22, Z
     598:	8d 2d       	mov	r24, r13
     59a:	0e 94 a8 04 	call	0x950	; 0x950 <enable_auto_ack>
     59e:	f5 01       	movw	r30, r10
     5a0:	60 81       	ld	r22, Z
     5a2:	8d 2d       	mov	r24, r13
     5a4:	0e 94 c8 05 	call	0xb90	; 0xb90 <enable_dynamic_payload_pipe>
     5a8:	d7 01       	movw	r26, r14
     5aa:	12 96       	adiw	r26, 0x02	; 2
     5ac:	0c 91       	ld	r16, X
     5ae:	12 97       	sbiw	r26, 0x02	; 2
     5b0:	13 96       	adiw	r26, 0x03	; 3
     5b2:	1c 91       	ld	r17, X
     5b4:	13 97       	sbiw	r26, 0x03	; 3
     5b6:	14 96       	adiw	r26, 0x04	; 4
     5b8:	2c 91       	ld	r18, X
     5ba:	14 97       	sbiw	r26, 0x04	; 4
     5bc:	15 96       	adiw	r26, 0x05	; 5
     5be:	3c 91       	ld	r19, X
     5c0:	15 97       	sbiw	r26, 0x05	; 5
     5c2:	16 96       	adiw	r26, 0x06	; 6
     5c4:	4c 91       	ld	r20, X
     5c6:	16 97       	sbiw	r26, 0x06	; 6
     5c8:	17 96       	adiw	r26, 0x07	; 7
     5ca:	5c 91       	ld	r21, X
     5cc:	17 97       	sbiw	r26, 0x07	; 7
     5ce:	18 96       	adiw	r26, 0x08	; 8
     5d0:	6c 91       	ld	r22, X
     5d2:	18 97       	sbiw	r26, 0x08	; 8
     5d4:	19 96       	adiw	r26, 0x09	; 9
     5d6:	7c 91       	ld	r23, X
     5d8:	8d 2d       	mov	r24, r13
     5da:	0e 94 42 05 	call	0xa84	; 0xa84 <set_RX_pipe_address>
     5de:	bc e0       	ldi	r27, 0x0C	; 12
     5e0:	eb 0e       	add	r14, r27
     5e2:	f1 1c       	adc	r15, r1
     5e4:	d3 94       	inc	r13
     5e6:	ec e0       	ldi	r30, 0x0C	; 12
     5e8:	ae 0e       	add	r10, r30
     5ea:	b1 1c       	adc	r11, r1
     5ec:	f6 e0       	ldi	r31, 0x06	; 6
     5ee:	df 12       	cpse	r13, r31
     5f0:	cb cf       	rjmp	.-106    	; 0x588 <ResetConfigValues+0x180>
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	bf 90       	pop	r11
     606:	af 90       	pop	r10
     608:	08 95       	ret

0000060a <readable>:
     60a:	0e 94 1b 05 	call	0xa36	; 0xa36 <get_data_ready_flag>
     60e:	81 11       	cpse	r24, r1
     610:	04 c0       	rjmp	.+8      	; 0x61a <readable+0x10>
     612:	0e 94 c3 05 	call	0xb86	; 0xb86 <get_fifo_flag_rx_empty>
     616:	81 11       	cpse	r24, r1
     618:	08 c0       	rjmp	.+16     	; 0x62a <readable+0x20>
     61a:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_rx_payload_pipe>
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	87 30       	cpi	r24, 0x07	; 7
     622:	09 f4       	brne	.+2      	; 0x626 <readable+0x1c>
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	89 2f       	mov	r24, r25
     628:	01 c0       	rjmp	.+2      	; 0x62c <readable+0x22>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	81 70       	andi	r24, 0x01	; 1
     62e:	08 95       	ret

00000630 <readPayload>:
ErrorStatus_t readPayload(Payload_t *payload){
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	ec 01       	movw	r28, r24
    ErrorStatus_t error;
    payload->pipe = get_rx_payload_pipe();
     636:	0e 94 3b 05 	call	0xa76	; 0xa76 <get_rx_payload_pipe>
     63a:	88 87       	std	Y+8, r24	; 0x08
    
    if(payload->pipe>=0 && payload->pipe<=5){
     63c:	86 30       	cpi	r24, 0x06	; 6
     63e:	a0 f4       	brcc	.+40     	; 0x668 <readPayload+0x38>
        if(RadioConfig.FeatureDynamicPayloadEnabled == 1){
     640:	90 91 88 93 	lds	r25, 0x9388	; 0x809388 <RadioConfig+0xb>
     644:	99 23       	and	r25, r25
     646:	29 f0       	breq	.+10     	; 0x652 <readPayload+0x22>
            payload->length = read_rx_payload_width();
     648:	0e 94 48 04 	call	0x890	; 0x890 <read_rx_payload_width>
     64c:	8c 87       	std	Y+12, r24	; 0x0c
     64e:	9d 87       	std	Y+13, r25	; 0x0d
     650:	05 c0       	rjmp	.+10     	; 0x65c <readPayload+0x2c>
        }else{
            payload->length = get_RX_pipe_width(payload->pipe);
     652:	0e 94 b0 05 	call	0xb60	; 0xb60 <get_RX_pipe_width>
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	8c 87       	std	Y+12, r24	; 0x0c
     65a:	9d 87       	std	Y+13, r25	; 0x0d
        }
        read_rx_payload(payload->data,payload->length);
     65c:	6c 85       	ldd	r22, Y+12	; 0x0c
     65e:	7d 85       	ldd	r23, Y+13	; 0x0d
     660:	8a 85       	ldd	r24, Y+10	; 0x0a
     662:	9b 85       	ldd	r25, Y+11	; 0x0b
     664:	0e 94 ef 03 	call	0x7de	; 0x7de <read_rx_payload>
        error = SUCCESS;
    }
    return error;
}
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	08 95       	ret

00000670 <port_SPI_Transcieve>:
    else return 0;      
}
bool get_fifo_flag_tx_reuse(){
    if(read_register(_NRF24L01P_REG_FIFO_STATUS)&_NRF24L01P_FIFO_STATUS_RX_REUSE ) return 1;
    else return 0;      
}
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	61 15       	cp	r22, r1
     676:	71 05       	cpc	r23, r1
     678:	89 f0       	breq	.+34     	; 0x69c <port_SPI_Transcieve+0x2c>
     67a:	dc 01       	movw	r26, r24
     67c:	68 0f       	add	r22, r24
     67e:	79 1f       	adc	r23, r25
     680:	e0 ec       	ldi	r30, 0xC0	; 192
     682:	f8 e0       	ldi	r31, 0x08	; 8
     684:	ed 01       	movw	r28, r26
     686:	9c 91       	ld	r25, X
     688:	93 83       	std	Z+3, r25	; 0x03
     68a:	92 81       	ldd	r25, Z+2	; 0x02
     68c:	99 23       	and	r25, r25
     68e:	ec f7       	brge	.-6      	; 0x68a <port_SPI_Transcieve+0x1a>
     690:	93 81       	ldd	r25, Z+3	; 0x03
     692:	98 83       	st	Y, r25
     694:	11 96       	adiw	r26, 0x01	; 1
     696:	a6 17       	cp	r26, r22
     698:	b7 07       	cpc	r27, r23
     69a:	a1 f7       	brne	.-24     	; 0x684 <port_SPI_Transcieve+0x14>
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <read_register>:
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	1f 92       	push	r1
     6aa:	cd b7       	in	r28, 0x3d	; 61
     6ac:	de b7       	in	r29, 0x3e	; 62
     6ae:	18 2f       	mov	r17, r24
     6b0:	86 e0       	ldi	r24, 0x06	; 6
     6b2:	90 e2       	ldi	r25, 0x20	; 32
     6b4:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     6b8:	1f 71       	andi	r17, 0x1F	; 31
     6ba:	19 83       	std	Y+1, r17	; 0x01
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     6c8:	61 e0       	ldi	r22, 0x01	; 1
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     6d4:	86 e0       	ldi	r24, 0x06	; 6
     6d6:	90 e2       	ldi	r25, 0x20	; 32
     6d8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     6dc:	89 81       	ldd	r24, Y+1	; 0x01
     6de:	0f 90       	pop	r0
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	08 95       	ret

000006e8 <read_register_buffer>:
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	1f 93       	push	r17
     6f2:	cf 93       	push	r28
     6f4:	df 93       	push	r29
     6f6:	1f 92       	push	r1
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	18 2f       	mov	r17, r24
     6fe:	7b 01       	movw	r14, r22
     700:	6a 01       	movw	r12, r20
     702:	86 e0       	ldi	r24, 0x06	; 6
     704:	90 e2       	ldi	r25, 0x20	; 32
     706:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     70a:	1f 71       	andi	r17, 0x1F	; 31
     70c:	19 83       	std	Y+1, r17	; 0x01
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	ce 01       	movw	r24, r28
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     71a:	b6 01       	movw	r22, r12
     71c:	c7 01       	movw	r24, r14
     71e:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     722:	86 e0       	ldi	r24, 0x06	; 6
     724:	90 e2       	ldi	r25, 0x20	; 32
     726:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     72a:	0f 90       	pop	r0
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	1f 91       	pop	r17
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	08 95       	ret

0000073c <write_register>:
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	1f 92       	push	r1
     744:	1f 92       	push	r1
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	18 2f       	mov	r17, r24
     74c:	6a 83       	std	Y+2, r22	; 0x02
     74e:	86 e0       	ldi	r24, 0x06	; 6
     750:	90 e2       	ldi	r25, 0x20	; 32
     752:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     756:	1f 71       	andi	r17, 0x1F	; 31
     758:	10 62       	ori	r17, 0x20	; 32
     75a:	19 83       	std	Y+1, r17	; 0x01
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	70 e0       	ldi	r23, 0x00	; 0
     76c:	ce 01       	movw	r24, r28
     76e:	02 96       	adiw	r24, 0x02	; 2
     770:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     774:	86 e0       	ldi	r24, 0x06	; 6
     776:	90 e2       	ldi	r25, 0x20	; 32
     778:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	08 95       	ret

00000788 <write_register_buffer>:
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	1f 92       	push	r1
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	18 2f       	mov	r17, r24
     79e:	7b 01       	movw	r14, r22
     7a0:	6a 01       	movw	r12, r20
     7a2:	86 e0       	ldi	r24, 0x06	; 6
     7a4:	90 e2       	ldi	r25, 0x20	; 32
     7a6:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     7aa:	1f 71       	andi	r17, 0x1F	; 31
     7ac:	10 62       	ori	r17, 0x20	; 32
     7ae:	19 83       	std	Y+1, r17	; 0x01
     7b0:	61 e0       	ldi	r22, 0x01	; 1
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	ce 01       	movw	r24, r28
     7b6:	01 96       	adiw	r24, 0x01	; 1
     7b8:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     7bc:	b6 01       	movw	r22, r12
     7be:	c7 01       	movw	r24, r14
     7c0:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	90 e2       	ldi	r25, 0x20	; 32
     7c8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	1f 91       	pop	r17
     7d4:	ff 90       	pop	r15
     7d6:	ef 90       	pop	r14
     7d8:	df 90       	pop	r13
     7da:	cf 90       	pop	r12
     7dc:	08 95       	ret

000007de <read_rx_payload>:
     7de:	ef 92       	push	r14
     7e0:	ff 92       	push	r15
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	1f 92       	push	r1
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	8c 01       	movw	r16, r24
     7f2:	7b 01       	movw	r14, r22
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	90 e2       	ldi	r25, 0x20	; 32
     7f8:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     7fc:	81 e6       	ldi	r24, 0x61	; 97
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     80c:	b7 01       	movw	r22, r14
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     814:	86 e0       	ldi	r24, 0x06	; 6
     816:	90 e2       	ldi	r25, 0x20	; 32
     818:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	08 95       	ret

0000082c <flush_tx>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	1f 92       	push	r1
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	90 e2       	ldi	r25, 0x20	; 32
     83a:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     83e:	81 ee       	ldi	r24, 0xE1	; 225
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     84e:	86 e0       	ldi	r24, 0x06	; 6
     850:	90 e2       	ldi	r25, 0x20	; 32
     852:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <flush_rx>:
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	1f 92       	push	r1
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	86 e0       	ldi	r24, 0x06	; 6
     86a:	90 e2       	ldi	r25, 0x20	; 32
     86c:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     870:	82 ee       	ldi	r24, 0xE2	; 226
     872:	89 83       	std	Y+1, r24	; 0x01
     874:	61 e0       	ldi	r22, 0x01	; 1
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	ce 01       	movw	r24, r28
     87a:	01 96       	adiw	r24, 0x01	; 1
     87c:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     880:	86 e0       	ldi	r24, 0x06	; 6
     882:	90 e2       	ldi	r25, 0x20	; 32
     884:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <read_rx_payload_width>:
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	1f 92       	push	r1
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	86 e0       	ldi	r24, 0x06	; 6
     89c:	90 e2       	ldi	r25, 0x20	; 32
     89e:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     8a2:	80 e6       	ldi	r24, 0x60	; 96
     8a4:	89 83       	std	Y+1, r24	; 0x01
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	70 e0       	ldi	r23, 0x00	; 0
     8b6:	ce 01       	movw	r24, r28
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     8be:	86 e0       	ldi	r24, 0x06	; 6
     8c0:	90 e2       	ldi	r25, 0x20	; 32
     8c2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <get_status>:
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	1f 92       	push	r1
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	86 e0       	ldi	r24, 0x06	; 6
     8de:	90 e2       	ldi	r25, 0x20	; 32
     8e0:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
     8e4:	8f ef       	ldi	r24, 0xFF	; 255
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	ce 01       	movw	r24, r28
     8ee:	01 96       	adiw	r24, 0x01	; 1
     8f0:	0e 94 38 03 	call	0x670	; 0x670 <port_SPI_Transcieve>
     8f4:	86 e0       	ldi	r24, 0x06	; 6
     8f6:	90 e2       	ldi	r25, 0x20	; 32
     8f8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0f 90       	pop	r0
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <power_up>:
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     90e:	68 2f       	mov	r22, r24
     910:	62 60       	ori	r22, 0x02	; 2
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     918:	08 95       	ret

0000091a <power_down>:
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     920:	68 2f       	mov	r22, r24
     922:	6d 7f       	andi	r22, 0xFD	; 253
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     92a:	08 95       	ret

0000092c <rx_mode>:
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     932:	68 2f       	mov	r22, r24
     934:	61 60       	ori	r22, 0x01	; 1
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     93c:	08 95       	ret

0000093e <tx_mode>:
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     944:	68 2f       	mov	r22, r24
     946:	6e 7f       	andi	r22, 0xFE	; 254
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     94e:	08 95       	ret

00000950 <enable_auto_ack>:
     950:	cf 93       	push	r28
     952:	c8 2f       	mov	r28, r24
     954:	66 23       	and	r22, r22
     956:	79 f0       	breq	.+30     	; 0x976 <enable_auto_ack+0x26>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <enable_auto_ack+0x18>
     964:	66 0f       	add	r22, r22
     966:	77 1f       	adc	r23, r23
     968:	ca 95       	dec	r28
     96a:	e2 f7       	brpl	.-8      	; 0x964 <enable_auto_ack+0x14>
     96c:	68 2b       	or	r22, r24
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     974:	0f c0       	rjmp	.+30     	; 0x994 <enable_auto_ack+0x44>
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	02 c0       	rjmp	.+4      	; 0x986 <enable_auto_ack+0x36>
     982:	66 0f       	add	r22, r22
     984:	77 1f       	adc	r23, r23
     986:	ca 95       	dec	r28
     988:	e2 f7       	brpl	.-8      	; 0x982 <enable_auto_ack+0x32>
     98a:	60 95       	com	r22
     98c:	68 23       	and	r22, r24
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     994:	cf 91       	pop	r28
     996:	08 95       	ret

00000998 <enable_rx_on_pipe>:
     998:	cf 93       	push	r28
     99a:	c8 2f       	mov	r28, r24
     99c:	66 23       	and	r22, r22
     99e:	79 f0       	breq	.+30     	; 0x9be <enable_rx_on_pipe+0x26>
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <enable_rx_on_pipe+0x18>
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	ca 95       	dec	r28
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <enable_rx_on_pipe+0x14>
     9b4:	68 2b       	or	r22, r24
     9b6:	82 e0       	ldi	r24, 0x02	; 2
     9b8:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     9bc:	0f c0       	rjmp	.+30     	; 0x9dc <enable_rx_on_pipe+0x44>
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     9c4:	61 e0       	ldi	r22, 0x01	; 1
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	02 c0       	rjmp	.+4      	; 0x9ce <enable_rx_on_pipe+0x36>
     9ca:	66 0f       	add	r22, r22
     9cc:	77 1f       	adc	r23, r23
     9ce:	ca 95       	dec	r28
     9d0:	e2 f7       	brpl	.-8      	; 0x9ca <enable_rx_on_pipe+0x32>
     9d2:	60 95       	com	r22
     9d4:	68 23       	and	r22, r24
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     9dc:	cf 91       	pop	r28
     9de:	08 95       	ret

000009e0 <set_auto_retransmission_count>:
     9e0:	cf 93       	push	r28
     9e2:	c8 2f       	mov	r28, r24
     9e4:	84 e0       	ldi	r24, 0x04	; 4
     9e6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     9ea:	80 7f       	andi	r24, 0xF0	; 240
     9ec:	68 2f       	mov	r22, r24
     9ee:	6c 2b       	or	r22, r28
     9f0:	84 e0       	ldi	r24, 0x04	; 4
     9f2:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <set_auto_retransmission_delay>:
     9fa:	cf 93       	push	r28
     9fc:	c8 2f       	mov	r28, r24
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     a04:	8f 70       	andi	r24, 0x0F	; 15
     a06:	90 e1       	ldi	r25, 0x10	; 16
     a08:	c9 9f       	mul	r28, r25
     a0a:	90 01       	movw	r18, r0
     a0c:	11 24       	eor	r1, r1
     a0e:	68 2f       	mov	r22, r24
     a10:	62 2b       	or	r22, r18
     a12:	84 e0       	ldi	r24, 0x04	; 4
     a14:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <set_DataRate>:
     a1c:	cf 93       	push	r28
     a1e:	c8 2f       	mov	r28, r24
     a20:	86 e0       	ldi	r24, 0x06	; 6
     a22:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     a26:	87 7d       	andi	r24, 0xD7	; 215
     a28:	68 2f       	mov	r22, r24
     a2a:	6c 2b       	or	r22, r28
     a2c:	86 e0       	ldi	r24, 0x06	; 6
     a2e:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <get_data_ready_flag>:
     a36:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_status>
     a3a:	00 24       	eor	r0, r0
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	00 1c       	adc	r0, r0
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	00 1c       	adc	r0, r0
     a48:	89 2f       	mov	r24, r25
     a4a:	90 2d       	mov	r25, r0
     a4c:	81 70       	andi	r24, 0x01	; 1
     a4e:	08 95       	ret

00000a50 <clear_data_ready_flag>:
     a50:	cf 93       	push	r28
     a52:	df 93       	push	r29
     a54:	1f 92       	push	r1
     a56:	cd b7       	in	r28, 0x3d	; 61
     a58:	de b7       	in	r29, 0x3e	; 62
     a5a:	80 e4       	ldi	r24, 0x40	; 64
     a5c:	89 83       	std	Y+1, r24	; 0x01
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	be 01       	movw	r22, r28
     a64:	6f 5f       	subi	r22, 0xFF	; 255
     a66:	7f 4f       	sbci	r23, 0xFF	; 255
     a68:	87 e0       	ldi	r24, 0x07	; 7
     a6a:	0e 94 c4 03 	call	0x788	; 0x788 <write_register_buffer>
     a6e:	0f 90       	pop	r0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <get_rx_payload_pipe>:
     a76:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_status>
     a7a:	8e 70       	andi	r24, 0x0E	; 14
     a7c:	99 27       	eor	r25, r25
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	08 95       	ret

00000a84 <set_RX_pipe_address>:
     a84:	2f 92       	push	r2
     a86:	3f 92       	push	r3
     a88:	4f 92       	push	r4
     a8a:	5f 92       	push	r5
     a8c:	6f 92       	push	r6
     a8e:	7f 92       	push	r7
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	0f 93       	push	r16
     aa2:	1f 93       	push	r17
     aa4:	cf 93       	push	r28
     aa6:	df 93       	push	r29
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	25 97       	sbiw	r28, 0x05	; 5
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	48 2e       	mov	r4, r24
     ab4:	b0 2e       	mov	r11, r16
     ab6:	a2 2e       	mov	r10, r18
     ab8:	93 2e       	mov	r9, r19
     aba:	84 2e       	mov	r8, r20
     abc:	75 2e       	mov	r7, r21
     abe:	66 2e       	mov	r6, r22
     ac0:	57 2e       	mov	r5, r23
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	84 15       	cp	r24, r4
     ac6:	68 f4       	brcc	.+26     	; 0xae2 <set_RX_pipe_address+0x5e>
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	8e ef       	ldi	r24, 0xFE	; 254
     ace:	84 0d       	add	r24, r4
     ad0:	84 30       	cpi	r24, 0x04	; 4
     ad2:	08 f0       	brcs	.+2      	; 0xad6 <set_RX_pipe_address+0x52>
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	c2 2e       	mov	r12, r18
     ad8:	d9 2e       	mov	r13, r25
     ada:	1c 14       	cp	r1, r12
     adc:	1d 04       	cpc	r1, r13
     ade:	34 f0       	brlt	.+12     	; 0xaec <set_RX_pipe_address+0x68>
     ae0:	21 c0       	rjmp	.+66     	; 0xb24 <set_RX_pipe_address+0xa0>
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	cf 2e       	mov	r12, r31
     ae8:	d1 2c       	mov	r13, r1
     aea:	f0 2d       	mov	r31, r0
     aec:	de 01       	movw	r26, r28
     aee:	11 96       	adiw	r26, 0x01	; 1
     af0:	7d 01       	movw	r14, r26
     af2:	21 2c       	mov	r2, r1
     af4:	31 2c       	mov	r3, r1
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	2b 2d       	mov	r18, r11
     afc:	31 2f       	mov	r19, r17
     afe:	4a 2d       	mov	r20, r10
     b00:	59 2d       	mov	r21, r9
     b02:	68 2d       	mov	r22, r8
     b04:	77 2d       	mov	r23, r7
     b06:	86 2d       	mov	r24, r6
     b08:	95 2d       	mov	r25, r5
     b0a:	02 2d       	mov	r16, r2
     b0c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <__lshrdi3>
     b10:	d7 01       	movw	r26, r14
     b12:	2d 93       	st	X+, r18
     b14:	7d 01       	movw	r14, r26
     b16:	31 96       	adiw	r30, 0x01	; 1
     b18:	b8 e0       	ldi	r27, 0x08	; 8
     b1a:	2b 0e       	add	r2, r27
     b1c:	31 1c       	adc	r3, r1
     b1e:	ec 15       	cp	r30, r12
     b20:	fd 05       	cpc	r31, r13
     b22:	5c f3       	brlt	.-42     	; 0xafa <set_RX_pipe_address+0x76>
     b24:	a6 01       	movw	r20, r12
     b26:	be 01       	movw	r22, r28
     b28:	6f 5f       	subi	r22, 0xFF	; 255
     b2a:	7f 4f       	sbci	r23, 0xFF	; 255
     b2c:	8a e0       	ldi	r24, 0x0A	; 10
     b2e:	84 0d       	add	r24, r4
     b30:	0e 94 c4 03 	call	0x788	; 0x788 <write_register_buffer>
     b34:	25 96       	adiw	r28, 0x05	; 5
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	ff 90       	pop	r15
     b44:	ef 90       	pop	r14
     b46:	df 90       	pop	r13
     b48:	cf 90       	pop	r12
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	7f 90       	pop	r7
     b54:	6f 90       	pop	r6
     b56:	5f 90       	pop	r5
     b58:	4f 90       	pop	r4
     b5a:	3f 90       	pop	r3
     b5c:	2f 90       	pop	r2
     b5e:	08 95       	ret

00000b60 <get_RX_pipe_width>:
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	1f 92       	push	r1
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	41 e0       	ldi	r20, 0x01	; 1
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	be 01       	movw	r22, r28
     b70:	6f 5f       	subi	r22, 0xFF	; 255
     b72:	7f 4f       	sbci	r23, 0xFF	; 255
     b74:	8f 5e       	subi	r24, 0xEF	; 239
     b76:	0e 94 74 03 	call	0x6e8	; 0x6e8 <read_register_buffer>
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 73       	andi	r24, 0x3F	; 63
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <get_fifo_flag_rx_empty>:
     b86:	87 e1       	ldi	r24, 0x17	; 23
     b88:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
     b8c:	81 70       	andi	r24, 0x01	; 1
     b8e:	08 95       	ret

00000b90 <enable_dynamic_payload_pipe>:

void enable_dynamic_payload_pipe(pipe_t pipe, bool sel){
     b90:	cf 93       	push	r28
     b92:	c8 2f       	mov	r28, r24
    if(sel){
     b94:	66 23       	and	r22, r22
     b96:	79 f0       	breq	.+30     	; 0xbb6 <enable_dynamic_payload_pipe+0x26>
          uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     b98:	8c e1       	ldi	r24, 0x1C	; 28
     b9a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp |= (1<<pipe);
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <enable_dynamic_payload_pipe+0x18>
     ba4:	66 0f       	add	r22, r22
     ba6:	77 1f       	adc	r23, r23
     ba8:	ca 95       	dec	r28
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <enable_dynamic_payload_pipe+0x14>
     bac:	68 2b       	or	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);   
     bae:	8c e1       	ldi	r24, 0x1C	; 28
     bb0:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     bb4:	0f c0       	rjmp	.+30     	; 0xbd4 <enable_dynamic_payload_pipe+0x44>
    }else{
        uint8_t temp = read_register(_NRF24L01P_REG_DYNPD);
     bb6:	8c e1       	ldi	r24, 0x1C	; 28
     bb8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp &= ~(1<<pipe);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	70 e0       	ldi	r23, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <enable_dynamic_payload_pipe+0x36>
     bc2:	66 0f       	add	r22, r22
     bc4:	77 1f       	adc	r23, r23
     bc6:	ca 95       	dec	r28
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <enable_dynamic_payload_pipe+0x32>
     bca:	60 95       	com	r22
     bcc:	68 23       	and	r22, r24
        write_register(_NRF24L01P_REG_DYNPD,temp);    
     bce:	8c e1       	ldi	r24, 0x1C	; 28
     bd0:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
    }
   
}
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <enable_dynamic_payload>:



void enable_dynamic_payload(bool sel){
    if(sel){
     bd8:	88 23       	and	r24, r24
     bda:	49 f0       	breq	.+18     	; 0xbee <enable_dynamic_payload+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     bdc:	8d e1       	ldi	r24, 0x1D	; 29
     bde:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DPL;
     be2:	68 2f       	mov	r22, r24
     be4:	64 60       	ori	r22, 0x04	; 4
        write_register(_NRF24L01P_REG_FEATURE,temp);     
     be6:	8d e1       	ldi	r24, 0x1D	; 29
     be8:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     bec:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     bee:	8d e1       	ldi	r24, 0x1D	; 29
     bf0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DPL;
     bf4:	68 2f       	mov	r22, r24
     bf6:	6b 7f       	andi	r22, 0xFB	; 251
        write_register(_NRF24L01P_REG_FEATURE,temp);
     bf8:	8d e1       	ldi	r24, 0x1D	; 29
     bfa:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     bfe:	08 95       	ret

00000c00 <enable_payload_with_ack>:
}



void enable_payload_with_ack(bool sel){
    if(sel){
     c00:	88 23       	and	r24, r24
     c02:	49 f0       	breq	.+18     	; 0xc16 <enable_payload_with_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c04:	8d e1       	ldi	r24, 0x1D	; 29
     c06:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
     c0a:	68 2f       	mov	r22, r24
     c0c:	62 60       	ori	r22, 0x02	; 2
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     c0e:	8d e1       	ldi	r24, 0x1D	; 29
     c10:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     c14:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c16:	8d e1       	ldi	r24, 0x1D	; 29
     c18:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_ACK_PAY;
     c1c:	68 2f       	mov	r22, r24
     c1e:	6d 7f       	andi	r22, 0xFD	; 253
        write_register(_NRF24L01P_REG_FEATURE,temp); 
     c20:	8d e1       	ldi	r24, 0x1D	; 29
     c22:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     c26:	08 95       	ret

00000c28 <enable_dynamic_payload_with_no_ack>:
}



void enable_dynamic_payload_with_no_ack(bool sel){
    if(sel){
     c28:	88 23       	and	r24, r24
     c2a:	49 f0       	breq	.+18     	; 0xc3e <enable_dynamic_payload_with_no_ack+0x16>
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c2c:	8d e1       	ldi	r24, 0x1D	; 29
     c2e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp |= _NRF24L01_FEATURE_EN_DYN_ACK;
     c32:	68 2f       	mov	r22, r24
     c34:	61 60       	ori	r22, 0x01	; 1
        write_register(_NRF24L01P_REG_FEATURE,temp);        
     c36:	8d e1       	ldi	r24, 0x1D	; 29
     c38:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     c3c:	08 95       	ret
    }
    else{
        uint8_t temp = read_register(_NRF24L01P_REG_FEATURE);
     c3e:	8d e1       	ldi	r24, 0x1D	; 29
     c40:	0e 94 51 03 	call	0x6a2	; 0x6a2 <read_register>
        temp &= ~_NRF24L01_FEATURE_EN_DYN_ACK;
     c44:	68 2f       	mov	r22, r24
     c46:	6e 7f       	andi	r22, 0xFE	; 254
        write_register(_NRF24L01P_REG_FEATURE,temp);  
     c48:	8d e1       	ldi	r24, 0x1D	; 29
     c4a:	0e 94 9e 03 	call	0x73c	; 0x73c <write_register>
     c4e:	08 95       	ret

00000c50 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     c50:	31 e1       	ldi	r19, 0x11	; 17
     c52:	fc 01       	movw	r30, r24
     c54:	30 83       	st	Z, r19
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	22 e2       	ldi	r18, 0x22	; 34
     c5a:	20 83       	st	Z, r18
     c5c:	31 97       	sbiw	r30, 0x01	; 1
     c5e:	a3 e3       	ldi	r26, 0x33	; 51
     c60:	a0 83       	st	Z, r26
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	60 83       	st	Z, r22
     c66:	31 97       	sbiw	r30, 0x01	; 1
     c68:	70 83       	st	Z, r23
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	10 82       	st	Z, r1
     c6e:	31 97       	sbiw	r30, 0x01	; 1
     c70:	10 82       	st	Z, r1
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	60 e8       	ldi	r22, 0x80	; 128
     c76:	60 83       	st	Z, r22
     c78:	31 97       	sbiw	r30, 0x01	; 1
     c7a:	10 82       	st	Z, r1
     c7c:	31 97       	sbiw	r30, 0x01	; 1
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	60 83       	st	Z, r22
     c82:	31 97       	sbiw	r30, 0x01	; 1
     c84:	63 e0       	ldi	r22, 0x03	; 3
     c86:	60 83       	st	Z, r22
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	64 e0       	ldi	r22, 0x04	; 4
     c8c:	60 83       	st	Z, r22
     c8e:	31 97       	sbiw	r30, 0x01	; 1
     c90:	65 e0       	ldi	r22, 0x05	; 5
     c92:	60 83       	st	Z, r22
     c94:	31 97       	sbiw	r30, 0x01	; 1
     c96:	66 e0       	ldi	r22, 0x06	; 6
     c98:	60 83       	st	Z, r22
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	67 e0       	ldi	r22, 0x07	; 7
     c9e:	60 83       	st	Z, r22
     ca0:	31 97       	sbiw	r30, 0x01	; 1
     ca2:	68 e0       	ldi	r22, 0x08	; 8
     ca4:	60 83       	st	Z, r22
     ca6:	31 97       	sbiw	r30, 0x01	; 1
     ca8:	69 e0       	ldi	r22, 0x09	; 9
     caa:	60 83       	st	Z, r22
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	60 e1       	ldi	r22, 0x10	; 16
     cb0:	60 83       	st	Z, r22
     cb2:	31 97       	sbiw	r30, 0x01	; 1
     cb4:	30 83       	st	Z, r19
     cb6:	31 97       	sbiw	r30, 0x01	; 1
     cb8:	32 e1       	ldi	r19, 0x12	; 18
     cba:	30 83       	st	Z, r19
     cbc:	31 97       	sbiw	r30, 0x01	; 1
     cbe:	33 e1       	ldi	r19, 0x13	; 19
     cc0:	30 83       	st	Z, r19
     cc2:	31 97       	sbiw	r30, 0x01	; 1
     cc4:	34 e1       	ldi	r19, 0x14	; 20
     cc6:	30 83       	st	Z, r19
     cc8:	31 97       	sbiw	r30, 0x01	; 1
     cca:	35 e1       	ldi	r19, 0x15	; 21
     ccc:	30 83       	st	Z, r19
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	36 e1       	ldi	r19, 0x16	; 22
     cd2:	30 83       	st	Z, r19
     cd4:	31 97       	sbiw	r30, 0x01	; 1
     cd6:	37 e1       	ldi	r19, 0x17	; 23
     cd8:	30 83       	st	Z, r19
     cda:	31 97       	sbiw	r30, 0x01	; 1
     cdc:	38 e1       	ldi	r19, 0x18	; 24
     cde:	30 83       	st	Z, r19
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	39 e1       	ldi	r19, 0x19	; 25
     ce4:	30 83       	st	Z, r19
     ce6:	31 97       	sbiw	r30, 0x01	; 1
     ce8:	30 e2       	ldi	r19, 0x20	; 32
     cea:	30 83       	st	Z, r19
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	31 e2       	ldi	r19, 0x21	; 33
     cf0:	30 83       	st	Z, r19
     cf2:	31 97       	sbiw	r30, 0x01	; 1
     cf4:	20 83       	st	Z, r18
     cf6:	31 97       	sbiw	r30, 0x01	; 1
     cf8:	23 e2       	ldi	r18, 0x23	; 35
     cfa:	20 83       	st	Z, r18
     cfc:	31 97       	sbiw	r30, 0x01	; 1
     cfe:	40 83       	st	Z, r20
     d00:	31 97       	sbiw	r30, 0x01	; 1
     d02:	50 83       	st	Z, r21
     d04:	31 97       	sbiw	r30, 0x01	; 1
     d06:	26 e2       	ldi	r18, 0x26	; 38
     d08:	20 83       	st	Z, r18
     d0a:	31 97       	sbiw	r30, 0x01	; 1
     d0c:	27 e2       	ldi	r18, 0x27	; 39
     d0e:	20 83       	st	Z, r18
     d10:	31 97       	sbiw	r30, 0x01	; 1
     d12:	28 e2       	ldi	r18, 0x28	; 40
     d14:	20 83       	st	Z, r18
     d16:	31 97       	sbiw	r30, 0x01	; 1
     d18:	29 e2       	ldi	r18, 0x29	; 41
     d1a:	20 83       	st	Z, r18
     d1c:	31 97       	sbiw	r30, 0x01	; 1
     d1e:	20 e3       	ldi	r18, 0x30	; 48
     d20:	20 83       	st	Z, r18
     d22:	31 97       	sbiw	r30, 0x01	; 1
     d24:	21 e3       	ldi	r18, 0x31	; 49
     d26:	20 83       	st	Z, r18
     d28:	87 97       	sbiw	r24, 0x27	; 39
     d2a:	08 95       	ret

00000d2c <xPortStartScheduler>:
     d2c:	65 e0       	ldi	r22, 0x05	; 5
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	98 e0       	ldi	r25, 0x08	; 8
     d32:	0e 94 51 12 	call	0x24a2	; 0x24a2 <TC0_ConfigClockSource>
     d36:	83 ef       	ldi	r24, 0xF3	; 243
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x700826>
     d3e:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x700827>
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	98 e0       	ldi	r25, 0x08	; 8
     d48:	0e 94 57 12 	call	0x24ae	; 0x24ae <TC0_SetOverflowIntLevel>
     d4c:	e0 ea       	ldi	r30, 0xA0	; 160
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	82 83       	std	Z+2, r24	; 0x02
     d56:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     d5a:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     d5e:	cd 91       	ld	r28, X+
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	dd 91       	ld	r29, X+
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	ff 91       	pop	r31
     d68:	ef 91       	pop	r30
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	df 90       	pop	r13
     d8c:	cf 90       	pop	r12
     d8e:	bf 90       	pop	r11
     d90:	af 90       	pop	r10
     d92:	9f 90       	pop	r9
     d94:	8f 90       	pop	r8
     d96:	7f 90       	pop	r7
     d98:	6f 90       	pop	r6
     d9a:	5f 90       	pop	r5
     d9c:	4f 90       	pop	r4
     d9e:	3f 90       	pop	r3
     da0:	2f 90       	pop	r2
     da2:	1f 90       	pop	r1
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	08 95       	ret
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	08 95       	ret

00000db0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     db0:	0f 92       	push	r0
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	0f 92       	push	r0
     db8:	1f 92       	push	r1
     dba:	11 24       	eor	r1, r1
     dbc:	2f 92       	push	r2
     dbe:	3f 92       	push	r3
     dc0:	4f 92       	push	r4
     dc2:	5f 92       	push	r5
     dc4:	6f 92       	push	r6
     dc6:	7f 92       	push	r7
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
     df8:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     dfc:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     e00:	0d b6       	in	r0, 0x3d	; 61
     e02:	0d 92       	st	X+, r0
     e04:	0e b6       	in	r0, 0x3e	; 62
     e06:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e08:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e0c:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     e10:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     e14:	cd 91       	ld	r28, X+
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	dd 91       	ld	r29, X+
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	ff 91       	pop	r31
     e1e:	ef 91       	pop	r30
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	bf 91       	pop	r27
     e26:	af 91       	pop	r26
     e28:	9f 91       	pop	r25
     e2a:	8f 91       	pop	r24
     e2c:	7f 91       	pop	r23
     e2e:	6f 91       	pop	r22
     e30:	5f 91       	pop	r21
     e32:	4f 91       	pop	r20
     e34:	3f 91       	pop	r19
     e36:	2f 91       	pop	r18
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	bf 90       	pop	r11
     e46:	af 90       	pop	r10
     e48:	9f 90       	pop	r9
     e4a:	8f 90       	pop	r8
     e4c:	7f 90       	pop	r7
     e4e:	6f 90       	pop	r6
     e50:	5f 90       	pop	r5
     e52:	4f 90       	pop	r4
     e54:	3f 90       	pop	r3
     e56:	2f 90       	pop	r2
     e58:	1f 90       	pop	r1
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e60:	08 95       	ret

00000e62 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	0f 92       	push	r0
     e6a:	1f 92       	push	r1
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 92       	push	r2
     e70:	3f 92       	push	r3
     e72:	4f 92       	push	r4
     e74:	5f 92       	push	r5
     e76:	6f 92       	push	r6
     e78:	7f 92       	push	r7
     e7a:	8f 92       	push	r8
     e7c:	9f 92       	push	r9
     e7e:	af 92       	push	r10
     e80:	bf 92       	push	r11
     e82:	cf 92       	push	r12
     e84:	df 92       	push	r13
     e86:	ef 92       	push	r14
     e88:	ff 92       	push	r15
     e8a:	0f 93       	push	r16
     e8c:	1f 93       	push	r17
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     eae:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     eb2:	0d b6       	in	r0, 0x3d	; 61
     eb4:	0d 92       	st	X+, r0
     eb6:	0e b6       	in	r0, 0x3e	; 62
     eb8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     eba:	0e 94 c1 09 	call	0x1382	; 0x1382 <xTaskIncrementTick>
     ebe:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ec0:	0e 94 39 0b 	call	0x1672	; 0x1672 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ec4:	a0 91 79 93 	lds	r26, 0x9379	; 0x809379 <pxCurrentTCB>
     ec8:	b0 91 7a 93 	lds	r27, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
     ecc:	cd 91       	ld	r28, X+
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	dd 91       	ld	r29, X+
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	ff 91       	pop	r31
     ed6:	ef 91       	pop	r30
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	1f 91       	pop	r17
     ef2:	0f 91       	pop	r16
     ef4:	ff 90       	pop	r15
     ef6:	ef 90       	pop	r14
     ef8:	df 90       	pop	r13
     efa:	cf 90       	pop	r12
     efc:	bf 90       	pop	r11
     efe:	af 90       	pop	r10
     f00:	9f 90       	pop	r9
     f02:	8f 90       	pop	r8
     f04:	7f 90       	pop	r7
     f06:	6f 90       	pop	r6
     f08:	5f 90       	pop	r5
     f0a:	4f 90       	pop	r4
     f0c:	3f 90       	pop	r3
     f0e:	2f 90       	pop	r2
     f10:	1f 90       	pop	r1
     f12:	0f 90       	pop	r0
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f18:	08 95       	ret

00000f1a <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
     f1a:	0e 94 31 07 	call	0xe62	; 0xe62 <vPortYieldFromTick>
		asm volatile ( "reti" );
     f1e:	18 95       	reti

00000f20 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     f26:	0e 94 bb 09 	call	0x1376	; 0x1376 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     f2a:	80 91 28 23 	lds	r24, 0x2328	; 0x802328 <pucAlignedHeap.3808>
     f2e:	90 91 29 23 	lds	r25, 0x2329	; 0x802329 <pucAlignedHeap.3808+0x1>
     f32:	89 2b       	or	r24, r25
     f34:	31 f4       	brne	.+12     	; 0xf42 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     f36:	8d e2       	ldi	r24, 0x2D	; 45
     f38:	93 e2       	ldi	r25, 0x23	; 35
     f3a:	80 93 28 23 	sts	0x2328, r24	; 0x802328 <pucAlignedHeap.3808>
     f3e:	90 93 29 23 	sts	0x2329, r25	; 0x802329 <pucAlignedHeap.3808+0x1>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     f42:	20 91 2a 23 	lds	r18, 0x232A	; 0x80232a <xNextFreeByte>
     f46:	30 91 2b 23 	lds	r19, 0x232B	; 0x80232b <xNextFreeByte+0x1>
     f4a:	ce 01       	movw	r24, r28
     f4c:	82 0f       	add	r24, r18
     f4e:	93 1f       	adc	r25, r19
     f50:	8f 3f       	cpi	r24, 0xFF	; 255
     f52:	4f e6       	ldi	r20, 0x6F	; 111
     f54:	94 07       	cpc	r25, r20
     f56:	70 f4       	brcc	.+28     	; 0xf74 <pvPortMalloc+0x54>
     f58:	28 17       	cp	r18, r24
     f5a:	39 07       	cpc	r19, r25
     f5c:	70 f4       	brcc	.+28     	; 0xf7a <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     f5e:	c0 91 28 23 	lds	r28, 0x2328	; 0x802328 <pucAlignedHeap.3808>
     f62:	d0 91 29 23 	lds	r29, 0x2329	; 0x802329 <pucAlignedHeap.3808+0x1>
     f66:	c2 0f       	add	r28, r18
     f68:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     f6a:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <xNextFreeByte>
     f6e:	90 93 2b 23 	sts	0x232B, r25	; 0x80232b <xNextFreeByte+0x1>
     f72:	05 c0       	rjmp	.+10     	; 0xf7e <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     f74:	c0 e0       	ldi	r28, 0x00	; 0
     f76:	d0 e0       	ldi	r29, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <pvPortMalloc+0x5e>
     f7a:	c0 e0       	ldi	r28, 0x00	; 0
     f7c:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     f7e:	0e 94 97 0a 	call	0x152e	; 0x152e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     f82:	ce 01       	movw	r24, r28
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	08 95       	ret

00000f8a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     f8a:	08 95       	ret

00000f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f8c:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f8e:	03 96       	adiw	r24, 0x03	; 3
     f90:	81 83       	std	Z+1, r24	; 0x01
     f92:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	3f ef       	ldi	r19, 0xFF	; 255
     f98:	23 83       	std	Z+3, r18	; 0x03
     f9a:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f9c:	85 83       	std	Z+5, r24	; 0x05
     f9e:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fa0:	87 83       	std	Z+7, r24	; 0x07
     fa2:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     fa4:	10 82       	st	Z, r1
     fa6:	08 95       	ret

00000fa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     fa8:	fc 01       	movw	r30, r24
     faa:	10 86       	std	Z+8, r1	; 0x08
     fac:	11 86       	std	Z+9, r1	; 0x09
     fae:	08 95       	ret

00000fb0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	9c 01       	movw	r18, r24
     fb6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     fb8:	dc 01       	movw	r26, r24
     fba:	11 96       	adiw	r26, 0x01	; 1
     fbc:	cd 91       	ld	r28, X+
     fbe:	dc 91       	ld	r29, X
     fc0:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fc2:	c2 83       	std	Z+2, r28	; 0x02
     fc4:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	84 83       	std	Z+4, r24	; 0x04
     fcc:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	9d 81       	ldd	r25, Y+5	; 0x05
     fd2:	dc 01       	movw	r26, r24
     fd4:	12 96       	adiw	r26, 0x02	; 2
     fd6:	6d 93       	st	X+, r22
     fd8:	7c 93       	st	X, r23
     fda:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     fdc:	6c 83       	std	Y+4, r22	; 0x04
     fde:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     fe0:	20 87       	std	Z+8, r18	; 0x08
     fe2:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     fe4:	f9 01       	movw	r30, r18
     fe6:	80 81       	ld	r24, Z
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	80 83       	st	Z, r24
}
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
     ff0:	08 95       	ret

00000ff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     ff8:	48 81       	ld	r20, Y
     ffa:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     ffc:	4f 3f       	cpi	r20, 0xFF	; 255
     ffe:	2f ef       	ldi	r18, 0xFF	; 255
    1000:	52 07       	cpc	r21, r18
    1002:	21 f4       	brne	.+8      	; 0x100c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    1004:	fc 01       	movw	r30, r24
    1006:	a7 81       	ldd	r26, Z+7	; 0x07
    1008:	b0 85       	ldd	r27, Z+8	; 0x08
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    100c:	dc 01       	movw	r26, r24
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	01 c0       	rjmp	.+2      	; 0x1014 <vListInsert+0x22>
    1012:	df 01       	movw	r26, r30
    1014:	12 96       	adiw	r26, 0x02	; 2
    1016:	ed 91       	ld	r30, X+
    1018:	fc 91       	ld	r31, X
    101a:	13 97       	sbiw	r26, 0x03	; 3
    101c:	20 81       	ld	r18, Z
    101e:	31 81       	ldd	r19, Z+1	; 0x01
    1020:	42 17       	cp	r20, r18
    1022:	53 07       	cpc	r21, r19
    1024:	b0 f7       	brcc	.-20     	; 0x1012 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1026:	12 96       	adiw	r26, 0x02	; 2
    1028:	ed 91       	ld	r30, X+
    102a:	fc 91       	ld	r31, X
    102c:	13 97       	sbiw	r26, 0x03	; 3
    102e:	ea 83       	std	Y+2, r30	; 0x02
    1030:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1032:	c4 83       	std	Z+4, r28	; 0x04
    1034:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    1036:	ac 83       	std	Y+4, r26	; 0x04
    1038:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	cd 93       	st	X+, r28
    103e:	dc 93       	st	X, r29
    1040:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1042:	88 87       	std	Y+8, r24	; 0x08
    1044:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    1046:	fc 01       	movw	r30, r24
    1048:	20 81       	ld	r18, Z
    104a:	2f 5f       	subi	r18, 0xFF	; 255
    104c:	20 83       	st	Z, r18
}
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    105a:	a0 85       	ldd	r26, Z+8	; 0x08
    105c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    105e:	c2 81       	ldd	r28, Z+2	; 0x02
    1060:	d3 81       	ldd	r29, Z+3	; 0x03
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	95 81       	ldd	r25, Z+5	; 0x05
    1066:	8c 83       	std	Y+4, r24	; 0x04
    1068:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    106a:	c4 81       	ldd	r28, Z+4	; 0x04
    106c:	d5 81       	ldd	r29, Z+5	; 0x05
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	cd 91       	ld	r28, X+
    107a:	dc 91       	ld	r29, X
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	ce 17       	cp	r28, r30
    1080:	df 07       	cpc	r29, r31
    1082:	31 f4       	brne	.+12     	; 0x1090 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	11 96       	adiw	r26, 0x01	; 1
    108a:	8d 93       	st	X+, r24
    108c:	9c 93       	st	X, r25
    108e:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1090:	10 86       	std	Z+8, r1	; 0x08
    1092:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1094:	8c 91       	ld	r24, X
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    10a0:	ff cf       	rjmp	.-2      	; 0x10a0 <prvIdleTask>

000010a2 <prvAddCurrentTaskToDelayedList>:
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	ec 01       	movw	r28, r24
    10a8:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    10ac:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10b0:	82 83       	std	Z+2, r24	; 0x02
    10b2:	93 83       	std	Z+3, r25	; 0x03
    10b4:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    10b8:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    10bc:	c8 17       	cp	r28, r24
    10be:	d9 07       	cpc	r29, r25
    10c0:	68 f4       	brcc	.+26     	; 0x10dc <prvAddCurrentTaskToDelayedList+0x3a>
    10c2:	60 91 79 93 	lds	r22, 0x9379	; 0x809379 <pxCurrentTCB>
    10c6:	70 91 7a 93 	lds	r23, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10ca:	80 91 3f 93 	lds	r24, 0x933F	; 0x80933f <pxOverflowDelayedTaskList>
    10ce:	90 91 40 93 	lds	r25, 0x9340	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    10d2:	6e 5f       	subi	r22, 0xFE	; 254
    10d4:	7f 4f       	sbci	r23, 0xFF	; 255
    10d6:	0e 94 f9 07 	call	0xff2	; 0xff2 <vListInsert>
    10da:	17 c0       	rjmp	.+46     	; 0x110a <prvAddCurrentTaskToDelayedList+0x68>
    10dc:	60 91 79 93 	lds	r22, 0x9379	; 0x809379 <pxCurrentTCB>
    10e0:	70 91 7a 93 	lds	r23, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    10e4:	80 91 41 93 	lds	r24, 0x9341	; 0x809341 <pxDelayedTaskList>
    10e8:	90 91 42 93 	lds	r25, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    10ec:	6e 5f       	subi	r22, 0xFE	; 254
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	0e 94 f9 07 	call	0xff2	; 0xff2 <vListInsert>
    10f4:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <xNextTaskUnblockTime>
    10f8:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <xNextTaskUnblockTime+0x1>
    10fc:	c8 17       	cp	r28, r24
    10fe:	d9 07       	cpc	r29, r25
    1100:	20 f4       	brcc	.+8      	; 0x110a <prvAddCurrentTaskToDelayedList+0x68>
    1102:	c0 93 92 22 	sts	0x2292, r28	; 0x802292 <xNextTaskUnblockTime>
    1106:	d0 93 93 22 	sts	0x2293, r29	; 0x802293 <xNextTaskUnblockTime+0x1>
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	08 95       	ret

00001110 <xTaskGenericCreate>:
    1110:	4f 92       	push	r4
    1112:	5f 92       	push	r5
    1114:	6f 92       	push	r6
    1116:	7f 92       	push	r7
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	4c 01       	movw	r8, r24
    1132:	eb 01       	movw	r28, r22
    1134:	5a 01       	movw	r10, r20
    1136:	29 01       	movw	r4, r18
    1138:	81 e2       	ldi	r24, 0x21	; 33
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 90 07 	call	0xf20	; 0xf20 <pvPortMalloc>
    1140:	3c 01       	movw	r6, r24
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	09 f4       	brne	.+2      	; 0x1148 <xTaskGenericCreate+0x38>
    1146:	da c0       	rjmp	.+436    	; 0x12fc <xTaskGenericCreate+0x1ec>
    1148:	c1 14       	cp	r12, r1
    114a:	d1 04       	cpc	r13, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <xTaskGenericCreate+0x40>
    114e:	d2 c0       	rjmp	.+420    	; 0x12f4 <xTaskGenericCreate+0x1e4>
    1150:	c5 01       	movw	r24, r10
    1152:	0e 94 90 07 	call	0xf20	; 0xf20 <pvPortMalloc>
    1156:	f3 01       	movw	r30, r6
    1158:	87 8b       	std	Z+23, r24	; 0x17
    115a:	90 8f       	std	Z+24, r25	; 0x18
    115c:	89 2b       	or	r24, r25
    115e:	21 f4       	brne	.+8      	; 0x1168 <xTaskGenericCreate+0x58>
    1160:	c3 01       	movw	r24, r6
    1162:	0e 94 c5 07 	call	0xf8a	; 0xf8a <vPortFree>
    1166:	ca c0       	rjmp	.+404    	; 0x12fc <xTaskGenericCreate+0x1ec>
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	af 1a       	sub	r10, r31
    116c:	b1 08       	sbc	r11, r1
    116e:	f3 01       	movw	r30, r6
    1170:	87 89       	ldd	r24, Z+23	; 0x17
    1172:	90 8d       	ldd	r25, Z+24	; 0x18
    1174:	a8 0e       	add	r10, r24
    1176:	b9 1e       	adc	r11, r25
    1178:	88 81       	ld	r24, Y
    117a:	81 8f       	std	Z+25, r24	; 0x19
    117c:	88 81       	ld	r24, Y
    117e:	88 23       	and	r24, r24
    1180:	81 f0       	breq	.+32     	; 0x11a2 <xTaskGenericCreate+0x92>
    1182:	d3 01       	movw	r26, r6
    1184:	5a 96       	adiw	r26, 0x1a	; 26
    1186:	fe 01       	movw	r30, r28
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	9e 01       	movw	r18, r28
    118c:	28 5f       	subi	r18, 0xF8	; 248
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	ef 01       	movw	r28, r30
    1192:	81 91       	ld	r24, Z+
    1194:	8d 93       	st	X+, r24
    1196:	88 81       	ld	r24, Y
    1198:	88 23       	and	r24, r24
    119a:	19 f0       	breq	.+6      	; 0x11a2 <xTaskGenericCreate+0x92>
    119c:	e2 17       	cp	r30, r18
    119e:	f3 07       	cpc	r31, r19
    11a0:	b9 f7       	brne	.-18     	; 0x1190 <xTaskGenericCreate+0x80>
    11a2:	f3 01       	movw	r30, r6
    11a4:	10 a2       	std	Z+32, r1	; 0x20
    11a6:	10 2f       	mov	r17, r16
    11a8:	04 30       	cpi	r16, 0x04	; 4
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <xTaskGenericCreate+0x9e>
    11ac:	13 e0       	ldi	r17, 0x03	; 3
    11ae:	f3 01       	movw	r30, r6
    11b0:	16 8b       	std	Z+22, r17	; 0x16
    11b2:	e3 01       	movw	r28, r6
    11b4:	22 96       	adiw	r28, 0x02	; 2
    11b6:	ce 01       	movw	r24, r28
    11b8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <vListInitialiseItem>
    11bc:	c3 01       	movw	r24, r6
    11be:	0c 96       	adiw	r24, 0x0c	; 12
    11c0:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <vListInitialiseItem>
    11c4:	f3 01       	movw	r30, r6
    11c6:	60 86       	std	Z+8, r6	; 0x08
    11c8:	71 86       	std	Z+9, r7	; 0x09
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	81 1b       	sub	r24, r17
    11d0:	91 09       	sbc	r25, r1
    11d2:	84 87       	std	Z+12, r24	; 0x0c
    11d4:	95 87       	std	Z+13, r25	; 0x0d
    11d6:	62 8a       	std	Z+18, r6	; 0x12
    11d8:	73 8a       	std	Z+19, r7	; 0x13
    11da:	a2 01       	movw	r20, r4
    11dc:	b4 01       	movw	r22, r8
    11de:	c5 01       	movw	r24, r10
    11e0:	0e 94 28 06 	call	0xc50	; 0xc50 <pxPortInitialiseStack>
    11e4:	f3 01       	movw	r30, r6
    11e6:	80 83       	st	Z, r24
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	e1 14       	cp	r14, r1
    11ec:	f1 04       	cpc	r15, r1
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <xTaskGenericCreate+0xe6>
    11f0:	f7 01       	movw	r30, r14
    11f2:	60 82       	st	Z, r6
    11f4:	71 82       	std	Z+1, r7	; 0x01
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	0f 92       	push	r0
    11fc:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    1200:	8f 5f       	subi	r24, 0xFF	; 255
    1202:	80 93 35 93 	sts	0x9335, r24	; 0x809335 <uxCurrentNumberOfTasks>
    1206:	80 91 79 93 	lds	r24, 0x9379	; 0x809379 <pxCurrentTCB>
    120a:	90 91 7a 93 	lds	r25, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    120e:	89 2b       	or	r24, r25
    1210:	89 f5       	brne	.+98     	; 0x1274 <xTaskGenericCreate+0x164>
    1212:	60 92 79 93 	sts	0x9379, r6	; 0x809379 <pxCurrentTCB>
    1216:	70 92 7a 93 	sts	0x937A, r7	; 0x80937a <pxCurrentTCB+0x1>
    121a:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	c1 f5       	brne	.+112    	; 0x1292 <xTaskGenericCreate+0x182>
    1222:	85 e5       	ldi	r24, 0x55	; 85
    1224:	93 e9       	ldi	r25, 0x93	; 147
    1226:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    122a:	8e e5       	ldi	r24, 0x5E	; 94
    122c:	93 e9       	ldi	r25, 0x93	; 147
    122e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    1232:	87 e6       	ldi	r24, 0x67	; 103
    1234:	93 e9       	ldi	r25, 0x93	; 147
    1236:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    123a:	80 e7       	ldi	r24, 0x70	; 112
    123c:	93 e9       	ldi	r25, 0x93	; 147
    123e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    1242:	8c e4       	ldi	r24, 0x4C	; 76
    1244:	93 e9       	ldi	r25, 0x93	; 147
    1246:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    124a:	83 e4       	ldi	r24, 0x43	; 67
    124c:	93 e9       	ldi	r25, 0x93	; 147
    124e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    1252:	86 e3       	ldi	r24, 0x36	; 54
    1254:	93 e9       	ldi	r25, 0x93	; 147
    1256:	0e 94 c6 07 	call	0xf8c	; 0xf8c <vListInitialise>
    125a:	8c e4       	ldi	r24, 0x4C	; 76
    125c:	93 e9       	ldi	r25, 0x93	; 147
    125e:	80 93 41 93 	sts	0x9341, r24	; 0x809341 <pxDelayedTaskList>
    1262:	90 93 42 93 	sts	0x9342, r25	; 0x809342 <pxDelayedTaskList+0x1>
    1266:	83 e4       	ldi	r24, 0x43	; 67
    1268:	93 e9       	ldi	r25, 0x93	; 147
    126a:	80 93 3f 93 	sts	0x933F, r24	; 0x80933f <pxOverflowDelayedTaskList>
    126e:	90 93 40 93 	sts	0x9340, r25	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    1272:	0f c0       	rjmp	.+30     	; 0x1292 <xTaskGenericCreate+0x182>
    1274:	80 91 31 93 	lds	r24, 0x9331	; 0x809331 <xSchedulerRunning>
    1278:	81 11       	cpse	r24, r1
    127a:	0b c0       	rjmp	.+22     	; 0x1292 <xTaskGenericCreate+0x182>
    127c:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    1280:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    1284:	86 89       	ldd	r24, Z+22	; 0x16
    1286:	08 17       	cp	r16, r24
    1288:	20 f0       	brcs	.+8      	; 0x1292 <xTaskGenericCreate+0x182>
    128a:	60 92 79 93 	sts	0x9379, r6	; 0x809379 <pxCurrentTCB>
    128e:	70 92 7a 93 	sts	0x937A, r7	; 0x80937a <pxCurrentTCB+0x1>
    1292:	80 91 2d 93 	lds	r24, 0x932D	; 0x80932d <uxTaskNumber>
    1296:	8f 5f       	subi	r24, 0xFF	; 255
    1298:	80 93 2d 93 	sts	0x932D, r24	; 0x80932d <uxTaskNumber>
    129c:	f3 01       	movw	r30, r6
    129e:	86 89       	ldd	r24, Z+22	; 0x16
    12a0:	90 91 32 93 	lds	r25, 0x9332	; 0x809332 <uxTopReadyPriority>
    12a4:	98 17       	cp	r25, r24
    12a6:	10 f4       	brcc	.+4      	; 0x12ac <xTaskGenericCreate+0x19c>
    12a8:	80 93 32 93 	sts	0x9332, r24	; 0x809332 <uxTopReadyPriority>
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	22 0f       	add	r18, r18
    12ba:	33 1f       	adc	r19, r19
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	be 01       	movw	r22, r28
    12c2:	8b 5a       	subi	r24, 0xAB	; 171
    12c4:	9c 46       	sbci	r25, 0x6C	; 108
    12c6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vListInsertEnd>
    12ca:	0f 90       	pop	r0
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	80 91 31 93 	lds	r24, 0x9331	; 0x809331 <xSchedulerRunning>
    12d2:	88 23       	and	r24, r24
    12d4:	59 f0       	breq	.+22     	; 0x12ec <xTaskGenericCreate+0x1dc>
    12d6:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    12da:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    12de:	86 89       	ldd	r24, Z+22	; 0x16
    12e0:	80 17       	cp	r24, r16
    12e2:	30 f4       	brcc	.+12     	; 0x12f0 <xTaskGenericCreate+0x1e0>
    12e4:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <xTaskGenericCreate+0x1ee>
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <xTaskGenericCreate+0x1ee>
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <xTaskGenericCreate+0x1ee>
    12f4:	fc 01       	movw	r30, r24
    12f6:	c7 8a       	std	Z+23, r12	; 0x17
    12f8:	d0 8e       	std	Z+24, r13	; 0x18
    12fa:	36 cf       	rjmp	.-404    	; 0x1168 <xTaskGenericCreate+0x58>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	9f 90       	pop	r9
    1314:	8f 90       	pop	r8
    1316:	7f 90       	pop	r7
    1318:	6f 90       	pop	r6
    131a:	5f 90       	pop	r5
    131c:	4f 90       	pop	r4
    131e:	08 95       	ret

00001320 <vTaskStartScheduler>:
    1320:	af 92       	push	r10
    1322:	bf 92       	push	r11
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	a1 2c       	mov	r10, r1
    1330:	b1 2c       	mov	r11, r1
    1332:	c1 2c       	mov	r12, r1
    1334:	d1 2c       	mov	r13, r1
    1336:	e1 2c       	mov	r14, r1
    1338:	f1 2c       	mov	r15, r1
    133a:	00 e0       	ldi	r16, 0x00	; 0
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	44 e6       	ldi	r20, 0x64	; 100
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	6c eb       	ldi	r22, 0xBC	; 188
    1346:	72 e2       	ldi	r23, 0x22	; 34
    1348:	80 e5       	ldi	r24, 0x50	; 80
    134a:	98 e0       	ldi	r25, 0x08	; 8
    134c:	0e 94 88 08 	call	0x1110	; 0x1110 <xTaskGenericCreate>
    1350:	81 30       	cpi	r24, 0x01	; 1
    1352:	49 f4       	brne	.+18     	; 0x1366 <vTaskStartScheduler+0x46>
    1354:	f8 94       	cli
    1356:	80 93 31 93 	sts	0x9331, r24	; 0x809331 <xSchedulerRunning>
    135a:	10 92 33 93 	sts	0x9333, r1	; 0x809333 <xTickCount>
    135e:	10 92 34 93 	sts	0x9334, r1	; 0x809334 <xTickCount+0x1>
    1362:	0e 94 96 06 	call	0xd2c	; 0xd2c <xPortStartScheduler>
    1366:	0f 91       	pop	r16
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	08 95       	ret

00001376 <vTaskSuspendAll>:
    1376:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	80 93 2c 93 	sts	0x932C, r24	; 0x80932c <uxSchedulerSuspended>
    1380:	08 95       	ret

00001382 <xTaskIncrementTick>:
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1394:	81 11       	cpse	r24, r1
    1396:	b6 c0       	rjmp	.+364    	; 0x1504 <xTaskIncrementTick+0x182>
    1398:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    139c:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	80 93 33 93 	sts	0x9333, r24	; 0x809333 <xTickCount>
    13a6:	90 93 34 93 	sts	0x9334, r25	; 0x809334 <xTickCount+0x1>
    13aa:	e0 90 33 93 	lds	r14, 0x9333	; 0x809333 <xTickCount>
    13ae:	f0 90 34 93 	lds	r15, 0x9334	; 0x809334 <xTickCount+0x1>
    13b2:	e1 14       	cp	r14, r1
    13b4:	f1 04       	cpc	r15, r1
    13b6:	99 f5       	brne	.+102    	; 0x141e <xTaskIncrementTick+0x9c>
    13b8:	80 91 41 93 	lds	r24, 0x9341	; 0x809341 <pxDelayedTaskList>
    13bc:	90 91 42 93 	lds	r25, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    13c0:	20 91 3f 93 	lds	r18, 0x933F	; 0x80933f <pxOverflowDelayedTaskList>
    13c4:	30 91 40 93 	lds	r19, 0x9340	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    13c8:	20 93 41 93 	sts	0x9341, r18	; 0x809341 <pxDelayedTaskList>
    13cc:	30 93 42 93 	sts	0x9342, r19	; 0x809342 <pxDelayedTaskList+0x1>
    13d0:	80 93 3f 93 	sts	0x933F, r24	; 0x80933f <pxOverflowDelayedTaskList>
    13d4:	90 93 40 93 	sts	0x9340, r25	; 0x809340 <pxOverflowDelayedTaskList+0x1>
    13d8:	80 91 2e 93 	lds	r24, 0x932E	; 0x80932e <xNumOfOverflows>
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	80 93 2e 93 	sts	0x932E, r24	; 0x80932e <xNumOfOverflows>
    13e2:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    13e6:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    13ea:	80 81       	ld	r24, Z
    13ec:	81 11       	cpse	r24, r1
    13ee:	07 c0       	rjmp	.+14     	; 0x13fe <xTaskIncrementTick+0x7c>
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    13f8:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    13fc:	10 c0       	rjmp	.+32     	; 0x141e <xTaskIncrementTick+0x9c>
    13fe:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    1402:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    1406:	05 80       	ldd	r0, Z+5	; 0x05
    1408:	f6 81       	ldd	r31, Z+6	; 0x06
    140a:	e0 2d       	mov	r30, r0
    140c:	06 80       	ldd	r0, Z+6	; 0x06
    140e:	f7 81       	ldd	r31, Z+7	; 0x07
    1410:	e0 2d       	mov	r30, r0
    1412:	82 81       	ldd	r24, Z+2	; 0x02
    1414:	93 81       	ldd	r25, Z+3	; 0x03
    1416:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    141a:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    141e:	80 91 92 22 	lds	r24, 0x2292	; 0x802292 <xNextTaskUnblockTime>
    1422:	90 91 93 22 	lds	r25, 0x2293	; 0x802293 <xNextTaskUnblockTime+0x1>
    1426:	e8 16       	cp	r14, r24
    1428:	f9 06       	cpc	r15, r25
    142a:	10 f4       	brcc	.+4      	; 0x1430 <xTaskIncrementTick+0xae>
    142c:	d1 2c       	mov	r13, r1
    142e:	52 c0       	rjmp	.+164    	; 0x14d4 <xTaskIncrementTick+0x152>
    1430:	d1 2c       	mov	r13, r1
    1432:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    1436:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    143a:	90 81       	ld	r25, Z
    143c:	91 11       	cpse	r25, r1
    143e:	07 c0       	rjmp	.+14     	; 0x144e <xTaskIncrementTick+0xcc>
    1440:	8f ef       	ldi	r24, 0xFF	; 255
    1442:	9f ef       	ldi	r25, 0xFF	; 255
    1444:	80 93 92 22 	sts	0x2292, r24	; 0x802292 <xNextTaskUnblockTime>
    1448:	90 93 93 22 	sts	0x2293, r25	; 0x802293 <xNextTaskUnblockTime+0x1>
    144c:	43 c0       	rjmp	.+134    	; 0x14d4 <xTaskIncrementTick+0x152>
    144e:	e0 91 41 93 	lds	r30, 0x9341	; 0x809341 <pxDelayedTaskList>
    1452:	f0 91 42 93 	lds	r31, 0x9342	; 0x809342 <pxDelayedTaskList+0x1>
    1456:	05 80       	ldd	r0, Z+5	; 0x05
    1458:	f6 81       	ldd	r31, Z+6	; 0x06
    145a:	e0 2d       	mov	r30, r0
    145c:	c6 81       	ldd	r28, Z+6	; 0x06
    145e:	d7 81       	ldd	r29, Z+7	; 0x07
    1460:	2a 81       	ldd	r18, Y+2	; 0x02
    1462:	3b 81       	ldd	r19, Y+3	; 0x03
    1464:	e2 16       	cp	r14, r18
    1466:	f3 06       	cpc	r15, r19
    1468:	28 f4       	brcc	.+10     	; 0x1474 <xTaskIncrementTick+0xf2>
    146a:	20 93 92 22 	sts	0x2292, r18	; 0x802292 <xNextTaskUnblockTime>
    146e:	30 93 93 22 	sts	0x2293, r19	; 0x802293 <xNextTaskUnblockTime+0x1>
    1472:	30 c0       	rjmp	.+96     	; 0x14d4 <xTaskIncrementTick+0x152>
    1474:	8e 01       	movw	r16, r28
    1476:	0e 5f       	subi	r16, 0xFE	; 254
    1478:	1f 4f       	sbci	r17, 0xFF	; 255
    147a:	c8 01       	movw	r24, r16
    147c:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1480:	8c 89       	ldd	r24, Y+20	; 0x14
    1482:	9d 89       	ldd	r25, Y+21	; 0x15
    1484:	89 2b       	or	r24, r25
    1486:	21 f0       	breq	.+8      	; 0x1490 <xTaskIncrementTick+0x10e>
    1488:	ce 01       	movw	r24, r28
    148a:	0c 96       	adiw	r24, 0x0c	; 12
    148c:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1490:	2e 89       	ldd	r18, Y+22	; 0x16
    1492:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    1496:	82 17       	cp	r24, r18
    1498:	10 f4       	brcc	.+4      	; 0x149e <xTaskIncrementTick+0x11c>
    149a:	20 93 32 93 	sts	0x9332, r18	; 0x809332 <uxTopReadyPriority>
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	c9 01       	movw	r24, r18
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	b8 01       	movw	r22, r16
    14b4:	8b 5a       	subi	r24, 0xAB	; 171
    14b6:	9c 46       	sbci	r25, 0x6C	; 108
    14b8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vListInsertEnd>
    14bc:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    14c0:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    14c4:	9e 89       	ldd	r25, Y+22	; 0x16
    14c6:	86 89       	ldd	r24, Z+22	; 0x16
    14c8:	98 17       	cp	r25, r24
    14ca:	08 f4       	brcc	.+2      	; 0x14ce <xTaskIncrementTick+0x14c>
    14cc:	b2 cf       	rjmp	.-156    	; 0x1432 <xTaskIncrementTick+0xb0>
    14ce:	dd 24       	eor	r13, r13
    14d0:	d3 94       	inc	r13
    14d2:	af cf       	rjmp	.-162    	; 0x1432 <xTaskIncrementTick+0xb0>
    14d4:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    14d8:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    14dc:	86 89       	ldd	r24, Z+22	; 0x16
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	fc 01       	movw	r30, r24
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	ee 0f       	add	r30, r30
    14ec:	ff 1f       	adc	r31, r31
    14ee:	8e 0f       	add	r24, r30
    14f0:	9f 1f       	adc	r25, r31
    14f2:	fc 01       	movw	r30, r24
    14f4:	eb 5a       	subi	r30, 0xAB	; 171
    14f6:	fc 46       	sbci	r31, 0x6C	; 108
    14f8:	80 81       	ld	r24, Z
    14fa:	82 30       	cpi	r24, 0x02	; 2
    14fc:	48 f0       	brcs	.+18     	; 0x1510 <xTaskIncrementTick+0x18e>
    14fe:	dd 24       	eor	r13, r13
    1500:	d3 94       	inc	r13
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <xTaskIncrementTick+0x18e>
    1504:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	80 93 30 93 	sts	0x9330, r24	; 0x809330 <uxPendedTicks>
    150e:	d1 2c       	mov	r13, r1
    1510:	80 91 2f 93 	lds	r24, 0x932F	; 0x80932f <xYieldPending>
    1514:	88 23       	and	r24, r24
    1516:	11 f0       	breq	.+4      	; 0x151c <xTaskIncrementTick+0x19a>
    1518:	dd 24       	eor	r13, r13
    151a:	d3 94       	inc	r13
    151c:	8d 2d       	mov	r24, r13
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	0f 91       	pop	r16
    1526:	ff 90       	pop	r15
    1528:	ef 90       	pop	r14
    152a:	df 90       	pop	r13
    152c:	08 95       	ret

0000152e <xTaskResumeAll>:
    152e:	df 92       	push	r13
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	0f 92       	push	r0
    1542:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1546:	81 50       	subi	r24, 0x01	; 1
    1548:	80 93 2c 93 	sts	0x932C, r24	; 0x80932c <uxSchedulerSuspended>
    154c:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1550:	81 11       	cpse	r24, r1
    1552:	62 c0       	rjmp	.+196    	; 0x1618 <xTaskResumeAll+0xea>
    1554:	80 91 35 93 	lds	r24, 0x9335	; 0x809335 <uxCurrentNumberOfTasks>
    1558:	81 11       	cpse	r24, r1
    155a:	33 c0       	rjmp	.+102    	; 0x15c2 <xTaskResumeAll+0x94>
    155c:	60 c0       	rjmp	.+192    	; 0x161e <xTaskResumeAll+0xf0>
    155e:	d7 01       	movw	r26, r14
    1560:	15 96       	adiw	r26, 0x05	; 5
    1562:	ed 91       	ld	r30, X+
    1564:	fc 91       	ld	r31, X
    1566:	16 97       	sbiw	r26, 0x06	; 6
    1568:	c6 81       	ldd	r28, Z+6	; 0x06
    156a:	d7 81       	ldd	r29, Z+7	; 0x07
    156c:	ce 01       	movw	r24, r28
    156e:	0c 96       	adiw	r24, 0x0c	; 12
    1570:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1574:	8e 01       	movw	r16, r28
    1576:	0e 5f       	subi	r16, 0xFE	; 254
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	c8 01       	movw	r24, r16
    157c:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
    1580:	2e 89       	ldd	r18, Y+22	; 0x16
    1582:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    1586:	82 17       	cp	r24, r18
    1588:	10 f4       	brcc	.+4      	; 0x158e <xTaskResumeAll+0x60>
    158a:	20 93 32 93 	sts	0x9332, r18	; 0x809332 <uxTopReadyPriority>
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	c9 01       	movw	r24, r18
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	82 0f       	add	r24, r18
    15a0:	93 1f       	adc	r25, r19
    15a2:	b8 01       	movw	r22, r16
    15a4:	8b 5a       	subi	r24, 0xAB	; 171
    15a6:	9c 46       	sbci	r25, 0x6C	; 108
    15a8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <vListInsertEnd>
    15ac:	e0 91 79 93 	lds	r30, 0x9379	; 0x809379 <pxCurrentTCB>
    15b0:	f0 91 7a 93 	lds	r31, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    15b4:	9e 89       	ldd	r25, Y+22	; 0x16
    15b6:	86 89       	ldd	r24, Z+22	; 0x16
    15b8:	98 17       	cp	r25, r24
    15ba:	58 f0       	brcs	.+22     	; 0x15d2 <xTaskResumeAll+0xa4>
    15bc:	d0 92 2f 93 	sts	0x932F, r13	; 0x80932f <xYieldPending>
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <xTaskResumeAll+0xa4>
    15c2:	0f 2e       	mov	r0, r31
    15c4:	f6 e3       	ldi	r31, 0x36	; 54
    15c6:	ef 2e       	mov	r14, r31
    15c8:	f3 e9       	ldi	r31, 0x93	; 147
    15ca:	ff 2e       	mov	r15, r31
    15cc:	f0 2d       	mov	r31, r0
    15ce:	dd 24       	eor	r13, r13
    15d0:	d3 94       	inc	r13
    15d2:	f7 01       	movw	r30, r14
    15d4:	80 81       	ld	r24, Z
    15d6:	81 11       	cpse	r24, r1
    15d8:	c2 cf       	rjmp	.-124    	; 0x155e <xTaskResumeAll+0x30>
    15da:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15de:	88 23       	and	r24, r24
    15e0:	99 f0       	breq	.+38     	; 0x1608 <xTaskResumeAll+0xda>
    15e2:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15e6:	88 23       	and	r24, r24
    15e8:	79 f0       	breq	.+30     	; 0x1608 <xTaskResumeAll+0xda>
    15ea:	c1 e0       	ldi	r28, 0x01	; 1
    15ec:	0e 94 c1 09 	call	0x1382	; 0x1382 <xTaskIncrementTick>
    15f0:	81 11       	cpse	r24, r1
    15f2:	c0 93 2f 93 	sts	0x932F, r28	; 0x80932f <xYieldPending>
    15f6:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	80 93 30 93 	sts	0x9330, r24	; 0x809330 <uxPendedTicks>
    1600:	80 91 30 93 	lds	r24, 0x9330	; 0x809330 <uxPendedTicks>
    1604:	81 11       	cpse	r24, r1
    1606:	f2 cf       	rjmp	.-28     	; 0x15ec <xTaskResumeAll+0xbe>
    1608:	80 91 2f 93 	lds	r24, 0x932F	; 0x80932f <xYieldPending>
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	31 f4       	brne	.+12     	; 0x161c <xTaskResumeAll+0xee>
    1610:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	03 c0       	rjmp	.+6      	; 0x161e <xTaskResumeAll+0xf0>
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	01 c0       	rjmp	.+2      	; 0x161e <xTaskResumeAll+0xf0>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	0f 90       	pop	r0
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	08 95       	ret

00001632 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1638:	89 2b       	or	r24, r25
    163a:	b1 f0       	breq	.+44     	; 0x1668 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    163c:	0e 94 bb 09 	call	0x1376	; 0x1376 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1640:	80 91 33 93 	lds	r24, 0x9333	; 0x809333 <xTickCount>
    1644:	90 91 34 93 	lds	r25, 0x9334	; 0x809334 <xTickCount+0x1>
    1648:	c8 0f       	add	r28, r24
    164a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    164c:	80 91 79 93 	lds	r24, 0x9379	; 0x809379 <pxCurrentTCB>
    1650:	90 91 7a 93 	lds	r25, 0x937A	; 0x80937a <pxCurrentTCB+0x1>
    1654:	02 96       	adiw	r24, 0x02	; 2
    1656:	0e 94 2a 08 	call	0x1054	; 0x1054 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    165a:	ce 01       	movw	r24, r28
    165c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1660:	0e 94 97 0a 	call	0x152e	; 0x152e <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1664:	81 11       	cpse	r24, r1
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    1668:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1672:	80 91 2c 93 	lds	r24, 0x932C	; 0x80932c <uxSchedulerSuspended>
    1676:	88 23       	and	r24, r24
    1678:	21 f0       	breq	.+8      	; 0x1682 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 2f 93 	sts	0x932F, r24	; 0x80932f <xYieldPending>
    1680:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1682:	10 92 2f 93 	sts	0x932F, r1	; 0x80932f <xYieldPending>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1686:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	8e 0f       	add	r24, r30
    169c:	9f 1f       	adc	r25, r31
    169e:	fc 01       	movw	r30, r24
    16a0:	eb 5a       	subi	r30, 0xAB	; 171
    16a2:	fc 46       	sbci	r31, 0x6C	; 108
    16a4:	80 81       	ld	r24, Z
    16a6:	81 11       	cpse	r24, r1
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <vTaskSwitchContext+0x66>
    16aa:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16ae:	81 50       	subi	r24, 0x01	; 1
    16b0:	80 93 32 93 	sts	0x9332, r24	; 0x809332 <uxTopReadyPriority>
    16b4:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	fc 01       	movw	r30, r24
    16bc:	ee 0f       	add	r30, r30
    16be:	ff 1f       	adc	r31, r31
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	8e 0f       	add	r24, r30
    16ca:	9f 1f       	adc	r25, r31
    16cc:	fc 01       	movw	r30, r24
    16ce:	eb 5a       	subi	r30, 0xAB	; 171
    16d0:	fc 46       	sbci	r31, 0x6C	; 108
    16d2:	80 81       	ld	r24, Z
    16d4:	88 23       	and	r24, r24
    16d6:	49 f3       	breq	.-46     	; 0x16aa <vTaskSwitchContext+0x38>
    16d8:	80 91 32 93 	lds	r24, 0x9332	; 0x809332 <uxTopReadyPriority>
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	9c 01       	movw	r18, r24
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	28 0f       	add	r18, r24
    16ee:	39 1f       	adc	r19, r25
    16f0:	d9 01       	movw	r26, r18
    16f2:	ab 5a       	subi	r26, 0xAB	; 171
    16f4:	bc 46       	sbci	r27, 0x6C	; 108
    16f6:	11 96       	adiw	r26, 0x01	; 1
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	12 97       	sbiw	r26, 0x02	; 2
    16fe:	02 80       	ldd	r0, Z+2	; 0x02
    1700:	f3 81       	ldd	r31, Z+3	; 0x03
    1702:	e0 2d       	mov	r30, r0
    1704:	11 96       	adiw	r26, 0x01	; 1
    1706:	ed 93       	st	X+, r30
    1708:	fc 93       	st	X, r31
    170a:	12 97       	sbiw	r26, 0x02	; 2
    170c:	28 5a       	subi	r18, 0xA8	; 168
    170e:	3c 46       	sbci	r19, 0x6C	; 108
    1710:	e2 17       	cp	r30, r18
    1712:	f3 07       	cpc	r31, r19
    1714:	29 f4       	brne	.+10     	; 0x1720 <vTaskSwitchContext+0xae>
    1716:	22 81       	ldd	r18, Z+2	; 0x02
    1718:	33 81       	ldd	r19, Z+3	; 0x03
    171a:	fd 01       	movw	r30, r26
    171c:	21 83       	std	Z+1, r18	; 0x01
    171e:	32 83       	std	Z+2, r19	; 0x02
    1720:	fc 01       	movw	r30, r24
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	ee 0f       	add	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	8e 0f       	add	r24, r30
    1730:	9f 1f       	adc	r25, r31
    1732:	fc 01       	movw	r30, r24
    1734:	eb 5a       	subi	r30, 0xAB	; 171
    1736:	fc 46       	sbci	r31, 0x6C	; 108
    1738:	01 80       	ldd	r0, Z+1	; 0x01
    173a:	f2 81       	ldd	r31, Z+2	; 0x02
    173c:	e0 2d       	mov	r30, r0
    173e:	86 81       	ldd	r24, Z+6	; 0x06
    1740:	97 81       	ldd	r25, Z+7	; 0x07
    1742:	80 93 79 93 	sts	0x9379, r24	; 0x809379 <pxCurrentTCB>
    1746:	90 93 7a 93 	sts	0x937A, r25	; 0x80937a <pxCurrentTCB+0x1>
    174a:	08 95       	ret

0000174c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    174c:	08 95       	ret

0000174e <Endpoint_SelectEndpoint>:
			return false;
		}
	}

	return true;
}
    174e:	80 93 ec 93 	sts	0x93EC, r24	; 0x8093ec <USB_Endpoint_SelectedEndpoint>
    1752:	28 2f       	mov	r18, r24
    1754:	2f 70       	andi	r18, 0x0F	; 15
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	40 91 c6 04 	lds	r20, 0x04C6	; 0x8004c6 <__TEXT_REGION_LENGTH__+0x7004c6>
    175c:	50 91 c7 04 	lds	r21, 0x04C7	; 0x8004c7 <__TEXT_REGION_LENGTH__+0x7004c7>
    1760:	88 23       	and	r24, r24
    1762:	e4 f4       	brge	.+56     	; 0x179c <Endpoint_SelectEndpoint+0x4e>
    1764:	64 e8       	ldi	r22, 0x84	; 132
    1766:	62 9f       	mul	r22, r18
    1768:	c0 01       	movw	r24, r0
    176a:	63 9f       	mul	r22, r19
    176c:	90 0d       	add	r25, r0
    176e:	11 24       	eor	r1, r1
    1770:	81 5d       	subi	r24, 0xD1	; 209
    1772:	9b 46       	sbci	r25, 0x6B	; 107
    1774:	80 93 e8 93 	sts	0x93E8, r24	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    1778:	90 93 e9 93 	sts	0x93E9, r25	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    177c:	c9 01       	movw	r24, r18
    177e:	82 95       	swap	r24
    1780:	92 95       	swap	r25
    1782:	90 7f       	andi	r25, 0xF0	; 240
    1784:	98 27       	eor	r25, r24
    1786:	80 7f       	andi	r24, 0xF0	; 240
    1788:	98 27       	eor	r25, r24
    178a:	08 96       	adiw	r24, 0x08	; 8
    178c:	9a 01       	movw	r18, r20
    178e:	28 0f       	add	r18, r24
    1790:	39 1f       	adc	r19, r25
    1792:	20 93 ea 93 	sts	0x93EA, r18	; 0x8093ea <USB_Endpoint_SelectedHandle>
    1796:	30 93 eb 93 	sts	0x93EB, r19	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    179a:	08 95       	ret
    179c:	64 e8       	ldi	r22, 0x84	; 132
    179e:	62 9f       	mul	r22, r18
    17a0:	c0 01       	movw	r24, r0
    17a2:	63 9f       	mul	r22, r19
    17a4:	90 0d       	add	r25, r0
    17a6:	11 24       	eor	r1, r1
    17a8:	83 51       	subi	r24, 0x13	; 19
    17aa:	9c 46       	sbci	r25, 0x6C	; 108
    17ac:	80 93 e8 93 	sts	0x93E8, r24	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    17b0:	90 93 e9 93 	sts	0x93E9, r25	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    17b4:	22 95       	swap	r18
    17b6:	32 95       	swap	r19
    17b8:	30 7f       	andi	r19, 0xF0	; 240
    17ba:	32 27       	eor	r19, r18
    17bc:	20 7f       	andi	r18, 0xF0	; 240
    17be:	32 27       	eor	r19, r18
    17c0:	24 0f       	add	r18, r20
    17c2:	35 1f       	adc	r19, r21
    17c4:	20 93 ea 93 	sts	0x93EA, r18	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17c8:	30 93 eb 93 	sts	0x93EB, r19	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17cc:	08 95       	ret

000017ce <Endpoint_ConfigureEndpoint_PRV>:
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	d8 2f       	mov	r29, r24
    17d6:	16 2f       	mov	r17, r22
    17d8:	c4 2f       	mov	r28, r20
    17da:	0e 94 a7 0b 	call	0x174e	; 0x174e <Endpoint_SelectEndpoint>
    17de:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17e2:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17e6:	11 82       	std	Z+1, r1	; 0x01
    17e8:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17ec:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17f0:	dd 23       	and	r29, r29
    17f2:	a4 f0       	brlt	.+40     	; 0x181c <Endpoint_ConfigureEndpoint_PRV+0x4e>
    17f4:	10 82       	st	Z, r1
    17f6:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    17fa:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    17fe:	11 83       	std	Z+1, r17	; 0x01
    1800:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    1804:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    1808:	12 82       	std	Z+2, r1	; 0x02
    180a:	13 82       	std	Z+3, r1	; 0x03
    180c:	80 91 e8 93 	lds	r24, 0x93E8	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    1810:	90 91 e9 93 	lds	r25, 0x93E9	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    1814:	84 83       	std	Z+4, r24	; 0x04
    1816:	95 83       	std	Z+5, r25	; 0x05
    1818:	40 e0       	ldi	r20, 0x00	; 0
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <Endpoint_ConfigureEndpoint_PRV+0x76>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	80 83       	st	Z, r24
    1820:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    1824:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    1828:	11 83       	std	Z+1, r17	; 0x01
    182a:	e0 91 ea 93 	lds	r30, 0x93EA	; 0x8093ea <USB_Endpoint_SelectedHandle>
    182e:	f0 91 eb 93 	lds	r31, 0x93EB	; 0x8093eb <USB_Endpoint_SelectedHandle+0x1>
    1832:	12 82       	std	Z+2, r1	; 0x02
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	80 91 e8 93 	lds	r24, 0x93E8	; 0x8093e8 <USB_Endpoint_SelectedFIFO>
    183a:	90 91 e9 93 	lds	r25, 0x93E9	; 0x8093e9 <USB_Endpoint_SelectedFIFO+0x1>
    183e:	84 83       	std	Z+4, r24	; 0x04
    1840:	95 83       	std	Z+5, r25	; 0x05
    1842:	4c 2f       	mov	r20, r28
    1844:	fc 01       	movw	r30, r24
    1846:	e0 5c       	subi	r30, 0xC0	; 192
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	40 83       	st	Z, r20
    184c:	31 96       	adiw	r30, 0x01	; 1
    184e:	10 82       	st	Z, r1
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
    1856:	1f 91       	pop	r17
    1858:	08 95       	ret

0000185a <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    185e:	a0 ec       	ldi	r26, 0xC0	; 192
    1860:	b4 e0       	ldi	r27, 0x04	; 4
    1862:	16 96       	adiw	r26, 0x06	; 6
    1864:	ed 91       	ld	r30, X+
    1866:	fc 91       	ld	r31, X
    1868:	17 97       	sbiw	r26, 0x07	; 7
    186a:	c9 01       	movw	r24, r18
    186c:	82 95       	swap	r24
    186e:	92 95       	swap	r25
    1870:	90 7f       	andi	r25, 0xF0	; 240
    1872:	98 27       	eor	r25, r24
    1874:	80 7f       	andi	r24, 0xF0	; 240
    1876:	98 27       	eor	r25, r24
    1878:	e8 0f       	add	r30, r24
    187a:	f9 1f       	adc	r31, r25
    187c:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    187e:	16 96       	adiw	r26, 0x06	; 6
    1880:	4d 91       	ld	r20, X+
    1882:	5c 91       	ld	r21, X
    1884:	17 97       	sbiw	r26, 0x07	; 7
    1886:	fa 01       	movw	r30, r20
    1888:	e8 0f       	add	r30, r24
    188a:	f9 1f       	adc	r31, r25
    188c:	11 82       	std	Z+1, r1	; 0x01
    188e:	2f 5f       	subi	r18, 0xFF	; 255
    1890:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1892:	25 30       	cpi	r18, 0x05	; 5
    1894:	31 05       	cpc	r19, r1
    1896:	29 f7       	brne	.-54     	; 0x1862 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    1898:	08 95       	ret

0000189a <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	0b b6       	in	r0, 0x3b	; 59
    18a6:	0f 92       	push	r0
    18a8:	2f 93       	push	r18
    18aa:	3f 93       	push	r19
    18ac:	4f 93       	push	r20
    18ae:	5f 93       	push	r21
    18b0:	6f 93       	push	r22
    18b2:	7f 93       	push	r23
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	af 93       	push	r26
    18ba:	bf 93       	push	r27
    18bc:	ef 93       	push	r30
    18be:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    18c0:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    18c4:	88 23       	and	r24, r24
    18c6:	4c f4       	brge	.+18     	; 0x18da <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    18c8:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
    18cc:	88 23       	and	r24, r24
    18ce:	2c f4       	brge	.+10     	; 0x18da <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    18d0:	80 e8       	ldi	r24, 0x80	; 128
    18d2:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    18d6:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    18da:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    18de:	86 ff       	sbrs	r24, 6
    18e0:	07 c0       	rjmp	.+14     	; 0x18f0 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    18e2:	80 e4       	ldi	r24, 0x40	; 64
    18e4:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    18e8:	10 92 df 93 	sts	0x93DF, r1	; 0x8093df <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
    18ec:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_Event_Stub>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    18f0:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    18f4:	85 ff       	sbrs	r24, 5
    18f6:	16 c0       	rjmp	.+44     	; 0x1924 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    18f8:	80 e2       	ldi	r24, 0x20	; 32
    18fa:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    18fe:	80 91 db 93 	lds	r24, 0x93DB	; 0x8093db <USB_Device_ConfigurationNumber>
    1902:	88 23       	and	r24, r24
    1904:	21 f0       	breq	.+8      	; 0x190e <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1906:	84 e0       	ldi	r24, 0x04	; 4
    1908:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    190e:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1912:	81 11       	cpse	r24, r1
    1914:	02 c0       	rjmp	.+4      	; 0x191a <__vector_125+0x80>
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	01 c0       	rjmp	.+2      	; 0x191c <__vector_125+0x82>
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1920:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_Event_Stub>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1924:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1928:	84 ff       	sbrs	r24, 4
    192a:	18 c0       	rjmp	.+48     	; 0x195c <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    192c:	e0 ec       	ldi	r30, 0xC0	; 192
    192e:	f4 e0       	ldi	r31, 0x04	; 4
    1930:	80 e1       	ldi	r24, 0x10	; 16
    1932:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	80 93 df 93 	sts	0x93DF, r24	; 0x8093df <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    193a:	10 92 db 93 	sts	0x93DB, r1	; 0x8093db <USB_Device_ConfigurationNumber>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    193e:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    1940:	0e 94 2d 0c 	call	0x185a	; 0x185a <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1944:	48 e0       	ldi	r20, 0x08	; 8
    1946:	68 e4       	ldi	r22, 0x48	; 72
    1948:	80 e8       	ldi	r24, 0x80	; 128
    194a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    194e:	48 e0       	ldi	r20, 0x08	; 8
    1950:	68 e4       	ldi	r22, 0x48	; 72
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    1958:	0e 94 a6 0b 	call	0x174c	; 0x174c <USB_Event_Stub>
	}
}
    195c:	ff 91       	pop	r31
    195e:	ef 91       	pop	r30
    1960:	bf 91       	pop	r27
    1962:	af 91       	pop	r26
    1964:	9f 91       	pop	r25
    1966:	8f 91       	pop	r24
    1968:	7f 91       	pop	r23
    196a:	6f 91       	pop	r22
    196c:	5f 91       	pop	r21
    196e:	4f 91       	pop	r20
    1970:	3f 91       	pop	r19
    1972:	2f 91       	pop	r18
    1974:	0f 90       	pop	r0
    1976:	0b be       	out	0x3b, r0	; 59
    1978:	0f 90       	pop	r0
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	0f 90       	pop	r0
    197e:	1f 90       	pop	r1
    1980:	18 95       	reti

00001982 <relay_thread>:
	time_t t;
	t = mktime(&_t);
	
	return t;

}
    1982:	07 e0       	ldi	r16, 0x07	; 7
    1984:	28 e1       	ldi	r18, 0x18	; 24
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	84 ea       	ldi	r24, 0xA4	; 164
    198c:	92 e2       	ldi	r25, 0x22	; 34
    198e:	0e 94 36 11 	call	0x226c	; 0x226c <DigitalPin_Config>
    1992:	28 e1       	ldi	r18, 0x18	; 24
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	60 e0       	ldi	r22, 0x00	; 0
    1998:	87 ea       	ldi	r24, 0xA7	; 167
    199a:	92 e2       	ldi	r25, 0x22	; 34
    199c:	0e 94 36 11 	call	0x226c	; 0x226c <DigitalPin_Config>
    19a0:	00 e0       	ldi	r16, 0x00	; 0
    19a2:	28 e1       	ldi	r18, 0x18	; 24
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	8a ea       	ldi	r24, 0xAA	; 170
    19aa:	92 e2       	ldi	r25, 0x22	; 34
    19ac:	0e 94 36 11 	call	0x226c	; 0x226c <DigitalPin_Config>
    19b0:	28 e1       	ldi	r18, 0x18	; 24
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	8d ea       	ldi	r24, 0xAD	; 173
    19b8:	92 e2       	ldi	r25, 0x22	; 34
    19ba:	0e 94 36 11 	call	0x226c	; 0x226c <DigitalPin_Config>
    19be:	c8 e9       	ldi	r28, 0x98	; 152
    19c0:	d2 e2       	ldi	r29, 0x22	; 34
    19c2:	0f 2e       	mov	r0, r31
    19c4:	f4 ea       	ldi	r31, 0xA4	; 164
    19c6:	ef 2e       	mov	r14, r31
    19c8:	f2 e2       	ldi	r31, 0x22	; 34
    19ca:	ff 2e       	mov	r15, r31
    19cc:	f0 2d       	mov	r31, r0
    19ce:	8e 01       	movw	r16, r28
    19d0:	c8 01       	movw	r24, r16
    19d2:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	c8 01       	movw	r24, r16
    19da:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DigitalPin_SetDir>
    19de:	0d 5f       	subi	r16, 0xFD	; 253
    19e0:	1f 4f       	sbci	r17, 0xFF	; 255
    19e2:	0e 15       	cp	r16, r14
    19e4:	1f 05       	cpc	r17, r15
    19e6:	a1 f7       	brne	.-24     	; 0x19d0 <relay_thread+0x4e>
    19e8:	0f 2e       	mov	r0, r31
    19ea:	f4 ea       	ldi	r31, 0xA4	; 164
    19ec:	cf 2e       	mov	r12, r31
    19ee:	f2 e2       	ldi	r31, 0x22	; 34
    19f0:	df 2e       	mov	r13, r31
    19f2:	f0 2d       	mov	r31, r0
    19f4:	bb 24       	eor	r11, r11
    19f6:	b3 94       	inc	r11
    19f8:	9c 2e       	mov	r9, r28
    19fa:	ad 2e       	mov	r10, r29
    19fc:	84 e6       	ldi	r24, 0x64	; 100
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 19 0b 	call	0x1632	; 0x1632 <vTaskDelay>
    1a04:	86 01       	movw	r16, r12
    1a06:	e1 2c       	mov	r14, r1
    1a08:	f1 2c       	mov	r15, r1
    1a0a:	d0 2f       	mov	r29, r16
    1a0c:	c1 2f       	mov	r28, r17
    1a0e:	c8 01       	movw	r24, r16
    1a10:	0e 94 94 11 	call	0x2328	; 0x2328 <DigitalPin_GetValue>
    1a14:	81 11       	cpse	r24, r1
    1a16:	0c c0       	rjmp	.+24     	; 0x1a30 <relay_thread+0xae>
    1a18:	8d 2f       	mov	r24, r29
    1a1a:	9c 2f       	mov	r25, r28
    1a1c:	0e 94 94 11 	call	0x2328	; 0x2328 <DigitalPin_GetValue>
    1a20:	88 23       	and	r24, r24
    1a22:	d1 f3       	breq	.-12     	; 0x1a18 <relay_thread+0x96>
    1a24:	f7 01       	movw	r30, r14
    1a26:	ec 56       	subi	r30, 0x6C	; 108
    1a28:	fd 4d       	sbci	r31, 0xDD	; 221
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8b 25       	eor	r24, r11
    1a2e:	80 83       	st	Z, r24
    1a30:	8f ef       	ldi	r24, 0xFF	; 255
    1a32:	e8 1a       	sub	r14, r24
    1a34:	f8 0a       	sbc	r15, r24
    1a36:	0d 5f       	subi	r16, 0xFD	; 253
    1a38:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	e8 16       	cp	r14, r24
    1a3e:	f1 04       	cpc	r15, r1
    1a40:	21 f7       	brne	.-56     	; 0x1a0a <relay_thread+0x88>
    1a42:	09 2d       	mov	r16, r9
    1a44:	1a 2d       	mov	r17, r10
    1a46:	c0 e0       	ldi	r28, 0x00	; 0
    1a48:	d0 e0       	ldi	r29, 0x00	; 0
    1a4a:	fe 01       	movw	r30, r28
    1a4c:	ec 56       	subi	r30, 0x6C	; 108
    1a4e:	fd 4d       	sbci	r31, 0xDD	; 221
    1a50:	80 81       	ld	r24, Z
    1a52:	88 23       	and	r24, r24
    1a54:	21 f0       	breq	.+8      	; 0x1a5e <relay_thread+0xdc>
    1a56:	c8 01       	movw	r24, r16
    1a58:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <relay_thread+0xe2>
    1a5e:	c8 01       	movw	r24, r16
    1a60:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
    1a64:	21 96       	adiw	r28, 0x01	; 1
    1a66:	0d 5f       	subi	r16, 0xFD	; 253
    1a68:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6a:	c4 30       	cpi	r28, 0x04	; 4
    1a6c:	d1 05       	cpc	r29, r1
    1a6e:	69 f7       	brne	.-38     	; 0x1a4a <relay_thread+0xc8>
    1a70:	c5 cf       	rjmp	.-118    	; 0x19fc <relay_thread+0x7a>

00001a72 <usart_spi_transmit_receive>:
    1a72:	fc 01       	movw	r30, r24
    1a74:	81 81       	ldd	r24, Z+1	; 0x01
    1a76:	85 ff       	sbrs	r24, 5
    1a78:	fd cf       	rjmp	.-6      	; 0x1a74 <usart_spi_transmit_receive+0x2>
    1a7a:	60 83       	st	Z, r22
    1a7c:	81 81       	ldd	r24, Z+1	; 0x01
    1a7e:	86 ff       	sbrs	r24, 6
    1a80:	fd cf       	rjmp	.-6      	; 0x1a7c <usart_spi_transmit_receive+0xa>
    1a82:	80 e4       	ldi	r24, 0x40	; 64
    1a84:	81 83       	std	Z+1, r24	; 0x01
    1a86:	80 81       	ld	r24, Z
    1a88:	08 95       	ret

00001a8a <ssd1306_write_command>:
    1a8a:	1f 93       	push	r17
    1a8c:	cf 93       	push	r28
    1a8e:	df 93       	push	r29
    1a90:	c0 ea       	ldi	r28, 0xA0	; 160
    1a92:	d6 e0       	ldi	r29, 0x06	; 6
    1a94:	18 e0       	ldi	r17, 0x08	; 8
    1a96:	1e 83       	std	Y+6, r17	; 0x06
    1a98:	e0 e6       	ldi	r30, 0x60	; 96
    1a9a:	f6 e0       	ldi	r31, 0x06	; 6
    1a9c:	91 e0       	ldi	r25, 0x01	; 1
    1a9e:	96 83       	std	Z+6, r25	; 0x06
    1aa0:	96 83       	std	Z+6, r25	; 0x06
    1aa2:	68 2f       	mov	r22, r24
    1aa4:	80 ea       	ldi	r24, 0xA0	; 160
    1aa6:	99 e0       	ldi	r25, 0x09	; 9
    1aa8:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <usart_spi_transmit_receive>
    1aac:	1d 83       	std	Y+5, r17	; 0x05
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	08 95       	ret

00001ab6 <ssd1306_write_data>:
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	c0 ea       	ldi	r28, 0xA0	; 160
    1ac4:	d6 e0       	ldi	r29, 0x06	; 6
    1ac6:	18 e0       	ldi	r17, 0x08	; 8
    1ac8:	1e 83       	std	Y+6, r17	; 0x06
    1aca:	0f 2e       	mov	r0, r31
    1acc:	f0 e6       	ldi	r31, 0x60	; 96
    1ace:	ef 2e       	mov	r14, r31
    1ad0:	f6 e0       	ldi	r31, 0x06	; 6
    1ad2:	ff 2e       	mov	r15, r31
    1ad4:	f0 2d       	mov	r31, r0
    1ad6:	01 e0       	ldi	r16, 0x01	; 1
    1ad8:	f7 01       	movw	r30, r14
    1ada:	05 83       	std	Z+5, r16	; 0x05
    1adc:	68 2f       	mov	r22, r24
    1ade:	80 ea       	ldi	r24, 0xA0	; 160
    1ae0:	99 e0       	ldi	r25, 0x09	; 9
    1ae2:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <usart_spi_transmit_receive>
    1ae6:	f7 01       	movw	r30, r14
    1ae8:	06 83       	std	Z+6, r16	; 0x06
    1aea:	1d 83       	std	Y+5, r17	; 0x05
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	08 95       	ret

00001afa <ssd1306_set_page_address>:
    1afa:	87 70       	andi	r24, 0x07	; 7
    1afc:	80 6b       	ori	r24, 0xB0	; 176
    1afe:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1b02:	08 95       	ret

00001b04 <ssd1306_set_column_address>:
    1b04:	cf 93       	push	r28
    1b06:	c8 2f       	mov	r28, r24
    1b08:	98 2f       	mov	r25, r24
    1b0a:	9f 77       	andi	r25, 0x7F	; 127
    1b0c:	89 2f       	mov	r24, r25
    1b0e:	82 95       	swap	r24
    1b10:	8f 70       	andi	r24, 0x0F	; 15
    1b12:	80 61       	ori	r24, 0x10	; 16
    1b14:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1b18:	8c 2f       	mov	r24, r28
    1b1a:	8f 70       	andi	r24, 0x0F	; 15
    1b1c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1b20:	cf 91       	pop	r28
    1b22:	08 95       	ret

00001b24 <usart_init_spi>:
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	ec 01       	movw	r28, r24
    1b2a:	fb 01       	movw	r30, r22
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	8f 7e       	andi	r24, 0xEF	; 239
    1b30:	8c 83       	std	Y+4, r24	; 0x04
    1b32:	a0 e6       	ldi	r26, 0x60	; 96
    1b34:	b6 e0       	ldi	r27, 0x06	; 6
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	8c 93       	st	X, r24
    1b3c:	11 97       	sbiw	r26, 0x01	; 1
    1b3e:	15 96       	adiw	r26, 0x05	; 5
    1b40:	8c 93       	st	X, r24
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	80 6c       	ori	r24, 0xC0	; 192
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	84 81       	ldd	r24, Z+4	; 0x04
    1b4a:	8d 7f       	andi	r24, 0xFD	; 253
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <usart_init_spi+0x34>
    1b50:	8d 81       	ldd	r24, Y+5	; 0x05
    1b52:	82 60       	ori	r24, 0x02	; 2
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <usart_init_spi+0x3a>
    1b58:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5a:	8d 7f       	andi	r24, 0xFD	; 253
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	85 81       	ldd	r24, Z+5	; 0x05
    1b60:	88 23       	and	r24, r24
    1b62:	21 f0       	breq	.+8      	; 0x1b6c <usart_init_spi+0x48>
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	84 60       	ori	r24, 0x04	; 4
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <usart_init_spi+0x4e>
    1b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6e:	8b 7f       	andi	r24, 0xFB	; 251
    1b70:	8d 83       	std	Y+5, r24	; 0x05
    1b72:	80 81       	ld	r24, Z
    1b74:	91 81       	ldd	r25, Z+1	; 0x01
    1b76:	a2 81       	ldd	r26, Z+2	; 0x02
    1b78:	b3 81       	ldd	r27, Z+3	; 0x03
    1b7a:	9c 01       	movw	r18, r24
    1b7c:	ad 01       	movw	r20, r26
    1b7e:	22 0f       	add	r18, r18
    1b80:	33 1f       	adc	r19, r19
    1b82:	44 1f       	adc	r20, r20
    1b84:	55 1f       	adc	r21, r21
    1b86:	60 e0       	ldi	r22, 0x00	; 0
    1b88:	78 e4       	ldi	r23, 0x48	; 72
    1b8a:	88 ee       	ldi	r24, 0xE8	; 232
    1b8c:	91 e0       	ldi	r25, 0x01	; 1
    1b8e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <__udivmodsi4>
    1b92:	21 50       	subi	r18, 0x01	; 1
    1b94:	31 09       	sbc	r19, r1
    1b96:	83 2f       	mov	r24, r19
    1b98:	8f 70       	andi	r24, 0x0F	; 15
    1b9a:	8f 83       	std	Y+7, r24	; 0x07
    1b9c:	2e 83       	std	Y+6, r18	; 0x06
    1b9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba0:	88 60       	ori	r24, 0x08	; 8
    1ba2:	8c 83       	std	Y+4, r24	; 0x04
    1ba4:	df 91       	pop	r29
    1ba6:	cf 91       	pop	r28
    1ba8:	08 95       	ret

00001baa <ssd1306_init>:
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <ssd1306_init+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <ssd1306_init+0x8>
    1bb2:	cd b7       	in	r28, 0x3d	; 61
    1bb4:	de b7       	in	r29, 0x3e	; 62
    1bb6:	20 ea       	ldi	r18, 0xA0	; 160
    1bb8:	36 e0       	ldi	r19, 0x06	; 6
    1bba:	88 e0       	ldi	r24, 0x08	; 8
    1bbc:	d9 01       	movw	r26, r18
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	8c 93       	st	X, r24
    1bc2:	a0 e6       	ldi	r26, 0x60	; 96
    1bc4:	b6 e0       	ldi	r27, 0x06	; 6
    1bc6:	91 e0       	ldi	r25, 0x01	; 1
    1bc8:	11 96       	adiw	r26, 0x01	; 1
    1bca:	9c 93       	st	X, r25
    1bcc:	11 97       	sbiw	r26, 0x01	; 1
    1bce:	e0 e0       	ldi	r30, 0x00	; 0
    1bd0:	f6 e0       	ldi	r31, 0x06	; 6
    1bd2:	81 83       	std	Z+1, r24	; 0x01
    1bd4:	92 e0       	ldi	r25, 0x02	; 2
    1bd6:	11 96       	adiw	r26, 0x01	; 1
    1bd8:	9c 93       	st	X, r25
    1bda:	11 97       	sbiw	r26, 0x01	; 1
    1bdc:	11 96       	adiw	r26, 0x01	; 1
    1bde:	8c 93       	st	X, r24
    1be0:	d9 01       	movw	r26, r18
    1be2:	15 96       	adiw	r26, 0x05	; 5
    1be4:	8c 93       	st	X, r24
    1be6:	86 83       	std	Z+6, r24	; 0x06
    1be8:	ba e6       	ldi	r27, 0x6A	; 106
    1bea:	ba 95       	dec	r27
    1bec:	f1 f7       	brne	.-4      	; 0x1bea <ssd1306_init+0x40>
    1bee:	00 c0       	rjmp	.+0      	; 0x1bf0 <ssd1306_init+0x46>
    1bf0:	85 83       	std	Z+5, r24	; 0x05
    1bf2:	ea e6       	ldi	r30, 0x6A	; 106
    1bf4:	ea 95       	dec	r30
    1bf6:	f1 f7       	brne	.-4      	; 0x1bf4 <ssd1306_init+0x4a>
    1bf8:	00 c0       	rjmp	.+0      	; 0x1bfa <ssd1306_init+0x50>
    1bfa:	e0 e7       	ldi	r30, 0x70	; 112
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	84 81       	ldd	r24, Z+4	; 0x04
    1c00:	8f 7e       	andi	r24, 0xEF	; 239
    1c02:	84 83       	std	Z+4, r24	; 0x04
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	9b e1       	ldi	r25, 0x1B	; 27
    1c08:	a7 eb       	ldi	r26, 0xB7	; 183
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	ab 83       	std	Y+3, r26	; 0x03
    1c12:	bc 83       	std	Y+4, r27	; 0x04
    1c14:	1d 82       	std	Y+5, r1	; 0x05
    1c16:	1e 82       	std	Y+6, r1	; 0x06
    1c18:	be 01       	movw	r22, r28
    1c1a:	6f 5f       	subi	r22, 0xFF	; 255
    1c1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c1e:	80 ea       	ldi	r24, 0xA0	; 160
    1c20:	99 e0       	ldi	r25, 0x09	; 9
    1c22:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <usart_init_spi>
    1c26:	88 ea       	ldi	r24, 0xA8	; 168
    1c28:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c2c:	8f e1       	ldi	r24, 0x1F	; 31
    1c2e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c32:	83 ed       	ldi	r24, 0xD3	; 211
    1c34:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c3e:	80 e4       	ldi	r24, 0x40	; 64
    1c40:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c44:	81 ea       	ldi	r24, 0xA1	; 161
    1c46:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c4a:	88 ec       	ldi	r24, 0xC8	; 200
    1c4c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c50:	8a ed       	ldi	r24, 0xDA	; 218
    1c52:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c5c:	81 e8       	ldi	r24, 0x81	; 129
    1c5e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c62:	8f e8       	ldi	r24, 0x8F	; 143
    1c64:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c68:	84 ea       	ldi	r24, 0xA4	; 164
    1c6a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c6e:	86 ea       	ldi	r24, 0xA6	; 166
    1c70:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c74:	85 ed       	ldi	r24, 0xD5	; 213
    1c76:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c7a:	80 e8       	ldi	r24, 0x80	; 128
    1c7c:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c80:	8d e8       	ldi	r24, 0x8D	; 141
    1c82:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c86:	84 e1       	ldi	r24, 0x14	; 20
    1c88:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c8c:	8b ed       	ldi	r24, 0xDB	; 219
    1c8e:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c92:	80 e4       	ldi	r24, 0x40	; 64
    1c94:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c98:	89 ed       	ldi	r24, 0xD9	; 217
    1c9a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1c9e:	81 ef       	ldi	r24, 0xF1	; 241
    1ca0:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1ca4:	8f ea       	ldi	r24, 0xAF	; 175
    1ca6:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <ssd1306_write_command>
    1caa:	26 96       	adiw	r28, 0x06	; 6
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <ssd1306_write_text>:
    1cb6:	ef 92       	push	r14
    1cb8:	ff 92       	push	r15
    1cba:	0f 93       	push	r16
    1cbc:	1f 93       	push	r17
    1cbe:	cf 93       	push	r28
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	ec 91       	ld	r30, X
    1cc4:	ee 23       	and	r30, r30
    1cc6:	29 f1       	breq	.+74     	; 0x1d12 <ssd1306_write_text+0x5c>
    1cc8:	7c 01       	movw	r14, r24
    1cca:	bf ef       	ldi	r27, 0xFF	; 255
    1ccc:	eb 1a       	sub	r14, r27
    1cce:	fb 0a       	sbc	r15, r27
    1cd0:	ef 37       	cpi	r30, 0x7F	; 127
    1cd2:	d0 f4       	brcc	.+52     	; 0x1d08 <ssd1306_write_text+0x52>
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	ec 56       	subi	r30, 0x6C	; 108
    1cdc:	fe 4d       	sbci	r31, 0xDE	; 222
    1cde:	00 81       	ld	r16, Z
    1ce0:	11 81       	ldd	r17, Z+1	; 0x01
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	61 f0       	breq	.+24     	; 0x1d02 <ssd1306_write_text+0x4c>
    1cea:	c1 e0       	ldi	r28, 0x01	; 1
    1cec:	f8 01       	movw	r30, r16
    1cee:	ec 0f       	add	r30, r28
    1cf0:	f1 1d       	adc	r31, r1
    1cf2:	80 81       	ld	r24, Z
    1cf4:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ssd1306_write_data>
    1cf8:	cf 5f       	subi	r28, 0xFF	; 255
    1cfa:	d8 01       	movw	r26, r16
    1cfc:	9c 91       	ld	r25, X
    1cfe:	9c 17       	cp	r25, r28
    1d00:	a8 f7       	brcc	.-22     	; 0x1cec <ssd1306_write_text+0x36>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ssd1306_write_data>
    1d08:	d7 01       	movw	r26, r14
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	7d 01       	movw	r14, r26
    1d0e:	e1 11       	cpse	r30, r1
    1d10:	df cf       	rjmp	.-66     	; 0x1cd0 <ssd1306_write_text+0x1a>
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	08 95       	ret

00001d1e <glcd_thread>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	c8 57       	subi	r28, 0x78	; 120
    1d28:	d1 09       	sbc	r29, r1
    1d2a:	cd bf       	out	0x3d, r28	; 61
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ssd1306_init>
    1d32:	10 e0       	ldi	r17, 0x00	; 0
    1d34:	0f c0       	rjmp	.+30     	; 0x1d54 <glcd_thread+0x36>
    1d36:	81 2f       	mov	r24, r17
    1d38:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <ssd1306_set_page_address>
    1d3c:	80 2f       	mov	r24, r16
    1d3e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ssd1306_set_column_address>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ssd1306_write_data>
    1d48:	0f 5f       	subi	r16, 0xFF	; 255
    1d4a:	00 38       	cpi	r16, 0x80	; 128
    1d4c:	a1 f7       	brne	.-24     	; 0x1d36 <glcd_thread+0x18>
    1d4e:	1f 5f       	subi	r17, 0xFF	; 255
    1d50:	14 30       	cpi	r17, 0x04	; 4
    1d52:	11 f0       	breq	.+4      	; 0x1d58 <glcd_thread+0x3a>
    1d54:	00 e0       	ldi	r16, 0x00	; 0
    1d56:	ef cf       	rjmp	.-34     	; 0x1d36 <glcd_thread+0x18>
    1d58:	0f 2e       	mov	r0, r31
    1d5a:	f4 e9       	ldi	r31, 0x94	; 148
    1d5c:	ef 2e       	mov	r14, r31
    1d5e:	f2 e2       	ldi	r31, 0x22	; 34
    1d60:	ff 2e       	mov	r15, r31
    1d62:	f0 2d       	mov	r31, r0
    1d64:	33 24       	eor	r3, r3
    1d66:	33 94       	inc	r3
    1d68:	ce 01       	movw	r24, r28
    1d6a:	01 96       	adiw	r24, 0x01	; 1
    1d6c:	4c 01       	movw	r8, r24
    1d6e:	3e 01       	movw	r6, r28
    1d70:	9f e1       	ldi	r25, 0x1F	; 31
    1d72:	69 0e       	add	r6, r25
    1d74:	71 1c       	adc	r7, r1
    1d76:	0f 2e       	mov	r0, r31
    1d78:	ff ed       	ldi	r31, 0xDF	; 223
    1d7a:	4f 2e       	mov	r4, r31
    1d7c:	f2 e2       	ldi	r31, 0x22	; 34
    1d7e:	5f 2e       	mov	r5, r31
    1d80:	f0 2d       	mov	r31, r0
    1d82:	5e 01       	movw	r10, r28
    1d84:	ad e3       	ldi	r26, 0x3D	; 61
    1d86:	aa 0e       	add	r10, r26
    1d88:	b1 1c       	adc	r11, r1
    1d8a:	6e 01       	movw	r12, r28
    1d8c:	bb e5       	ldi	r27, 0x5B	; 91
    1d8e:	cb 0e       	add	r12, r27
    1d90:	d1 1c       	adc	r13, r1
    1d92:	f7 01       	movw	r30, r14
    1d94:	80 81       	ld	r24, Z
    1d96:	83 25       	eor	r24, r3
    1d98:	1f 92       	push	r1
    1d9a:	8f 93       	push	r24
    1d9c:	a1 ec       	ldi	r26, 0xC1	; 193
    1d9e:	b2 e2       	ldi	r27, 0x22	; 34
    1da0:	bf 93       	push	r27
    1da2:	af 93       	push	r26
    1da4:	9f 92       	push	r9
    1da6:	8f 92       	push	r8
    1da8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sprintf>
    1dac:	d7 01       	movw	r26, r14
    1dae:	11 96       	adiw	r26, 0x01	; 1
    1db0:	8c 91       	ld	r24, X
    1db2:	83 25       	eor	r24, r3
    1db4:	1f 92       	push	r1
    1db6:	8f 93       	push	r24
    1db8:	a0 ed       	ldi	r26, 0xD0	; 208
    1dba:	b2 e2       	ldi	r27, 0x22	; 34
    1dbc:	bf 93       	push	r27
    1dbe:	af 93       	push	r26
    1dc0:	7f 92       	push	r7
    1dc2:	6f 92       	push	r6
    1dc4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sprintf>
    1dc8:	d7 01       	movw	r26, r14
    1dca:	12 96       	adiw	r26, 0x02	; 2
    1dcc:	8c 91       	ld	r24, X
    1dce:	83 25       	eor	r24, r3
    1dd0:	1f 92       	push	r1
    1dd2:	8f 93       	push	r24
    1dd4:	5f 92       	push	r5
    1dd6:	4f 92       	push	r4
    1dd8:	bf 92       	push	r11
    1dda:	af 92       	push	r10
    1ddc:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sprintf>
    1de0:	f7 01       	movw	r30, r14
    1de2:	83 81       	ldd	r24, Z+3	; 0x03
    1de4:	83 25       	eor	r24, r3
    1de6:	1f 92       	push	r1
    1de8:	8f 93       	push	r24
    1dea:	ae ee       	ldi	r26, 0xEE	; 238
    1dec:	b2 e2       	ldi	r27, 0x22	; 34
    1dee:	bf 93       	push	r27
    1df0:	af 93       	push	r26
    1df2:	df 92       	push	r13
    1df4:	cf 92       	push	r12
    1df6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <sprintf>
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	00 e0       	ldi	r16, 0x00	; 0
    1e00:	0f c0       	rjmp	.+30     	; 0x1e20 <glcd_thread+0x102>
    1e02:	80 2f       	mov	r24, r16
    1e04:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <ssd1306_set_page_address>
    1e08:	81 2f       	mov	r24, r17
    1e0a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ssd1306_set_column_address>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <ssd1306_write_data>
    1e14:	1f 5f       	subi	r17, 0xFF	; 255
    1e16:	10 38       	cpi	r17, 0x80	; 128
    1e18:	a1 f7       	brne	.-24     	; 0x1e02 <glcd_thread+0xe4>
    1e1a:	0f 5f       	subi	r16, 0xFF	; 255
    1e1c:	04 30       	cpi	r16, 0x04	; 4
    1e1e:	11 f0       	breq	.+4      	; 0x1e24 <glcd_thread+0x106>
    1e20:	10 e0       	ldi	r17, 0x00	; 0
    1e22:	ef cf       	rjmp	.-34     	; 0x1e02 <glcd_thread+0xe4>
    1e24:	84 01       	movw	r16, r8
    1e26:	21 2c       	mov	r2, r1
    1e28:	82 2d       	mov	r24, r2
    1e2a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <ssd1306_set_page_address>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <ssd1306_set_column_address>
    1e34:	c8 01       	movw	r24, r16
    1e36:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <ssd1306_write_text>
    1e3a:	23 94       	inc	r2
    1e3c:	02 5e       	subi	r16, 0xE2	; 226
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	94 e0       	ldi	r25, 0x04	; 4
    1e42:	29 12       	cpse	r2, r25
    1e44:	f1 cf       	rjmp	.-30     	; 0x1e28 <glcd_thread+0x10a>
    1e46:	80 91 7b 93 	lds	r24, 0x937B	; 0x80937b <radioRXnotificationLed>
    1e4a:	88 23       	and	r24, r24
    1e4c:	79 f0       	breq	.+30     	; 0x1e6c <glcd_thread+0x14e>
    1e4e:	89 eb       	ldi	r24, 0xB9	; 185
    1e50:	92 e2       	ldi	r25, 0x22	; 34
    1e52:	0e 94 84 11 	call	0x2308	; 0x2308 <DigitalPin_ClearValue>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 19 0b 	call	0x1632	; 0x1632 <vTaskDelay>
    1e5e:	89 eb       	ldi	r24, 0xB9	; 185
    1e60:	92 e2       	ldi	r25, 0x22	; 34
    1e62:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
    1e66:	10 92 7b 93 	sts	0x937B, r1	; 0x80937b <radioRXnotificationLed>
    1e6a:	93 cf       	rjmp	.-218    	; 0x1d92 <glcd_thread+0x74>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 19 0b 	call	0x1632	; 0x1632 <vTaskDelay>
    1e74:	8e cf       	rjmp	.-228    	; 0x1d92 <glcd_thread+0x74>

00001e76 <board_config>:
volatile bool radioRXnotificationLed  =0;
	
	
void board_config(){

	CLKSYS_Enable( OSC_RC32MEN_bm );
    1e76:	e0 e5       	ldi	r30, 0x50	; 80
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	82 60       	ori	r24, 0x02	; 2
    1e7e:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    1e80:	81 81       	ldd	r24, Z+1	; 0x01
    1e82:	81 ff       	sbrs	r24, 1
    1e84:	fd cf       	rjmp	.-6      	; 0x1e80 <board_config+0xa>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 3c 12 	call	0x2478	; 0x2478 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 32 12 	call	0x2464	; 0x2464 <CLKSYS_Disable>

	DigitalPin_SetDir(&led1,1);
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	89 eb       	ldi	r24, 0xB9	; 185
    1e96:	92 e2       	ldi	r25, 0x22	; 34
    1e98:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DigitalPin_SetDir>
	DigitalPin_SetDir(&led2,1);
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	86 eb       	ldi	r24, 0xB6	; 182
    1ea0:	92 e2       	ldi	r25, 0x22	; 34
    1ea2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedR,1);
    1ea6:	61 e0       	ldi	r22, 0x01	; 1
    1ea8:	83 eb       	ldi	r24, 0xB3	; 179
    1eaa:	92 e2       	ldi	r25, 0x22	; 34
    1eac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DigitalPin_SetDir>
	DigitalPin_SetDir(&powLedG,1);
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	80 eb       	ldi	r24, 0xB0	; 176
    1eb4:	92 e2       	ldi	r25, 0x22	; 34
    1eb6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <DigitalPin_SetDir>

	DigitalPin_SetValue(&led1);
    1eba:	89 eb       	ldi	r24, 0xB9	; 185
    1ebc:	92 e2       	ldi	r25, 0x22	; 34
    1ebe:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
	DigitalPin_SetValue(&led2);
    1ec2:	86 eb       	ldi	r24, 0xB6	; 182
    1ec4:	92 e2       	ldi	r25, 0x22	; 34
    1ec6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedR);//off
    1eca:	83 eb       	ldi	r24, 0xB3	; 179
    1ecc:	92 e2       	ldi	r25, 0x22	; 34
    1ece:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
	DigitalPin_SetValue(&powLedG);//on
    1ed2:	80 eb       	ldi	r24, 0xB0	; 176
    1ed4:	92 e2       	ldi	r25, 0x22	; 34
    1ed6:	0e 94 74 11 	call	0x22e8	; 0x22e8 <DigitalPin_SetValue>
    1eda:	08 95       	ret

00001edc <command_handler>:

	
}


void *command_handler(char **args,int arg_count){
    1edc:	0f 93       	push	r16
    1ede:	1f 93       	push	r17
    1ee0:	cf 93       	push	r28
    1ee2:	df 93       	push	r29
    1ee4:	ec 01       	movw	r28, r24

	if(!strcmp(args[0], "light") ) {
    1ee6:	08 81       	ld	r16, Y
    1ee8:	19 81       	ldd	r17, Y+1	; 0x01
    1eea:	6e ef       	ldi	r22, 0xFE	; 254
    1eec:	72 e2       	ldi	r23, 0x22	; 34
    1eee:	c8 01       	movw	r24, r16
    1ef0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1ef4:	89 2b       	or	r24, r25
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <command_handler+0x1e>
    1ef8:	63 c0       	rjmp	.+198    	; 0x1fc0 <command_handler+0xe4>
		if(!strcmp(args[1], "0")) {
    1efa:	0a 81       	ldd	r16, Y+2	; 0x02
    1efc:	1b 81       	ldd	r17, Y+3	; 0x03
    1efe:	64 e0       	ldi	r22, 0x04	; 4
    1f00:	73 e2       	ldi	r23, 0x23	; 35
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f08:	89 2b       	or	r24, r25
    1f0a:	c9 f4       	brne	.+50     	; 0x1f3e <command_handler+0x62>
			if(!strcmp(args[2], "0")) {
    1f0c:	0c 80       	ldd	r0, Y+4	; 0x04
    1f0e:	dd 81       	ldd	r29, Y+5	; 0x05
    1f10:	c0 2d       	mov	r28, r0
    1f12:	64 e0       	ldi	r22, 0x04	; 4
    1f14:	73 e2       	ldi	r23, 0x23	; 35
    1f16:	ce 01       	movw	r24, r28
    1f18:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f1c:	89 2b       	or	r24, r25
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <command_handler+0x4c>
				relayState[0] = 1;
    1f20:	81 e0       	ldi	r24, 0x01	; 1
    1f22:	80 93 94 22 	sts	0x2294, r24	; 0x802294 <relayState>
    1f26:	9e c0       	rjmp	.+316    	; 0x2064 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1f28:	6d e1       	ldi	r22, 0x1D	; 29
    1f2a:	73 e2       	ldi	r23, 0x23	; 35
    1f2c:	ce 01       	movw	r24, r28
    1f2e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f32:	89 2b       	or	r24, r25
    1f34:	09 f0       	breq	.+2      	; 0x1f38 <command_handler+0x5c>
    1f36:	96 c0       	rjmp	.+300    	; 0x2064 <command_handler+0x188>
				relayState[0] = 0;
    1f38:	10 92 94 22 	sts	0x2294, r1	; 0x802294 <relayState>
    1f3c:	93 c0       	rjmp	.+294    	; 0x2064 <command_handler+0x188>
			}
		}
		else if(!strcmp(args[1], "1")) {
    1f3e:	6d e1       	ldi	r22, 0x1D	; 29
    1f40:	73 e2       	ldi	r23, 0x23	; 35
    1f42:	c8 01       	movw	r24, r16
    1f44:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f48:	89 2b       	or	r24, r25
    1f4a:	c9 f4       	brne	.+50     	; 0x1f7e <command_handler+0xa2>
			if(!strcmp(args[2], "0")) {
    1f4c:	0c 80       	ldd	r0, Y+4	; 0x04
    1f4e:	dd 81       	ldd	r29, Y+5	; 0x05
    1f50:	c0 2d       	mov	r28, r0
    1f52:	64 e0       	ldi	r22, 0x04	; 4
    1f54:	73 e2       	ldi	r23, 0x23	; 35
    1f56:	ce 01       	movw	r24, r28
    1f58:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f5c:	89 2b       	or	r24, r25
    1f5e:	21 f4       	brne	.+8      	; 0x1f68 <command_handler+0x8c>
				relayState[1] = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	80 93 95 22 	sts	0x2295, r24	; 0x802295 <relayState+0x1>
    1f66:	7e c0       	rjmp	.+252    	; 0x2064 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1f68:	6d e1       	ldi	r22, 0x1D	; 29
    1f6a:	73 e2       	ldi	r23, 0x23	; 35
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f72:	89 2b       	or	r24, r25
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <command_handler+0x9c>
    1f76:	76 c0       	rjmp	.+236    	; 0x2064 <command_handler+0x188>
				relayState[1] = 0;
    1f78:	10 92 95 22 	sts	0x2295, r1	; 0x802295 <relayState+0x1>
    1f7c:	73 c0       	rjmp	.+230    	; 0x2064 <command_handler+0x188>
			}
		}
		else if(!strcmp(args[1], "2")) {
    1f7e:	60 e2       	ldi	r22, 0x20	; 32
    1f80:	73 e2       	ldi	r23, 0x23	; 35
    1f82:	c8 01       	movw	r24, r16
    1f84:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f88:	89 2b       	or	r24, r25
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <command_handler+0xb2>
    1f8c:	6b c0       	rjmp	.+214    	; 0x2064 <command_handler+0x188>
			if(!strcmp(args[2], "0")) {
    1f8e:	0c 80       	ldd	r0, Y+4	; 0x04
    1f90:	dd 81       	ldd	r29, Y+5	; 0x05
    1f92:	c0 2d       	mov	r28, r0
    1f94:	64 e0       	ldi	r22, 0x04	; 4
    1f96:	73 e2       	ldi	r23, 0x23	; 35
    1f98:	ce 01       	movw	r24, r28
    1f9a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1f9e:	89 2b       	or	r24, r25
    1fa0:	21 f4       	brne	.+8      	; 0x1faa <command_handler+0xce>
				relayState[2] = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	80 93 96 22 	sts	0x2296, r24	; 0x802296 <relayState+0x2>
    1fa8:	5d c0       	rjmp	.+186    	; 0x2064 <command_handler+0x188>
			}
			else if(!strcmp(args[2], "1")) {
    1faa:	6d e1       	ldi	r22, 0x1D	; 29
    1fac:	73 e2       	ldi	r23, 0x23	; 35
    1fae:	ce 01       	movw	r24, r28
    1fb0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1fb4:	89 2b       	or	r24, r25
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <command_handler+0xde>
    1fb8:	55 c0       	rjmp	.+170    	; 0x2064 <command_handler+0x188>
				relayState[2] = 0;
    1fba:	10 92 96 22 	sts	0x2296, r1	; 0x802296 <relayState+0x2>
    1fbe:	52 c0       	rjmp	.+164    	; 0x2064 <command_handler+0x188>
			}
		}
	}
	else if(!strcmp(args[0], "fan") ) {
    1fc0:	66 e0       	ldi	r22, 0x06	; 6
    1fc2:	73 e2       	ldi	r23, 0x23	; 35
    1fc4:	c8 01       	movw	r24, r16
    1fc6:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1fca:	89 2b       	or	r24, r25
    1fcc:	c1 f4       	brne	.+48     	; 0x1ffe <command_handler+0x122>
		if(!strcmp(args[1], "0")) {
    1fce:	0a 80       	ldd	r0, Y+2	; 0x02
    1fd0:	db 81       	ldd	r29, Y+3	; 0x03
    1fd2:	c0 2d       	mov	r28, r0
    1fd4:	64 e0       	ldi	r22, 0x04	; 4
    1fd6:	73 e2       	ldi	r23, 0x23	; 35
    1fd8:	ce 01       	movw	r24, r28
    1fda:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1fde:	89 2b       	or	r24, r25
    1fe0:	21 f4       	brne	.+8      	; 0x1fea <command_handler+0x10e>
			relayState[3] = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 97 22 	sts	0x2297, r24	; 0x802297 <relayState+0x3>
    1fe8:	3d c0       	rjmp	.+122    	; 0x2064 <command_handler+0x188>
		}
		else if(!strcmp(args[1], "1")) {
    1fea:	6d e1       	ldi	r22, 0x1D	; 29
    1fec:	73 e2       	ldi	r23, 0x23	; 35
    1fee:	ce 01       	movw	r24, r28
    1ff0:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    1ff4:	89 2b       	or	r24, r25
    1ff6:	b1 f5       	brne	.+108    	; 0x2064 <command_handler+0x188>
			relayState[3] = 0;
    1ff8:	10 92 97 22 	sts	0x2297, r1	; 0x802297 <relayState+0x3>
    1ffc:	33 c0       	rjmp	.+102    	; 0x2064 <command_handler+0x188>
		}
	}
	else if(!strcmp(args[0], "all") ) {
    1ffe:	6a e0       	ldi	r22, 0x0A	; 10
    2000:	73 e2       	ldi	r23, 0x23	; 35
    2002:	c8 01       	movw	r24, r16
    2004:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    2008:	89 2b       	or	r24, r25
    200a:	01 f5       	brne	.+64     	; 0x204c <command_handler+0x170>
		if(!strcmp(args[1], "0")) {
    200c:	0a 80       	ldd	r0, Y+2	; 0x02
    200e:	db 81       	ldd	r29, Y+3	; 0x03
    2010:	c0 2d       	mov	r28, r0
    2012:	64 e0       	ldi	r22, 0x04	; 4
    2014:	73 e2       	ldi	r23, 0x23	; 35
    2016:	ce 01       	movw	r24, r28
    2018:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    201c:	89 2b       	or	r24, r25
    201e:	41 f4       	brne	.+16     	; 0x2030 <command_handler+0x154>
			relayState[0] = 1;
    2020:	e4 e9       	ldi	r30, 0x94	; 148
    2022:	f2 e2       	ldi	r31, 0x22	; 34
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	80 83       	st	Z, r24
			relayState[1] = 1;
    2028:	81 83       	std	Z+1, r24	; 0x01
			relayState[2] = 1;
    202a:	82 83       	std	Z+2, r24	; 0x02
			relayState[3] = 1;
    202c:	83 83       	std	Z+3, r24	; 0x03
    202e:	1a c0       	rjmp	.+52     	; 0x2064 <command_handler+0x188>
		}
		else if(!strcmp(args[1], "1")) {
    2030:	6d e1       	ldi	r22, 0x1D	; 29
    2032:	73 e2       	ldi	r23, 0x23	; 35
    2034:	ce 01       	movw	r24, r28
    2036:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    203a:	89 2b       	or	r24, r25
    203c:	99 f4       	brne	.+38     	; 0x2064 <command_handler+0x188>
			relayState[0] = 0;
    203e:	e4 e9       	ldi	r30, 0x94	; 148
    2040:	f2 e2       	ldi	r31, 0x22	; 34
    2042:	10 82       	st	Z, r1
			relayState[1] = 0;
    2044:	11 82       	std	Z+1, r1	; 0x01
			relayState[2] = 0;
    2046:	12 82       	std	Z+2, r1	; 0x02
			relayState[3] = 0;
    2048:	13 82       	std	Z+3, r1	; 0x03
    204a:	0c c0       	rjmp	.+24     	; 0x2064 <command_handler+0x188>
		}
	}

	else if(!strcmp(args[0],"bootloader")){
    204c:	6e e0       	ldi	r22, 0x0E	; 14
    204e:	73 e2       	ldi	r23, 0x23	; 35
    2050:	c8 01       	movw	r24, r16
    2052:	0e 94 23 17 	call	0x2e46	; 0x2e46 <strcmp>
    2056:	89 2b       	or	r24, r25
    2058:	29 f4       	brne	.+10     	; 0x2064 <command_handler+0x188>
		uint8_t jmpE = (uint8_t)((BOOT_SECTION_START/2)>>16);
		uint8_t jmpH = (uint8_t)((BOOT_SECTION_START/2)>>8);
		uint8_t jmpL = (uint8_t)((BOOT_SECTION_START/2)>>0);
		//cli();
		//CCPWrite(&(PMIC.CTRL), PMIC_IVSEL_bm );
		asm("ldi ZH, %0"::"i" (jmpH):"r30","r31");
    205a:	f0 e0       	ldi	r31, 0x00	; 0
		asm("ldi ZL, %0"::"i" (jmpL):"r30","r31");
    205c:	e0 e0       	ldi	r30, 0x00	; 0
		EIND = jmpE;
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	8c bf       	out	0x3c, r24	; 60
		asm("eijmp");
    2062:	19 94       	eijmp
	else{
		//no recognized command
	}

	return 0;
}
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <command_parse_execute>:

void command_parse_execute(char *command){
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	cd b7       	in	r28, 0x3d	; 61
    2080:	de b7       	in	r29, 0x3e	; 62
    2082:	64 97       	sbiw	r28, 0x14	; 20
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	de bf       	out	0x3e, r29	; 62

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
    2088:	69 e1       	ldi	r22, 0x19	; 25
    208a:	73 e2       	ldi	r23, 0x23	; 35
    208c:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <strtok>
	while(pch != NULL) {
    2090:	00 97       	sbiw	r24, 0x00	; 0
    2092:	d9 f0       	breq	.+54     	; 0x20ca <command_parse_execute+0x58>
		remotch_args[arg_index] = pch;
    2094:	89 83       	std	Y+1, r24	; 0x01
    2096:	9a 83       	std	Y+2, r25	; 0x02
    2098:	7e 01       	movw	r14, r28
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	e8 0e       	add	r14, r24
    209e:	f1 1c       	adc	r15, r1
    20a0:	01 e0       	ldi	r16, 0x01	; 1
    20a2:	10 e0       	ldi	r17, 0x00	; 0
    20a4:	09 c0       	rjmp	.+18     	; 0x20b8 <command_parse_execute+0x46>
    20a6:	f7 01       	movw	r30, r14
    20a8:	81 93       	st	Z+, r24
    20aa:	91 93       	st	Z+, r25
    20ac:	7f 01       	movw	r14, r30
		arg_index++;
    20ae:	0f 5f       	subi	r16, 0xFF	; 255
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(arg_index >=10) break;
    20b2:	0a 30       	cpi	r16, 0x0A	; 10
    20b4:	11 05       	cpc	r17, r1
    20b6:	59 f0       	breq	.+22     	; 0x20ce <command_parse_execute+0x5c>
		pch = strtok (NULL, " ,");
    20b8:	69 e1       	ldi	r22, 0x19	; 25
    20ba:	73 e2       	ldi	r23, 0x23	; 35
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <strtok>

	int arg_index = 0;
	char *pch;
	char *remotch_args[ 10];
	pch = strtok(command, " ,");
	while(pch != NULL) {
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	79 f7       	brne	.-34     	; 0x20a6 <command_parse_execute+0x34>
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <command_parse_execute+0x5c>
	return 0;
}

void command_parse_execute(char *command){

	int arg_index = 0;
    20ca:	00 e0       	ldi	r16, 0x00	; 0
    20cc:	10 e0       	ldi	r17, 0x00	; 0
		remotch_args[arg_index] = pch;
		arg_index++;
		if(arg_index >=10) break;
		pch = strtok (NULL, " ,");
	}
	command_handler(remotch_args,arg_index);
    20ce:	b8 01       	movw	r22, r16
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <command_handler>
}
    20d8:	64 96       	adiw	r28, 0x14	; 20
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	08 95       	ret

000020ec <RadioReset>:
RadioConfig_t RadioConfig;
RxPipeConfig_t RxPipeConfig[6];

void RadioReset(){

  RadioConfig.DataReadyInterruptEnabled = 0;
    20ec:	ed e7       	ldi	r30, 0x7D	; 125
    20ee:	f3 e9       	ldi	r31, 0x93	; 147
    20f0:	10 82       	st	Z, r1
  RadioConfig.DataSentInterruptFlagEnabled = 0;
    20f2:	11 82       	std	Z+1, r1	; 0x01
  RadioConfig.MaxRetryInterruptFlagEnabled = 0;
    20f4:	12 82       	std	Z+2, r1	; 0x02
  RadioConfig.Crc = CONFIG_CRC_16BIT;
    20f6:	8c e0       	ldi	r24, 0x0C	; 12
    20f8:	83 83       	std	Z+3, r24	; 0x03
  RadioConfig.AutoReTransmissionCount = 15;
    20fa:	8f e0       	ldi	r24, 0x0F	; 15
    20fc:	84 83       	std	Z+4, r24	; 0x04
  RadioConfig.AutoReTransmitDelayX250us = 15;
    20fe:	85 83       	std	Z+5, r24	; 0x05
  RadioConfig.frequencyOffset = 2;
    2100:	42 e0       	ldi	r20, 0x02	; 2
    2102:	46 83       	std	Z+6, r20	; 0x06
  RadioConfig.datarate = RF_SETUP_RF_DR_2MBPS;
    2104:	88 e0       	ldi	r24, 0x08	; 8
    2106:	87 83       	std	Z+7, r24	; 0x07
  RadioConfig.RfPower = RF_SETUP_RF_PWR_0DBM;
    2108:	86 e0       	ldi	r24, 0x06	; 6
    210a:	80 87       	std	Z+8, r24	; 0x08
  RadioConfig.PllLock = 0;
    210c:	11 86       	std	Z+9, r1	; 0x09
  RadioConfig.ContWaveEnabled = 0;
    210e:	12 86       	std	Z+10, r1	; 0x0a
  RadioConfig.FeatureDynamicPayloadEnabled = 1;
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	83 87       	std	Z+11, r24	; 0x0b
  RadioConfig.FeaturePayloadWithAckEnabled = 1;
    2114:	84 87       	std	Z+12, r24	; 0x0c
  RadioConfig.FeatureDynamicPayloadWithNoAckEnabled = 1;
    2116:	85 87       	std	Z+13, r24	; 0x0d
  
    RxPipeConfig[0].address = 0x11223344EE;
    2118:	e3 e9       	ldi	r30, 0x93	; 147
    211a:	f3 e9       	ldi	r31, 0x93	; 147
    211c:	9e ee       	ldi	r25, 0xEE	; 238
    211e:	92 83       	std	Z+2, r25	; 0x02
    2120:	94 e4       	ldi	r25, 0x44	; 68
    2122:	93 83       	std	Z+3, r25	; 0x03
    2124:	93 e3       	ldi	r25, 0x33	; 51
    2126:	94 83       	std	Z+4, r25	; 0x04
    2128:	92 e2       	ldi	r25, 0x22	; 34
    212a:	95 83       	std	Z+5, r25	; 0x05
    212c:	91 e1       	ldi	r25, 0x11	; 17
    212e:	96 83       	std	Z+6, r25	; 0x06
    2130:	17 82       	std	Z+7, r1	; 0x07
    2132:	10 86       	std	Z+8, r1	; 0x08
    2134:	11 86       	std	Z+9, r1	; 0x09
    RxPipeConfig[1].address = 0x9A4524CE01;
    2136:	86 87       	std	Z+14, r24	; 0x0e
    2138:	3e ec       	ldi	r19, 0xCE	; 206
    213a:	37 87       	std	Z+15, r19	; 0x0f
    213c:	24 e2       	ldi	r18, 0x24	; 36
    213e:	20 8b       	std	Z+16, r18	; 0x10
    2140:	95 e4       	ldi	r25, 0x45	; 69
    2142:	91 8b       	std	Z+17, r25	; 0x11
    2144:	8a e9       	ldi	r24, 0x9A	; 154
    2146:	82 8b       	std	Z+18, r24	; 0x12
    2148:	13 8a       	std	Z+19, r1	; 0x13
    214a:	14 8a       	std	Z+20, r1	; 0x14
    214c:	15 8a       	std	Z+21, r1	; 0x15
    RxPipeConfig[2].address = 0x9A4524CE02;
    214e:	42 8f       	std	Z+26, r20	; 0x1a
    2150:	33 8f       	std	Z+27, r19	; 0x1b
    2152:	24 8f       	std	Z+28, r18	; 0x1c
    2154:	95 8f       	std	Z+29, r25	; 0x1d
    2156:	86 8f       	std	Z+30, r24	; 0x1e
    2158:	17 8e       	std	Z+31, r1	; 0x1f
    215a:	10 a2       	std	Z+32, r1	; 0x20
    215c:	11 a2       	std	Z+33, r1	; 0x21
    RxPipeConfig[3].address = 0x9A4524CE03;
    215e:	43 e0       	ldi	r20, 0x03	; 3
    2160:	46 a3       	std	Z+38, r20	; 0x26
    2162:	37 a3       	std	Z+39, r19	; 0x27
    2164:	20 a7       	std	Z+40, r18	; 0x28
    2166:	91 a7       	std	Z+41, r25	; 0x29
    2168:	82 a7       	std	Z+42, r24	; 0x2a
    216a:	13 a6       	std	Z+43, r1	; 0x2b
    216c:	14 a6       	std	Z+44, r1	; 0x2c
    216e:	15 a6       	std	Z+45, r1	; 0x2d
    RxPipeConfig[4].address = 0x9A4524CE04;
    2170:	44 e0       	ldi	r20, 0x04	; 4
    2172:	42 ab       	std	Z+50, r20	; 0x32
    2174:	33 ab       	std	Z+51, r19	; 0x33
    2176:	24 ab       	std	Z+52, r18	; 0x34
    2178:	95 ab       	std	Z+53, r25	; 0x35
    217a:	86 ab       	std	Z+54, r24	; 0x36
    217c:	17 aa       	std	Z+55, r1	; 0x37
    217e:	10 ae       	std	Z+56, r1	; 0x38
    2180:	11 ae       	std	Z+57, r1	; 0x39
    RxPipeConfig[5].address = 0x9A4524CE05;
    2182:	e1 ed       	ldi	r30, 0xD1	; 209
    2184:	f3 e9       	ldi	r31, 0x93	; 147
    2186:	45 e0       	ldi	r20, 0x05	; 5
    2188:	40 83       	st	Z, r20
    218a:	31 83       	std	Z+1, r19	; 0x01
    218c:	22 83       	std	Z+2, r18	; 0x02
    218e:	93 83       	std	Z+3, r25	; 0x03
    2190:	84 83       	std	Z+4, r24	; 0x04
    2192:	15 82       	std	Z+5, r1	; 0x05
    2194:	16 82       	std	Z+6, r1	; 0x06
    2196:	17 82       	std	Z+7, r1	; 0x07
    2198:	ee e9       	ldi	r30, 0x9E	; 158
    219a:	f3 e9       	ldi	r31, 0x93	; 147
    219c:	26 ee       	ldi	r18, 0xE6	; 230
    219e:	33 e9       	ldi	r19, 0x93	; 147

  
  int i;
  for(i=0;i<6;i++){
    RxPipeConfig[i].PipeEnabled = 1;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	df 01       	movw	r26, r30
    21a4:	1b 97       	sbiw	r26, 0x0b	; 11
    21a6:	8c 93       	st	X, r24
    21a8:	11 96       	adiw	r26, 0x01	; 1
    RxPipeConfig[i].autoAckEnabled = 1;
    21aa:	8c 93       	st	X, r24
    RxPipeConfig[i].dynamicPayloadEnabled = 1;
    21ac:	80 83       	st	Z, r24
    21ae:	3c 96       	adiw	r30, 0x0c	; 12
    RxPipeConfig[4].address = 0x9A4524CE04;
    RxPipeConfig[5].address = 0x9A4524CE05;

  
  int i;
  for(i=0;i<6;i++){
    21b0:	e2 17       	cp	r30, r18
    21b2:	f3 07       	cpc	r31, r19
    21b4:	b1 f7       	brne	.-20     	; 0x21a2 <RadioReset+0xb6>
    RxPipeConfig[i].autoAckEnabled = 1;
    RxPipeConfig[i].dynamicPayloadEnabled = 1;
  }
  
  
  ResetConfigValues(&RadioConfig, RxPipeConfig);
    21b6:	63 e9       	ldi	r22, 0x93	; 147
    21b8:	73 e9       	ldi	r23, 0x93	; 147
    21ba:	8d e7       	ldi	r24, 0x7D	; 125
    21bc:	93 e9       	ldi	r25, 0x93	; 147
    21be:	0e 94 04 02 	call	0x408	; 0x408 <ResetConfigValues>
    21c2:	08 95       	ret

000021c4 <radio_thread>:





void radio_thread( void *pvParameters ){
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	af 97       	sbiw	r28, 0x2f	; 47
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	de bf       	out	0x3e, r29	; 62
	
  RadioReset();
    21d2:	0e 94 76 10 	call	0x20ec	; 0x20ec <RadioReset>
  
	while(1){
		if(readable()){
			uint8_t RxData[32];
			Payload_t payload;
			payload.data = RxData;
    21d6:	8e 01       	movw	r16, r28
    21d8:	0f 5f       	subi	r16, 0xFF	; 255
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
  payload.length = strlen(myMesg);
  payload.retransmitCount = 15;
  
  
	while(1){
		if(readable()){
    21dc:	0e 94 05 03 	call	0x60a	; 0x60a <readable>
    21e0:	88 23       	and	r24, r24
    21e2:	a9 f0       	breq	.+42     	; 0x220e <radio_thread+0x4a>
			uint8_t RxData[32];
			Payload_t payload;
			payload.data = RxData;
    21e4:	0b a7       	std	Y+43, r16	; 0x2b
    21e6:	1c a7       	std	Y+44, r17	; 0x2c
          
			clear_data_ready_flag();
    21e8:	0e 94 28 05 	call	0xa50	; 0xa50 <clear_data_ready_flag>
			readPayload(&payload);
    21ec:	ce 01       	movw	r24, r28
    21ee:	81 96       	adiw	r24, 0x21	; 33
    21f0:	0e 94 18 03 	call	0x630	; 0x630 <readPayload>
			payload.data[payload.length] = '\0';
    21f4:	eb a5       	ldd	r30, Y+43	; 0x2b
    21f6:	fc a5       	ldd	r31, Y+44	; 0x2c
    21f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    21fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    21fc:	e8 0f       	add	r30, r24
    21fe:	f9 1f       	adc	r31, r25
    2200:	10 82       	st	Z, r1
			command_parse_execute(payload.data);
    2202:	8b a5       	ldd	r24, Y+43	; 0x2b
    2204:	9c a5       	ldd	r25, Y+44	; 0x2c
    2206:	0e 94 39 10 	call	0x2072	; 0x2072 <command_parse_execute>

			flush_rx();
    220a:	0e 94 2f 04 	call	0x85e	; 0x85e <flush_rx>

		}
    
		vTaskDelay(200);
    220e:	88 ec       	ldi	r24, 0xC8	; 200
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 19 0b 	call	0x1632	; 0x1632 <vTaskDelay>
	}
    2216:	e2 cf       	rjmp	.-60     	; 0x21dc <radio_thread+0x18>

00002218 <main>:
 */
int main(void)
{


	board_config();
    2218:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <board_config>
	
	xTaskCreate(radio_thread,(signed portCHAR *) "t1", 500, NULL, tskIDLE_PRIORITY, NULL );
    221c:	a1 2c       	mov	r10, r1
    221e:	b1 2c       	mov	r11, r1
    2220:	c1 2c       	mov	r12, r1
    2222:	d1 2c       	mov	r13, r1
    2224:	e1 2c       	mov	r14, r1
    2226:	f1 2c       	mov	r15, r1
    2228:	00 e0       	ldi	r16, 0x00	; 0
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	44 ef       	ldi	r20, 0xF4	; 244
    2230:	51 e0       	ldi	r21, 0x01	; 1
    2232:	6c e1       	ldi	r22, 0x1C	; 28
    2234:	73 e2       	ldi	r23, 0x23	; 35
    2236:	82 ee       	ldi	r24, 0xE2	; 226
    2238:	90 e1       	ldi	r25, 0x10	; 16
    223a:	0e 94 88 08 	call	0x1110	; 0x1110 <xTaskGenericCreate>
	xTaskCreate(relay_thread,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	44 ef       	ldi	r20, 0xF4	; 244
    2244:	51 e0       	ldi	r21, 0x01	; 1
    2246:	6f e1       	ldi	r22, 0x1F	; 31
    2248:	73 e2       	ldi	r23, 0x23	; 35
    224a:	81 ec       	ldi	r24, 0xC1	; 193
    224c:	9c e0       	ldi	r25, 0x0C	; 12
    224e:	0e 94 88 08 	call	0x1110	; 0x1110 <xTaskGenericCreate>
	xTaskCreate(glcd_thread,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	44 ef       	ldi	r20, 0xF4	; 244
    2258:	51 e0       	ldi	r21, 0x01	; 1
    225a:	62 e2       	ldi	r22, 0x22	; 34
    225c:	73 e2       	ldi	r23, 0x23	; 35
    225e:	8f e8       	ldi	r24, 0x8F	; 143
    2260:	9e e0       	ldi	r25, 0x0E	; 14
    2262:	0e 94 88 08 	call	0x1110	; 0x1110 <xTaskGenericCreate>
	
	vTaskStartScheduler();
    2266:	0e 94 90 09 	call	0x1320	; 0x1320 <vTaskStartScheduler>


	while(1)
	{

	}
    226a:	ff cf       	rjmp	.-2      	; 0x226a <main+0x52>

0000226c <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    226c:	0f 93       	push	r16
    226e:	20 2b       	or	r18, r16
    2270:	61 11       	cpse	r22, r1
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DigitalPin_Config+0xc>
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	01 c0       	rjmp	.+2      	; 0x227a <DigitalPin_Config+0xe>
    2278:	00 e8       	ldi	r16, 0x80	; 128
    227a:	20 2b       	or	r18, r16
    227c:	41 11       	cpse	r20, r1
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <DigitalPin_Config+0x18>
    2280:	00 e0       	ldi	r16, 0x00	; 0
    2282:	01 c0       	rjmp	.+2      	; 0x2286 <DigitalPin_Config+0x1a>
    2284:	00 e4       	ldi	r16, 0x40	; 64
    2286:	20 2b       	or	r18, r16
    2288:	3f b7       	in	r19, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	dc 01       	movw	r26, r24
    228e:	12 96       	adiw	r26, 0x02	; 2
    2290:	4c 91       	ld	r20, X
    2292:	12 97       	sbiw	r26, 0x02	; 2
    2294:	40 93 b0 00 	sts	0x00B0, r20	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    2298:	ed 91       	ld	r30, X+
    229a:	fc 91       	ld	r31, X
    229c:	20 8b       	std	Z+16, r18	; 0x10
    229e:	3f bf       	out	0x3f, r19	; 63
    22a0:	0f 91       	pop	r16
    22a2:	08 95       	ret

000022a4 <DigitalPin_SetDir>:
    22a4:	66 23       	and	r22, r22
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <DigitalPin_SetDir+0x24>
    22a8:	dc 01       	movw	r26, r24
    22aa:	ed 91       	ld	r30, X+
    22ac:	fc 91       	ld	r31, X
    22ae:	11 97       	sbiw	r26, 0x01	; 1
    22b0:	21 e0       	ldi	r18, 0x01	; 1
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	a9 01       	movw	r20, r18
    22b6:	12 96       	adiw	r26, 0x02	; 2
    22b8:	0c 90       	ld	r0, X
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DigitalPin_SetDir+0x1c>
    22bc:	44 0f       	add	r20, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DigitalPin_SetDir+0x18>
    22c4:	41 83       	std	Z+1, r20	; 0x01
    22c6:	08 95       	ret
    22c8:	dc 01       	movw	r26, r24
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	11 97       	sbiw	r26, 0x01	; 1
    22d0:	21 e0       	ldi	r18, 0x01	; 1
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	a9 01       	movw	r20, r18
    22d6:	12 96       	adiw	r26, 0x02	; 2
    22d8:	0c 90       	ld	r0, X
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <DigitalPin_SetDir+0x3c>
    22dc:	44 0f       	add	r20, r20
    22de:	55 1f       	adc	r21, r21
    22e0:	0a 94       	dec	r0
    22e2:	e2 f7       	brpl	.-8      	; 0x22dc <DigitalPin_SetDir+0x38>
    22e4:	42 83       	std	Z+2, r20	; 0x02
    22e6:	08 95       	ret

000022e8 <DigitalPin_SetValue>:
    22e8:	dc 01       	movw	r26, r24
    22ea:	ed 91       	ld	r30, X+
    22ec:	fc 91       	ld	r31, X
    22ee:	11 97       	sbiw	r26, 0x01	; 1
    22f0:	21 e0       	ldi	r18, 0x01	; 1
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	a9 01       	movw	r20, r18
    22f6:	12 96       	adiw	r26, 0x02	; 2
    22f8:	0c 90       	ld	r0, X
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DigitalPin_SetValue+0x18>
    22fc:	44 0f       	add	r20, r20
    22fe:	55 1f       	adc	r21, r21
    2300:	0a 94       	dec	r0
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <DigitalPin_SetValue+0x14>
    2304:	45 83       	std	Z+5, r20	; 0x05
    2306:	08 95       	ret

00002308 <DigitalPin_ClearValue>:
    2308:	dc 01       	movw	r26, r24
    230a:	ed 91       	ld	r30, X+
    230c:	fc 91       	ld	r31, X
    230e:	11 97       	sbiw	r26, 0x01	; 1
    2310:	21 e0       	ldi	r18, 0x01	; 1
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	a9 01       	movw	r20, r18
    2316:	12 96       	adiw	r26, 0x02	; 2
    2318:	0c 90       	ld	r0, X
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DigitalPin_ClearValue+0x18>
    231c:	44 0f       	add	r20, r20
    231e:	55 1f       	adc	r21, r21
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DigitalPin_ClearValue+0x14>
    2324:	46 83       	std	Z+6, r20	; 0x06
    2326:	08 95       	ret

00002328 <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    2328:	dc 01       	movw	r26, r24
    232a:	ed 91       	ld	r30, X+
    232c:	fc 91       	ld	r31, X
    232e:	11 97       	sbiw	r26, 0x01	; 1
    2330:	20 85       	ldd	r18, Z+8	; 0x08
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	12 96       	adiw	r26, 0x02	; 2
    2338:	0c 90       	ld	r0, X
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <DigitalPin_GetValue+0x18>
    233c:	f5 95       	asr	r31
    233e:	e7 95       	ror	r30
    2340:	0a 94       	dec	r0
    2342:	e2 f7       	brpl	.-8      	; 0x233c <DigitalPin_GetValue+0x14>
    2344:	cf 01       	movw	r24, r30
	else pinValue = 0;
	return pinValue;
    2346:	81 70       	andi	r24, 0x01	; 1
    2348:	08 95       	ret

0000234a <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    234a:	1f 92       	push	r1
    234c:	0f 92       	push	r0
    234e:	0f b6       	in	r0, 0x3f	; 63
    2350:	0f 92       	push	r0
    2352:	11 24       	eor	r1, r1

}
    2354:	0f 90       	pop	r0
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	0f 90       	pop	r0
    235a:	1f 90       	pop	r1
    235c:	18 95       	reti

0000235e <__vector_27>:

ISR(USARTC0_TXC_vect){
    235e:	1f 92       	push	r1
    2360:	0f 92       	push	r0
    2362:	0f b6       	in	r0, 0x3f	; 63
    2364:	0f 92       	push	r0
    2366:	11 24       	eor	r1, r1
	
}
    2368:	0f 90       	pop	r0
    236a:	0f be       	out	0x3f, r0	; 63
    236c:	0f 90       	pop	r0
    236e:	1f 90       	pop	r1
    2370:	18 95       	reti

00002372 <__vector_26>:

ISR(USARTC0_DRE_vect){
    2372:	1f 92       	push	r1
    2374:	0f 92       	push	r0
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	0f 92       	push	r0
    237a:	11 24       	eor	r1, r1
	
}
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    2386:	1f 92       	push	r1
    2388:	0f 92       	push	r0
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	0f 92       	push	r0
    238e:	11 24       	eor	r1, r1
	
}
    2390:	0f 90       	pop	r0
    2392:	0f be       	out	0x3f, r0	; 63
    2394:	0f 90       	pop	r0
    2396:	1f 90       	pop	r1
    2398:	18 95       	reti

0000239a <__vector_30>:

ISR(USARTC1_TXC_vect){
    239a:	1f 92       	push	r1
    239c:	0f 92       	push	r0
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	0f 92       	push	r0
    23a2:	11 24       	eor	r1, r1
	
}
    23a4:	0f 90       	pop	r0
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	0f 90       	pop	r0
    23aa:	1f 90       	pop	r1
    23ac:	18 95       	reti

000023ae <__vector_29>:

ISR(USARTC1_DRE_vect){
    23ae:	1f 92       	push	r1
    23b0:	0f 92       	push	r0
    23b2:	0f b6       	in	r0, 0x3f	; 63
    23b4:	0f 92       	push	r0
    23b6:	11 24       	eor	r1, r1
	
}
    23b8:	0f 90       	pop	r0
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	0f 90       	pop	r0
    23be:	1f 90       	pop	r1
    23c0:	18 95       	reti

000023c2 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    23c2:	1f 92       	push	r1
    23c4:	0f 92       	push	r0
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	0f 92       	push	r0
    23ca:	11 24       	eor	r1, r1
	
}
    23cc:	0f 90       	pop	r0
    23ce:	0f be       	out	0x3f, r0	; 63
    23d0:	0f 90       	pop	r0
    23d2:	1f 90       	pop	r1
    23d4:	18 95       	reti

000023d6 <__vector_90>:

ISR(USARTD0_TXC_vect){
    23d6:	1f 92       	push	r1
    23d8:	0f 92       	push	r0
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	0f 92       	push	r0
    23de:	11 24       	eor	r1, r1
	
}
    23e0:	0f 90       	pop	r0
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	0f 90       	pop	r0
    23e6:	1f 90       	pop	r1
    23e8:	18 95       	reti

000023ea <__vector_89>:

ISR(USARTD0_DRE_vect){
    23ea:	1f 92       	push	r1
    23ec:	0f 92       	push	r0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	0f 92       	push	r0
    23f2:	11 24       	eor	r1, r1
	
}
    23f4:	0f 90       	pop	r0
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	0f 90       	pop	r0
    23fa:	1f 90       	pop	r1
    23fc:	18 95       	reti

000023fe <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
	
}
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	0f 90       	pop	r0
    240e:	1f 90       	pop	r1
    2410:	18 95       	reti

00002412 <__vector_60>:

ISR(USARTE0_TXC_vect){
    2412:	1f 92       	push	r1
    2414:	0f 92       	push	r0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	0f 92       	push	r0
    241a:	11 24       	eor	r1, r1
	
}
    241c:	0f 90       	pop	r0
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	0f 90       	pop	r0
    2422:	1f 90       	pop	r1
    2424:	18 95       	reti

00002426 <__vector_59>:

ISR(USARTE0_DRE_vect){
    2426:	1f 92       	push	r1
    2428:	0f 92       	push	r0
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	0f 92       	push	r0
    242e:	11 24       	eor	r1, r1
	
}
    2430:	0f 90       	pop	r0
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	0f 90       	pop	r0
    2436:	1f 90       	pop	r1
    2438:	18 95       	reti

0000243a <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    243a:	0f 93       	push	r16
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	1f 92       	push	r1
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	2f b7       	in	r18, 0x3f	; 63
    2448:	29 83       	std	Y+1, r18	; 0x01
    244a:	f8 94       	cli
    244c:	1b be       	out	0x3b, r1	; 59
    244e:	fc 01       	movw	r30, r24
    2450:	08 ed       	ldi	r16, 0xD8	; 216
    2452:	04 bf       	out	0x34, r16	; 52
    2454:	60 83       	st	Z, r22
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	8f bf       	out	0x3f, r24	; 63
    245a:	0f 90       	pop	r0
    245c:	df 91       	pop	r29
    245e:	cf 91       	pop	r28
    2460:	0f 91       	pop	r16
    2462:	08 95       	ret

00002464 <CLKSYS_Disable>:
    2464:	e0 e5       	ldi	r30, 0x50	; 80
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	90 81       	ld	r25, Z
    246a:	28 2f       	mov	r18, r24
    246c:	20 95       	com	r18
    246e:	92 23       	and	r25, r18
    2470:	90 83       	st	Z, r25
    2472:	90 81       	ld	r25, Z
    2474:	89 23       	and	r24, r25
    2476:	08 95       	ret

00002478 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    2480:	00 e4       	ldi	r16, 0x40	; 64
    2482:	10 e0       	ldi	r17, 0x00	; 0
    2484:	f8 01       	movw	r30, r16
    2486:	60 81       	ld	r22, Z
    2488:	68 7f       	andi	r22, 0xF8	; 248
    248a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    248c:	80 e4       	ldi	r24, 0x40	; 64
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	0e 94 1d 12 	call	0x243a	; 0x243a <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    2494:	f8 01       	movw	r30, r16
    2496:	80 81       	ld	r24, Z
	return clkCtrl;
}
    2498:	8c 23       	and	r24, r28
    249a:	cf 91       	pop	r28
    249c:	1f 91       	pop	r17
    249e:	0f 91       	pop	r16
    24a0:	08 95       	ret

000024a2 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    24a2:	fc 01       	movw	r30, r24
    24a4:	90 81       	ld	r25, Z
    24a6:	90 7f       	andi	r25, 0xF0	; 240
    24a8:	69 2b       	or	r22, r25
    24aa:	60 83       	st	Z, r22
    24ac:	08 95       	ret

000024ae <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    24ae:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    24b0:	96 81       	ldd	r25, Z+6	; 0x06
    24b2:	9c 7f       	andi	r25, 0xFC	; 252
    24b4:	69 2b       	or	r22, r25
    24b6:	66 83       	std	Z+6, r22	; 0x06
    24b8:	08 95       	ret

000024ba <vfprintf>:
    24ba:	2f 92       	push	r2
    24bc:	3f 92       	push	r3
    24be:	4f 92       	push	r4
    24c0:	5f 92       	push	r5
    24c2:	6f 92       	push	r6
    24c4:	7f 92       	push	r7
    24c6:	8f 92       	push	r8
    24c8:	9f 92       	push	r9
    24ca:	af 92       	push	r10
    24cc:	bf 92       	push	r11
    24ce:	cf 92       	push	r12
    24d0:	df 92       	push	r13
    24d2:	ef 92       	push	r14
    24d4:	ff 92       	push	r15
    24d6:	0f 93       	push	r16
    24d8:	1f 93       	push	r17
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
    24e2:	63 97       	sbiw	r28, 0x13	; 19
    24e4:	cd bf       	out	0x3d, r28	; 61
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	6c 01       	movw	r12, r24
    24ea:	4b 01       	movw	r8, r22
    24ec:	2a 01       	movw	r4, r20
    24ee:	fc 01       	movw	r30, r24
    24f0:	16 82       	std	Z+6, r1	; 0x06
    24f2:	17 82       	std	Z+7, r1	; 0x07
    24f4:	83 81       	ldd	r24, Z+3	; 0x03
    24f6:	81 ff       	sbrs	r24, 1
    24f8:	43 c3       	rjmp	.+1670   	; 0x2b80 <vfprintf+0x6c6>
    24fa:	ae 01       	movw	r20, r28
    24fc:	4f 5f       	subi	r20, 0xFF	; 255
    24fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2500:	3a 01       	movw	r6, r20
    2502:	f6 01       	movw	r30, r12
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	f4 01       	movw	r30, r8
    2508:	93 fd       	sbrc	r25, 3
    250a:	85 91       	lpm	r24, Z+
    250c:	93 ff       	sbrs	r25, 3
    250e:	81 91       	ld	r24, Z+
    2510:	4f 01       	movw	r8, r30
    2512:	88 23       	and	r24, r24
    2514:	09 f4       	brne	.+2      	; 0x2518 <vfprintf+0x5e>
    2516:	30 c3       	rjmp	.+1632   	; 0x2b78 <vfprintf+0x6be>
    2518:	85 32       	cpi	r24, 0x25	; 37
    251a:	39 f4       	brne	.+14     	; 0x252a <vfprintf+0x70>
    251c:	93 fd       	sbrc	r25, 3
    251e:	85 91       	lpm	r24, Z+
    2520:	93 ff       	sbrs	r25, 3
    2522:	81 91       	ld	r24, Z+
    2524:	4f 01       	movw	r8, r30
    2526:	85 32       	cpi	r24, 0x25	; 37
    2528:	39 f4       	brne	.+14     	; 0x2538 <vfprintf+0x7e>
    252a:	b6 01       	movw	r22, r12
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2532:	52 01       	movw	r10, r4
    2534:	25 01       	movw	r4, r10
    2536:	e5 cf       	rjmp	.-54     	; 0x2502 <vfprintf+0x48>
    2538:	10 e0       	ldi	r17, 0x00	; 0
    253a:	f1 2c       	mov	r15, r1
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	20 32       	cpi	r18, 0x20	; 32
    2540:	a0 f4       	brcc	.+40     	; 0x256a <vfprintf+0xb0>
    2542:	8b 32       	cpi	r24, 0x2B	; 43
    2544:	69 f0       	breq	.+26     	; 0x2560 <vfprintf+0xa6>
    2546:	30 f4       	brcc	.+12     	; 0x2554 <vfprintf+0x9a>
    2548:	80 32       	cpi	r24, 0x20	; 32
    254a:	59 f0       	breq	.+22     	; 0x2562 <vfprintf+0xa8>
    254c:	83 32       	cpi	r24, 0x23	; 35
    254e:	69 f4       	brne	.+26     	; 0x256a <vfprintf+0xb0>
    2550:	20 61       	ori	r18, 0x10	; 16
    2552:	2c c0       	rjmp	.+88     	; 0x25ac <vfprintf+0xf2>
    2554:	8d 32       	cpi	r24, 0x2D	; 45
    2556:	39 f0       	breq	.+14     	; 0x2566 <vfprintf+0xac>
    2558:	80 33       	cpi	r24, 0x30	; 48
    255a:	39 f4       	brne	.+14     	; 0x256a <vfprintf+0xb0>
    255c:	21 60       	ori	r18, 0x01	; 1
    255e:	26 c0       	rjmp	.+76     	; 0x25ac <vfprintf+0xf2>
    2560:	22 60       	ori	r18, 0x02	; 2
    2562:	24 60       	ori	r18, 0x04	; 4
    2564:	23 c0       	rjmp	.+70     	; 0x25ac <vfprintf+0xf2>
    2566:	28 60       	ori	r18, 0x08	; 8
    2568:	21 c0       	rjmp	.+66     	; 0x25ac <vfprintf+0xf2>
    256a:	27 fd       	sbrc	r18, 7
    256c:	27 c0       	rjmp	.+78     	; 0x25bc <vfprintf+0x102>
    256e:	30 ed       	ldi	r19, 0xD0	; 208
    2570:	38 0f       	add	r19, r24
    2572:	3a 30       	cpi	r19, 0x0A	; 10
    2574:	78 f4       	brcc	.+30     	; 0x2594 <vfprintf+0xda>
    2576:	26 ff       	sbrs	r18, 6
    2578:	06 c0       	rjmp	.+12     	; 0x2586 <vfprintf+0xcc>
    257a:	fa e0       	ldi	r31, 0x0A	; 10
    257c:	1f 9f       	mul	r17, r31
    257e:	30 0d       	add	r19, r0
    2580:	11 24       	eor	r1, r1
    2582:	13 2f       	mov	r17, r19
    2584:	13 c0       	rjmp	.+38     	; 0x25ac <vfprintf+0xf2>
    2586:	4a e0       	ldi	r20, 0x0A	; 10
    2588:	f4 9e       	mul	r15, r20
    258a:	30 0d       	add	r19, r0
    258c:	11 24       	eor	r1, r1
    258e:	f3 2e       	mov	r15, r19
    2590:	20 62       	ori	r18, 0x20	; 32
    2592:	0c c0       	rjmp	.+24     	; 0x25ac <vfprintf+0xf2>
    2594:	8e 32       	cpi	r24, 0x2E	; 46
    2596:	21 f4       	brne	.+8      	; 0x25a0 <vfprintf+0xe6>
    2598:	26 fd       	sbrc	r18, 6
    259a:	ee c2       	rjmp	.+1500   	; 0x2b78 <vfprintf+0x6be>
    259c:	20 64       	ori	r18, 0x40	; 64
    259e:	06 c0       	rjmp	.+12     	; 0x25ac <vfprintf+0xf2>
    25a0:	8c 36       	cpi	r24, 0x6C	; 108
    25a2:	11 f4       	brne	.+4      	; 0x25a8 <vfprintf+0xee>
    25a4:	20 68       	ori	r18, 0x80	; 128
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <vfprintf+0xf2>
    25a8:	88 36       	cpi	r24, 0x68	; 104
    25aa:	41 f4       	brne	.+16     	; 0x25bc <vfprintf+0x102>
    25ac:	f4 01       	movw	r30, r8
    25ae:	93 fd       	sbrc	r25, 3
    25b0:	85 91       	lpm	r24, Z+
    25b2:	93 ff       	sbrs	r25, 3
    25b4:	81 91       	ld	r24, Z+
    25b6:	4f 01       	movw	r8, r30
    25b8:	81 11       	cpse	r24, r1
    25ba:	c1 cf       	rjmp	.-126    	; 0x253e <vfprintf+0x84>
    25bc:	9b eb       	ldi	r25, 0xBB	; 187
    25be:	98 0f       	add	r25, r24
    25c0:	93 30       	cpi	r25, 0x03	; 3
    25c2:	18 f4       	brcc	.+6      	; 0x25ca <vfprintf+0x110>
    25c4:	20 61       	ori	r18, 0x10	; 16
    25c6:	80 5e       	subi	r24, 0xE0	; 224
    25c8:	06 c0       	rjmp	.+12     	; 0x25d6 <vfprintf+0x11c>
    25ca:	9b e9       	ldi	r25, 0x9B	; 155
    25cc:	98 0f       	add	r25, r24
    25ce:	93 30       	cpi	r25, 0x03	; 3
    25d0:	08 f0       	brcs	.+2      	; 0x25d4 <vfprintf+0x11a>
    25d2:	71 c1       	rjmp	.+738    	; 0x28b6 <vfprintf+0x3fc>
    25d4:	2f 7e       	andi	r18, 0xEF	; 239
    25d6:	26 ff       	sbrs	r18, 6
    25d8:	16 e0       	ldi	r17, 0x06	; 6
    25da:	2f 73       	andi	r18, 0x3F	; 63
    25dc:	32 2e       	mov	r3, r18
    25de:	85 36       	cpi	r24, 0x65	; 101
    25e0:	19 f4       	brne	.+6      	; 0x25e8 <vfprintf+0x12e>
    25e2:	20 64       	ori	r18, 0x40	; 64
    25e4:	32 2e       	mov	r3, r18
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x13e>
    25e8:	86 36       	cpi	r24, 0x66	; 102
    25ea:	21 f4       	brne	.+8      	; 0x25f4 <vfprintf+0x13a>
    25ec:	f2 2f       	mov	r31, r18
    25ee:	f0 68       	ori	r31, 0x80	; 128
    25f0:	3f 2e       	mov	r3, r31
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <vfprintf+0x13e>
    25f4:	11 11       	cpse	r17, r1
    25f6:	11 50       	subi	r17, 0x01	; 1
    25f8:	37 fe       	sbrs	r3, 7
    25fa:	07 c0       	rjmp	.+14     	; 0x260a <vfprintf+0x150>
    25fc:	1c 33       	cpi	r17, 0x3C	; 60
    25fe:	50 f4       	brcc	.+20     	; 0x2614 <vfprintf+0x15a>
    2600:	ee 24       	eor	r14, r14
    2602:	e3 94       	inc	r14
    2604:	e1 0e       	add	r14, r17
    2606:	27 e0       	ldi	r18, 0x07	; 7
    2608:	0b c0       	rjmp	.+22     	; 0x2620 <vfprintf+0x166>
    260a:	18 30       	cpi	r17, 0x08	; 8
    260c:	38 f0       	brcs	.+14     	; 0x261c <vfprintf+0x162>
    260e:	27 e0       	ldi	r18, 0x07	; 7
    2610:	17 e0       	ldi	r17, 0x07	; 7
    2612:	05 c0       	rjmp	.+10     	; 0x261e <vfprintf+0x164>
    2614:	27 e0       	ldi	r18, 0x07	; 7
    2616:	4c e3       	ldi	r20, 0x3C	; 60
    2618:	e4 2e       	mov	r14, r20
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <vfprintf+0x166>
    261c:	21 2f       	mov	r18, r17
    261e:	e1 2c       	mov	r14, r1
    2620:	52 01       	movw	r10, r4
    2622:	44 e0       	ldi	r20, 0x04	; 4
    2624:	a4 0e       	add	r10, r20
    2626:	b1 1c       	adc	r11, r1
    2628:	f2 01       	movw	r30, r4
    262a:	60 81       	ld	r22, Z
    262c:	71 81       	ldd	r23, Z+1	; 0x01
    262e:	82 81       	ldd	r24, Z+2	; 0x02
    2630:	93 81       	ldd	r25, Z+3	; 0x03
    2632:	0e 2d       	mov	r16, r14
    2634:	a3 01       	movw	r20, r6
    2636:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__ftoa_engine>
    263a:	2c 01       	movw	r4, r24
    263c:	09 81       	ldd	r16, Y+1	; 0x01
    263e:	00 ff       	sbrs	r16, 0
    2640:	02 c0       	rjmp	.+4      	; 0x2646 <vfprintf+0x18c>
    2642:	03 ff       	sbrs	r16, 3
    2644:	07 c0       	rjmp	.+14     	; 0x2654 <vfprintf+0x19a>
    2646:	31 fc       	sbrc	r3, 1
    2648:	08 c0       	rjmp	.+16     	; 0x265a <vfprintf+0x1a0>
    264a:	32 fe       	sbrs	r3, 2
    264c:	09 c0       	rjmp	.+18     	; 0x2660 <vfprintf+0x1a6>
    264e:	30 e2       	ldi	r19, 0x20	; 32
    2650:	23 2e       	mov	r2, r19
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <vfprintf+0x1a8>
    2654:	2d e2       	ldi	r18, 0x2D	; 45
    2656:	22 2e       	mov	r2, r18
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <vfprintf+0x1a8>
    265a:	9b e2       	ldi	r25, 0x2B	; 43
    265c:	29 2e       	mov	r2, r25
    265e:	01 c0       	rjmp	.+2      	; 0x2662 <vfprintf+0x1a8>
    2660:	21 2c       	mov	r2, r1
    2662:	80 2f       	mov	r24, r16
    2664:	8c 70       	andi	r24, 0x0C	; 12
    2666:	19 f0       	breq	.+6      	; 0x266e <vfprintf+0x1b4>
    2668:	21 10       	cpse	r2, r1
    266a:	68 c2       	rjmp	.+1232   	; 0x2b3c <vfprintf+0x682>
    266c:	a8 c2       	rjmp	.+1360   	; 0x2bbe <vfprintf+0x704>
    266e:	37 fe       	sbrs	r3, 7
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <vfprintf+0x1d6>
    2672:	e4 0c       	add	r14, r4
    2674:	04 ff       	sbrs	r16, 4
    2676:	04 c0       	rjmp	.+8      	; 0x2680 <vfprintf+0x1c6>
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	81 33       	cpi	r24, 0x31	; 49
    267c:	09 f4       	brne	.+2      	; 0x2680 <vfprintf+0x1c6>
    267e:	ea 94       	dec	r14
    2680:	1e 14       	cp	r1, r14
    2682:	74 f5       	brge	.+92     	; 0x26e0 <vfprintf+0x226>
    2684:	f8 e0       	ldi	r31, 0x08	; 8
    2686:	fe 15       	cp	r31, r14
    2688:	78 f5       	brcc	.+94     	; 0x26e8 <vfprintf+0x22e>
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	e8 2e       	mov	r14, r24
    268e:	2c c0       	rjmp	.+88     	; 0x26e8 <vfprintf+0x22e>
    2690:	36 fc       	sbrc	r3, 6
    2692:	2a c0       	rjmp	.+84     	; 0x26e8 <vfprintf+0x22e>
    2694:	81 2f       	mov	r24, r17
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	84 15       	cp	r24, r4
    269a:	95 05       	cpc	r25, r5
    269c:	9c f0       	brlt	.+38     	; 0x26c4 <vfprintf+0x20a>
    269e:	2c ef       	ldi	r18, 0xFC	; 252
    26a0:	42 16       	cp	r4, r18
    26a2:	2f ef       	ldi	r18, 0xFF	; 255
    26a4:	52 06       	cpc	r5, r18
    26a6:	74 f0       	brlt	.+28     	; 0x26c4 <vfprintf+0x20a>
    26a8:	43 2d       	mov	r20, r3
    26aa:	40 68       	ori	r20, 0x80	; 128
    26ac:	34 2e       	mov	r3, r20
    26ae:	0a c0       	rjmp	.+20     	; 0x26c4 <vfprintf+0x20a>
    26b0:	e2 e0       	ldi	r30, 0x02	; 2
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	ec 0f       	add	r30, r28
    26b6:	fd 1f       	adc	r31, r29
    26b8:	e1 0f       	add	r30, r17
    26ba:	f1 1d       	adc	r31, r1
    26bc:	80 81       	ld	r24, Z
    26be:	80 33       	cpi	r24, 0x30	; 48
    26c0:	19 f4       	brne	.+6      	; 0x26c8 <vfprintf+0x20e>
    26c2:	11 50       	subi	r17, 0x01	; 1
    26c4:	11 11       	cpse	r17, r1
    26c6:	f4 cf       	rjmp	.-24     	; 0x26b0 <vfprintf+0x1f6>
    26c8:	37 fe       	sbrs	r3, 7
    26ca:	0e c0       	rjmp	.+28     	; 0x26e8 <vfprintf+0x22e>
    26cc:	ee 24       	eor	r14, r14
    26ce:	e3 94       	inc	r14
    26d0:	e1 0e       	add	r14, r17
    26d2:	81 2f       	mov	r24, r17
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	48 16       	cp	r4, r24
    26d8:	59 06       	cpc	r5, r25
    26da:	2c f4       	brge	.+10     	; 0x26e6 <vfprintf+0x22c>
    26dc:	14 19       	sub	r17, r4
    26de:	04 c0       	rjmp	.+8      	; 0x26e8 <vfprintf+0x22e>
    26e0:	ee 24       	eor	r14, r14
    26e2:	e3 94       	inc	r14
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <vfprintf+0x22e>
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	37 fe       	sbrs	r3, 7
    26ea:	06 c0       	rjmp	.+12     	; 0x26f8 <vfprintf+0x23e>
    26ec:	14 14       	cp	r1, r4
    26ee:	15 04       	cpc	r1, r5
    26f0:	34 f4       	brge	.+12     	; 0x26fe <vfprintf+0x244>
    26f2:	c2 01       	movw	r24, r4
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	05 c0       	rjmp	.+10     	; 0x2702 <vfprintf+0x248>
    26f8:	85 e0       	ldi	r24, 0x05	; 5
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	02 c0       	rjmp	.+4      	; 0x2702 <vfprintf+0x248>
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	21 10       	cpse	r2, r1
    2704:	01 96       	adiw	r24, 0x01	; 1
    2706:	11 23       	and	r17, r17
    2708:	31 f0       	breq	.+12     	; 0x2716 <vfprintf+0x25c>
    270a:	21 2f       	mov	r18, r17
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	2f 5f       	subi	r18, 0xFF	; 255
    2710:	3f 4f       	sbci	r19, 0xFF	; 255
    2712:	82 0f       	add	r24, r18
    2714:	93 1f       	adc	r25, r19
    2716:	2f 2d       	mov	r18, r15
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	82 17       	cp	r24, r18
    271c:	93 07       	cpc	r25, r19
    271e:	14 f4       	brge	.+4      	; 0x2724 <vfprintf+0x26a>
    2720:	f8 1a       	sub	r15, r24
    2722:	01 c0       	rjmp	.+2      	; 0x2726 <vfprintf+0x26c>
    2724:	f1 2c       	mov	r15, r1
    2726:	83 2d       	mov	r24, r3
    2728:	89 70       	andi	r24, 0x09	; 9
    272a:	49 f4       	brne	.+18     	; 0x273e <vfprintf+0x284>
    272c:	ff 20       	and	r15, r15
    272e:	39 f0       	breq	.+14     	; 0x273e <vfprintf+0x284>
    2730:	b6 01       	movw	r22, r12
    2732:	80 e2       	ldi	r24, 0x20	; 32
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    273a:	fa 94       	dec	r15
    273c:	f7 cf       	rjmp	.-18     	; 0x272c <vfprintf+0x272>
    273e:	22 20       	and	r2, r2
    2740:	29 f0       	breq	.+10     	; 0x274c <vfprintf+0x292>
    2742:	b6 01       	movw	r22, r12
    2744:	82 2d       	mov	r24, r2
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    274c:	33 fc       	sbrc	r3, 3
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <vfprintf+0x2a8>
    2750:	ff 20       	and	r15, r15
    2752:	39 f0       	breq	.+14     	; 0x2762 <vfprintf+0x2a8>
    2754:	b6 01       	movw	r22, r12
    2756:	80 e3       	ldi	r24, 0x30	; 48
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    275e:	fa 94       	dec	r15
    2760:	f7 cf       	rjmp	.-18     	; 0x2750 <vfprintf+0x296>
    2762:	37 fe       	sbrs	r3, 7
    2764:	5a c0       	rjmp	.+180    	; 0x281a <vfprintf+0x360>
    2766:	94 2d       	mov	r25, r4
    2768:	85 2d       	mov	r24, r5
    276a:	57 fe       	sbrs	r5, 7
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <vfprintf+0x2b8>
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	29 2e       	mov	r2, r25
    2774:	38 2e       	mov	r3, r24
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	a2 01       	movw	r20, r4
    277c:	4e 19       	sub	r20, r14
    277e:	51 09       	sbc	r21, r1
    2780:	4c 87       	std	Y+12, r20	; 0x0c
    2782:	5d 87       	std	Y+13, r21	; 0x0d
    2784:	a2 01       	movw	r20, r4
    2786:	42 19       	sub	r20, r2
    2788:	53 09       	sbc	r21, r3
    278a:	4e 87       	std	Y+14, r20	; 0x0e
    278c:	5f 87       	std	Y+15, r21	; 0x0f
    278e:	61 2f       	mov	r22, r17
    2790:	70 e0       	ldi	r23, 0x00	; 0
    2792:	44 27       	eor	r20, r20
    2794:	55 27       	eor	r21, r21
    2796:	46 1b       	sub	r20, r22
    2798:	57 0b       	sbc	r21, r23
    279a:	48 8b       	std	Y+16, r20	; 0x10
    279c:	59 8b       	std	Y+17, r21	; 0x11
    279e:	5f ef       	ldi	r21, 0xFF	; 255
    27a0:	25 16       	cp	r2, r21
    27a2:	35 06       	cpc	r3, r21
    27a4:	49 f4       	brne	.+18     	; 0x27b8 <vfprintf+0x2fe>
    27a6:	b6 01       	movw	r22, r12
    27a8:	8e e2       	ldi	r24, 0x2E	; 46
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	2a 8b       	std	Y+18, r18	; 0x12
    27ae:	3b 8b       	std	Y+19, r19	; 0x13
    27b0:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    27b4:	3b 89       	ldd	r19, Y+19	; 0x13
    27b6:	2a 89       	ldd	r18, Y+18	; 0x12
    27b8:	42 14       	cp	r4, r2
    27ba:	53 04       	cpc	r5, r3
    27bc:	6c f0       	brlt	.+26     	; 0x27d8 <vfprintf+0x31e>
    27be:	4c 85       	ldd	r20, Y+12	; 0x0c
    27c0:	5d 85       	ldd	r21, Y+13	; 0x0d
    27c2:	42 15       	cp	r20, r2
    27c4:	53 05       	cpc	r21, r3
    27c6:	44 f4       	brge	.+16     	; 0x27d8 <vfprintf+0x31e>
    27c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    27ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    27cc:	e2 0f       	add	r30, r18
    27ce:	f3 1f       	adc	r31, r19
    27d0:	e6 0d       	add	r30, r6
    27d2:	f7 1d       	adc	r31, r7
    27d4:	81 81       	ldd	r24, Z+1	; 0x01
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <vfprintf+0x320>
    27d8:	80 e3       	ldi	r24, 0x30	; 48
    27da:	51 e0       	ldi	r21, 0x01	; 1
    27dc:	25 1a       	sub	r2, r21
    27de:	31 08       	sbc	r3, r1
    27e0:	2f 5f       	subi	r18, 0xFF	; 255
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	48 89       	ldd	r20, Y+16	; 0x10
    27e6:	59 89       	ldd	r21, Y+17	; 0x11
    27e8:	24 16       	cp	r2, r20
    27ea:	35 06       	cpc	r3, r21
    27ec:	4c f0       	brlt	.+18     	; 0x2800 <vfprintf+0x346>
    27ee:	b6 01       	movw	r22, r12
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	2a 8b       	std	Y+18, r18	; 0x12
    27f4:	3b 8b       	std	Y+19, r19	; 0x13
    27f6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    27fa:	2a 89       	ldd	r18, Y+18	; 0x12
    27fc:	3b 89       	ldd	r19, Y+19	; 0x13
    27fe:	cf cf       	rjmp	.-98     	; 0x279e <vfprintf+0x2e4>
    2800:	24 14       	cp	r2, r4
    2802:	35 04       	cpc	r3, r5
    2804:	39 f4       	brne	.+14     	; 0x2814 <vfprintf+0x35a>
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	96 33       	cpi	r25, 0x36	; 54
    280a:	18 f4       	brcc	.+6      	; 0x2812 <vfprintf+0x358>
    280c:	95 33       	cpi	r25, 0x35	; 53
    280e:	11 f4       	brne	.+4      	; 0x2814 <vfprintf+0x35a>
    2810:	04 ff       	sbrs	r16, 4
    2812:	81 e3       	ldi	r24, 0x31	; 49
    2814:	b6 01       	movw	r22, r12
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	4b c0       	rjmp	.+150    	; 0x28b0 <vfprintf+0x3f6>
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	81 33       	cpi	r24, 0x31	; 49
    281e:	09 f0       	breq	.+2      	; 0x2822 <vfprintf+0x368>
    2820:	0f 7e       	andi	r16, 0xEF	; 239
    2822:	b6 01       	movw	r22, r12
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    282a:	11 11       	cpse	r17, r1
    282c:	05 c0       	rjmp	.+10     	; 0x2838 <vfprintf+0x37e>
    282e:	34 fc       	sbrc	r3, 4
    2830:	18 c0       	rjmp	.+48     	; 0x2862 <vfprintf+0x3a8>
    2832:	85 e6       	ldi	r24, 0x65	; 101
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	17 c0       	rjmp	.+46     	; 0x2866 <vfprintf+0x3ac>
    2838:	b6 01       	movw	r22, r12
    283a:	8e e2       	ldi	r24, 0x2E	; 46
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	ee 24       	eor	r14, r14
    2846:	e3 94       	inc	r14
    2848:	e8 0e       	add	r14, r24
    284a:	f3 01       	movw	r30, r6
    284c:	e8 0f       	add	r30, r24
    284e:	f1 1d       	adc	r31, r1
    2850:	80 81       	ld	r24, Z
    2852:	b6 01       	movw	r22, r12
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    285a:	11 50       	subi	r17, 0x01	; 1
    285c:	8e 2d       	mov	r24, r14
    285e:	91 f7       	brne	.-28     	; 0x2844 <vfprintf+0x38a>
    2860:	e6 cf       	rjmp	.-52     	; 0x282e <vfprintf+0x374>
    2862:	85 e4       	ldi	r24, 0x45	; 69
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	b6 01       	movw	r22, r12
    2868:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    286c:	57 fc       	sbrc	r5, 7
    286e:	05 c0       	rjmp	.+10     	; 0x287a <vfprintf+0x3c0>
    2870:	41 14       	cp	r4, r1
    2872:	51 04       	cpc	r5, r1
    2874:	39 f4       	brne	.+14     	; 0x2884 <vfprintf+0x3ca>
    2876:	04 ff       	sbrs	r16, 4
    2878:	05 c0       	rjmp	.+10     	; 0x2884 <vfprintf+0x3ca>
    287a:	51 94       	neg	r5
    287c:	41 94       	neg	r4
    287e:	51 08       	sbc	r5, r1
    2880:	8d e2       	ldi	r24, 0x2D	; 45
    2882:	01 c0       	rjmp	.+2      	; 0x2886 <vfprintf+0x3cc>
    2884:	8b e2       	ldi	r24, 0x2B	; 43
    2886:	b6 01       	movw	r22, r12
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    288e:	80 e3       	ldi	r24, 0x30	; 48
    2890:	9a e0       	ldi	r25, 0x0A	; 10
    2892:	49 16       	cp	r4, r25
    2894:	51 04       	cpc	r5, r1
    2896:	2c f0       	brlt	.+10     	; 0x28a2 <vfprintf+0x3e8>
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	5a e0       	ldi	r21, 0x0A	; 10
    289c:	45 1a       	sub	r4, r21
    289e:	51 08       	sbc	r5, r1
    28a0:	f7 cf       	rjmp	.-18     	; 0x2890 <vfprintf+0x3d6>
    28a2:	b6 01       	movw	r22, r12
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    28aa:	b6 01       	movw	r22, r12
    28ac:	c2 01       	movw	r24, r4
    28ae:	c0 96       	adiw	r24, 0x30	; 48
    28b0:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    28b4:	57 c1       	rjmp	.+686    	; 0x2b64 <vfprintf+0x6aa>
    28b6:	83 36       	cpi	r24, 0x63	; 99
    28b8:	31 f0       	breq	.+12     	; 0x28c6 <vfprintf+0x40c>
    28ba:	83 37       	cpi	r24, 0x73	; 115
    28bc:	79 f0       	breq	.+30     	; 0x28dc <vfprintf+0x422>
    28be:	83 35       	cpi	r24, 0x53	; 83
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <vfprintf+0x40a>
    28c2:	58 c0       	rjmp	.+176    	; 0x2974 <vfprintf+0x4ba>
    28c4:	21 c0       	rjmp	.+66     	; 0x2908 <vfprintf+0x44e>
    28c6:	52 01       	movw	r10, r4
    28c8:	e2 e0       	ldi	r30, 0x02	; 2
    28ca:	ae 0e       	add	r10, r30
    28cc:	b1 1c       	adc	r11, r1
    28ce:	f2 01       	movw	r30, r4
    28d0:	80 81       	ld	r24, Z
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	01 e0       	ldi	r16, 0x01	; 1
    28d6:	10 e0       	ldi	r17, 0x00	; 0
    28d8:	23 01       	movw	r4, r6
    28da:	14 c0       	rjmp	.+40     	; 0x2904 <vfprintf+0x44a>
    28dc:	52 01       	movw	r10, r4
    28de:	f2 e0       	ldi	r31, 0x02	; 2
    28e0:	af 0e       	add	r10, r31
    28e2:	b1 1c       	adc	r11, r1
    28e4:	f2 01       	movw	r30, r4
    28e6:	40 80       	ld	r4, Z
    28e8:	51 80       	ldd	r5, Z+1	; 0x01
    28ea:	26 ff       	sbrs	r18, 6
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <vfprintf+0x43a>
    28ee:	61 2f       	mov	r22, r17
    28f0:	70 e0       	ldi	r23, 0x00	; 0
    28f2:	02 c0       	rjmp	.+4      	; 0x28f8 <vfprintf+0x43e>
    28f4:	6f ef       	ldi	r22, 0xFF	; 255
    28f6:	7f ef       	ldi	r23, 0xFF	; 255
    28f8:	c2 01       	movw	r24, r4
    28fa:	2a 8b       	std	Y+18, r18	; 0x12
    28fc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <strnlen>
    2900:	8c 01       	movw	r16, r24
    2902:	2a 89       	ldd	r18, Y+18	; 0x12
    2904:	2f 77       	andi	r18, 0x7F	; 127
    2906:	15 c0       	rjmp	.+42     	; 0x2932 <vfprintf+0x478>
    2908:	52 01       	movw	r10, r4
    290a:	f2 e0       	ldi	r31, 0x02	; 2
    290c:	af 0e       	add	r10, r31
    290e:	b1 1c       	adc	r11, r1
    2910:	f2 01       	movw	r30, r4
    2912:	40 80       	ld	r4, Z
    2914:	51 80       	ldd	r5, Z+1	; 0x01
    2916:	26 ff       	sbrs	r18, 6
    2918:	03 c0       	rjmp	.+6      	; 0x2920 <vfprintf+0x466>
    291a:	61 2f       	mov	r22, r17
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x46a>
    2920:	6f ef       	ldi	r22, 0xFF	; 255
    2922:	7f ef       	ldi	r23, 0xFF	; 255
    2924:	c2 01       	movw	r24, r4
    2926:	2a 8b       	std	Y+18, r18	; 0x12
    2928:	0e 94 14 17 	call	0x2e28	; 0x2e28 <strnlen_P>
    292c:	8c 01       	movw	r16, r24
    292e:	2a 89       	ldd	r18, Y+18	; 0x12
    2930:	20 68       	ori	r18, 0x80	; 128
    2932:	32 2e       	mov	r3, r18
    2934:	23 fd       	sbrc	r18, 3
    2936:	1a c0       	rjmp	.+52     	; 0x296c <vfprintf+0x4b2>
    2938:	8f 2d       	mov	r24, r15
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	08 17       	cp	r16, r24
    293e:	19 07       	cpc	r17, r25
    2940:	a8 f4       	brcc	.+42     	; 0x296c <vfprintf+0x4b2>
    2942:	b6 01       	movw	r22, r12
    2944:	80 e2       	ldi	r24, 0x20	; 32
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    294c:	fa 94       	dec	r15
    294e:	f4 cf       	rjmp	.-24     	; 0x2938 <vfprintf+0x47e>
    2950:	f2 01       	movw	r30, r4
    2952:	37 fc       	sbrc	r3, 7
    2954:	85 91       	lpm	r24, Z+
    2956:	37 fe       	sbrs	r3, 7
    2958:	81 91       	ld	r24, Z+
    295a:	2f 01       	movw	r4, r30
    295c:	b6 01       	movw	r22, r12
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2964:	f1 10       	cpse	r15, r1
    2966:	fa 94       	dec	r15
    2968:	01 50       	subi	r16, 0x01	; 1
    296a:	11 09       	sbc	r17, r1
    296c:	01 15       	cp	r16, r1
    296e:	11 05       	cpc	r17, r1
    2970:	79 f7       	brne	.-34     	; 0x2950 <vfprintf+0x496>
    2972:	f8 c0       	rjmp	.+496    	; 0x2b64 <vfprintf+0x6aa>
    2974:	84 36       	cpi	r24, 0x64	; 100
    2976:	11 f0       	breq	.+4      	; 0x297c <vfprintf+0x4c2>
    2978:	89 36       	cpi	r24, 0x69	; 105
    297a:	59 f5       	brne	.+86     	; 0x29d2 <vfprintf+0x518>
    297c:	52 01       	movw	r10, r4
    297e:	27 ff       	sbrs	r18, 7
    2980:	09 c0       	rjmp	.+18     	; 0x2994 <vfprintf+0x4da>
    2982:	f4 e0       	ldi	r31, 0x04	; 4
    2984:	af 0e       	add	r10, r31
    2986:	b1 1c       	adc	r11, r1
    2988:	f2 01       	movw	r30, r4
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	0a c0       	rjmp	.+20     	; 0x29a8 <vfprintf+0x4ee>
    2994:	f2 e0       	ldi	r31, 0x02	; 2
    2996:	af 0e       	add	r10, r31
    2998:	b1 1c       	adc	r11, r1
    299a:	f2 01       	movw	r30, r4
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	07 2e       	mov	r0, r23
    29a2:	00 0c       	add	r0, r0
    29a4:	88 0b       	sbc	r24, r24
    29a6:	99 0b       	sbc	r25, r25
    29a8:	2f 76       	andi	r18, 0x6F	; 111
    29aa:	32 2e       	mov	r3, r18
    29ac:	97 ff       	sbrs	r25, 7
    29ae:	09 c0       	rjmp	.+18     	; 0x29c2 <vfprintf+0x508>
    29b0:	90 95       	com	r25
    29b2:	80 95       	com	r24
    29b4:	70 95       	com	r23
    29b6:	61 95       	neg	r22
    29b8:	7f 4f       	sbci	r23, 0xFF	; 255
    29ba:	8f 4f       	sbci	r24, 0xFF	; 255
    29bc:	9f 4f       	sbci	r25, 0xFF	; 255
    29be:	20 68       	ori	r18, 0x80	; 128
    29c0:	32 2e       	mov	r3, r18
    29c2:	2a e0       	ldi	r18, 0x0A	; 10
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	a3 01       	movw	r20, r6
    29c8:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__ultoa_invert>
    29cc:	e8 2e       	mov	r14, r24
    29ce:	e6 18       	sub	r14, r6
    29d0:	3f c0       	rjmp	.+126    	; 0x2a50 <vfprintf+0x596>
    29d2:	02 2f       	mov	r16, r18
    29d4:	85 37       	cpi	r24, 0x75	; 117
    29d6:	21 f4       	brne	.+8      	; 0x29e0 <vfprintf+0x526>
    29d8:	0f 7e       	andi	r16, 0xEF	; 239
    29da:	2a e0       	ldi	r18, 0x0A	; 10
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	1d c0       	rjmp	.+58     	; 0x2a1a <vfprintf+0x560>
    29e0:	09 7f       	andi	r16, 0xF9	; 249
    29e2:	8f 36       	cpi	r24, 0x6F	; 111
    29e4:	91 f0       	breq	.+36     	; 0x2a0a <vfprintf+0x550>
    29e6:	18 f4       	brcc	.+6      	; 0x29ee <vfprintf+0x534>
    29e8:	88 35       	cpi	r24, 0x58	; 88
    29ea:	59 f0       	breq	.+22     	; 0x2a02 <vfprintf+0x548>
    29ec:	c5 c0       	rjmp	.+394    	; 0x2b78 <vfprintf+0x6be>
    29ee:	80 37       	cpi	r24, 0x70	; 112
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <vfprintf+0x53e>
    29f2:	88 37       	cpi	r24, 0x78	; 120
    29f4:	11 f0       	breq	.+4      	; 0x29fa <vfprintf+0x540>
    29f6:	c0 c0       	rjmp	.+384    	; 0x2b78 <vfprintf+0x6be>
    29f8:	00 61       	ori	r16, 0x10	; 16
    29fa:	04 ff       	sbrs	r16, 4
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <vfprintf+0x556>
    29fe:	04 60       	ori	r16, 0x04	; 4
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <vfprintf+0x556>
    2a02:	24 ff       	sbrs	r18, 4
    2a04:	08 c0       	rjmp	.+16     	; 0x2a16 <vfprintf+0x55c>
    2a06:	06 60       	ori	r16, 0x06	; 6
    2a08:	06 c0       	rjmp	.+12     	; 0x2a16 <vfprintf+0x55c>
    2a0a:	28 e0       	ldi	r18, 0x08	; 8
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	05 c0       	rjmp	.+10     	; 0x2a1a <vfprintf+0x560>
    2a10:	20 e1       	ldi	r18, 0x10	; 16
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <vfprintf+0x560>
    2a16:	20 e1       	ldi	r18, 0x10	; 16
    2a18:	32 e0       	ldi	r19, 0x02	; 2
    2a1a:	52 01       	movw	r10, r4
    2a1c:	07 ff       	sbrs	r16, 7
    2a1e:	09 c0       	rjmp	.+18     	; 0x2a32 <vfprintf+0x578>
    2a20:	f4 e0       	ldi	r31, 0x04	; 4
    2a22:	af 0e       	add	r10, r31
    2a24:	b1 1c       	adc	r11, r1
    2a26:	f2 01       	movw	r30, r4
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	82 81       	ldd	r24, Z+2	; 0x02
    2a2e:	93 81       	ldd	r25, Z+3	; 0x03
    2a30:	08 c0       	rjmp	.+16     	; 0x2a42 <vfprintf+0x588>
    2a32:	f2 e0       	ldi	r31, 0x02	; 2
    2a34:	af 0e       	add	r10, r31
    2a36:	b1 1c       	adc	r11, r1
    2a38:	f2 01       	movw	r30, r4
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	a3 01       	movw	r20, r6
    2a44:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__ultoa_invert>
    2a48:	e8 2e       	mov	r14, r24
    2a4a:	e6 18       	sub	r14, r6
    2a4c:	0f 77       	andi	r16, 0x7F	; 127
    2a4e:	30 2e       	mov	r3, r16
    2a50:	36 fe       	sbrs	r3, 6
    2a52:	0b c0       	rjmp	.+22     	; 0x2a6a <vfprintf+0x5b0>
    2a54:	33 2d       	mov	r19, r3
    2a56:	3e 7f       	andi	r19, 0xFE	; 254
    2a58:	e1 16       	cp	r14, r17
    2a5a:	50 f4       	brcc	.+20     	; 0x2a70 <vfprintf+0x5b6>
    2a5c:	34 fe       	sbrs	r3, 4
    2a5e:	0a c0       	rjmp	.+20     	; 0x2a74 <vfprintf+0x5ba>
    2a60:	32 fc       	sbrc	r3, 2
    2a62:	08 c0       	rjmp	.+16     	; 0x2a74 <vfprintf+0x5ba>
    2a64:	33 2d       	mov	r19, r3
    2a66:	3e 7e       	andi	r19, 0xEE	; 238
    2a68:	05 c0       	rjmp	.+10     	; 0x2a74 <vfprintf+0x5ba>
    2a6a:	0e 2d       	mov	r16, r14
    2a6c:	33 2d       	mov	r19, r3
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <vfprintf+0x5bc>
    2a70:	0e 2d       	mov	r16, r14
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <vfprintf+0x5bc>
    2a74:	01 2f       	mov	r16, r17
    2a76:	34 ff       	sbrs	r19, 4
    2a78:	0c c0       	rjmp	.+24     	; 0x2a92 <vfprintf+0x5d8>
    2a7a:	fe 01       	movw	r30, r28
    2a7c:	ee 0d       	add	r30, r14
    2a7e:	f1 1d       	adc	r31, r1
    2a80:	80 81       	ld	r24, Z
    2a82:	80 33       	cpi	r24, 0x30	; 48
    2a84:	11 f4       	brne	.+4      	; 0x2a8a <vfprintf+0x5d0>
    2a86:	39 7e       	andi	r19, 0xE9	; 233
    2a88:	08 c0       	rjmp	.+16     	; 0x2a9a <vfprintf+0x5e0>
    2a8a:	32 ff       	sbrs	r19, 2
    2a8c:	05 c0       	rjmp	.+10     	; 0x2a98 <vfprintf+0x5de>
    2a8e:	0e 5f       	subi	r16, 0xFE	; 254
    2a90:	04 c0       	rjmp	.+8      	; 0x2a9a <vfprintf+0x5e0>
    2a92:	83 2f       	mov	r24, r19
    2a94:	86 78       	andi	r24, 0x86	; 134
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <vfprintf+0x5e0>
    2a98:	0f 5f       	subi	r16, 0xFF	; 255
    2a9a:	33 fd       	sbrc	r19, 3
    2a9c:	13 c0       	rjmp	.+38     	; 0x2ac4 <vfprintf+0x60a>
    2a9e:	30 ff       	sbrs	r19, 0
    2aa0:	06 c0       	rjmp	.+12     	; 0x2aae <vfprintf+0x5f4>
    2aa2:	1e 2d       	mov	r17, r14
    2aa4:	0f 15       	cp	r16, r15
    2aa6:	18 f4       	brcc	.+6      	; 0x2aae <vfprintf+0x5f4>
    2aa8:	1f 0d       	add	r17, r15
    2aaa:	10 1b       	sub	r17, r16
    2aac:	0f 2d       	mov	r16, r15
    2aae:	0f 15       	cp	r16, r15
    2ab0:	68 f4       	brcc	.+26     	; 0x2acc <vfprintf+0x612>
    2ab2:	b6 01       	movw	r22, r12
    2ab4:	80 e2       	ldi	r24, 0x20	; 32
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	3b 8b       	std	Y+19, r19	; 0x13
    2aba:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2abe:	0f 5f       	subi	r16, 0xFF	; 255
    2ac0:	3b 89       	ldd	r19, Y+19	; 0x13
    2ac2:	f5 cf       	rjmp	.-22     	; 0x2aae <vfprintf+0x5f4>
    2ac4:	0f 15       	cp	r16, r15
    2ac6:	10 f4       	brcc	.+4      	; 0x2acc <vfprintf+0x612>
    2ac8:	f0 1a       	sub	r15, r16
    2aca:	01 c0       	rjmp	.+2      	; 0x2ace <vfprintf+0x614>
    2acc:	f1 2c       	mov	r15, r1
    2ace:	34 ff       	sbrs	r19, 4
    2ad0:	12 c0       	rjmp	.+36     	; 0x2af6 <vfprintf+0x63c>
    2ad2:	b6 01       	movw	r22, r12
    2ad4:	80 e3       	ldi	r24, 0x30	; 48
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	3b 8b       	std	Y+19, r19	; 0x13
    2ada:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2ade:	3b 89       	ldd	r19, Y+19	; 0x13
    2ae0:	32 ff       	sbrs	r19, 2
    2ae2:	17 c0       	rjmp	.+46     	; 0x2b12 <vfprintf+0x658>
    2ae4:	31 fd       	sbrc	r19, 1
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <vfprintf+0x634>
    2ae8:	88 e7       	ldi	r24, 0x78	; 120
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	02 c0       	rjmp	.+4      	; 0x2af2 <vfprintf+0x638>
    2aee:	88 e5       	ldi	r24, 0x58	; 88
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	b6 01       	movw	r22, r12
    2af4:	0c c0       	rjmp	.+24     	; 0x2b0e <vfprintf+0x654>
    2af6:	83 2f       	mov	r24, r19
    2af8:	86 78       	andi	r24, 0x86	; 134
    2afa:	59 f0       	breq	.+22     	; 0x2b12 <vfprintf+0x658>
    2afc:	31 ff       	sbrs	r19, 1
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <vfprintf+0x64a>
    2b00:	8b e2       	ldi	r24, 0x2B	; 43
    2b02:	01 c0       	rjmp	.+2      	; 0x2b06 <vfprintf+0x64c>
    2b04:	80 e2       	ldi	r24, 0x20	; 32
    2b06:	37 fd       	sbrc	r19, 7
    2b08:	8d e2       	ldi	r24, 0x2D	; 45
    2b0a:	b6 01       	movw	r22, r12
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2b12:	e1 16       	cp	r14, r17
    2b14:	38 f4       	brcc	.+14     	; 0x2b24 <vfprintf+0x66a>
    2b16:	b6 01       	movw	r22, r12
    2b18:	80 e3       	ldi	r24, 0x30	; 48
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2b20:	11 50       	subi	r17, 0x01	; 1
    2b22:	f7 cf       	rjmp	.-18     	; 0x2b12 <vfprintf+0x658>
    2b24:	ea 94       	dec	r14
    2b26:	f3 01       	movw	r30, r6
    2b28:	ee 0d       	add	r30, r14
    2b2a:	f1 1d       	adc	r31, r1
    2b2c:	80 81       	ld	r24, Z
    2b2e:	b6 01       	movw	r22, r12
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2b36:	e1 10       	cpse	r14, r1
    2b38:	f5 cf       	rjmp	.-22     	; 0x2b24 <vfprintf+0x66a>
    2b3a:	14 c0       	rjmp	.+40     	; 0x2b64 <vfprintf+0x6aa>
    2b3c:	f4 e0       	ldi	r31, 0x04	; 4
    2b3e:	ff 15       	cp	r31, r15
    2b40:	58 f5       	brcc	.+86     	; 0x2b98 <vfprintf+0x6de>
    2b42:	84 e0       	ldi	r24, 0x04	; 4
    2b44:	f8 1a       	sub	r15, r24
    2b46:	33 fe       	sbrs	r3, 3
    2b48:	1e c0       	rjmp	.+60     	; 0x2b86 <vfprintf+0x6cc>
    2b4a:	21 10       	cpse	r2, r1
    2b4c:	26 c0       	rjmp	.+76     	; 0x2b9a <vfprintf+0x6e0>
    2b4e:	03 ff       	sbrs	r16, 3
    2b50:	2a c0       	rjmp	.+84     	; 0x2ba6 <vfprintf+0x6ec>
    2b52:	0c e0       	ldi	r16, 0x0C	; 12
    2b54:	12 e0       	ldi	r17, 0x02	; 2
    2b56:	f3 2d       	mov	r31, r3
    2b58:	f0 71       	andi	r31, 0x10	; 16
    2b5a:	3f 2e       	mov	r3, r31
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	84 91       	lpm	r24, Z
    2b60:	81 11       	cpse	r24, r1
    2b62:	24 c0       	rjmp	.+72     	; 0x2bac <vfprintf+0x6f2>
    2b64:	ff 20       	and	r15, r15
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <vfprintf+0x6b0>
    2b68:	e5 cc       	rjmp	.-1590   	; 0x2534 <vfprintf+0x7a>
    2b6a:	b6 01       	movw	r22, r12
    2b6c:	80 e2       	ldi	r24, 0x20	; 32
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2b74:	fa 94       	dec	r15
    2b76:	f6 cf       	rjmp	.-20     	; 0x2b64 <vfprintf+0x6aa>
    2b78:	f6 01       	movw	r30, r12
    2b7a:	86 81       	ldd	r24, Z+6	; 0x06
    2b7c:	97 81       	ldd	r25, Z+7	; 0x07
    2b7e:	26 c0       	rjmp	.+76     	; 0x2bcc <vfprintf+0x712>
    2b80:	8f ef       	ldi	r24, 0xFF	; 255
    2b82:	9f ef       	ldi	r25, 0xFF	; 255
    2b84:	23 c0       	rjmp	.+70     	; 0x2bcc <vfprintf+0x712>
    2b86:	b6 01       	movw	r22, r12
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2b90:	fa 94       	dec	r15
    2b92:	f1 10       	cpse	r15, r1
    2b94:	f8 cf       	rjmp	.-16     	; 0x2b86 <vfprintf+0x6cc>
    2b96:	d9 cf       	rjmp	.-78     	; 0x2b4a <vfprintf+0x690>
    2b98:	f1 2c       	mov	r15, r1
    2b9a:	b6 01       	movw	r22, r12
    2b9c:	82 2d       	mov	r24, r2
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2ba4:	d4 cf       	rjmp	.-88     	; 0x2b4e <vfprintf+0x694>
    2ba6:	00 e1       	ldi	r16, 0x10	; 16
    2ba8:	12 e0       	ldi	r17, 0x02	; 2
    2baa:	d5 cf       	rjmp	.-86     	; 0x2b56 <vfprintf+0x69c>
    2bac:	31 10       	cpse	r3, r1
    2bae:	80 52       	subi	r24, 0x20	; 32
    2bb0:	b6 01       	movw	r22, r12
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <fputc>
    2bb8:	0f 5f       	subi	r16, 0xFF	; 255
    2bba:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbc:	cf cf       	rjmp	.-98     	; 0x2b5c <vfprintf+0x6a2>
    2bbe:	23 e0       	ldi	r18, 0x03	; 3
    2bc0:	2f 15       	cp	r18, r15
    2bc2:	10 f4       	brcc	.+4      	; 0x2bc8 <vfprintf+0x70e>
    2bc4:	83 e0       	ldi	r24, 0x03	; 3
    2bc6:	be cf       	rjmp	.-132    	; 0x2b44 <vfprintf+0x68a>
    2bc8:	f1 2c       	mov	r15, r1
    2bca:	c1 cf       	rjmp	.-126    	; 0x2b4e <vfprintf+0x694>
    2bcc:	63 96       	adiw	r28, 0x13	; 19
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	df 90       	pop	r13
    2be0:	cf 90       	pop	r12
    2be2:	bf 90       	pop	r11
    2be4:	af 90       	pop	r10
    2be6:	9f 90       	pop	r9
    2be8:	8f 90       	pop	r8
    2bea:	7f 90       	pop	r7
    2bec:	6f 90       	pop	r6
    2bee:	5f 90       	pop	r5
    2bf0:	4f 90       	pop	r4
    2bf2:	3f 90       	pop	r3
    2bf4:	2f 90       	pop	r2
    2bf6:	08 95       	ret

00002bf8 <__udivmodsi4>:
    2bf8:	a1 e2       	ldi	r26, 0x21	; 33
    2bfa:	1a 2e       	mov	r1, r26
    2bfc:	aa 1b       	sub	r26, r26
    2bfe:	bb 1b       	sub	r27, r27
    2c00:	fd 01       	movw	r30, r26
    2c02:	0d c0       	rjmp	.+26     	; 0x2c1e <__udivmodsi4_ep>

00002c04 <__udivmodsi4_loop>:
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	ee 1f       	adc	r30, r30
    2c0a:	ff 1f       	adc	r31, r31
    2c0c:	a2 17       	cp	r26, r18
    2c0e:	b3 07       	cpc	r27, r19
    2c10:	e4 07       	cpc	r30, r20
    2c12:	f5 07       	cpc	r31, r21
    2c14:	20 f0       	brcs	.+8      	; 0x2c1e <__udivmodsi4_ep>
    2c16:	a2 1b       	sub	r26, r18
    2c18:	b3 0b       	sbc	r27, r19
    2c1a:	e4 0b       	sbc	r30, r20
    2c1c:	f5 0b       	sbc	r31, r21

00002c1e <__udivmodsi4_ep>:
    2c1e:	66 1f       	adc	r22, r22
    2c20:	77 1f       	adc	r23, r23
    2c22:	88 1f       	adc	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	1a 94       	dec	r1
    2c28:	69 f7       	brne	.-38     	; 0x2c04 <__udivmodsi4_loop>
    2c2a:	60 95       	com	r22
    2c2c:	70 95       	com	r23
    2c2e:	80 95       	com	r24
    2c30:	90 95       	com	r25
    2c32:	9b 01       	movw	r18, r22
    2c34:	ac 01       	movw	r20, r24
    2c36:	bd 01       	movw	r22, r26
    2c38:	cf 01       	movw	r24, r30
    2c3a:	08 95       	ret

00002c3c <__ashrdi3>:
    2c3c:	97 fb       	bst	r25, 7
    2c3e:	10 f8       	bld	r1, 0

00002c40 <__lshrdi3>:
    2c40:	16 94       	lsr	r1
    2c42:	00 08       	sbc	r0, r0
    2c44:	0f 93       	push	r16
    2c46:	08 30       	cpi	r16, 0x08	; 8
    2c48:	98 f0       	brcs	.+38     	; 0x2c70 <__lshrdi3+0x30>
    2c4a:	08 50       	subi	r16, 0x08	; 8
    2c4c:	23 2f       	mov	r18, r19
    2c4e:	34 2f       	mov	r19, r20
    2c50:	45 2f       	mov	r20, r21
    2c52:	56 2f       	mov	r21, r22
    2c54:	67 2f       	mov	r22, r23
    2c56:	78 2f       	mov	r23, r24
    2c58:	89 2f       	mov	r24, r25
    2c5a:	90 2d       	mov	r25, r0
    2c5c:	f4 cf       	rjmp	.-24     	; 0x2c46 <__lshrdi3+0x6>
    2c5e:	05 94       	asr	r0
    2c60:	97 95       	ror	r25
    2c62:	87 95       	ror	r24
    2c64:	77 95       	ror	r23
    2c66:	67 95       	ror	r22
    2c68:	57 95       	ror	r21
    2c6a:	47 95       	ror	r20
    2c6c:	37 95       	ror	r19
    2c6e:	27 95       	ror	r18
    2c70:	0a 95       	dec	r16
    2c72:	aa f7       	brpl	.-22     	; 0x2c5e <__lshrdi3+0x1e>
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <__ftoa_engine>:
    2c78:	28 30       	cpi	r18, 0x08	; 8
    2c7a:	08 f0       	brcs	.+2      	; 0x2c7e <__ftoa_engine+0x6>
    2c7c:	27 e0       	ldi	r18, 0x07	; 7
    2c7e:	33 27       	eor	r19, r19
    2c80:	da 01       	movw	r26, r20
    2c82:	99 0f       	add	r25, r25
    2c84:	31 1d       	adc	r19, r1
    2c86:	87 fd       	sbrc	r24, 7
    2c88:	91 60       	ori	r25, 0x01	; 1
    2c8a:	00 96       	adiw	r24, 0x00	; 0
    2c8c:	61 05       	cpc	r22, r1
    2c8e:	71 05       	cpc	r23, r1
    2c90:	39 f4       	brne	.+14     	; 0x2ca0 <__ftoa_engine+0x28>
    2c92:	32 60       	ori	r19, 0x02	; 2
    2c94:	2e 5f       	subi	r18, 0xFE	; 254
    2c96:	3d 93       	st	X+, r19
    2c98:	30 e3       	ldi	r19, 0x30	; 48
    2c9a:	2a 95       	dec	r18
    2c9c:	e1 f7       	brne	.-8      	; 0x2c96 <__ftoa_engine+0x1e>
    2c9e:	08 95       	ret
    2ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ca2:	30 f0       	brcs	.+12     	; 0x2cb0 <__ftoa_engine+0x38>
    2ca4:	80 38       	cpi	r24, 0x80	; 128
    2ca6:	71 05       	cpc	r23, r1
    2ca8:	61 05       	cpc	r22, r1
    2caa:	09 f0       	breq	.+2      	; 0x2cae <__ftoa_engine+0x36>
    2cac:	3c 5f       	subi	r19, 0xFC	; 252
    2cae:	3c 5f       	subi	r19, 0xFC	; 252
    2cb0:	3d 93       	st	X+, r19
    2cb2:	91 30       	cpi	r25, 0x01	; 1
    2cb4:	08 f0       	brcs	.+2      	; 0x2cb8 <__ftoa_engine+0x40>
    2cb6:	80 68       	ori	r24, 0x80	; 128
    2cb8:	91 1d       	adc	r25, r1
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	1f 93       	push	r17
    2cc0:	0f 93       	push	r16
    2cc2:	ff 92       	push	r15
    2cc4:	ef 92       	push	r14
    2cc6:	19 2f       	mov	r17, r25
    2cc8:	98 7f       	andi	r25, 0xF8	; 248
    2cca:	96 95       	lsr	r25
    2ccc:	e9 2f       	mov	r30, r25
    2cce:	96 95       	lsr	r25
    2cd0:	96 95       	lsr	r25
    2cd2:	e9 0f       	add	r30, r25
    2cd4:	ff 27       	eor	r31, r31
    2cd6:	e2 59       	subi	r30, 0x92	; 146
    2cd8:	fd 4f       	sbci	r31, 0xFD	; 253
    2cda:	99 27       	eor	r25, r25
    2cdc:	33 27       	eor	r19, r19
    2cde:	ee 24       	eor	r14, r14
    2ce0:	ff 24       	eor	r15, r15
    2ce2:	a7 01       	movw	r20, r14
    2ce4:	e7 01       	movw	r28, r14
    2ce6:	05 90       	lpm	r0, Z+
    2ce8:	08 94       	sec
    2cea:	07 94       	ror	r0
    2cec:	28 f4       	brcc	.+10     	; 0x2cf8 <__ftoa_engine+0x80>
    2cee:	36 0f       	add	r19, r22
    2cf0:	e7 1e       	adc	r14, r23
    2cf2:	f8 1e       	adc	r15, r24
    2cf4:	49 1f       	adc	r20, r25
    2cf6:	51 1d       	adc	r21, r1
    2cf8:	66 0f       	add	r22, r22
    2cfa:	77 1f       	adc	r23, r23
    2cfc:	88 1f       	adc	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	06 94       	lsr	r0
    2d02:	a1 f7       	brne	.-24     	; 0x2cec <__ftoa_engine+0x74>
    2d04:	05 90       	lpm	r0, Z+
    2d06:	07 94       	ror	r0
    2d08:	28 f4       	brcc	.+10     	; 0x2d14 <__ftoa_engine+0x9c>
    2d0a:	e7 0e       	add	r14, r23
    2d0c:	f8 1e       	adc	r15, r24
    2d0e:	49 1f       	adc	r20, r25
    2d10:	56 1f       	adc	r21, r22
    2d12:	c1 1d       	adc	r28, r1
    2d14:	77 0f       	add	r23, r23
    2d16:	88 1f       	adc	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	66 1f       	adc	r22, r22
    2d1c:	06 94       	lsr	r0
    2d1e:	a1 f7       	brne	.-24     	; 0x2d08 <__ftoa_engine+0x90>
    2d20:	05 90       	lpm	r0, Z+
    2d22:	07 94       	ror	r0
    2d24:	28 f4       	brcc	.+10     	; 0x2d30 <__ftoa_engine+0xb8>
    2d26:	f8 0e       	add	r15, r24
    2d28:	49 1f       	adc	r20, r25
    2d2a:	56 1f       	adc	r21, r22
    2d2c:	c7 1f       	adc	r28, r23
    2d2e:	d1 1d       	adc	r29, r1
    2d30:	88 0f       	add	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	66 1f       	adc	r22, r22
    2d36:	77 1f       	adc	r23, r23
    2d38:	06 94       	lsr	r0
    2d3a:	a1 f7       	brne	.-24     	; 0x2d24 <__ftoa_engine+0xac>
    2d3c:	05 90       	lpm	r0, Z+
    2d3e:	07 94       	ror	r0
    2d40:	20 f4       	brcc	.+8      	; 0x2d4a <__ftoa_engine+0xd2>
    2d42:	49 0f       	add	r20, r25
    2d44:	56 1f       	adc	r21, r22
    2d46:	c7 1f       	adc	r28, r23
    2d48:	d8 1f       	adc	r29, r24
    2d4a:	99 0f       	add	r25, r25
    2d4c:	66 1f       	adc	r22, r22
    2d4e:	77 1f       	adc	r23, r23
    2d50:	88 1f       	adc	r24, r24
    2d52:	06 94       	lsr	r0
    2d54:	a9 f7       	brne	.-22     	; 0x2d40 <__ftoa_engine+0xc8>
    2d56:	84 91       	lpm	r24, Z
    2d58:	10 95       	com	r17
    2d5a:	17 70       	andi	r17, 0x07	; 7
    2d5c:	41 f0       	breq	.+16     	; 0x2d6e <__ftoa_engine+0xf6>
    2d5e:	d6 95       	lsr	r29
    2d60:	c7 95       	ror	r28
    2d62:	57 95       	ror	r21
    2d64:	47 95       	ror	r20
    2d66:	f7 94       	ror	r15
    2d68:	e7 94       	ror	r14
    2d6a:	1a 95       	dec	r17
    2d6c:	c1 f7       	brne	.-16     	; 0x2d5e <__ftoa_engine+0xe6>
    2d6e:	e4 e1       	ldi	r30, 0x14	; 20
    2d70:	f2 e0       	ldi	r31, 0x02	; 2
    2d72:	68 94       	set
    2d74:	15 90       	lpm	r1, Z+
    2d76:	15 91       	lpm	r17, Z+
    2d78:	35 91       	lpm	r19, Z+
    2d7a:	65 91       	lpm	r22, Z+
    2d7c:	95 91       	lpm	r25, Z+
    2d7e:	05 90       	lpm	r0, Z+
    2d80:	7f e2       	ldi	r23, 0x2F	; 47
    2d82:	73 95       	inc	r23
    2d84:	e1 18       	sub	r14, r1
    2d86:	f1 0a       	sbc	r15, r17
    2d88:	43 0b       	sbc	r20, r19
    2d8a:	56 0b       	sbc	r21, r22
    2d8c:	c9 0b       	sbc	r28, r25
    2d8e:	d0 09       	sbc	r29, r0
    2d90:	c0 f7       	brcc	.-16     	; 0x2d82 <__ftoa_engine+0x10a>
    2d92:	e1 0c       	add	r14, r1
    2d94:	f1 1e       	adc	r15, r17
    2d96:	43 1f       	adc	r20, r19
    2d98:	56 1f       	adc	r21, r22
    2d9a:	c9 1f       	adc	r28, r25
    2d9c:	d0 1d       	adc	r29, r0
    2d9e:	7e f4       	brtc	.+30     	; 0x2dbe <__ftoa_engine+0x146>
    2da0:	70 33       	cpi	r23, 0x30	; 48
    2da2:	11 f4       	brne	.+4      	; 0x2da8 <__ftoa_engine+0x130>
    2da4:	8a 95       	dec	r24
    2da6:	e6 cf       	rjmp	.-52     	; 0x2d74 <__ftoa_engine+0xfc>
    2da8:	e8 94       	clt
    2daa:	01 50       	subi	r16, 0x01	; 1
    2dac:	30 f0       	brcs	.+12     	; 0x2dba <__ftoa_engine+0x142>
    2dae:	08 0f       	add	r16, r24
    2db0:	0a f4       	brpl	.+2      	; 0x2db4 <__ftoa_engine+0x13c>
    2db2:	00 27       	eor	r16, r16
    2db4:	02 17       	cp	r16, r18
    2db6:	08 f4       	brcc	.+2      	; 0x2dba <__ftoa_engine+0x142>
    2db8:	20 2f       	mov	r18, r16
    2dba:	23 95       	inc	r18
    2dbc:	02 2f       	mov	r16, r18
    2dbe:	7a 33       	cpi	r23, 0x3A	; 58
    2dc0:	28 f0       	brcs	.+10     	; 0x2dcc <__ftoa_engine+0x154>
    2dc2:	79 e3       	ldi	r23, 0x39	; 57
    2dc4:	7d 93       	st	X+, r23
    2dc6:	2a 95       	dec	r18
    2dc8:	e9 f7       	brne	.-6      	; 0x2dc4 <__ftoa_engine+0x14c>
    2dca:	10 c0       	rjmp	.+32     	; 0x2dec <__ftoa_engine+0x174>
    2dcc:	7d 93       	st	X+, r23
    2dce:	2a 95       	dec	r18
    2dd0:	89 f6       	brne	.-94     	; 0x2d74 <__ftoa_engine+0xfc>
    2dd2:	06 94       	lsr	r0
    2dd4:	97 95       	ror	r25
    2dd6:	67 95       	ror	r22
    2dd8:	37 95       	ror	r19
    2dda:	17 95       	ror	r17
    2ddc:	17 94       	ror	r1
    2dde:	e1 18       	sub	r14, r1
    2de0:	f1 0a       	sbc	r15, r17
    2de2:	43 0b       	sbc	r20, r19
    2de4:	56 0b       	sbc	r21, r22
    2de6:	c9 0b       	sbc	r28, r25
    2de8:	d0 09       	sbc	r29, r0
    2dea:	98 f0       	brcs	.+38     	; 0x2e12 <__ftoa_engine+0x19a>
    2dec:	23 95       	inc	r18
    2dee:	7e 91       	ld	r23, -X
    2df0:	73 95       	inc	r23
    2df2:	7a 33       	cpi	r23, 0x3A	; 58
    2df4:	08 f0       	brcs	.+2      	; 0x2df8 <__ftoa_engine+0x180>
    2df6:	70 e3       	ldi	r23, 0x30	; 48
    2df8:	7c 93       	st	X, r23
    2dfa:	20 13       	cpse	r18, r16
    2dfc:	b8 f7       	brcc	.-18     	; 0x2dec <__ftoa_engine+0x174>
    2dfe:	7e 91       	ld	r23, -X
    2e00:	70 61       	ori	r23, 0x10	; 16
    2e02:	7d 93       	st	X+, r23
    2e04:	30 f0       	brcs	.+12     	; 0x2e12 <__ftoa_engine+0x19a>
    2e06:	83 95       	inc	r24
    2e08:	71 e3       	ldi	r23, 0x31	; 49
    2e0a:	7d 93       	st	X+, r23
    2e0c:	70 e3       	ldi	r23, 0x30	; 48
    2e0e:	2a 95       	dec	r18
    2e10:	e1 f7       	brne	.-8      	; 0x2e0a <__ftoa_engine+0x192>
    2e12:	11 24       	eor	r1, r1
    2e14:	ef 90       	pop	r14
    2e16:	ff 90       	pop	r15
    2e18:	0f 91       	pop	r16
    2e1a:	1f 91       	pop	r17
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	99 27       	eor	r25, r25
    2e22:	87 fd       	sbrc	r24, 7
    2e24:	90 95       	com	r25
    2e26:	08 95       	ret

00002e28 <strnlen_P>:
    2e28:	fc 01       	movw	r30, r24
    2e2a:	05 90       	lpm	r0, Z+
    2e2c:	61 50       	subi	r22, 0x01	; 1
    2e2e:	70 40       	sbci	r23, 0x00	; 0
    2e30:	01 10       	cpse	r0, r1
    2e32:	d8 f7       	brcc	.-10     	; 0x2e2a <strnlen_P+0x2>
    2e34:	80 95       	com	r24
    2e36:	90 95       	com	r25
    2e38:	8e 0f       	add	r24, r30
    2e3a:	9f 1f       	adc	r25, r31
    2e3c:	08 95       	ret

00002e3e <strtok>:
    2e3e:	46 e2       	ldi	r20, 0x26	; 38
    2e40:	53 e2       	ldi	r21, 0x23	; 35
    2e42:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <strtok_r>

00002e46 <strcmp>:
    2e46:	fb 01       	movw	r30, r22
    2e48:	dc 01       	movw	r26, r24
    2e4a:	8d 91       	ld	r24, X+
    2e4c:	01 90       	ld	r0, Z+
    2e4e:	80 19       	sub	r24, r0
    2e50:	01 10       	cpse	r0, r1
    2e52:	d9 f3       	breq	.-10     	; 0x2e4a <strcmp+0x4>
    2e54:	99 0b       	sbc	r25, r25
    2e56:	08 95       	ret

00002e58 <strnlen>:
    2e58:	fc 01       	movw	r30, r24
    2e5a:	61 50       	subi	r22, 0x01	; 1
    2e5c:	70 40       	sbci	r23, 0x00	; 0
    2e5e:	01 90       	ld	r0, Z+
    2e60:	01 10       	cpse	r0, r1
    2e62:	d8 f7       	brcc	.-10     	; 0x2e5a <strnlen+0x2>
    2e64:	80 95       	com	r24
    2e66:	90 95       	com	r25
    2e68:	8e 0f       	add	r24, r30
    2e6a:	9f 1f       	adc	r25, r31
    2e6c:	08 95       	ret

00002e6e <strtok_r>:
    2e6e:	fa 01       	movw	r30, r20
    2e70:	a1 91       	ld	r26, Z+
    2e72:	b0 81       	ld	r27, Z
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	19 f4       	brne	.+6      	; 0x2e7e <strtok_r+0x10>
    2e78:	10 97       	sbiw	r26, 0x00	; 0
    2e7a:	e1 f0       	breq	.+56     	; 0x2eb4 <strtok_r+0x46>
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	dc 01       	movw	r26, r24
    2e80:	cd 01       	movw	r24, r26
    2e82:	0d 90       	ld	r0, X+
    2e84:	00 20       	and	r0, r0
    2e86:	11 f4       	brne	.+4      	; 0x2e8c <strtok_r+0x1e>
    2e88:	c0 01       	movw	r24, r0
    2e8a:	13 c0       	rjmp	.+38     	; 0x2eb2 <strtok_r+0x44>
    2e8c:	fb 01       	movw	r30, r22
    2e8e:	21 91       	ld	r18, Z+
    2e90:	22 23       	and	r18, r18
    2e92:	19 f0       	breq	.+6      	; 0x2e9a <strtok_r+0x2c>
    2e94:	20 15       	cp	r18, r0
    2e96:	d9 f7       	brne	.-10     	; 0x2e8e <strtok_r+0x20>
    2e98:	f3 cf       	rjmp	.-26     	; 0x2e80 <strtok_r+0x12>
    2e9a:	fb 01       	movw	r30, r22
    2e9c:	21 91       	ld	r18, Z+
    2e9e:	20 15       	cp	r18, r0
    2ea0:	19 f4       	brne	.+6      	; 0x2ea8 <strtok_r+0x3a>
    2ea2:	1e 92       	st	-X, r1
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	06 c0       	rjmp	.+12     	; 0x2eb4 <strtok_r+0x46>
    2ea8:	22 23       	and	r18, r18
    2eaa:	c1 f7       	brne	.-16     	; 0x2e9c <strtok_r+0x2e>
    2eac:	0d 90       	ld	r0, X+
    2eae:	00 20       	and	r0, r0
    2eb0:	a1 f7       	brne	.-24     	; 0x2e9a <strtok_r+0x2c>
    2eb2:	d0 01       	movw	r26, r0
    2eb4:	fa 01       	movw	r30, r20
    2eb6:	a1 93       	st	Z+, r26
    2eb8:	b0 83       	st	Z, r27
    2eba:	08 95       	ret

00002ebc <fputc>:
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	fb 01       	movw	r30, r22
    2ec6:	23 81       	ldd	r18, Z+3	; 0x03
    2ec8:	21 fd       	sbrc	r18, 1
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <fputc+0x16>
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	9f ef       	ldi	r25, 0xFF	; 255
    2ed0:	28 c0       	rjmp	.+80     	; 0x2f22 <fputc+0x66>
    2ed2:	22 ff       	sbrs	r18, 2
    2ed4:	16 c0       	rjmp	.+44     	; 0x2f02 <fputc+0x46>
    2ed6:	46 81       	ldd	r20, Z+6	; 0x06
    2ed8:	57 81       	ldd	r21, Z+7	; 0x07
    2eda:	24 81       	ldd	r18, Z+4	; 0x04
    2edc:	35 81       	ldd	r19, Z+5	; 0x05
    2ede:	42 17       	cp	r20, r18
    2ee0:	53 07       	cpc	r21, r19
    2ee2:	44 f4       	brge	.+16     	; 0x2ef4 <fputc+0x38>
    2ee4:	a0 81       	ld	r26, Z
    2ee6:	b1 81       	ldd	r27, Z+1	; 0x01
    2ee8:	9d 01       	movw	r18, r26
    2eea:	2f 5f       	subi	r18, 0xFF	; 255
    2eec:	3f 4f       	sbci	r19, 0xFF	; 255
    2eee:	20 83       	st	Z, r18
    2ef0:	31 83       	std	Z+1, r19	; 0x01
    2ef2:	8c 93       	st	X, r24
    2ef4:	26 81       	ldd	r18, Z+6	; 0x06
    2ef6:	37 81       	ldd	r19, Z+7	; 0x07
    2ef8:	2f 5f       	subi	r18, 0xFF	; 255
    2efa:	3f 4f       	sbci	r19, 0xFF	; 255
    2efc:	26 83       	std	Z+6, r18	; 0x06
    2efe:	37 83       	std	Z+7, r19	; 0x07
    2f00:	10 c0       	rjmp	.+32     	; 0x2f22 <fputc+0x66>
    2f02:	eb 01       	movw	r28, r22
    2f04:	09 2f       	mov	r16, r25
    2f06:	18 2f       	mov	r17, r24
    2f08:	00 84       	ldd	r0, Z+8	; 0x08
    2f0a:	f1 85       	ldd	r31, Z+9	; 0x09
    2f0c:	e0 2d       	mov	r30, r0
    2f0e:	19 95       	eicall
    2f10:	89 2b       	or	r24, r25
    2f12:	e1 f6       	brne	.-72     	; 0x2ecc <fputc+0x10>
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	8e 83       	std	Y+6, r24	; 0x06
    2f1c:	9f 83       	std	Y+7, r25	; 0x07
    2f1e:	81 2f       	mov	r24, r17
    2f20:	90 2f       	mov	r25, r16
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	1f 91       	pop	r17
    2f28:	0f 91       	pop	r16
    2f2a:	08 95       	ret

00002f2c <sprintf>:
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	2e 97       	sbiw	r28, 0x0e	; 14
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	de bf       	out	0x3e, r29	; 62
    2f3e:	0e 89       	ldd	r16, Y+22	; 0x16
    2f40:	1f 89       	ldd	r17, Y+23	; 0x17
    2f42:	86 e0       	ldi	r24, 0x06	; 6
    2f44:	8c 83       	std	Y+4, r24	; 0x04
    2f46:	09 83       	std	Y+1, r16	; 0x01
    2f48:	1a 83       	std	Y+2, r17	; 0x02
    2f4a:	8f ef       	ldi	r24, 0xFF	; 255
    2f4c:	9f e7       	ldi	r25, 0x7F	; 127
    2f4e:	8d 83       	std	Y+5, r24	; 0x05
    2f50:	9e 83       	std	Y+6, r25	; 0x06
    2f52:	ae 01       	movw	r20, r28
    2f54:	46 5e       	subi	r20, 0xE6	; 230
    2f56:	5f 4f       	sbci	r21, 0xFF	; 255
    2f58:	68 8d       	ldd	r22, Y+24	; 0x18
    2f5a:	79 8d       	ldd	r23, Y+25	; 0x19
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vfprintf>
    2f64:	2f 81       	ldd	r18, Y+7	; 0x07
    2f66:	38 85       	ldd	r19, Y+8	; 0x08
    2f68:	f8 01       	movw	r30, r16
    2f6a:	e2 0f       	add	r30, r18
    2f6c:	f3 1f       	adc	r31, r19
    2f6e:	10 82       	st	Z, r1
    2f70:	2e 96       	adiw	r28, 0x0e	; 14
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	08 95       	ret

00002f80 <__ultoa_invert>:
    2f80:	fa 01       	movw	r30, r20
    2f82:	aa 27       	eor	r26, r26
    2f84:	28 30       	cpi	r18, 0x08	; 8
    2f86:	51 f1       	breq	.+84     	; 0x2fdc <__ultoa_invert+0x5c>
    2f88:	20 31       	cpi	r18, 0x10	; 16
    2f8a:	81 f1       	breq	.+96     	; 0x2fec <__ultoa_invert+0x6c>
    2f8c:	e8 94       	clt
    2f8e:	6f 93       	push	r22
    2f90:	6e 7f       	andi	r22, 0xFE	; 254
    2f92:	6e 5f       	subi	r22, 0xFE	; 254
    2f94:	7f 4f       	sbci	r23, 0xFF	; 255
    2f96:	8f 4f       	sbci	r24, 0xFF	; 255
    2f98:	9f 4f       	sbci	r25, 0xFF	; 255
    2f9a:	af 4f       	sbci	r26, 0xFF	; 255
    2f9c:	b1 e0       	ldi	r27, 0x01	; 1
    2f9e:	3e d0       	rcall	.+124    	; 0x301c <__ultoa_invert+0x9c>
    2fa0:	b4 e0       	ldi	r27, 0x04	; 4
    2fa2:	3c d0       	rcall	.+120    	; 0x301c <__ultoa_invert+0x9c>
    2fa4:	67 0f       	add	r22, r23
    2fa6:	78 1f       	adc	r23, r24
    2fa8:	89 1f       	adc	r24, r25
    2faa:	9a 1f       	adc	r25, r26
    2fac:	a1 1d       	adc	r26, r1
    2fae:	68 0f       	add	r22, r24
    2fb0:	79 1f       	adc	r23, r25
    2fb2:	8a 1f       	adc	r24, r26
    2fb4:	91 1d       	adc	r25, r1
    2fb6:	a1 1d       	adc	r26, r1
    2fb8:	6a 0f       	add	r22, r26
    2fba:	71 1d       	adc	r23, r1
    2fbc:	81 1d       	adc	r24, r1
    2fbe:	91 1d       	adc	r25, r1
    2fc0:	a1 1d       	adc	r26, r1
    2fc2:	20 d0       	rcall	.+64     	; 0x3004 <__ultoa_invert+0x84>
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <__ultoa_invert+0x48>
    2fc6:	68 94       	set
    2fc8:	3f 91       	pop	r19
    2fca:	2a e0       	ldi	r18, 0x0A	; 10
    2fcc:	26 9f       	mul	r18, r22
    2fce:	11 24       	eor	r1, r1
    2fd0:	30 19       	sub	r19, r0
    2fd2:	30 5d       	subi	r19, 0xD0	; 208
    2fd4:	31 93       	st	Z+, r19
    2fd6:	de f6       	brtc	.-74     	; 0x2f8e <__ultoa_invert+0xe>
    2fd8:	cf 01       	movw	r24, r30
    2fda:	08 95       	ret
    2fdc:	46 2f       	mov	r20, r22
    2fde:	47 70       	andi	r20, 0x07	; 7
    2fe0:	40 5d       	subi	r20, 0xD0	; 208
    2fe2:	41 93       	st	Z+, r20
    2fe4:	b3 e0       	ldi	r27, 0x03	; 3
    2fe6:	0f d0       	rcall	.+30     	; 0x3006 <__ultoa_invert+0x86>
    2fe8:	c9 f7       	brne	.-14     	; 0x2fdc <__ultoa_invert+0x5c>
    2fea:	f6 cf       	rjmp	.-20     	; 0x2fd8 <__ultoa_invert+0x58>
    2fec:	46 2f       	mov	r20, r22
    2fee:	4f 70       	andi	r20, 0x0F	; 15
    2ff0:	40 5d       	subi	r20, 0xD0	; 208
    2ff2:	4a 33       	cpi	r20, 0x3A	; 58
    2ff4:	18 f0       	brcs	.+6      	; 0x2ffc <__ultoa_invert+0x7c>
    2ff6:	49 5d       	subi	r20, 0xD9	; 217
    2ff8:	31 fd       	sbrc	r19, 1
    2ffa:	40 52       	subi	r20, 0x20	; 32
    2ffc:	41 93       	st	Z+, r20
    2ffe:	02 d0       	rcall	.+4      	; 0x3004 <__ultoa_invert+0x84>
    3000:	a9 f7       	brne	.-22     	; 0x2fec <__ultoa_invert+0x6c>
    3002:	ea cf       	rjmp	.-44     	; 0x2fd8 <__ultoa_invert+0x58>
    3004:	b4 e0       	ldi	r27, 0x04	; 4
    3006:	a6 95       	lsr	r26
    3008:	97 95       	ror	r25
    300a:	87 95       	ror	r24
    300c:	77 95       	ror	r23
    300e:	67 95       	ror	r22
    3010:	ba 95       	dec	r27
    3012:	c9 f7       	brne	.-14     	; 0x3006 <__ultoa_invert+0x86>
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	61 05       	cpc	r22, r1
    3018:	71 05       	cpc	r23, r1
    301a:	08 95       	ret
    301c:	9b 01       	movw	r18, r22
    301e:	ac 01       	movw	r20, r24
    3020:	0a 2e       	mov	r0, r26
    3022:	06 94       	lsr	r0
    3024:	57 95       	ror	r21
    3026:	47 95       	ror	r20
    3028:	37 95       	ror	r19
    302a:	27 95       	ror	r18
    302c:	ba 95       	dec	r27
    302e:	c9 f7       	brne	.-14     	; 0x3022 <__ultoa_invert+0xa2>
    3030:	62 0f       	add	r22, r18
    3032:	73 1f       	adc	r23, r19
    3034:	84 1f       	adc	r24, r20
    3036:	95 1f       	adc	r25, r21
    3038:	a0 1d       	adc	r26, r0
    303a:	08 95       	ret

0000303c <_exit>:
    303c:	f8 94       	cli

0000303e <__stop_program>:
    303e:	ff cf       	rjmp	.-2      	; 0x303e <__stop_program>
