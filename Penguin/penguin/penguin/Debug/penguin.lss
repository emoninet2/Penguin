
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b2  00802000  00002424  000024b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000350  008022b2  008022b2  0000276a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000276a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000279c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000858  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dfa5  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002501  00000000  00000000  00010fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003db6  00000000  00000000  000134da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b0c  00000000  00000000  00017290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005071  00000000  00000000  00018d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007af7  00000000  00000000  0001de0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ab8  00000000  00000000  00025904  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__ctors_end>
       4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      10:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      14:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      18:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      1c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      20:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      28:	0c 94 7b 11 	jmp	0x22f6	; 0x22f6 <__vector_10>
      2c:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__vector_11>
      30:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      38:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      3c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      40:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      44:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      48:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      50:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      54:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      58:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      5c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      60:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      64:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_25>
      68:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__vector_26>
      6c:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__vector_27>
      70:	0c 94 03 08 	jmp	0x1006	; 0x1006 <__vector_28>
      74:	0c 94 17 08 	jmp	0x102e	; 0x102e <__vector_29>
      78:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_30>
      7c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      80:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      84:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      88:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      8c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      90:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      94:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      98:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      9c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e8:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__vector_58>
      ec:	0c 94 53 08 	jmp	0x10a6	; 0x10a6 <__vector_59>
      f0:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_60>
      f4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      fc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     100:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     104:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     108:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     10c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     110:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     114:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     118:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     11c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     120:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     124:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     128:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     12c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     130:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     134:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     138:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     13c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     140:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     144:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     148:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     14c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     150:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     154:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     158:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     15c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     160:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_88>
     164:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_89>
     168:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_90>
     16c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     170:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     174:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     178:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     17c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     180:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     184:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     188:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     18c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     190:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     194:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     198:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     19c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ec:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f4:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_125>
     1f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1fc:	c5 0a       	sbc	r12, r21
     1fe:	f0 0a       	sbc	r15, r16
     200:	c7 0b       	sbc	r28, r23
     202:	f0 0a       	sbc	r15, r16
     204:	c7 0b       	sbc	r28, r23
     206:	2b 0b       	sbc	r18, r27
     208:	42 0b       	sbc	r20, r18
     20a:	c7 0b       	sbc	r28, r23
     20c:	99 0b       	sbc	r25, r25
     20e:	a6 0b       	sbc	r26, r22

00000210 <__trampolines_start>:
     210:	0c 94 99 0b 	jmp	0x1732	; 0x1732 <USB_Device_ProcessControlRequest+0x20e>
     214:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <USB_Device_ProcessControlRequest+0x132>
     218:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <USB_Device_ProcessControlRequest+0x160>
     21c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <USB_Device_ProcessControlRequest+0xbc>
     220:	0c 94 c7 0b 	jmp	0x178e	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
     224:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <USB_Device_ProcessControlRequest+0x66>
     228:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <USB_Device_ProcessControlRequest+0x228>

0000022c <ProductString>:
     22c:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
     23c:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
     24c:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

0000025a <ManufacturerString>:
     25a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     26a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000274 <LanguageString>:
     274:	04 03 09 04                                         ....

00000278 <ConfigurationDescriptor>:
     278:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     288:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     298:	00 05                                               ..

0000029a <DeviceDescriptor>:
     29a:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
     2aa:	00 01                                               ..

000002ac <GenericReport>:
     2ac:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     2bc:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df e9       	ldi	r29, 0x9F	; 159
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0c bf       	out	0x3c, r16	; 60

000002dc <__do_copy_data>:
     2dc:	12 e2       	ldi	r17, 0x22	; 34
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e2       	ldi	r27, 0x20	; 32
     2e2:	e4 e2       	ldi	r30, 0x24	; 36
     2e4:	f4 e2       	ldi	r31, 0x24	; 36
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	a2 3b       	cpi	r26, 0xB2	; 178
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	26 e2       	ldi	r18, 0x26	; 38
     2f8:	a2 eb       	ldi	r26, 0xB2	; 178
     2fa:	b2 e2       	ldi	r27, 0x22	; 34
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	a2 30       	cpi	r26, 0x02	; 2
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>
     306:	0e 94 7d 06 	call	0xcfa	; 0xcfa <main>
     30a:	0c 94 10 12 	jmp	0x2420	; 0x2420 <_exit>

0000030e <__bad_interrupt>:
     30e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000312 <arch_spi_master_transmit_byte_val>:
}


static uint8_t arch_spi_master_transmit_byte_val(uint8_t data)
{
	NRF24L01P_SPI.DATA = data;
     312:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS &(1<<SPI_IF_bp)));
     316:	e0 ec       	ldi	r30, 0xC0	; 192
     318:	f8 e0       	ldi	r31, 0x08	; 8
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	88 23       	and	r24, r24
     31e:	ec f7       	brge	.-6      	; 0x31a <arch_spi_master_transmit_byte_val+0x8>
	return SPIC.DATA;
     320:	80 91 c3 08 	lds	r24, 0x08C3
}
     324:	08 95       	ret

00000326 <arch_spi_master_transmit_byte_ref>:

static uint8_t arch_spi_master_transmit_byte_ref(uint8_t *data)
{
	NRF24L01P_SPI.DATA = *data;
     326:	fc 01       	movw	r30, r24
     328:	80 81       	ld	r24, Z
     32a:	80 93 c3 08 	sts	0x08C3, r24
	while(!(NRF24L01P_SPI.STATUS &(1<<SPI_IF_bp)));
     32e:	e0 ec       	ldi	r30, 0xC0	; 192
     330:	f8 e0       	ldi	r31, 0x08	; 8
     332:	82 81       	ldd	r24, Z+2	; 0x02
     334:	88 23       	and	r24, r24
     336:	ec f7       	brge	.-6      	; 0x332 <arch_spi_master_transmit_byte_ref+0xc>
	return NRF24L01P_SPI.DATA;
     338:	80 91 c3 08 	lds	r24, 0x08C3
}
     33c:	08 95       	ret

0000033e <_nrf24l01p_ce_pin>:
 */ 

#include "nrf24l01p.h"


void _nrf24l01p_ce_pin(bool state){
     33e:	cf 93       	push	r28
     340:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_ce_pin(bool state){
	//if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	//else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
	
	if(state) DigitalPin_SetValue(&nrf24l01p_ce_pin) ;
     342:	88 23       	and	r24, r24
     344:	29 f0       	breq	.+10     	; 0x350 <_nrf24l01p_ce_pin+0x12>
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e2       	ldi	r25, 0x20	; 32
     34a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DigitalPin_SetValue>
     34e:	04 c0       	rjmp	.+8      	; 0x358 <_nrf24l01p_ce_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_ce_pin);
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e2       	ldi	r25, 0x20	; 32
     354:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DigitalPin_ClearValue>
	arch_nrf24l01p_ce_pin(state);
	ce_value = state;
     358:	c0 93 c1 24 	sts	0x24C1, r28
}
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <_nrf24l01p_csn_pin>:
void _nrf24l01p_csn_pin(bool state){
     360:	cf 93       	push	r28
     362:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_csn_pin(bool state){
// 	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
// 	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);

	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
     364:	88 23       	and	r24, r24
     366:	29 f0       	breq	.+10     	; 0x372 <_nrf24l01p_csn_pin+0x12>
     368:	83 e0       	ldi	r24, 0x03	; 3
     36a:	90 e2       	ldi	r25, 0x20	; 32
     36c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <DigitalPin_SetValue>
     370:	04 c0       	rjmp	.+8      	; 0x37a <_nrf24l01p_csn_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	90 e2       	ldi	r25, 0x20	; 32
     376:	0e 94 d5 07 	call	0xfaa	; 0xfaa <DigitalPin_ClearValue>

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     37a:	c0 93 c0 24 	sts	0x24C0, r28
}
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <_nrf24l01p_read_register>:
	_nrf24l01p_startup();
	
}


void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
     382:	ef 92       	push	r14
     384:	ff 92       	push	r15
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	c8 2f       	mov	r28, r24
     390:	7b 01       	movw	r14, r22
     392:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
     39a:	8c 2f       	mov	r24, r28
     39c:	8f 71       	andi	r24, 0x1F	; 31
     39e:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     3a2:	10 16       	cp	r1, r16
     3a4:	11 06       	cpc	r1, r17
     3a6:	94 f4       	brge	.+36     	; 0x3cc <_nrf24l01p_read_register+0x4a>
     3a8:	e7 01       	movw	r28, r14
     3aa:	0e 0d       	add	r16, r14
     3ac:	1f 1d       	adc	r17, r15
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
	*data = NRF24L01P_SPI.DATA;
     3ae:	0f 2e       	mov	r0, r31
     3b0:	f0 ec       	ldi	r31, 0xC0	; 192
     3b2:	ef 2e       	mov	r14, r31
     3b4:	f8 e0       	ldi	r31, 0x08	; 8
     3b6:	ff 2e       	mov	r15, r31
     3b8:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     3c0:	f7 01       	movw	r30, r14
     3c2:	83 81       	ldd	r24, Z+3	; 0x03
     3c4:	89 93       	st	Y+, r24
     3c6:	c0 17       	cp	r28, r16
     3c8:	d1 07       	cpc	r29, r17
     3ca:	b9 f7       	brne	.-18     	; 0x3ba <_nrf24l01p_read_register+0x38>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	08 95       	ret

000003e0 <_nrf24l01p_write_register>:
// 	uint8_t temp =  arch_spi_master_transmit_byte_val(0xff);
// 	_nrf24l01p_csn_pin(1);

// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	c8 2f       	mov	r28, r24
     3ee:	7b 01       	movw	r14, r22
     3f0:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
     3f8:	8c 2f       	mov	r24, r28
     3fa:	8f 71       	andi	r24, 0x1F	; 31
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     402:	10 16       	cp	r1, r16
     404:	11 06       	cpc	r1, r17
     406:	54 f4       	brge	.+20     	; 0x41c <_nrf24l01p_write_register+0x3c>
     408:	e7 01       	movw	r28, r14
     40a:	0e 0d       	add	r16, r14
     40c:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     40e:	ce 01       	movw	r24, r28
     410:	0e 94 93 01 	call	0x326	; 0x326 <arch_spi_master_transmit_byte_ref>
     414:	21 96       	adiw	r28, 0x01	; 1
// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
     416:	c0 17       	cp	r28, r16
     418:	d1 07       	cpc	r29, r17
     41a:	c9 f7       	brne	.-14     	; 0x40e <_nrf24l01p_write_register+0x2e>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
}
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	1f 91       	pop	r17
     428:	0f 91       	pop	r16
     42a:	ff 90       	pop	r15
     42c:	ef 90       	pop	r14
     42e:	08 95       	ret

00000430 <_nrf24l01p_write_tx_payload>:
	for(int i=0;i<pay_len;i++){
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	7c 01       	movw	r14, r24
     43e:	8b 01       	movw	r16, r22
	_nrf24l01p_csn_pin(0);
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
     446:	80 ea       	ldi	r24, 0xA0	; 160
     448:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     44c:	10 16       	cp	r1, r16
     44e:	11 06       	cpc	r1, r17
     450:	54 f4       	brge	.+20     	; 0x466 <_nrf24l01p_write_tx_payload+0x36>
     452:	e7 01       	movw	r28, r14
     454:	0e 0d       	add	r16, r14
     456:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     458:	ce 01       	movw	r24, r28
     45a:	0e 94 93 01 	call	0x326	; 0x326 <arch_spi_master_transmit_byte_ref>
     45e:	21 96       	adiw	r28, 0x01	; 1
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
	for(int i=0;i<pay_len;i++){
     460:	c0 17       	cp	r28, r16
     462:	d1 07       	cpc	r29, r17
     464:	c9 f7       	brne	.-14     	; 0x458 <_nrf24l01p_write_tx_payload+0x28>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	08 95       	ret

0000047a <_nrf24l01p_flush_rx>:
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
     480:	82 ee       	ldi	r24, 0xE2	; 226
     482:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	_nrf24l01p_csn_pin(1);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
     48c:	08 95       	ret

0000048e <_nrf24l01p_get_status>:
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
     48e:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
     496:	8f ef       	ldi	r24, 0xFF	; 255
     498:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
     49c:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	
	return temp;
}
     4a4:	8c 2f       	mov	r24, r28
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <_nrf24l01p_power_up>:

void _nrf24l01p_power_up(){
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	1f 92       	push	r1
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	be 01       	movw	r22, r28
     4bc:	6f 5f       	subi	r22, 0xFF	; 255
     4be:	7f 4f       	sbci	r23, 0xFF	; 255
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PWR_UP;
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	82 60       	ori	r24, 0x02	; 2
     4ca:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4cc:	41 e0       	ldi	r20, 0x01	; 1
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	be 01       	movw	r22, r28
     4d2:	6f 5f       	subi	r22, 0xFF	; 255
     4d4:	7f 4f       	sbci	r23, 0xFF	; 255
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4dc:	8f e9       	ldi	r24, 0x9F	; 159
     4de:	9c e8       	ldi	r25, 0x8C	; 140
     4e0:	01 97       	sbiw	r24, 0x01	; 1
     4e2:	f1 f7       	brne	.-4      	; 0x4e0 <_nrf24l01p_power_up+0x34>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_nrf24l01p_power_up+0x3a>
     4e6:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	mode = _NRF24L01P_MODE_STANDBY;
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	80 93 c2 24 	sts	0x24C2, r24
}
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <_nrf24l01p_power_down>:
void _nrf24l01p_power_down(){
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PWR_UP;
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	8d 7f       	andi	r24, 0xFD	; 253
     514:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     516:	41 e0       	ldi	r20, 0x01	; 1
     518:	50 e0       	ldi	r21, 0x00	; 0
     51a:	be 01       	movw	r22, r28
     51c:	6f 5f       	subi	r22, 0xFF	; 255
     51e:	7f 4f       	sbci	r23, 0xFF	; 255
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_POWER_DOWN;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 c2 24 	sts	0x24C2, r24
}
     52c:	0f 90       	pop	r0
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <_nrf24l01p_rx_mode>:
void _nrf24l01p_rx_mode(){
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	1f 92       	push	r1
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	be 01       	movw	r22, r28
     544:	6f 5f       	subi	r22, 0xFF	; 255
     546:	7f 4f       	sbci	r23, 0xFF	; 255
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PRIM_RX;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	81 60       	ori	r24, 0x01	; 1
     552:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     554:	41 e0       	ldi	r20, 0x01	; 1
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	be 01       	movw	r22, r28
     55a:	6f 5f       	subi	r22, 0xFF	; 255
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_RX;
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	80 93 c2 24 	sts	0x24C2, r24
}
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <_nrf24l01p_tx_mode>:
void _nrf24l01p_tx_mode(){
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	1f 92       	push	r1
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
     58c:	89 81       	ldd	r24, Y+1	; 0x01
     58e:	8e 7f       	andi	r24, 0xFE	; 254
     590:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     592:	41 e0       	ldi	r20, 0x01	; 1
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	be 01       	movw	r22, r28
     598:	6f 5f       	subi	r22, 0xFF	; 255
     59a:	7f 4f       	sbci	r23, 0xFF	; 255
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_TX;
     5a2:	84 e0       	ldi	r24, 0x04	; 4
     5a4:	80 93 c2 24 	sts	0x24C2, r24
}
     5a8:	0f 90       	pop	r0
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <_nrf24l01p_disable_auto_ack_all_pipes>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
	clr_bit(temp,pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
}
void _nrf24l01p_disable_auto_ack_all_pipes(){
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	1f 92       	push	r1
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
     5ba:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     5bc:	41 e0       	ldi	r20, 0x01	; 1
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	be 01       	movw	r22, r28
     5c2:	6f 5f       	subi	r22, 0xFF	; 255
     5c4:	7f 4f       	sbci	r23, 0xFF	; 255
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
}
     5cc:	0f 90       	pop	r0
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <_nrf24l01p_enable_rx_on_pipe>:

void _nrf24l01p_enable_rx_on_pipe(_nrf24l01p_pipe_t pipe){
     5d4:	1f 93       	push	r17
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	1f 92       	push	r1
     5dc:	cd b7       	in	r28, 0x3d	; 61
     5de:	de b7       	in	r29, 0x3e	; 62
     5e0:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	be 01       	movw	r22, r28
     5e8:	6f 5f       	subi	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	c9 01       	movw	r24, r18
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <_nrf24l01p_enable_rx_on_pipe+0x2a>
     5fa:	88 0f       	add	r24, r24
     5fc:	99 1f       	adc	r25, r25
     5fe:	1a 95       	dec	r17
     600:	e2 f7       	brpl	.-8      	; 0x5fa <_nrf24l01p_enable_rx_on_pipe+0x26>
     602:	99 81       	ldd	r25, Y+1	; 0x01
     604:	89 2b       	or	r24, r25
     606:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	be 01       	movw	r22, r28
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	82 e0       	ldi	r24, 0x02	; 2
     614:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
}
     618:	0f 90       	pop	r0
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	08 95       	ret

00000622 <_nrf24l01p_get_data_sent_flag>:
}

bool _nrf24l01p_get_data_sent_flag(){
	bool flag;
	//(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS)?flag = 1 : flag = 0;
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS) flag = 1;
     622:	0e 94 47 02 	call	0x48e	; 0x48e <_nrf24l01p_get_status>
     626:	96 95       	lsr	r25
     628:	87 95       	ror	r24
     62a:	92 95       	swap	r25
     62c:	82 95       	swap	r24
     62e:	8f 70       	andi	r24, 0x0F	; 15
     630:	89 27       	eor	r24, r25
     632:	9f 70       	andi	r25, 0x0F	; 15
     634:	89 27       	eor	r24, r25
	else flag  = 0;
	return flag;
}
     636:	81 70       	andi	r24, 0x01	; 1
     638:	08 95       	ret

0000063a <_nrf24l01p_clear_data_sent_flag>:

void _nrf24l01p_clear_data_sent_flag(){
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	1f 92       	push	r1
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     644:	0e 94 47 02 	call	0x48e	; 0x48e <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_TX_DS;
     648:	80 62       	ori	r24, 0x20	; 32
     64a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     64c:	41 e0       	ldi	r20, 0x01	; 1
     64e:	50 e0       	ldi	r21, 0x00	; 0
     650:	be 01       	movw	r22, r28
     652:	6f 5f       	subi	r22, 0xFF	; 255
     654:	7f 4f       	sbci	r23, 0xFF	; 255
     656:	87 e0       	ldi	r24, 0x07	; 7
     658:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
}
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <_nrf24l01p_enable_dynamic_payload_pipe>:
	if(temp&_NRF24L01P_FIFO_STATUS_RX_REUSE) flag = 1 ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_enable_dynamic_payload_pipe(_nrf24l01p_pipe_t pipe){
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	1f 92       	push	r1
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     672:	41 e0       	ldi	r20, 0x01	; 1
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	8c e1       	ldi	r24, 0x1C	; 28
     67e:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp |= (1<<pipe);
     682:	21 e0       	ldi	r18, 0x01	; 1
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	c9 01       	movw	r24, r18
     688:	02 c0       	rjmp	.+4      	; 0x68e <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     68a:	88 0f       	add	r24, r24
     68c:	99 1f       	adc	r25, r25
     68e:	1a 95       	dec	r17
     690:	e2 f7       	brpl	.-8      	; 0x68a <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     692:	99 81       	ldd	r25, Y+1	; 0x01
     694:	89 2b       	or	r24, r25
     696:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     698:	41 e0       	ldi	r20, 0x01	; 1
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	be 01       	movw	r22, r28
     69e:	6f 5f       	subi	r22, 0xFF	; 255
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	8c e1       	ldi	r24, 0x1C	; 28
     6a4:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
}
     6a8:	0f 90       	pop	r0
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	08 95       	ret

000006b2 <_nrf24l01p_disable_dynamic_payload_all_pipe>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
	temp &= ~(1<<pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
}
void _nrf24l01p_disable_dynamic_payload_all_pipe(){
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	1f 92       	push	r1
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0x00;
     6bc:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	8c e1       	ldi	r24, 0x1C	; 28
     6ca:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	
}
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <_nrf24l01p_enable_dynamic_payload>:
void _nrf24l01p_enable_dynamic_payload(){
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	1f 92       	push	r1
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	be 01       	movw	r22, r28
     6e6:	6f 5f       	subi	r22, 0xFF	; 255
     6e8:	7f 4f       	sbci	r23, 0xFF	; 255
     6ea:	8d e1       	ldi	r24, 0x1D	; 29
     6ec:	0e 94 c1 01 	call	0x382	; 0x382 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_DPL;
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	84 60       	ori	r24, 0x04	; 4
     6f4:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6f6:	41 e0       	ldi	r20, 0x01	; 1
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	be 01       	movw	r22, r28
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	8d e1       	ldi	r24, 0x1D	; 29
     702:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
}
     706:	0f 90       	pop	r0
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <_nrf24l01p_startup>:
// 	printf("fifo status : %x\r\n",read_register(_NRF24L01P_REG_FIFO_STATUS));
}


//////////////////////////////////////////////////////////////////////////
void _nrf24l01p_startup(){
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
	#define TRANSFER_SIZE 1
	//nrf24l01p_write_rf_setup(0b00000111);
	uint8_t temp = 0b00000111;
     718:	87 e0       	ldi	r24, 0x07	; 7
     71a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     71c:	41 e0       	ldi	r20, 0x01	; 1
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	be 01       	movw	r22, r28
     722:	6f 5f       	subi	r22, 0xFF	; 255
     724:	7f 4f       	sbci	r23, 0xFF	; 255
     726:	86 e0       	ldi	r24, 0x06	; 6
     728:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_en_aa(0);
	temp = 0;
     72c:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(uint8_t));
     72e:	41 e0       	ldi	r20, 0x01	; 1
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	be 01       	movw	r22, r28
     734:	6f 5f       	subi	r22, 0xFF	; 255
     736:	7f 4f       	sbci	r23, 0xFF	; 255
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_rx_pw(0, TRANSFER_SIZE);
	temp = TRANSFER_SIZE;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     742:	41 e0       	ldi	r20, 0x01	; 1
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	86 e0       	ldi	r24, 0x06	; 6
     74e:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	_nrf24l01p_power_up();
     752:	0e 94 56 02 	call	0x4ac	; 0x4ac <_nrf24l01p_power_up>
     756:	8f e9       	ldi	r24, 0x9F	; 159
     758:	9c e8       	ldi	r25, 0x8C	; 140
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <_nrf24l01p_startup+0x4c>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <_nrf24l01p_startup+0x52>
     760:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	//
	_nrf24l01p_rx_mode();
     762:	0e 94 9a 02 	call	0x534	; 0x534 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(1);
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>

}
     76c:	0f 90       	pop	r0
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <_nrf24l01p_init>:

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
}

void _nrf24l01p_init(){
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	1f 92       	push	r1
     77a:	1f 92       	push	r1
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
}

static void arch_nrf24l01p_initialize(){
	NRF24L01P_SPI_PORT.DIRSET = (1<<5) | (1<<4) | (1<<7);
     780:	e0 e4       	ldi	r30, 0x40	; 64
     782:	f6 e0       	ldi	r31, 0x06	; 6
     784:	80 eb       	ldi	r24, 0xB0	; 176
     786:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_SPI.CTRL = (1<<SPI_ENABLE_bp) | (1<<SPI_MASTER_bp);
     788:	80 e5       	ldi	r24, 0x50	; 80
     78a:	80 93 c0 08 	sts	0x08C0, r24
	NRF24L01P_CSN_PIN_PORT.DIRSET = (1<<NRF24L01P_CSN_PIN_BIT);
     78e:	80 e1       	ldi	r24, 0x10	; 16
     790:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_CE_PIN_PORT.DIRSET = (1<<NRF24L01P_CE_PIN_BIT);
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	81 83       	std	Z+1, r24	; 0x01
	arch_nrf24l01p_initialize();
	
	_nrf24l01p_ce_pin(0);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	_nrf24l01p_csn_pin(1);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_csn_pin>
	
	
	_nrf24l01p_flush_rx();
     7a2:	0e 94 3d 02 	call	0x47a	; 0x47a <_nrf24l01p_flush_rx>
	_nrf24l01p_power_down();
     7a6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_nrf24l01p_power_down>
	uint8_t status_rst_val = 0x0e;//reset status
     7aa:	8e e0       	ldi	r24, 0x0E	; 14
     7ac:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
     7ae:	41 e0       	ldi	r20, 0x01	; 1
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	be 01       	movw	r22, r28
     7b4:	6f 5f       	subi	r22, 0xFF	; 255
     7b6:	7f 4f       	sbci	r23, 0xFF	; 255
     7b8:	87 e0       	ldi	r24, 0x07	; 7
     7ba:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
     7be:	8b e0       	ldi	r24, 0x0B	; 11
     7c0:	8a 83       	std	Y+2, r24	; 0x02
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	be 01       	movw	r22, r28
     7c8:	6e 5f       	subi	r22, 0xFE	; 254
     7ca:	7f 4f       	sbci	r23, 0xFF	; 255
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_nrf24l01p_write_register>
	_nrf24l01p_disable_auto_ack_all_pipes();
     7d2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <_nrf24l01p_disable_auto_ack_all_pipes>
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
     7d6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_nrf24l01p_disable_dynamic_payload_all_pipe>
	_nrf24l01p_startup();
     7da:	0e 94 87 03 	call	0x70e	; 0x70e <_nrf24l01p_startup>
	
}
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <_nrf24l01p_write>:
	return flag;
}

volatile int mystat;

int _nrf24l01p_write(uint8_t *data, int datalen){
     7e8:	ef 92       	push	r14
     7ea:	ff 92       	push	r15
     7ec:	1f 93       	push	r17
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	7c 01       	movw	r14, r24
     7f4:	eb 01       	movw	r28, r22
	int originalCe = ce_value;//backup original ce_value
     7f6:	10 91 c1 24 	lds	r17, 0x24C1
	_nrf24l01p_ce_pin(0);//disable();
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	if ( datalen <= 0 ) return 0;
     800:	1c 16       	cp	r1, r28
     802:	1d 06       	cpc	r1, r29
     804:	94 f5       	brge	.+100    	; 0x86a <_nrf24l01p_write+0x82>
	if ( datalen > _NRF24L01P_TX_FIFO_SIZE ) datalen = _NRF24L01P_TX_FIFO_SIZE;
	
	_nrf24l01p_clear_data_sent_flag();
     806:	0e 94 1d 03 	call	0x63a	; 0x63a <_nrf24l01p_clear_data_sent_flag>
     80a:	be 01       	movw	r22, r28
     80c:	a1 97       	sbiw	r28, 0x21	; 33
     80e:	14 f0       	brlt	.+4      	; 0x814 <_nrf24l01p_write+0x2c>
     810:	60 e2       	ldi	r22, 0x20	; 32
     812:	70 e0       	ldi	r23, 0x00	; 0
	_nrf24l01p_write_tx_payload(data,datalen);
     814:	c7 01       	movw	r24, r14
     816:	0e 94 18 02 	call	0x430	; 0x430 <_nrf24l01p_write_tx_payload>
	
	int originalMode = mode; //backup mode
     81a:	c0 91 c2 24 	lds	r28, 0x24C2
	_nrf24l01p_tx_mode();
     81e:	0e 94 b9 02 	call	0x572	; 0x572 <_nrf24l01p_tx_mode>
	
	_nrf24l01p_ce_pin(1);//enable();
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
     828:	8a e6       	ldi	r24, 0x6A	; 106
     82a:	8a 95       	dec	r24
     82c:	f1 f7       	brne	.-4      	; 0x82a <_nrf24l01p_write+0x42>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <_nrf24l01p_write+0x48>
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     836:	07 c0       	rjmp	.+14     	; 0x846 <_nrf24l01p_write+0x5e>
		mystat = _nrf24l01p_get_status();
     838:	0e 94 47 02 	call	0x48e	; 0x48e <_nrf24l01p_get_status>
     83c:	80 93 c3 24 	sts	0x24C3, r24
     840:	90 93 c4 24 	sts	0x24C4, r25
		asm("nop");
     844:	00 00       	nop
	
	_nrf24l01p_ce_pin(1);//enable();
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
	
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     846:	0e 94 11 03 	call	0x622	; 0x622 <_nrf24l01p_get_data_sent_flag>
     84a:	88 23       	and	r24, r24
     84c:	a9 f3       	breq	.-22     	; 0x838 <_nrf24l01p_write+0x50>
		mystat = _nrf24l01p_get_status();
		asm("nop");
	}
	asm("nop");//UFFFFFFFFFF
     84e:	00 00       	nop
	_nrf24l01p_clear_data_sent_flag();
     850:	0e 94 1d 03 	call	0x63a	; 0x63a <_nrf24l01p_clear_data_sent_flag>
	if ( originalMode == _NRF24L01P_MODE_RX ) _nrf24l01p_rx_mode();//restore original mode
     854:	c3 30       	cpi	r28, 0x03	; 3
     856:	11 f4       	brne	.+4      	; 0x85c <_nrf24l01p_write+0x74>
     858:	0e 94 9a 02 	call	0x534	; 0x534 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(originalCe);//restore original CE pin status
     85c:	81 2f       	mov	r24, r17
     85e:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
     862:	8a e2       	ldi	r24, 0x2A	; 42
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <_nrf24l01p_write+0x7c>
     868:	00 c0       	rjmp	.+0      	; 0x86a <_nrf24l01p_write+0x82>
	_nrf24l01p_delay_us( _NRF24L01P_TIMING_Tpece2csn_us );
	
	return 0;
}
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	1f 91       	pop	r17
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	08 95       	ret

0000087a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     87a:	29 2f       	mov	r18, r25
     87c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     87e:	23 30       	cpi	r18, 0x03	; 3
     880:	31 05       	cpc	r19, r1
     882:	c9 f0       	breq	.+50     	; 0x8b6 <CALLBACK_USB_GetDescriptor+0x3c>
     884:	3c f4       	brge	.+14     	; 0x894 <CALLBACK_USB_GetDescriptor+0x1a>
     886:	21 30       	cpi	r18, 0x01	; 1
     888:	31 05       	cpc	r19, r1
     88a:	59 f0       	breq	.+22     	; 0x8a2 <CALLBACK_USB_GetDescriptor+0x28>
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	31 05       	cpc	r19, r1
     890:	69 f0       	breq	.+26     	; 0x8ac <CALLBACK_USB_GetDescriptor+0x32>
     892:	36 c0       	rjmp	.+108    	; 0x900 <CALLBACK_USB_GetDescriptor+0x86>
     894:	21 32       	cpi	r18, 0x21	; 33
     896:	31 05       	cpc	r19, r1
     898:	49 f1       	breq	.+82     	; 0x8ec <CALLBACK_USB_GetDescriptor+0x72>
     89a:	22 32       	cpi	r18, 0x22	; 34
     89c:	31 05       	cpc	r19, r1
     89e:	59 f1       	breq	.+86     	; 0x8f6 <CALLBACK_USB_GetDescriptor+0x7c>
     8a0:	2f c0       	rjmp	.+94     	; 0x900 <CALLBACK_USB_GetDescriptor+0x86>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     8a2:	82 e1       	ldi	r24, 0x12	; 18
     8a4:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     8a6:	2a e9       	ldi	r18, 0x9A	; 154
     8a8:	32 e0       	ldi	r19, 0x02	; 2
     8aa:	33 c0       	rjmp	.+102    	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     8ac:	82 e2       	ldi	r24, 0x22	; 34
     8ae:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     8b0:	28 e7       	ldi	r18, 0x78	; 120
     8b2:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     8b4:	2e c0       	rjmp	.+92     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
     8b6:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	91 05       	cpc	r25, r1
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <CALLBACK_USB_GetDescriptor+0x5a>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	91 05       	cpc	r25, r1
     8c2:	71 f0       	breq	.+28     	; 0x8e0 <CALLBACK_USB_GetDescriptor+0x66>
     8c4:	89 2b       	or	r24, r25
     8c6:	09 f5       	brne	.+66     	; 0x90a <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     8c8:	e4 e7       	ldi	r30, 0x74	; 116
     8ca:	f2 e0       	ldi	r31, 0x02	; 2
     8cc:	84 91       	lpm	r24, Z
     8ce:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     8d0:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     8d2:	1f c0       	rjmp	.+62     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     8d4:	ea e5       	ldi	r30, 0x5A	; 90
     8d6:	f2 e0       	ldi	r31, 0x02	; 2
     8d8:	84 91       	lpm	r24, Z
     8da:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     8dc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     8de:	19 c0       	rjmp	.+50     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     8e0:	ec e2       	ldi	r30, 0x2C	; 44
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	84 91       	lpm	r24, Z
     8e6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     8e8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     8ea:	13 c0       	rjmp	.+38     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     8f0:	2a e8       	ldi	r18, 0x8A	; 138
     8f2:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     8f4:	0e c0       	rjmp	.+28     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     8fa:	2c ea       	ldi	r18, 0xAC	; 172
     8fc:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(GenericReport);
			break;
     8fe:	09 c0       	rjmp	.+18     	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	04 c0       	rjmp	.+8      	; 0x912 <CALLBACK_USB_GetDescriptor+0x98>
	uint16_t    Size    = NO_DESCRIPTOR;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     912:	fa 01       	movw	r30, r20
     914:	20 83       	st	Z, r18
     916:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     918:	08 95       	ret

0000091a <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     91a:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     91c:	81 81       	ldd	r24, Z+1	; 0x01
     91e:	85 ff       	sbrs	r24, 5
     920:	fd cf       	rjmp	.-6      	; 0x91c <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     922:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     924:	81 81       	ldd	r24, Z+1	; 0x01
     926:	86 ff       	sbrs	r24, 6
     928:	fd cf       	rjmp	.-6      	; 0x924 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     92a:	80 e4       	ldi	r24, 0x40	; 64
     92c:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     92e:	80 81       	ld	r24, Z
}
     930:	08 95       	ret

00000932 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     938:	c0 ea       	ldi	r28, 0xA0	; 160
     93a:	d6 e0       	ldi	r29, 0x06	; 6
     93c:	18 e0       	ldi	r17, 0x08	; 8
     93e:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     940:	e0 e6       	ldi	r30, 0x60	; 96
     942:	f6 e0       	ldi	r31, 0x06	; 6
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     948:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     94a:	68 2f       	mov	r22, r24
     94c:	80 ea       	ldi	r24, 0xA0	; 160
     94e:	99 e0       	ldi	r25, 0x09	; 9
     950:	0e 94 8d 04 	call	0x91a	; 0x91a <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     954:	1d 83       	std	Y+5, r17	; 0x05
	
}
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	08 95       	ret

0000095e <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     96a:	c0 ea       	ldi	r28, 0xA0	; 160
     96c:	d6 e0       	ldi	r29, 0x06	; 6
     96e:	18 e0       	ldi	r17, 0x08	; 8
     970:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     972:	0f 2e       	mov	r0, r31
     974:	f0 e6       	ldi	r31, 0x60	; 96
     976:	ef 2e       	mov	r14, r31
     978:	f6 e0       	ldi	r31, 0x06	; 6
     97a:	ff 2e       	mov	r15, r31
     97c:	f0 2d       	mov	r31, r0
     97e:	01 e0       	ldi	r16, 0x01	; 1
     980:	f7 01       	movw	r30, r14
     982:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     984:	68 2f       	mov	r22, r24
     986:	80 ea       	ldi	r24, 0xA0	; 160
     988:	99 e0       	ldi	r25, 0x09	; 9
     98a:	0e 94 8d 04 	call	0x91a	; 0x91a <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     98e:	f7 01       	movw	r30, r14
     990:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     992:	1d 83       	std	Y+5, r17	; 0x05

}
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	08 95       	ret

000009a2 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     9a2:	87 70       	andi	r24, 0x07	; 7
     9a4:	80 6b       	ori	r24, 0xB0	; 176
     9a6:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
     9aa:	08 95       	ret

000009ac <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     9ac:	cf 93       	push	r28
     9ae:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     9b0:	98 2f       	mov	r25, r24
     9b2:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     9b4:	89 2f       	mov	r24, r25
     9b6:	82 95       	swap	r24
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	80 61       	ori	r24, 0x10	; 16
     9bc:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     9c0:	8c 2f       	mov	r24, r28
     9c2:	8f 70       	andi	r24, 0x0F	; 15
     9c4:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
}
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
     9d2:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     9d4:	8c 81       	ldd	r24, Y+4	; 0x04
     9d6:	8f 7e       	andi	r24, 0xEF	; 239
     9d8:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     9da:	a0 e6       	ldi	r26, 0x60	; 96
     9dc:	b6 e0       	ldi	r27, 0x06	; 6
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	11 96       	adiw	r26, 0x01	; 1
     9e2:	8c 93       	st	X, r24
     9e4:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     9e6:	15 96       	adiw	r26, 0x05	; 5
     9e8:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     9ea:	8d 81       	ldd	r24, Y+5	; 0x05
     9ec:	80 6c       	ori	r24, 0xC0	; 192
     9ee:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     9f0:	84 81       	ldd	r24, Z+4	; 0x04
     9f2:	8d 7f       	andi	r24, 0xFD	; 253
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	21 f4       	brne	.+8      	; 0xa00 <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	82 60       	ori	r24, 0x02	; 2
     9fc:	8d 83       	std	Y+5, r24	; 0x05
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     a00:	8d 81       	ldd	r24, Y+5	; 0x05
     a02:	8d 7f       	andi	r24, 0xFD	; 253
     a04:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     a06:	85 81       	ldd	r24, Z+5	; 0x05
     a08:	88 23       	and	r24, r24
     a0a:	21 f0       	breq	.+8      	; 0xa14 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     a0c:	8d 81       	ldd	r24, Y+5	; 0x05
     a0e:	84 60       	ori	r24, 0x04	; 4
     a10:	8d 83       	std	Y+5, r24	; 0x05
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	8b 7f       	andi	r24, 0xFB	; 251
     a18:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     a1a:	80 81       	ld	r24, Z
     a1c:	91 81       	ldd	r25, Z+1	; 0x01
     a1e:	a2 81       	ldd	r26, Z+2	; 0x02
     a20:	b3 81       	ldd	r27, Z+3	; 0x03
     a22:	9c 01       	movw	r18, r24
     a24:	ad 01       	movw	r20, r26
     a26:	22 0f       	add	r18, r18
     a28:	33 1f       	adc	r19, r19
     a2a:	44 1f       	adc	r20, r20
     a2c:	55 1f       	adc	r21, r21
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	78 e4       	ldi	r23, 0x48	; 72
     a32:	88 ee       	ldi	r24, 0xE8	; 232
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	0e 94 aa 11 	call	0x2354	; 0x2354 <__udivmodsi4>
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     a3e:	83 2f       	mov	r24, r19
     a40:	8f 70       	andi	r24, 0x0F	; 15
     a42:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     a44:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     a46:	8c 81       	ldd	r24, Y+4	; 0x04
     a48:	88 60       	ori	r24, 0x08	; 8
     a4a:	8c 83       	std	Y+4, r24	; 0x04

}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <ssd1306_init>:




void ssd1306_init(void)
{
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	00 d0       	rcall	.+0      	; 0xa58 <ssd1306_init+0x6>
     a58:	00 d0       	rcall	.+0      	; 0xa5a <ssd1306_init+0x8>
     a5a:	cd b7       	in	r28, 0x3d	; 61
     a5c:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     a5e:	20 ea       	ldi	r18, 0xA0	; 160
     a60:	36 e0       	ldi	r19, 0x06	; 6
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	d9 01       	movw	r26, r18
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     a6a:	a0 e6       	ldi	r26, 0x60	; 96
     a6c:	b6 e0       	ldi	r27, 0x06	; 6
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	9c 93       	st	X, r25
     a74:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTA,(1<<3));//reset
     a76:	e0 e0       	ldi	r30, 0x00	; 0
     a78:	f6 e0       	ldi	r31, 0x06	; 6
     a7a:	81 83       	std	Z+1, r24	; 0x01
	port_direction_set_mask(&PORTD,(1<<1));//sck
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	11 96       	adiw	r26, 0x01	; 1
     a80:	9c 93       	st	X, r25
     a82:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     a84:	11 96       	adiw	r26, 0x01	; 1
     a86:	8c 93       	st	X, r24
// 	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     a88:	d9 01       	movw	r26, r18
     a8a:	15 96       	adiw	r26, 0x05	; 5
     a8c:	8c 93       	st	X, r24
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     a8e:	86 83       	std	Z+6, r24	; 0x06
     a90:	ba e6       	ldi	r27, 0x6A	; 106
     a92:	ba 95       	dec	r27
     a94:	f1 f7       	brne	.-4      	; 0xa92 <ssd1306_init+0x40>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <ssd1306_init+0x46>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     a98:	85 83       	std	Z+5, r24	; 0x05
     a9a:	ea e6       	ldi	r30, 0x6A	; 106
     a9c:	ea 95       	dec	r30
     a9e:	f1 f7       	brne	.-4      	; 0xa9c <ssd1306_init+0x4a>
     aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <ssd1306_init+0x50>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     aa2:	e0 e7       	ldi	r30, 0x70	; 112
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	84 81       	ldd	r24, Z+4	; 0x04
     aa8:	8f 7e       	andi	r24, 0xEF	; 239
     aaa:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	9b e1       	ldi	r25, 0x1B	; 27
     ab0:	a7 eb       	ldi	r26, 0xB7	; 183
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	89 83       	std	Y+1, r24	; 0x01
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	ab 83       	std	Y+3, r26	; 0x03
     aba:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     abc:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     abe:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     ac0:	be 01       	movw	r22, r28
     ac2:	6f 5f       	subi	r22, 0xFF	; 255
     ac4:	7f 4f       	sbci	r23, 0xFF	; 255
     ac6:	80 ea       	ldi	r24, 0xA0	; 160
     ac8:	99 e0       	ldi	r25, 0x09	; 9
     aca:	0e 94 e6 04 	call	0x9cc	; 0x9cc <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     ace:	88 ea       	ldi	r24, 0xA8	; 168
     ad0:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     ad4:	8f e1       	ldi	r24, 0x1F	; 31
     ad6:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     ada:	83 ed       	ldi	r24, 0xD3	; 211
     adc:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x00);
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     ae6:	80 e4       	ldi	r24, 0x40	; 64
     ae8:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     aec:	81 ea       	ldi	r24, 0xA1	; 161
     aee:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     af2:	88 ec       	ldi	r24, 0xC8	; 200
     af4:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     af8:	8a ed       	ldi	r24, 0xDA	; 218
     afa:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x02);
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     b04:	81 e8       	ldi	r24, 0x81	; 129
     b06:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     b0a:	8f e8       	ldi	r24, 0x8F	; 143
     b0c:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     b10:	84 ea       	ldi	r24, 0xA4	; 164
     b12:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     b16:	86 ea       	ldi	r24, 0xA6	; 166
     b18:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     b1c:	85 ed       	ldi	r24, 0xD5	; 213
     b1e:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x80);
     b22:	80 e8       	ldi	r24, 0x80	; 128
     b24:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     b28:	8d e8       	ldi	r24, 0x8D	; 141
     b2a:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x14);
     b2e:	84 e1       	ldi	r24, 0x14	; 20
     b30:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     b34:	8b ed       	ldi	r24, 0xDB	; 219
     b36:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     b3a:	80 e4       	ldi	r24, 0x40	; 64
     b3c:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     b40:	89 ed       	ldi	r24, 0xD9	; 217
     b42:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     b46:	81 ef       	ldi	r24, 0xF1	; 241
     b48:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     b4c:	8f ea       	ldi	r24, 0xAF	; 175
     b4e:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
}
     b52:	26 96       	adiw	r28, 0x06	; 6
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	08 95       	ret

00000b5e <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     b5e:	ef 92       	push	r14
     b60:	ff 92       	push	r15
     b62:	0f 93       	push	r16
     b64:	1f 93       	push	r17
     b66:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     b68:	dc 01       	movw	r26, r24
     b6a:	ec 91       	ld	r30, X
     b6c:	ee 23       	and	r30, r30
     b6e:	29 f1       	breq	.+74     	; 0xbba <ssd1306_write_text+0x5c>
     b70:	7c 01       	movw	r14, r24
     b72:	bf ef       	ldi	r27, 0xFF	; 255
     b74:	eb 1a       	sub	r14, r27
     b76:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     b78:	ef 37       	cpi	r30, 0x7F	; 127
     b7a:	d0 f4       	brcc	.+52     	; 0xbb0 <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ee 0f       	add	r30, r30
     b80:	ff 1f       	adc	r31, r31
     b82:	ef 56       	subi	r30, 0x6F	; 111
     b84:	fe 4d       	sbci	r31, 0xDE	; 222
     b86:	00 81       	ld	r16, Z
     b88:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 81       	ld	r24, Z
     b8e:	88 23       	and	r24, r24
     b90:	61 f0       	breq	.+24     	; 0xbaa <ssd1306_write_text+0x4c>
     b92:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     b94:	f8 01       	movw	r30, r16
     b96:	ec 0f       	add	r30, r28
     b98:	f1 1d       	adc	r31, r1
     b9a:	80 81       	ld	r24, Z
     b9c:	0e 94 af 04 	call	0x95e	; 0x95e <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     ba0:	cf 5f       	subi	r28, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	9c 91       	ld	r25, X
     ba6:	9c 17       	cp	r25, r28
     ba8:	a8 f7       	brcc	.-22     	; 0xb94 <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 af 04 	call	0x95e	; 0x95e <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     bb0:	d7 01       	movw	r26, r14
     bb2:	ed 91       	ld	r30, X+
     bb4:	7d 01       	movw	r14, r26
     bb6:	e1 11       	cpse	r30, r1
     bb8:	df cf       	rjmp	.-66     	; 0xb78 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	08 95       	ret

00000bc6 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     bc6:	20 e8       	ldi	r18, 0x80	; 128
     bc8:	82 9f       	mul	r24, r18
     bca:	c0 01       	movw	r24, r0
     bcc:	11 24       	eor	r1, r1
     bce:	86 0f       	add	r24, r22
     bd0:	91 1d       	adc	r25, r1
     bd2:	e0 91 ba 22 	lds	r30, 0x22BA
     bd6:	f0 91 bb 22 	lds	r31, 0x22BB
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	40 83       	st	Z, r20
     be0:	08 95       	ret

00000be2 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     be2:	20 e8       	ldi	r18, 0x80	; 128
     be4:	82 9f       	mul	r24, r18
     be6:	c0 01       	movw	r24, r0
     be8:	11 24       	eor	r1, r1
     bea:	86 0f       	add	r24, r22
     bec:	91 1d       	adc	r25, r1
     bee:	e0 91 ba 22 	lds	r30, 0x22BA
     bf2:	f0 91 bb 22 	lds	r31, 0x22BB
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
}
     bfa:	80 81       	ld	r24, Z
     bfc:	08 95       	ret

00000bfe <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	18 2f       	mov	r17, r24
     c06:	d6 2f       	mov	r29, r22
     c08:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     c0a:	21 11       	cpse	r18, r1
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <gfx_mono_ssd1306_put_byte+0x18>
     c0e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <gfx_mono_framebuffer_get_byte>
     c12:	8c 17       	cp	r24, r28
     c14:	71 f0       	breq	.+28     	; 0xc32 <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     c16:	4c 2f       	mov	r20, r28
     c18:	6d 2f       	mov	r22, r29
     c1a:	81 2f       	mov	r24, r17
     c1c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     c20:	81 2f       	mov	r24, r17
     c22:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     c26:	8d 2f       	mov	r24, r29
     c28:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ssd1306_set_column_address>

	ssd1306_write_data(data);
     c2c:	8c 2f       	mov	r24, r28
     c2e:	0e 94 af 04 	call	0x95e	; 0x95e <ssd1306_write_data>
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	08 95       	ret

00000c3a <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
     c3e:	e0 e5       	ldi	r30, 0x50	; 80
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 e1       	ldi	r24, 0x10	; 16
     c44:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
     c46:	80 81       	ld	r24, Z
     c48:	80 61       	ori	r24, 0x10	; 16
     c4a:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
     c4c:	81 81       	ldd	r24, Z+1	; 0x01
     c4e:	84 ff       	sbrs	r24, 4
     c50:	fd cf       	rjmp	.-6      	; 0xc4c <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     c52:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
     c54:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
     c56:	a0 e4       	ldi	r26, 0x40	; 64
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	94 e0       	ldi	r25, 0x04	; 4
     c5c:	28 ed       	ldi	r18, 0xD8	; 216
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	1b be       	out	0x3b, r1	; 59
     c62:	fd 01       	movw	r30, r26
     c64:	24 bf       	out	0x34, r18	; 52
     c66:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     c68:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6a:	8f e3       	ldi	r24, 0x3F	; 63
     c6c:	9f e1       	ldi	r25, 0x1F	; 31
     c6e:	01 97       	sbiw	r24, 0x01	; 1
     c70:	f1 f7       	brne	.-4      	; 0xc6e <SetupHardware+0x34>
     c72:	00 c0       	rjmp	.+0      	; 0xc74 <SetupHardware+0x3a>
     c74:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
     c76:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
     c78:	e0 e5       	ldi	r30, 0x50	; 80
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	82 60       	ori	r24, 0x02	; 2
     c80:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
     c82:	81 81       	ldd	r24, Z+1	; 0x01
     c84:	81 ff       	sbrs	r24, 1
     c86:	fd cf       	rjmp	.-6      	; 0xc82 <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
     c88:	e0 e5       	ldi	r30, 0x50	; 80
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	86 81       	ldd	r24, Z+6	; 0x06
     c8e:	84 60       	ori	r24, 0x04	; 4
     c90:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
     c92:	a0 e6       	ldi	r26, 0x60	; 96
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	8b e1       	ldi	r24, 0x1B	; 27
     c98:	15 96       	adiw	r26, 0x05	; 5
     c9a:	8c 93       	st	X, r24
     c9c:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
     c9e:	87 eb       	ldi	r24, 0xB7	; 183
     ca0:	16 96       	adiw	r26, 0x06	; 6
     ca2:	8c 93       	st	X, r24
     ca4:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
     ca6:	c0 ec       	ldi	r28, 0xC0	; 192
     ca8:	d1 e0       	ldi	r29, 0x01	; 1
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
     cae:	ed e1       	ldi	r30, 0x1D	; 29
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	e4 91       	lpm	r30, Z
     cb4:	12 96       	adiw	r26, 0x02	; 2
     cb6:	ec 93       	st	X, r30
     cb8:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
     cba:	ec e1       	ldi	r30, 0x1C	; 28
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	e4 91       	lpm	r30, Z
     cc0:	13 96       	adiw	r26, 0x03	; 3
     cc2:	ec 93       	st	X, r30
     cc4:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
     cc6:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
     cd2:	e0 ee       	ldi	r30, 0xE0	; 224
     cd4:	f7 e0       	ldi	r31, 0x07	; 7
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
     cda:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
     cdc:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
     ce4:	e0 e6       	ldi	r30, 0x60	; 96
     ce6:	f6 e0       	ldi	r31, 0x06	; 6
     ce8:	90 e3       	ldi	r25, 0x30	; 48
     cea:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
     cec:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
     cee:	84 8b       	std	Z+20, r24	; 0x14

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     cf0:	0e 94 6d 10 	call	0x20da	; 0x20da <USB_Init>
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	60 97       	sbiw	r28, 0x10	; 16
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	de bf       	out	0x3e, r29	; 62
	rtc_initialize();
     d08:	0e 94 1a 11 	call	0x2234	; 0x2234 <rtc_initialize>
	
	DigitalPin_t led = {&PORTR, 0};
     d0c:	80 ee       	ldi	r24, 0xE0	; 224
     d0e:	97 e0       	ldi	r25, 0x07	; 7
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	9a 83       	std	Y+2, r25	; 0x02
     d14:	1b 82       	std	Y+3, r1	; 0x03
	
	
	
	
	
	_nrf24l01p_init();
     d16:	0e 94 ba 03 	call	0x774	; 0x774 <_nrf24l01p_init>
	_nrf24l01p_enable_dynamic_payload();
     d1a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_nrf24l01p_enable_dynamic_payload>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P0);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P1);
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P2);
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P3);
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P4);
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P5);
     d3c:	85 e0       	ldi	r24, 0x05	; 5
     d3e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <_nrf24l01p_enable_rx_on_pipe>
	
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P0);
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P1);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P2);
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P3);
     d54:	83 e0       	ldi	r24, 0x03	; 3
     d56:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P4);
     d5a:	84 e0       	ldi	r24, 0x04	; 4
     d5c:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P5);
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	0e 94 32 03 	call	0x664	; 0x664 <_nrf24l01p_enable_dynamic_payload_pipe>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     d66:	8c eb       	ldi	r24, 0xBC	; 188
     d68:	92 e2       	ldi	r25, 0x22	; 34
     d6a:	80 93 ba 22 	sts	0x22BA, r24
     d6e:	90 93 bb 22 	sts	0x22BB, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
     d72:	0e 94 29 05 	call	0xa52	; 0xa52 <ssd1306_init>
	asm("nop");
     d76:	00 00       	nop
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     d78:	00 e0       	ldi	r16, 0x00	; 0
	{
		ssd1306_set_page_address(page);
     d7a:	80 2f       	mov	r24, r16
     d7c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0e 94 d6 04 	call	0x9ac	; 0x9ac <ssd1306_set_column_address>
     d86:	10 e0       	ldi	r17, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 af 04 	call	0x95e	; 0x95e <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
     d8e:	1f 5f       	subi	r17, 0xFF	; 255
     d90:	10 38       	cpi	r17, 0x80	; 128
     d92:	d1 f7       	brne	.-12     	; 0xd88 <main+0x8e>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     d94:	0f 5f       	subi	r16, 0xFF	; 255
     d96:	04 30       	cpi	r16, 0x04	; 4
     d98:	81 f7       	brne	.-32     	; 0xd7a <main+0x80>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
     d9a:	80 e4       	ldi	r24, 0x40	; 64
     d9c:	0e 94 99 04 	call	0x932	; 0x932 <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     da0:	00 e0       	ldi	r16, 0x00	; 0
     da2:	0c c0       	rjmp	.+24     	; 0xdbc <main+0xc2>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	61 2f       	mov	r22, r17
     daa:	80 2f       	mov	r24, r16
     dac:	0e 94 ff 05 	call	0xbfe	; 0xbfe <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     db0:	1f 5f       	subi	r17, 0xFF	; 255
     db2:	10 38       	cpi	r17, 0x80	; 128
     db4:	b9 f7       	brne	.-18     	; 0xda4 <main+0xaa>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     db6:	0f 5f       	subi	r16, 0xFF	; 255
     db8:	04 30       	cpi	r16, 0x04	; 4
     dba:	11 f0       	breq	.+4      	; 0xdc0 <main+0xc6>
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
     dbc:	10 e0       	ldi	r17, 0x00	; 0
     dbe:	f2 cf       	rjmp	.-28     	; 0xda4 <main+0xaa>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
     dc0:	00 00       	nop
	ssd1306_set_page_address(0);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
     dc8:	8f e9       	ldi	r24, 0x9F	; 159
     dca:	92 e2       	ldi	r25, 0x22	; 34
     dcc:	0e 94 af 05 	call	0xb5e	; 0xb5e <ssd1306_write_text>


	
 	SetupHardware();
     dd0:	0e 94 1d 06 	call	0xc3a	; 0xc3a <SetupHardware>
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     dd4:	83 e0       	ldi	r24, 0x03	; 3
     dd6:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     dda:	80 e3       	ldi	r24, 0x30	; 48
     ddc:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     de6:	10 92 65 06 	sts	0x0665, r1
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
     dea:	78 94       	sei
// 
 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	GlobalInterruptEnable();

	DigitalPin_SetDIr(&led,1);
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	0e 94 b3 07 	call	0xf66	; 0xf66 <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
     df6:	e0 e5       	ldi	r30, 0x50	; 80
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     e00:	81 81       	ldd	r24, Z+1	; 0x01
     e02:	81 ff       	sbrs	r24, 1
     e04:	fd cf       	rjmp	.-6      	; 0xe00 <main+0x106>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <CLKSYS_Disable>

			
 			//PORT_TogglePins(&PORTR,(1<<0));
			 //_delay_ms(1000);
			 rtc_ms_delay(500);
 			char myname[] = "cctv yaw 6.9";
     e12:	0f 2e       	mov	r0, r31
     e14:	fd e0       	ldi	r31, 0x0D	; 13
     e16:	ff 2e       	mov	r15, r31
     e18:	f0 2d       	mov	r31, r0
     e1a:	8e 01       	movw	r16, r28
     e1c:	0c 5f       	subi	r16, 0xFC	; 252
     e1e:	1f 4f       	sbci	r17, 0xFF	; 255
	{

			
 			//PORT_TogglePins(&PORTR,(1<<0));
			 //_delay_ms(1000);
			 rtc_ms_delay(500);
     e20:	84 ef       	ldi	r24, 0xF4	; 244
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 32 11 	call	0x2264	; 0x2264 <rtc_ms_delay>
 			char myname[] = "cctv yaw 6.9";
     e28:	e4 ea       	ldi	r30, 0xA4	; 164
     e2a:	f2 e2       	ldi	r31, 0x22	; 34
     e2c:	d8 01       	movw	r26, r16
     e2e:	8f 2d       	mov	r24, r15
     e30:	01 90       	ld	r0, Z+
     e32:	0d 92       	st	X+, r0
     e34:	8a 95       	dec	r24
     e36:	e1 f7       	brne	.-8      	; 0xe30 <main+0x136>
			_nrf24l01p_write((uint8_t*) myname, strlen(myname));
     e38:	f8 01       	movw	r30, r16
     e3a:	01 90       	ld	r0, Z+
     e3c:	00 20       	and	r0, r0
     e3e:	e9 f7       	brne	.-6      	; 0xe3a <main+0x140>
     e40:	31 97       	sbiw	r30, 0x01	; 1
     e42:	bf 01       	movw	r22, r30
     e44:	60 1b       	sub	r22, r16
     e46:	71 0b       	sbc	r23, r17
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <_nrf24l01p_write>

		
 			HID_Device_USBTask(&Generic_HID_Interface);
     e4e:	8f e8       	ldi	r24, 0x8F	; 143
     e50:	92 e2       	ldi	r25, 0x22	; 34
     e52:	0e 94 c7 09 	call	0x138e	; 0x138e <HID_Device_USBTask>
 			USB_USBTask();
     e56:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <USB_USBTask>
	}
     e5a:	e2 cf       	rjmp	.-60     	; 0xe20 <main+0x126>

00000e5c <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e5c:	83 e0       	ldi	r24, 0x03	; 3
     e5e:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e62:	80 e3       	ldi	r24, 0x30	; 48
     e64:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e6e:	80 e1       	ldi	r24, 0x10	; 16
     e70:	80 93 65 06 	sts	0x0665, r24
     e74:	08 95       	ret

00000e76 <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e7c:	80 e3       	ldi	r24, 0x30	; 48
     e7e:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e88:	10 92 65 06 	sts	0x0665, r1
     e8c:	08 95       	ret

00000e8e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     e8e:	8f e8       	ldi	r24, 0x8F	; 143
     e90:	92 e2       	ldi	r25, 0x22	; 34
     e92:	0e 94 b2 09 	call	0x1364	; 0x1364 <HID_Device_ConfigureEndpoints>
			 *  \note This function is not available when the \c NO_SOF_EVENTS compile time token is defined.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB.INTCTRLA |=  USB_SOFIE_bm;
     e96:	e0 ec       	ldi	r30, 0xC0	; 192
     e98:	f4 e0       	ldi	r31, 0x04	; 4
     e9a:	90 85       	ldd	r25, Z+8	; 0x08
     e9c:	90 68       	ori	r25, 0x80	; 128
     e9e:	90 87       	std	Z+8, r25	; 0x08

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     ea0:	81 11       	cpse	r24, r1
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     ea4:	81 e1       	ldi	r24, 0x11	; 17
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <EVENT_USB_Device_ConfigurationChanged+0x1c>
     ea8:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     eb0:	90 e3       	ldi	r25, 0x30	; 48
     eb2:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     eb6:	98 2f       	mov	r25, r24
     eb8:	93 70       	andi	r25, 0x03	; 3
     eba:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     ebe:	80 73       	andi	r24, 0x30	; 48
     ec0:	80 93 65 06 	sts	0x0665, r24
     ec4:	08 95       	ret

00000ec6 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     ec6:	8f e8       	ldi	r24, 0x8F	; 143
     ec8:	92 e2       	ldi	r25, 0x22	; 34
     eca:	0e 94 91 08 	call	0x1122	; 0x1122 <HID_Device_ProcessControlRequest>
     ece:	08 95       	ret

00000ed0 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     ed0:	80 91 9d 22 	lds	r24, 0x229D
     ed4:	90 91 9e 22 	lds	r25, 0x229E
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	29 f0       	breq	.+10     	; 0xee6 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	80 93 9d 22 	sts	0x229D, r24
     ee2:	90 93 9e 22 	sts	0x229E, r25
     ee6:	08 95       	ret

00000ee8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     ee8:	0f 93       	push	r16
     eea:	1f 93       	push	r17
     eec:	f9 01       	movw	r30, r18
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return ((PORTR_OUT & LEDS_PORTR_LEDS) | (PORTD_OUT & LEDS_PORTD_LEDS));
     eee:	80 91 e4 07 	lds	r24, 0x07E4
     ef2:	90 91 64 06 	lds	r25, 0x0664
     ef6:	90 73       	andi	r25, 0x30	; 48
     ef8:	83 70       	andi	r24, 0x03	; 3
     efa:	89 2b       	or	r24, r25
	uint8_t* Data        = (uint8_t*)ReportData;
	uint8_t  CurrLEDMask = LEDs_GetLEDs();

	Data[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
     efc:	98 2f       	mov	r25, r24
     efe:	91 70       	andi	r25, 0x01	; 1
     f00:	90 83       	st	Z, r25
	Data[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
     f02:	81 fb       	bst	r24, 1
     f04:	99 27       	eor	r25, r25
     f06:	90 f9       	bld	r25, 0
     f08:	91 83       	std	Z+1, r25	; 0x01
	Data[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
     f0a:	84 fb       	bst	r24, 4
     f0c:	99 27       	eor	r25, r25
     f0e:	90 f9       	bld	r25, 0
     f10:	92 83       	std	Z+2, r25	; 0x02
	Data[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
     f12:	82 95       	swap	r24
     f14:	86 95       	lsr	r24
     f16:	87 70       	andi	r24, 0x07	; 7
     f18:	83 83       	std	Z+3, r24	; 0x03

	*ReportSize = GENERIC_REPORT_SIZE;
     f1a:	88 e0       	ldi	r24, 0x08	; 8
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	f8 01       	movw	r30, r16
     f20:	80 83       	st	Z, r24
     f22:	91 83       	std	Z+1, r25	; 0x01
	return false;
}
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	1f 91       	pop	r17
     f28:	0f 91       	pop	r16
     f2a:	08 95       	ret

00000f2c <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     f2c:	f9 01       	movw	r30, r18
	uint8_t* Data       = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;

	if (Data[0])
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 81       	ld	r25, Z
     f32:	91 11       	cpse	r25, r1
     f34:	01 c0       	rjmp	.+2      	; 0xf38 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
     f36:	80 e0       	ldi	r24, 0x00	; 0
	  NewLEDMask |= LEDS_LED1;

	if (Data[1])
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED2;
     f3c:	82 60       	ori	r24, 0x02	; 2

	if (Data[2])
     f3e:	92 81       	ldd	r25, Z+2	; 0x02
     f40:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED3;
     f42:	80 61       	ori	r24, 0x10	; 16

	if (Data[3])
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED4;
     f48:	80 62       	ori	r24, 0x20	; 32
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     f4a:	93 e0       	ldi	r25, 0x03	; 3
     f4c:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     f50:	90 e3       	ldi	r25, 0x30	; 48
     f52:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     f56:	98 2f       	mov	r25, r24
     f58:	93 70       	andi	r25, 0x03	; 3
     f5a:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     f5e:	80 73       	andi	r24, 0x30	; 48
     f60:	80 93 65 06 	sts	0x0665, r24
     f64:	08 95       	ret

00000f66 <DigitalPin_SetDIr>:
	SREG = sreg;	
}


void DigitalPin_SetDIr(DigitalPin_t *pin , bool dir){
	if(dir) pin->_port->DIRSET = (1<< pin->_pin);
     f66:	66 23       	and	r22, r22
     f68:	79 f0       	breq	.+30     	; 0xf88 <DigitalPin_SetDIr+0x22>
     f6a:	dc 01       	movw	r26, r24
     f6c:	ed 91       	ld	r30, X+
     f6e:	fc 91       	ld	r31, X
     f70:	11 97       	sbiw	r26, 0x01	; 1
     f72:	21 e0       	ldi	r18, 0x01	; 1
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	a9 01       	movw	r20, r18
     f78:	12 96       	adiw	r26, 0x02	; 2
     f7a:	0c 90       	ld	r0, X
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <DigitalPin_SetDIr+0x1c>
     f7e:	44 0f       	add	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <DigitalPin_SetDIr+0x18>
     f86:	41 83       	std	Z+1, r20	; 0x01
     f88:	08 95       	ret

00000f8a <DigitalPin_SetValue>:
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
     f8a:	dc 01       	movw	r26, r24
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	11 97       	sbiw	r26, 0x01	; 1
     f92:	21 e0       	ldi	r18, 0x01	; 1
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	12 96       	adiw	r26, 0x02	; 2
     f9a:	0c 90       	ld	r0, X
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DigitalPin_SetValue+0x18>
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DigitalPin_SetValue+0x14>
     fa6:	45 83       	std	Z+5, r20	; 0x05
     fa8:	08 95       	ret

00000faa <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
     faa:	dc 01       	movw	r26, r24
     fac:	ed 91       	ld	r30, X+
     fae:	fc 91       	ld	r31, X
     fb0:	11 97       	sbiw	r26, 0x01	; 1
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	a9 01       	movw	r20, r18
     fb8:	12 96       	adiw	r26, 0x02	; 2
     fba:	0c 90       	ld	r0, X
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DigitalPin_ClearValue+0x18>
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DigitalPin_ClearValue+0x14>
     fc6:	46 83       	std	Z+6, r20	; 0x06
     fc8:	08 95       	ret

00000fca <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1

}
     fd4:	0f 90       	pop	r0
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	0f 90       	pop	r0
     fda:	1f 90       	pop	r1
     fdc:	18 95       	reti

00000fde <__vector_27>:

ISR(USARTC0_TXC_vect){
     fde:	1f 92       	push	r1
     fe0:	0f 92       	push	r0
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	0f 92       	push	r0
     fe6:	11 24       	eor	r1, r1
	
}
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_26>:

ISR(USARTC0_DRE_vect){
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
	
}
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
	
}
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_30>:

ISR(USARTC1_TXC_vect){
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
	
}
    1024:	0f 90       	pop	r0
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	0f 90       	pop	r0
    102a:	1f 90       	pop	r1
    102c:	18 95       	reti

0000102e <__vector_29>:

ISR(USARTC1_DRE_vect){
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
	
}
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
	
}
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
    1052:	1f 90       	pop	r1
    1054:	18 95       	reti

00001056 <__vector_90>:

ISR(USARTD0_TXC_vect){
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
	
}
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_89>:

ISR(USARTD0_DRE_vect){
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
	
}
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    107e:	1f 92       	push	r1
    1080:	0f 92       	push	r0
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	0f 92       	push	r0
    1086:	11 24       	eor	r1, r1
	
}
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_60>:

ISR(USARTE0_TXC_vect){
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
	
}
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti

000010a6 <__vector_59>:

ISR(USARTE0_DRE_vect){
    10a6:	1f 92       	push	r1
    10a8:	0f 92       	push	r0
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	0f 92       	push	r0
    10ae:	11 24       	eor	r1, r1
	
}
    10b0:	0f 90       	pop	r0
    10b2:	0f be       	out	0x3f, r0	; 63
    10b4:	0f 90       	pop	r0
    10b6:	1f 90       	pop	r1
    10b8:	18 95       	reti

000010ba <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    10ba:	0f 93       	push	r16
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	1f 92       	push	r1
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    10c6:	2f b7       	in	r18, 0x3f	; 63
    10c8:	29 83       	std	Y+1, r18	; 0x01
    10ca:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    10cc:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    10ce:	fc 01       	movw	r30, r24
    10d0:	08 ed       	ldi	r16, 0xD8	; 216
    10d2:	04 bf       	out	0x34, r16	; 52
    10d4:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	8f bf       	out	0x3f, r24	; 63
#endif
}
    10da:	0f 90       	pop	r0
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	0f 91       	pop	r16
    10e2:	08 95       	ret

000010e4 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    10e4:	e0 e5       	ldi	r30, 0x50	; 80
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	90 81       	ld	r25, Z
    10ea:	28 2f       	mov	r18, r24
    10ec:	20 95       	com	r18
    10ee:	92 23       	and	r25, r18
    10f0:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    10f2:	90 81       	ld	r25, Z
	return clkEnabled;
}
    10f4:	89 23       	and	r24, r25
    10f6:	08 95       	ret

000010f8 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	cf 93       	push	r28
    10fe:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    1100:	00 e4       	ldi	r16, 0x40	; 64
    1102:	10 e0       	ldi	r17, 0x00	; 0
    1104:	f8 01       	movw	r30, r16
    1106:	60 81       	ld	r22, Z
    1108:	68 7f       	andi	r22, 0xF8	; 248
    110a:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    110c:	80 e4       	ldi	r24, 0x40	; 64
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 5d 08 	call	0x10ba	; 0x10ba <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    1114:	f8 01       	movw	r30, r16
    1116:	80 81       	ld	r24, Z
	return clkCtrl;
}
    1118:	8c 23       	and	r24, r28
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1122:	5f 92       	push	r5
    1124:	6f 92       	push	r6
    1126:	7f 92       	push	r7
    1128:	8f 92       	push	r8
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	00 d0       	rcall	.+0      	; 0x1142 <HID_Device_ProcessControlRequest+0x20>
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1148:	ed b6       	in	r14, 0x3d	; 61
    114a:	fe b6       	in	r15, 0x3e	; 62
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    114c:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1150:	88 23       	and	r24, r24
    1152:	09 f4       	brne	.+2      	; 0x1156 <HID_Device_ProcessControlRequest+0x34>
    1154:	f2 c0       	rjmp	.+484    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1156:	f6 01       	movw	r30, r12
    1158:	20 81       	ld	r18, Z
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	80 91 ce 24 	lds	r24, 0x24CE
    1160:	90 91 cf 24 	lds	r25, 0x24CF
    1164:	82 17       	cp	r24, r18
    1166:	93 07       	cpc	r25, r19
    1168:	09 f0       	breq	.+2      	; 0x116c <HID_Device_ProcessControlRequest+0x4a>
    116a:	e7 c0       	rjmp	.+462    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
	  return;

	switch (USB_ControlRequest.bRequest)
    116c:	80 91 cb 24 	lds	r24, 0x24CB
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	09 f4       	brne	.+2      	; 0x1176 <HID_Device_ProcessControlRequest+0x54>
    1174:	8c c0       	rjmp	.+280    	; 0x128e <HID_Device_ProcessControlRequest+0x16c>
    1176:	30 f4       	brcc	.+12     	; 0x1184 <HID_Device_ProcessControlRequest+0x62>
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	71 f0       	breq	.+28     	; 0x1198 <HID_Device_ProcessControlRequest+0x76>
    117c:	82 30       	cpi	r24, 0x02	; 2
    117e:	09 f4       	brne	.+2      	; 0x1182 <HID_Device_ProcessControlRequest+0x60>
    1180:	c5 c0       	rjmp	.+394    	; 0x130c <HID_Device_ProcessControlRequest+0x1ea>
    1182:	db c0       	rjmp	.+438    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
    1184:	8a 30       	cpi	r24, 0x0A	; 10
    1186:	09 f4       	brne	.+2      	; 0x118a <HID_Device_ProcessControlRequest+0x68>
    1188:	a7 c0       	rjmp	.+334    	; 0x12d8 <HID_Device_ProcessControlRequest+0x1b6>
    118a:	8b 30       	cpi	r24, 0x0B	; 11
    118c:	09 f4       	brne	.+2      	; 0x1190 <HID_Device_ProcessControlRequest+0x6e>
    118e:	93 c0       	rjmp	.+294    	; 0x12b6 <HID_Device_ProcessControlRequest+0x194>
    1190:	89 30       	cpi	r24, 0x09	; 9
    1192:	09 f0       	breq	.+2      	; 0x1196 <HID_Device_ProcessControlRequest+0x74>
    1194:	d2 c0       	rjmp	.+420    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
    1196:	4a c0       	rjmp	.+148    	; 0x122c <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1198:	80 91 ca 24 	lds	r24, 0x24CA
    119c:	81 3a       	cpi	r24, 0xA1	; 161
    119e:	09 f0       	breq	.+2      	; 0x11a2 <HID_Device_ProcessControlRequest+0x80>
    11a0:	cc c0       	rjmp	.+408    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
    11a2:	ad b6       	in	r10, 0x3d	; 61
    11a4:	be b6       	in	r11, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    11aa:	ea ec       	ldi	r30, 0xCA	; 202
    11ac:	f4 e2       	ldi	r31, 0x24	; 36
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	13 81       	ldd	r17, Z+3	; 0x03
    11b2:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    11b4:	f6 01       	movw	r30, r12
    11b6:	80 85       	ldd	r24, Z+8	; 0x08
    11b8:	48 2f       	mov	r20, r24
    11ba:	50 e0       	ldi	r21, 0x00	; 0
    11bc:	8d b7       	in	r24, 0x3d	; 61
    11be:	9e b7       	in	r25, 0x3e	; 62
    11c0:	84 1b       	sub	r24, r20
    11c2:	95 0b       	sbc	r25, r21
    11c4:	8d bf       	out	0x3d, r24	; 61
    11c6:	9e bf       	out	0x3e, r25	; 62
    11c8:	ed b7       	in	r30, 0x3d	; 61
    11ca:	fe b7       	in	r31, 0x3e	; 62
    11cc:	31 96       	adiw	r30, 0x01	; 1
    11ce:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	cf 01       	movw	r24, r30
    11d6:	0e 94 09 12 	call	0x2412	; 0x2412 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    11da:	4f ef       	ldi	r20, 0xFF	; 255
    11dc:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    11de:	8e 01       	movw	r16, r28
    11e0:	0f 5f       	subi	r16, 0xFF	; 255
    11e2:	1f 4f       	sbci	r17, 0xFF	; 255
    11e4:	94 01       	movw	r18, r8
    11e6:	be 01       	movw	r22, r28
    11e8:	6d 5f       	subi	r22, 0xFD	; 253
    11ea:	7f 4f       	sbci	r23, 0xFF	; 255
    11ec:	c6 01       	movw	r24, r12
    11ee:	0e 94 74 07 	call	0xee8	; 0xee8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    11f2:	f6 01       	movw	r30, r12
    11f4:	86 81       	ldd	r24, Z+6	; 0x06
    11f6:	97 81       	ldd	r25, Z+7	; 0x07
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    11fc:	40 85       	ldd	r20, Z+8	; 0x08
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	b4 01       	movw	r22, r8
    1202:	0e 94 00 12 	call	0x2400	; 0x2400 <memcpy>
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

				Endpoint_ClearSETUP();
    120c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

				if (ReportID)
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	81 11       	cpse	r24, r1
				  Endpoint_Write_8(ReportID);
    1214:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1218:	69 81       	ldd	r22, Y+1	; 0x01
    121a:	7a 81       	ldd	r23, Y+2	; 0x02
    121c:	c4 01       	movw	r24, r8
    121e:	0e 94 4f 0c 	call	0x189e	; 0x189e <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
    1222:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>
    1226:	ad be       	out	0x3d, r10	; 61
    1228:	be be       	out	0x3e, r11	; 62
    122a:	87 c0       	rjmp	.+270    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    122c:	80 91 ca 24 	lds	r24, 0x24CA
    1230:	81 32       	cpi	r24, 0x21	; 33
    1232:	09 f0       	breq	.+2      	; 0x1236 <HID_Device_ProcessControlRequest+0x114>
    1234:	82 c0       	rjmp	.+260    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
    1236:	8d b6       	in	r8, 0x3d	; 61
    1238:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    123a:	ea ec       	ldi	r30, 0xCA	; 202
    123c:	f4 e2       	ldi	r31, 0x24	; 36
    123e:	06 81       	ldd	r16, Z+6	; 0x06
    1240:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1242:	72 80       	ldd	r7, Z+2	; 0x02
    1244:	63 80       	ldd	r6, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1246:	8d b7       	in	r24, 0x3d	; 61
    1248:	9e b7       	in	r25, 0x3e	; 62
    124a:	80 1b       	sub	r24, r16
    124c:	91 0b       	sbc	r25, r17
    124e:	8d bf       	out	0x3d, r24	; 61
    1250:	9e bf       	out	0x3e, r25	; 62
    1252:	ed b7       	in	r30, 0x3d	; 61
    1254:	fe b7       	in	r31, 0x3e	; 62
    1256:	31 96       	adiw	r30, 0x01	; 1
    1258:	5f 01       	movw	r10, r30

				Endpoint_ClearSETUP();
    125a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    125e:	b8 01       	movw	r22, r16
    1260:	c5 01       	movw	r24, r10
    1262:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
    1266:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    126a:	21 e0       	ldi	r18, 0x01	; 1
    126c:	71 10       	cpse	r7, r1
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <HID_Device_ProcessControlRequest+0x150>
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	02 1b       	sub	r16, r18
    1276:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1278:	2a 0d       	add	r18, r10
    127a:	3b 1d       	adc	r19, r11
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    127c:	4f ef       	ldi	r20, 0xFF	; 255
    127e:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1280:	67 2d       	mov	r22, r7
    1282:	c6 01       	movw	r24, r12
    1284:	0e 94 96 07 	call	0xf2c	; 0xf2c <CALLBACK_HID_Device_ProcessHIDReport>
    1288:	8d be       	out	0x3d, r8	; 61
    128a:	9e be       	out	0x3e, r9	; 62
    128c:	56 c0       	rjmp	.+172    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    128e:	80 91 ca 24 	lds	r24, 0x24CA
    1292:	81 3a       	cpi	r24, 0xA1	; 161
    1294:	09 f0       	breq	.+2      	; 0x1298 <HID_Device_ProcessControlRequest+0x176>
    1296:	51 c0       	rjmp	.+162    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    1298:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
				while (!(Endpoint_IsINReady()));
    129c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    12a0:	88 23       	and	r24, r24
    12a2:	e1 f3       	breq	.-8      	; 0x129c <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    12a4:	f6 01       	movw	r30, r12
    12a6:	81 85       	ldd	r24, Z+9	; 0x09
    12a8:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
				Endpoint_ClearIN();
    12ac:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    12b0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>
    12b4:	42 c0       	rjmp	.+132    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12b6:	80 91 ca 24 	lds	r24, 0x24CA
    12ba:	81 32       	cpi	r24, 0x21	; 33
    12bc:	f1 f5       	brne	.+124    	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    12be:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    12c2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    12c6:	90 91 cc 24 	lds	r25, 0x24CC
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	91 11       	cpse	r25, r1
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <HID_Device_ProcessControlRequest+0x1b0>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	f6 01       	movw	r30, r12
    12d4:	81 87       	std	Z+9, r24	; 0x09
    12d6:	31 c0       	rjmp	.+98     	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12d8:	80 91 ca 24 	lds	r24, 0x24CA
    12dc:	81 32       	cpi	r24, 0x21	; 33
    12de:	69 f5       	brne	.+90     	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    12e0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    12e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    12e8:	80 91 cc 24 	lds	r24, 0x24CC
    12ec:	90 91 cd 24 	lds	r25, 0x24CD
    12f0:	88 27       	eor	r24, r24
    12f2:	00 24       	eor	r0, r0
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	00 1c       	adc	r0, r0
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	00 1c       	adc	r0, r0
    1300:	89 2f       	mov	r24, r25
    1302:	90 2d       	mov	r25, r0
    1304:	f6 01       	movw	r30, r12
    1306:	84 87       	std	Z+12, r24	; 0x0c
    1308:	95 87       	std	Z+13, r25	; 0x0d
    130a:	17 c0       	rjmp	.+46     	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    130c:	80 91 ca 24 	lds	r24, 0x24CA
    1310:	81 3a       	cpi	r24, 0xA1	; 161
    1312:	99 f4       	brne	.+38     	; 0x133a <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    1314:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
				while (!(Endpoint_IsINReady()));
    1318:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    131c:	88 23       	and	r24, r24
    131e:	e1 f3       	breq	.-8      	; 0x1318 <HID_Device_ProcessControlRequest+0x1f6>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1320:	f6 01       	movw	r30, r12
    1322:	84 85       	ldd	r24, Z+12	; 0x0c
    1324:	95 85       	ldd	r25, Z+13	; 0x0d
    1326:	96 95       	lsr	r25
    1328:	87 95       	ror	r24
    132a:	96 95       	lsr	r25
    132c:	87 95       	ror	r24
    132e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
				Endpoint_ClearIN();
    1332:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    1336:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    133a:	ed be       	out	0x3d, r14	; 61
    133c:	fe be       	out	0x3e, r15	; 62
    133e:	23 96       	adiw	r28, 0x03	; 3
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	7f 90       	pop	r7
    135e:	6f 90       	pop	r6
    1360:	5f 90       	pop	r5
    1362:	08 95       	ret

00001364 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1364:	fc 01       	movw	r30, r24
    1366:	39 96       	adiw	r30, 0x09	; 9
    1368:	27 e0       	ldi	r18, 0x07	; 7
    136a:	df 01       	movw	r26, r30
    136c:	1d 92       	st	X+, r1
    136e:	2a 95       	dec	r18
    1370:	e9 f7       	brne	.-6      	; 0x136c <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1372:	21 e0       	ldi	r18, 0x01	; 1
    1374:	fc 01       	movw	r30, r24
    1376:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1378:	24 ef       	ldi	r18, 0xF4	; 244
    137a:	31 e0       	ldi	r19, 0x01	; 1
    137c:	24 87       	std	Z+12, r18	; 0x0c
    137e:	35 87       	std	Z+13, r19	; 0x0d

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1380:	23 e0       	ldi	r18, 0x03	; 3
    1382:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	01 96       	adiw	r24, 0x01	; 1
    1388:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    138c:	08 95       	ret

0000138e <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    138e:	5f 92       	push	r5
    1390:	6f 92       	push	r6
    1392:	7f 92       	push	r7
    1394:	8f 92       	push	r8
    1396:	9f 92       	push	r9
    1398:	af 92       	push	r10
    139a:	bf 92       	push	r11
    139c:	cf 92       	push	r12
    139e:	df 92       	push	r13
    13a0:	ef 92       	push	r14
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <HID_Device_USBTask+0x20>
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    13b4:	ad b6       	in	r10, 0x3d	; 61
    13b6:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    13b8:	80 91 c9 24 	lds	r24, 0x24C9
    13bc:	84 30       	cpi	r24, 0x04	; 4
    13be:	09 f0       	breq	.+2      	; 0x13c2 <HID_Device_USBTask+0x34>
    13c0:	9c c0       	rjmp	.+312    	; 0x14fa <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    13c2:	e0 91 c6 04 	lds	r30, 0x04C6
    13c6:	f0 91 c7 04 	lds	r31, 0x04C7
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    13ca:	d7 01       	movw	r26, r14
    13cc:	1a 96       	adiw	r26, 0x0a	; 10
    13ce:	2d 91       	ld	r18, X+
    13d0:	3c 91       	ld	r19, X
    13d2:	1b 97       	sbiw	r26, 0x0b	; 11
    13d4:	80 a1       	ldd	r24, Z+32	; 0x20
    13d6:	91 a1       	ldd	r25, Z+33	; 0x21
    13d8:	28 17       	cp	r18, r24
    13da:	39 07       	cpc	r19, r25
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <HID_Device_USBTask+0x52>
    13de:	8d c0       	rjmp	.+282    	; 0x14fa <HID_Device_USBTask+0x16c>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    13e0:	11 96       	adiw	r26, 0x01	; 1
    13e2:	8c 91       	ld	r24, X
    13e4:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    13e8:	80 91 d2 24 	lds	r24, 0x24D2
    13ec:	90 91 d3 24 	lds	r25, 0x24D3
    13f0:	fc 01       	movw	r30, r24
    13f2:	ef 5b       	subi	r30, 0xBF	; 191
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	20 81       	ld	r18, Z
    13f8:	31 97       	sbiw	r30, 0x01	; 1
    13fa:	80 81       	ld	r24, Z

	if (Endpoint_IsReadWriteAllowed())
    13fc:	28 17       	cp	r18, r24
    13fe:	08 f0       	brcs	.+2      	; 0x1402 <HID_Device_USBTask+0x74>
    1400:	7c c0       	rjmp	.+248    	; 0x14fa <HID_Device_USBTask+0x16c>
    1402:	8d b6       	in	r8, 0x3d	; 61
    1404:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1406:	f7 01       	movw	r30, r14
    1408:	40 85       	ldd	r20, Z+8	; 0x08
    140a:	50 e0       	ldi	r21, 0x00	; 0
    140c:	8d b7       	in	r24, 0x3d	; 61
    140e:	9e b7       	in	r25, 0x3e	; 62
    1410:	84 1b       	sub	r24, r20
    1412:	95 0b       	sbc	r25, r21
    1414:	8d bf       	out	0x3d, r24	; 61
    1416:	9e bf       	out	0x3e, r25	; 62
    1418:	ad b7       	in	r26, 0x3d	; 61
    141a:	be b7       	in	r27, 0x3e	; 62
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	6d 01       	movw	r12, r26
		uint8_t  ReportID     = 0;
    1420:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1422:	19 82       	std	Y+1, r1	; 0x01
    1424:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 09 12 	call	0x2412	; 0x2412 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1430:	8e 01       	movw	r16, r28
    1432:	0f 5f       	subi	r16, 0xFF	; 255
    1434:	1f 4f       	sbci	r17, 0xFF	; 255
    1436:	96 01       	movw	r18, r12
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	be 01       	movw	r22, r28
    143c:	6d 5f       	subi	r22, 0xFD	; 253
    143e:	7f 4f       	sbci	r23, 0xFF	; 255
    1440:	c7 01       	movw	r24, r14
    1442:	0e 94 74 07 	call	0xee8	; 0xee8 <CALLBACK_HID_Device_CreateHIDReport>
    1446:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1448:	f7 01       	movw	r30, r14
    144a:	84 85       	ldd	r24, Z+12	; 0x0c
    144c:	95 85       	ldd	r25, Z+13	; 0x0d
    144e:	89 2b       	or	r24, r25
    1450:	41 f0       	breq	.+16     	; 0x1462 <HID_Device_USBTask+0xd4>
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	26 85       	ldd	r18, Z+14	; 0x0e
    1456:	37 85       	ldd	r19, Z+15	; 0x0f
    1458:	23 2b       	or	r18, r19
    145a:	09 f0       	breq	.+2      	; 0x145e <HID_Device_USBTask+0xd0>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	78 2e       	mov	r7, r24
    1460:	01 c0       	rjmp	.+2      	; 0x1464 <HID_Device_USBTask+0xd6>
    1462:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1464:	d7 01       	movw	r26, r14
    1466:	16 96       	adiw	r26, 0x06	; 6
    1468:	0d 91       	ld	r16, X+
    146a:	1c 91       	ld	r17, X
    146c:	17 97       	sbiw	r26, 0x07	; 7
    146e:	01 15       	cp	r16, r1
    1470:	11 05       	cpc	r17, r1
    1472:	99 f0       	breq	.+38     	; 0x149a <HID_Device_USBTask+0x10c>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1474:	49 81       	ldd	r20, Y+1	; 0x01
    1476:	5a 81       	ldd	r21, Y+2	; 0x02
    1478:	b8 01       	movw	r22, r16
    147a:	c6 01       	movw	r24, r12
    147c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <memcmp>
    1480:	66 24       	eor	r6, r6
    1482:	63 94       	inc	r6
    1484:	89 2b       	or	r24, r25
    1486:	09 f4       	brne	.+2      	; 0x148a <HID_Device_USBTask+0xfc>
    1488:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    148a:	f7 01       	movw	r30, r14
    148c:	40 85       	ldd	r20, Z+8	; 0x08
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	b6 01       	movw	r22, r12
    1492:	c8 01       	movw	r24, r16
    1494:	0e 94 00 12 	call	0x2400	; 0x2400 <memcpy>
    1498:	01 c0       	rjmp	.+2      	; 0x149c <HID_Device_USBTask+0x10e>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    149a:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	9a 81       	ldd	r25, Y+2	; 0x02
    14a0:	89 2b       	or	r24, r25
    14a2:	01 f1       	breq	.+64     	; 0x14e4 <HID_Device_USBTask+0x156>
    14a4:	51 10       	cpse	r5, r1
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <HID_Device_USBTask+0x122>
    14a8:	61 10       	cpse	r6, r1
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <HID_Device_USBTask+0x122>
    14ac:	70 fe       	sbrs	r7, 0
    14ae:	1a c0       	rjmp	.+52     	; 0x14e4 <HID_Device_USBTask+0x156>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    14b0:	d7 01       	movw	r26, r14
    14b2:	1c 96       	adiw	r26, 0x0c	; 12
    14b4:	8d 91       	ld	r24, X+
    14b6:	9c 91       	ld	r25, X
    14b8:	1d 97       	sbiw	r26, 0x0d	; 13
    14ba:	1e 96       	adiw	r26, 0x0e	; 14
    14bc:	8d 93       	st	X+, r24
    14be:	9c 93       	st	X, r25
    14c0:	1f 97       	sbiw	r26, 0x0f	; 15

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    14c2:	11 96       	adiw	r26, 0x01	; 1
    14c4:	8c 91       	ld	r24, X
    14c6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

			if (ReportID)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 11       	cpse	r24, r1
			  Endpoint_Write_8(ReportID);
    14ce:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    14d2:	69 81       	ldd	r22, Y+1	; 0x01
    14d4:	7a 81       	ldd	r23, Y+2	; 0x02
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	50 e0       	ldi	r21, 0x00	; 0
    14da:	c6 01       	movw	r24, r12
    14dc:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
    14e0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
    14e4:	e0 91 c6 04 	lds	r30, 0x04C6
    14e8:	f0 91 c7 04 	lds	r31, 0x04C7
    14ec:	80 a1       	ldd	r24, Z+32	; 0x20
    14ee:	91 a1       	ldd	r25, Z+33	; 0x21
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    14f0:	f7 01       	movw	r30, r14
    14f2:	82 87       	std	Z+10, r24	; 0x0a
    14f4:	93 87       	std	Z+11, r25	; 0x0b
    14f6:	8d be       	out	0x3d, r8	; 61
    14f8:	9e be       	out	0x3e, r9	; 62
	}
}
    14fa:	ad be       	out	0x3d, r10	; 61
    14fc:	be be       	out	0x3e, r11	; 62
    14fe:	23 96       	adiw	r28, 0x03	; 3
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	ff 90       	pop	r15
    150e:	ef 90       	pop	r14
    1510:	df 90       	pop	r13
    1512:	cf 90       	pop	r12
    1514:	bf 90       	pop	r11
    1516:	af 90       	pop	r10
    1518:	9f 90       	pop	r9
    151a:	8f 90       	pop	r8
    151c:	7f 90       	pop	r7
    151e:	6f 90       	pop	r6
    1520:	5f 90       	pop	r5
    1522:	08 95       	ret

00001524 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	ea 97       	sbiw	r28, 0x3a	; 58
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0a ec       	ldi	r16, 0xCA	; 202
    153c:	14 e2       	ldi	r17, 0x24	; 36
    153e:	0f 2e       	mov	r0, r31
    1540:	f2 ed       	ldi	r31, 0xD2	; 210
    1542:	ef 2e       	mov	r14, r31
    1544:	f4 e2       	ldi	r31, 0x24	; 36
    1546:	ff 2e       	mov	r15, r31
    1548:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    154a:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Endpoint_Read_8>
    154e:	f8 01       	movw	r30, r16
    1550:	81 93       	st	Z+, r24
    1552:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1554:	ee 15       	cp	r30, r14
    1556:	ff 05       	cpc	r31, r15
    1558:	c1 f7       	brne	.-16     	; 0x154a <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    155a:	0e 94 63 07 	call	0xec6	; 0xec6 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    155e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1562:	88 23       	and	r24, r24
    1564:	09 f4       	brne	.+2      	; 0x1568 <USB_Device_ProcessControlRequest+0x44>
    1566:	13 c1       	rjmp	.+550    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1568:	ea ec       	ldi	r30, 0xCA	; 202
    156a:	f4 e2       	ldi	r31, 0x24	; 36
    156c:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    156e:	31 81       	ldd	r19, Z+1	; 0x01
    1570:	83 2f       	mov	r24, r19
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	8a 30       	cpi	r24, 0x0A	; 10
    1576:	91 05       	cpc	r25, r1
    1578:	08 f0       	brcs	.+2      	; 0x157c <USB_Device_ProcessControlRequest+0x58>
    157a:	09 c1       	rjmp	.+530    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
    157c:	fc 01       	movw	r30, r24
    157e:	88 27       	eor	r24, r24
    1580:	e2 50       	subi	r30, 0x02	; 2
    1582:	ff 4f       	sbci	r31, 0xFF	; 255
    1584:	8f 4f       	sbci	r24, 0xFF	; 255
    1586:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    158a:	20 38       	cpi	r18, 0x80	; 128
    158c:	21 f0       	breq	.+8      	; 0x1596 <USB_Device_ProcessControlRequest+0x72>
    158e:	22 38       	cpi	r18, 0x82	; 130
    1590:	09 f0       	breq	.+2      	; 0x1594 <USB_Device_ProcessControlRequest+0x70>
    1592:	fd c0       	rjmp	.+506    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
    1594:	08 c0       	rjmp	.+16     	; 0x15a6 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1596:	10 91 c6 24 	lds	r17, 0x24C6
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    159a:	80 91 c7 24 	lds	r24, 0x24C7
    159e:	88 23       	and	r24, r24
    15a0:	91 f0       	breq	.+36     	; 0x15c6 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15a2:	12 60       	ori	r17, 0x02	; 2
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15a6:	80 91 ce 24 	lds	r24, 0x24CE
    15aa:	8f 70       	andi	r24, 0x0F	; 15
    15ac:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    15b0:	e0 91 d4 24 	lds	r30, 0x24D4
    15b4:	f0 91 d5 24 	lds	r31, 0x24D5
    15b8:	11 81       	ldd	r17, Z+1	; 0x01
    15ba:	12 fb       	bst	r17, 2
    15bc:	11 27       	eor	r17, r17
    15be:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    15c6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    15ca:	81 2f       	mov	r24, r17
    15cc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    15d6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    15da:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>
    15de:	d7 c0       	rjmp	.+430    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15e0:	22 23       	and	r18, r18
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <USB_Device_ProcessControlRequest+0xc2>
    15e4:	dd c0       	rjmp	.+442    	; 0x17a0 <USB_Device_ProcessControlRequest+0x27c>
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	09 f0       	breq	.+2      	; 0x15ec <USB_Device_ProcessControlRequest+0xc8>
    15ea:	d1 c0       	rjmp	.+418    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
    15ec:	de c0       	rjmp	.+444    	; 0x17aa <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	33 30       	cpi	r19, 0x03	; 3
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <USB_Device_ProcessControlRequest+0xd2>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	80 93 c7 24 	sts	0x24C7, r24
    15fa:	25 c0       	rjmp	.+74     	; 0x1646 <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15fc:	e0 91 ce 24 	lds	r30, 0x24CE
    1600:	1e 2f       	mov	r17, r30
    1602:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1604:	09 f4       	brne	.+2      	; 0x1608 <USB_Device_ProcessControlRequest+0xe4>
    1606:	c3 c0       	rjmp	.+390    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    1608:	81 2f       	mov	r24, r17
    160a:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    160e:	80 91 cb 24 	lds	r24, 0x24CB
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	19 f4       	brne	.+6      	; 0x161c <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    1616:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Endpoint_StallTransaction>
    161a:	15 c0       	rjmp	.+42     	; 0x1646 <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    161c:	e0 91 d4 24 	lds	r30, 0x24D4
    1620:	f0 91 d5 24 	lds	r31, 0x24D5
    1624:	81 81       	ldd	r24, Z+1	; 0x01
    1626:	8b 7f       	andi	r24, 0xFB	; 251
    1628:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    162a:	24 e8       	ldi	r18, 0x84	; 132
    162c:	12 9f       	mul	r17, r18
    162e:	f0 01       	movw	r30, r0
    1630:	11 24       	eor	r1, r1
    1632:	e8 5e       	subi	r30, 0xE8	; 232
    1634:	fa 4d       	sbci	r31, 0xDA	; 218
    1636:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    1638:	e0 91 d4 24 	lds	r30, 0x24D4
    163c:	f0 91 d5 24 	lds	r31, 0x24D5
    1640:	80 81       	ld	r24, Z
    1642:	8e 7f       	andi	r24, 0xFE	; 254
    1644:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    164c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1650:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>
    1654:	9c c0       	rjmp	.+312    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1656:	21 11       	cpse	r18, r1
    1658:	9a c0       	rjmp	.+308    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    165a:	10 91 cc 24 	lds	r17, 0x24CC
    165e:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1660:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1664:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    1668:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    166c:	88 23       	and	r24, r24
    166e:	e1 f3       	breq	.-8      	; 0x1668 <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1670:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1674:	11 11       	cpse	r17, r1
    1676:	02 c0       	rjmp	.+4      	; 0x167c <USB_Device_ProcessControlRequest+0x158>
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	01 c0       	rjmp	.+2      	; 0x167e <USB_Device_ProcessControlRequest+0x15a>
    167c:	83 e0       	ldi	r24, 0x03	; 3
    167e:	80 93 c9 24 	sts	0x24C9, r24
    1682:	85 c0       	rjmp	.+266    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1684:	20 58       	subi	r18, 0x80	; 128
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	08 f0       	brcs	.+2      	; 0x168c <USB_Device_ProcessControlRequest+0x168>
    168a:	81 c0       	rjmp	.+258    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    168c:	80 91 cc 24 	lds	r24, 0x24CC
    1690:	90 91 cd 24 	lds	r25, 0x24CD
    1694:	8c 3d       	cpi	r24, 0xDC	; 220
    1696:	e3 e0       	ldi	r30, 0x03	; 3
    1698:	9e 07       	cpc	r25, r30
    169a:	b9 f5       	brne	.+110    	; 0x170a <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    169c:	83 e0       	ldi	r24, 0x03	; 3
    169e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16a0:	8a e3       	ldi	r24, 0x3A	; 58
    16a2:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    16a4:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    16a6:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    16a8:	ae 01       	movw	r20, r28
    16aa:	4d 5f       	subi	r20, 0xFD	; 253
    16ac:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16ae:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    16b0:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    16b2:	a0 ec       	ldi	r26, 0xC0	; 192
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	1a 96       	adiw	r26, 0x0a	; 10
    16ba:	6c 93       	st	X, r22
    16bc:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    16be:	e3 2f       	mov	r30, r19
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    16c4:	1a 96       	adiw	r26, 0x0a	; 10
    16c6:	1c 92       	st	X, r1
    16c8:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    16ca:	20 ff       	sbrs	r18, 0
    16cc:	03 c0       	rjmp	.+6      	; 0x16d4 <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    16ce:	82 95       	swap	r24
    16d0:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    16d2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    16d4:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16d6:	8a 30       	cpi	r24, 0x0A	; 10
    16d8:	18 f0       	brcs	.+6      	; 0x16e0 <USB_Device_ProcessControlRequest+0x1bc>
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	c7 96       	adiw	r24, 0x37	; 55
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <USB_Device_ProcessControlRequest+0x1c0>
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	c0 96       	adiw	r24, 0x30	; 48
    16e4:	fa 01       	movw	r30, r20
    16e6:	81 93       	st	Z+, r24
    16e8:	91 93       	st	Z+, r25
    16ea:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16ec:	2f 5f       	subi	r18, 0xFF	; 255
    16ee:	2c 31       	cpi	r18, 0x1C	; 28
    16f0:	19 f7       	brne	.-58     	; 0x16b8 <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    16f2:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    16f4:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    16f8:	6a e3       	ldi	r22, 0x3A	; 58
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	ce 01       	movw	r24, r28
    16fe:	01 96       	adiw	r24, 0x01	; 1
    1700:	0e 94 4f 0c 	call	0x189e	; 0x189e <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1704:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>
    1708:	42 c0       	rjmp	.+132    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    170a:	ae 01       	movw	r20, r28
    170c:	4f 5f       	subi	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	60 91 ce 24 	lds	r22, 0x24CE
    1714:	0e 94 3d 04 	call	0x87a	; 0x87a <CALLBACK_USB_GetDescriptor>
    1718:	8c 01       	movw	r16, r24
    171a:	89 2b       	or	r24, r25
    171c:	c1 f1       	breq	.+112    	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    171e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1722:	b8 01       	movw	r22, r16
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    172c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>
    1730:	2e c0       	rjmp	.+92     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1732:	20 38       	cpi	r18, 0x80	; 128
    1734:	61 f5       	brne	.+88     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1736:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    173a:	80 91 c5 24 	lds	r24, 0x24C5
    173e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
	Endpoint_ClearIN();
    1742:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1746:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>
    174a:	21 c0       	rjmp	.+66     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    174c:	21 11       	cpse	r18, r1
    174e:	1f c0       	rjmp	.+62     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1750:	80 91 cc 24 	lds	r24, 0x24CC
    1754:	82 30       	cpi	r24, 0x02	; 2
    1756:	d8 f4       	brcc	.+54     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1758:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    175c:	80 91 cc 24 	lds	r24, 0x24CC
    1760:	80 93 c5 24 	sts	0x24C5, r24

	Endpoint_ClearStatusStage();
    1764:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1768:	80 91 c5 24 	lds	r24, 0x24C5
    176c:	88 23       	and	r24, r24
    176e:	21 f0       	breq	.+8      	; 0x1778 <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1770:	84 e0       	ldi	r24, 0x04	; 4
    1772:	80 93 c9 24 	sts	0x24C9, r24
    1776:	09 c0       	rjmp	.+18     	; 0x178a <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1778:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    177c:	81 11       	cpse	r24, r1
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <USB_Device_ProcessControlRequest+0x260>
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <USB_Device_ProcessControlRequest+0x262>
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	80 93 c9 24 	sts	0x24C9, r24

	EVENT_USB_Device_ConfigurationChanged();
    178a:	0e 94 47 07 	call	0xe8e	; 0xe8e <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    178e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1792:	88 23       	and	r24, r24
    1794:	81 f0       	breq	.+32     	; 0x17b6 <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    1796:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    179a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <Endpoint_StallTransaction>
    179e:	0b c0       	rjmp	.+22     	; 0x17b6 <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    17a0:	80 91 cc 24 	lds	r24, 0x24CC
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	99 f7       	brne	.-26     	; 0x178e <USB_Device_ProcessControlRequest+0x26a>
    17a8:	22 cf       	rjmp	.-444    	; 0x15ee <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    17aa:	80 91 cc 24 	lds	r24, 0x24CC
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <USB_Device_ProcessControlRequest+0x290>
    17b2:	24 cf       	rjmp	.-440    	; 0x15fc <USB_Device_ProcessControlRequest+0xd8>
    17b4:	48 cf       	rjmp	.-368    	; 0x1646 <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    17b6:	ea 96       	adiw	r28, 0x3a	; 58
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	ff 90       	pop	r15
    17c6:	ef 90       	pop	r14
    17c8:	08 95       	ret

000017ca <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    17ca:	08 95       	ret

000017cc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    17cc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    17ce:	80 91 c9 24 	lds	r24, 0x24C9
    17d2:	88 23       	and	r24, r24
    17d4:	69 f0       	breq	.+26     	; 0x17f0 <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    17d6:	c0 91 d6 24 	lds	r28, 0x24D6
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    17e0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    17e4:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    17e6:	0e 94 92 0a 	call	0x1524	; 0x1524 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    17ea:	8c 2f       	mov	r24, r28
    17ec:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17f4:	cf 92       	push	r12
    17f6:	df 92       	push	r13
    17f8:	ef 92       	push	r14
    17fa:	ff 92       	push	r15
    17fc:	0f 93       	push	r16
    17fe:	1f 93       	push	r17
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    1804:	8c 01       	movw	r16, r24
    1806:	eb 01       	movw	r28, r22
    1808:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    180a:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_WaitUntilReady>
    180e:	81 11       	cpse	r24, r1
    1810:	3d c0       	rjmp	.+122    	; 0x188c <Endpoint_Write_Stream_LE+0x98>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1812:	c1 14       	cp	r12, r1
    1814:	d1 04       	cpc	r13, r1
    1816:	39 f0       	breq	.+14     	; 0x1826 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    1818:	f6 01       	movw	r30, r12
    181a:	80 81       	ld	r24, Z
    181c:	91 81       	ldd	r25, Z+1	; 0x01
    181e:	c8 1b       	sub	r28, r24
    1820:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1822:	08 0f       	add	r16, r24
    1824:	19 1f       	adc	r17, r25
	}

	while (Length)
    1826:	20 97       	sbiw	r28, 0x00	; 0
    1828:	81 f1       	breq	.+96     	; 0x188a <Endpoint_Write_Stream_LE+0x96>
    182a:	e1 2c       	mov	r14, r1
    182c:	f1 2c       	mov	r15, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    182e:	20 91 d2 24 	lds	r18, 0x24D2
    1832:	30 91 d3 24 	lds	r19, 0x24D3
    1836:	f9 01       	movw	r30, r18
    1838:	ef 5b       	subi	r30, 0xBF	; 191
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	90 81       	ld	r25, Z
    183e:	31 97       	sbiw	r30, 0x01	; 1
    1840:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1842:	98 17       	cp	r25, r24
    1844:	a8 f0       	brcs	.+42     	; 0x1870 <Endpoint_Write_Stream_LE+0x7c>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    1846:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    184a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    184e:	c1 14       	cp	r12, r1
    1850:	d1 04       	cpc	r13, r1
    1852:	49 f0       	breq	.+18     	; 0x1866 <Endpoint_Write_Stream_LE+0x72>
			{
				*BytesProcessed += BytesInTransfer;
    1854:	f6 01       	movw	r30, r12
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	e8 0e       	add	r14, r24
    185c:	f9 1e       	adc	r15, r25
    185e:	e0 82       	st	Z, r14
    1860:	f1 82       	std	Z+1, r15	; 0x01
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1862:	85 e0       	ldi	r24, 0x05	; 5
    1864:	13 c0       	rjmp	.+38     	; 0x188c <Endpoint_Write_Stream_LE+0x98>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1866:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <Endpoint_WaitUntilReady>
    186a:	88 23       	and	r24, r24
    186c:	51 f0       	breq	.+20     	; 0x1882 <Endpoint_Write_Stream_LE+0x8e>
    186e:	0e c0       	rjmp	.+28     	; 0x188c <Endpoint_Write_Stream_LE+0x98>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1870:	f8 01       	movw	r30, r16
    1872:	81 91       	ld	r24, Z+
    1874:	8f 01       	movw	r16, r30
    1876:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    187a:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    187c:	ff ef       	ldi	r31, 0xFF	; 255
    187e:	ef 1a       	sub	r14, r31
    1880:	ff 0a       	sbc	r15, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1882:	20 97       	sbiw	r28, 0x00	; 0
    1884:	a1 f6       	brne	.-88     	; 0x182e <Endpoint_Write_Stream_LE+0x3a>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	01 c0       	rjmp	.+2      	; 0x188c <Endpoint_Write_Stream_LE+0x98>
    188a:	80 e0       	ldi	r24, 0x00	; 0
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	ff 90       	pop	r15
    1896:	ef 90       	pop	r14
    1898:	df 90       	pop	r13
    189a:	cf 90       	pop	r12
    189c:	08 95       	ret

0000189e <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    189e:	cf 92       	push	r12
    18a0:	df 92       	push	r13
    18a2:	ef 92       	push	r14
    18a4:	ff 92       	push	r15
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	c8 2e       	mov	r12, r24
    18b0:	d9 2e       	mov	r13, r25
    18b2:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    18b4:	80 91 d6 24 	lds	r24, 0x24D6
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    18be:	c0 91 d0 24 	lds	r28, 0x24D0
    18c2:	d0 91 d1 24 	lds	r29, 0x24D1
    18c6:	c0 17       	cp	r28, r16
    18c8:	d1 07       	cpc	r29, r17
    18ca:	40 f0       	brcs	.+16     	; 0x18dc <Endpoint_Write_Control_Stream_LE+0x3e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18cc:	01 15       	cp	r16, r1
    18ce:	11 05       	cpc	r17, r1
    18d0:	21 f4       	brne	.+8      	; 0x18da <Endpoint_Write_Control_Stream_LE+0x3c>
	  Endpoint_ClearIN();
    18d2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
    18d6:	e8 01       	movw	r28, r16
    18d8:	01 c0       	rjmp	.+2      	; 0x18dc <Endpoint_Write_Control_Stream_LE+0x3e>
    18da:	e8 01       	movw	r28, r16
    18dc:	ec 2c       	mov	r14, r12
    18de:	fd 2c       	mov	r15, r13
    18e0:	d1 2c       	mov	r13, r1
    18e2:	49 c0       	rjmp	.+146    	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xd8>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18e4:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18e8:	88 23       	and	r24, r24
    18ea:	09 f4       	brne	.+2      	; 0x18ee <Endpoint_Write_Control_Stream_LE+0x50>
    18ec:	5a c0       	rjmp	.+180    	; 0x19a2 <Endpoint_Write_Control_Stream_LE+0x104>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18ee:	85 30       	cpi	r24, 0x05	; 5
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <Endpoint_Write_Control_Stream_LE+0x56>
    18f2:	59 c0       	rjmp	.+178    	; 0x19a6 <Endpoint_Write_Control_Stream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18f4:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    18f8:	81 11       	cpse	r24, r1
    18fa:	57 c0       	rjmp	.+174    	; 0x19aa <Endpoint_Write_Control_Stream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18fc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    1900:	81 11       	cpse	r24, r1
    1902:	49 c0       	rjmp	.+146    	; 0x1996 <Endpoint_Write_Control_Stream_LE+0xf8>
		  break;

		if (Endpoint_IsINReady())
    1904:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    1908:	88 23       	and	r24, r24
    190a:	a9 f1       	breq	.+106    	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xd8>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    190c:	80 91 d6 24 	lds	r24, 0x24D6
    1910:	88 23       	and	r24, r24
    1912:	74 f4       	brge	.+28     	; 0x1930 <Endpoint_Write_Control_Stream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1914:	e0 91 d2 24 	lds	r30, 0x24D2
    1918:	f0 91 d3 24 	lds	r31, 0x24D3
    191c:	ef 5b       	subi	r30, 0xBF	; 191
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	00 81       	ld	r16, Z
    1922:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1924:	20 97       	sbiw	r28, 0x00	; 0
    1926:	f9 f0       	breq	.+62     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xc8>
    1928:	08 30       	cpi	r16, 0x08	; 8
    192a:	11 05       	cpc	r17, r1
    192c:	78 f0       	brcs	.+30     	; 0x194c <Endpoint_Write_Control_Stream_LE+0xae>
    192e:	1b c0       	rjmp	.+54     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xc8>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1930:	80 91 d2 24 	lds	r24, 0x24D2
    1934:	90 91 d3 24 	lds	r25, 0x24D3
    1938:	fc 01       	movw	r30, r24
    193a:	e0 5c       	subi	r30, 0xC0	; 192
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	00 81       	ld	r16, Z
    1940:	31 96       	adiw	r30, 0x01	; 1
    1942:	80 81       	ld	r24, Z
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	08 1b       	sub	r16, r24
    1948:	11 09       	sbc	r17, r1
    194a:	ec cf       	rjmp	.-40     	; 0x1924 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    194c:	f7 01       	movw	r30, r14
    194e:	81 91       	ld	r24, Z+
    1950:	7f 01       	movw	r14, r30
    1952:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1956:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1958:	0f 5f       	subi	r16, 0xFF	; 255
    195a:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    195c:	20 97       	sbiw	r28, 0x00	; 0
    195e:	19 f0       	breq	.+6      	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xc8>
    1960:	08 30       	cpi	r16, 0x08	; 8
    1962:	11 05       	cpc	r17, r1
    1964:	99 f7       	brne	.-26     	; 0x194c <Endpoint_Write_Control_Stream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1966:	dd 24       	eor	r13, r13
    1968:	d3 94       	inc	r13
    196a:	08 30       	cpi	r16, 0x08	; 8
    196c:	11 05       	cpc	r17, r1
    196e:	09 f0       	breq	.+2      	; 0x1972 <Endpoint_Write_Control_Stream_LE+0xd4>
    1970:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1972:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1976:	20 97       	sbiw	r28, 0x00	; 0
    1978:	09 f0       	breq	.+2      	; 0x197c <Endpoint_Write_Control_Stream_LE+0xde>
    197a:	b4 cf       	rjmp	.-152    	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x46>
    197c:	d1 10       	cpse	r13, r1
    197e:	b2 cf       	rjmp	.-156    	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x46>
    1980:	0a c0       	rjmp	.+20     	; 0x1996 <Endpoint_Write_Control_Stream_LE+0xf8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1982:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1986:	88 23       	and	r24, r24
    1988:	91 f0       	breq	.+36     	; 0x19ae <Endpoint_Write_Control_Stream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    198a:	85 30       	cpi	r24, 0x05	; 5
    198c:	91 f0       	breq	.+36     	; 0x19b2 <Endpoint_Write_Control_Stream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    198e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1992:	81 11       	cpse	r24, r1
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <Endpoint_Write_Control_Stream_LE+0x118>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1996:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    199a:	88 23       	and	r24, r24
    199c:	91 f3       	breq	.-28     	; 0x1982 <Endpoint_Write_Control_Stream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	0b c0       	rjmp	.+22     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	09 c0       	rjmp	.+18     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	05 c0       	rjmp	.+10     	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	03 c0       	rjmp	.+6      	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19b2:	83 e0       	ldi	r24, 0x03	; 3
    19b4:	01 c0       	rjmp	.+2      	; 0x19b8 <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	08 95       	ret

000019ca <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	e8 2e       	mov	r14, r24
    19d8:	f9 2e       	mov	r15, r25
    19da:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    19dc:	80 91 d6 24 	lds	r24, 0x24D6
    19e0:	8f 77       	andi	r24, 0x7F	; 127
    19e2:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (!(Length))
    19e6:	20 97       	sbiw	r28, 0x00	; 0
    19e8:	11 f4       	brne	.+4      	; 0x19ee <Endpoint_Read_Control_Stream_LE+0x24>
	  Endpoint_ClearOUT();
    19ea:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    19ee:	0e 2d       	mov	r16, r14
    19f0:	1f 2d       	mov	r17, r15
    19f2:	36 c0       	rjmp	.+108    	; 0x1a60 <Endpoint_Read_Control_Stream_LE+0x96>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19f4:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19f8:	88 23       	and	r24, r24
    19fa:	09 f4       	brne	.+2      	; 0x19fe <Endpoint_Read_Control_Stream_LE+0x34>
    19fc:	46 c0       	rjmp	.+140    	; 0x1a8a <Endpoint_Read_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19fe:	85 30       	cpi	r24, 0x05	; 5
    1a00:	09 f4       	brne	.+2      	; 0x1a04 <Endpoint_Read_Control_Stream_LE+0x3a>
    1a02:	45 c0       	rjmp	.+138    	; 0x1a8e <Endpoint_Read_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a04:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	43 c0       	rjmp	.+134    	; 0x1a92 <Endpoint_Read_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1a0c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    1a10:	88 23       	and	r24, r24
    1a12:	81 f3       	breq	.-32     	; 0x19f4 <Endpoint_Read_Control_Stream_LE+0x2a>
    1a14:	07 c0       	rjmp	.+14     	; 0x1a24 <Endpoint_Read_Control_Stream_LE+0x5a>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a16:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <Endpoint_Read_8>
    1a1a:	f8 01       	movw	r30, r16
    1a1c:	81 93       	st	Z+, r24
    1a1e:	8f 01       	movw	r16, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1a20:	21 97       	sbiw	r28, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1a22:	e1 f0       	breq	.+56     	; 0x1a5c <Endpoint_Read_Control_Stream_LE+0x92>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1a24:	80 91 d6 24 	lds	r24, 0x24D6
    1a28:	88 23       	and	r24, r24
    1a2a:	4c f4       	brge	.+18     	; 0x1a3e <Endpoint_Read_Control_Stream_LE+0x74>
				  return USB_Endpoint_SelectedFIFO->Position;
    1a2c:	e0 91 d2 24 	lds	r30, 0x24D2
    1a30:	f0 91 d3 24 	lds	r31, 0x24D3
    1a34:	ef 5b       	subi	r30, 0xBF	; 191
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0d c0       	rjmp	.+26     	; 0x1a58 <Endpoint_Read_Control_Stream_LE+0x8e>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1a3e:	20 91 d2 24 	lds	r18, 0x24D2
    1a42:	30 91 d3 24 	lds	r19, 0x24D3
    1a46:	f9 01       	movw	r30, r18
    1a48:	e0 5c       	subi	r30, 0xC0	; 192
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 81       	ld	r24, Z
    1a4e:	31 96       	adiw	r30, 0x01	; 1
    1a50:	20 81       	ld	r18, Z
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	82 1b       	sub	r24, r18
    1a56:	91 09       	sbc	r25, r1
    1a58:	89 2b       	or	r24, r25
    1a5a:	e9 f6       	brne	.-70     	; 0x1a16 <Endpoint_Read_Control_Stream_LE+0x4c>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
			}

			Endpoint_ClearOUT();
    1a5c:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1a60:	20 97       	sbiw	r28, 0x00	; 0
    1a62:	69 f0       	breq	.+26     	; 0x1a7e <Endpoint_Read_Control_Stream_LE+0xb4>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a64:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a68:	88 23       	and	r24, r24
    1a6a:	a9 f0       	breq	.+42     	; 0x1a96 <Endpoint_Read_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a6c:	85 30       	cpi	r24, 0x05	; 5
    1a6e:	51 f6       	brne	.-108    	; 0x1a04 <Endpoint_Read_Control_Stream_LE+0x3a>
    1a70:	14 c0       	rjmp	.+40     	; 0x1a9a <Endpoint_Read_Control_Stream_LE+0xd0>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a72:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a76:	88 23       	and	r24, r24
    1a78:	91 f0       	breq	.+36     	; 0x1a9e <Endpoint_Read_Control_Stream_LE+0xd4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a7a:	85 30       	cpi	r24, 0x05	; 5
    1a7c:	91 f0       	breq	.+36     	; 0x1aa2 <Endpoint_Read_Control_Stream_LE+0xd8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    1a7e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    1a82:	88 23       	and	r24, r24
    1a84:	b1 f3       	breq	.-20     	; 0x1a72 <Endpoint_Read_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	0d c0       	rjmp	.+26     	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	0b c0       	rjmp	.+22     	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	09 c0       	rjmp	.+18     	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	07 c0       	rjmp	.+14     	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a96:	82 e0       	ldi	r24, 0x02	; 2
    1a98:	05 c0       	rjmp	.+10     	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a9a:	83 e0       	ldi	r24, 0x03	; 3
    1a9c:	03 c0       	rjmp	.+6      	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	01 c0       	rjmp	.+2      	; 0x1aa4 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	08 95       	ret

00001ab2 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1ab2:	df 92       	push	r13
    1ab4:	ef 92       	push	r14
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	e8 2e       	mov	r14, r24
    1ac2:	f9 2e       	mov	r15, r25
    1ac4:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1ac6:	80 91 d6 24 	lds	r24, 0x24D6
    1aca:	80 68       	ori	r24, 0x80	; 128
    1acc:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    1ad0:	c0 91 d0 24 	lds	r28, 0x24D0
    1ad4:	d0 91 d1 24 	lds	r29, 0x24D1
    1ad8:	c0 17       	cp	r28, r16
    1ada:	d1 07       	cpc	r29, r17
    1adc:	40 f0       	brcs	.+16     	; 0x1aee <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1ade:	01 15       	cp	r16, r1
    1ae0:	11 05       	cpc	r17, r1
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    1ae4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
    1ae8:	e8 01       	movw	r28, r16
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <Endpoint_Write_Control_PStream_LE+0x3c>
    1aec:	e8 01       	movw	r28, r16
    1aee:	0e 2d       	mov	r16, r14
    1af0:	1f 2d       	mov	r17, r15
    1af2:	d1 2c       	mov	r13, r1
    1af4:	4e c0       	rjmp	.+156    	; 0x1b92 <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1af6:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1afa:	88 23       	and	r24, r24
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <Endpoint_Write_Control_PStream_LE+0x4e>
    1afe:	5f c0       	rjmp	.+190    	; 0x1bbe <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b00:	85 30       	cpi	r24, 0x05	; 5
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <Endpoint_Write_Control_PStream_LE+0x54>
    1b04:	5e c0       	rjmp	.+188    	; 0x1bc2 <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b06:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1b0a:	81 11       	cpse	r24, r1
    1b0c:	5c c0       	rjmp	.+184    	; 0x1bc6 <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b0e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    1b12:	81 11       	cpse	r24, r1
    1b14:	4e c0       	rjmp	.+156    	; 0x1bb2 <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    1b16:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    1b1a:	88 23       	and	r24, r24
    1b1c:	d1 f1       	breq	.+116    	; 0x1b92 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1b1e:	80 91 d6 24 	lds	r24, 0x24D6
    1b22:	88 23       	and	r24, r24
    1b24:	7c f4       	brge	.+30     	; 0x1b44 <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1b26:	e0 91 d2 24 	lds	r30, 0x24D2
    1b2a:	f0 91 d3 24 	lds	r31, 0x24D3
    1b2e:	ef 5b       	subi	r30, 0xBF	; 191
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	e0 80       	ld	r14, Z
    1b34:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b36:	20 97       	sbiw	r28, 0x00	; 0
    1b38:	19 f1       	breq	.+70     	; 0x1b80 <Endpoint_Write_Control_PStream_LE+0xce>
    1b3a:	88 e0       	ldi	r24, 0x08	; 8
    1b3c:	e8 16       	cp	r14, r24
    1b3e:	f1 04       	cpc	r15, r1
    1b40:	78 f0       	brcs	.+30     	; 0x1b60 <Endpoint_Write_Control_PStream_LE+0xae>
    1b42:	1e c0       	rjmp	.+60     	; 0x1b80 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1b44:	80 91 d2 24 	lds	r24, 0x24D2
    1b48:	90 91 d3 24 	lds	r25, 0x24D3
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e0 5c       	subi	r30, 0xC0	; 192
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	e0 80       	ld	r14, Z
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	80 81       	ld	r24, Z
    1b58:	f1 2c       	mov	r15, r1
    1b5a:	e8 1a       	sub	r14, r24
    1b5c:	f1 08       	sbc	r15, r1
    1b5e:	eb cf       	rjmp	.-42     	; 0x1b36 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b60:	f8 01       	movw	r30, r16
    1b62:	84 91       	lpm	r24, Z
    1b64:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1b68:	0f 5f       	subi	r16, 0xFF	; 255
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1b6c:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1b6e:	ff ef       	ldi	r31, 0xFF	; 255
    1b70:	ef 1a       	sub	r14, r31
    1b72:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b74:	20 97       	sbiw	r28, 0x00	; 0
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <Endpoint_Write_Control_PStream_LE+0xce>
    1b78:	88 e0       	ldi	r24, 0x08	; 8
    1b7a:	e8 16       	cp	r14, r24
    1b7c:	f1 04       	cpc	r15, r1
    1b7e:	81 f7       	brne	.-32     	; 0x1b60 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b80:	dd 24       	eor	r13, r13
    1b82:	d3 94       	inc	r13
    1b84:	e8 e0       	ldi	r30, 0x08	; 8
    1b86:	ee 16       	cp	r14, r30
    1b88:	f1 04       	cpc	r15, r1
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <Endpoint_Write_Control_PStream_LE+0xdc>
    1b8c:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1b8e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b92:	20 97       	sbiw	r28, 0x00	; 0
    1b94:	09 f0       	breq	.+2      	; 0x1b98 <Endpoint_Write_Control_PStream_LE+0xe6>
    1b96:	af cf       	rjmp	.-162    	; 0x1af6 <Endpoint_Write_Control_PStream_LE+0x44>
    1b98:	d1 10       	cpse	r13, r1
    1b9a:	ad cf       	rjmp	.-166    	; 0x1af6 <Endpoint_Write_Control_PStream_LE+0x44>
    1b9c:	0a c0       	rjmp	.+20     	; 0x1bb2 <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b9e:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1ba2:	88 23       	and	r24, r24
    1ba4:	91 f0       	breq	.+36     	; 0x1bca <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ba6:	85 30       	cpi	r24, 0x05	; 5
    1ba8:	91 f0       	breq	.+36     	; 0x1bce <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1baa:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <Endpoint_IsSETUPReceived>
    1bae:	81 11       	cpse	r24, r1
    1bb0:	10 c0       	rjmp	.+32     	; 0x1bd2 <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1bb2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    1bb6:	88 23       	and	r24, r24
    1bb8:	91 f3       	breq	.-28     	; 0x1b9e <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	0b c0       	rjmp	.+22     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1bbe:	82 e0       	ldi	r24, 0x02	; 2
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	07 c0       	rjmp	.+14     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	03 c0       	rjmp	.+6      	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1bce:	83 e0       	ldi	r24, 0x03	; 3
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	08 95       	ret

00001be4 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1be4:	e0 91 d4 24 	lds	r30, 0x24D4
    1be8:	f0 91 d5 24 	lds	r31, 0x24D5
    1bec:	a0 91 d2 24 	lds	r26, 0x24D2
    1bf0:	b0 91 d3 24 	lds	r27, 0x24D3
    1bf4:	af 5b       	subi	r26, 0xBF	; 191
    1bf6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf8:	8c 91       	ld	r24, X
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	82 83       	std	Z+2, r24	; 0x02
    1bfe:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1c00:	80 81       	ld	r24, Z
    1c02:	8d 79       	andi	r24, 0x9D	; 157
    1c04:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1c06:	e0 91 d2 24 	lds	r30, 0x24D2
    1c0a:	f0 91 d3 24 	lds	r31, 0x24D3
    1c0e:	ef 5b       	subi	r30, 0xBF	; 191
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	10 82       	st	Z, r1
    1c14:	08 95       	ret

00001c16 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1c16:	e0 91 d4 24 	lds	r30, 0x24D4
    1c1a:	f0 91 d5 24 	lds	r31, 0x24D5
    1c1e:	80 81       	ld	r24, Z
    1c20:	8d 79       	andi	r24, 0x9D	; 157
    1c22:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1c24:	e0 91 d2 24 	lds	r30, 0x24D2
    1c28:	f0 91 d3 24 	lds	r31, 0x24D3
    1c2c:	ef 5b       	subi	r30, 0xBF	; 191
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	10 82       	st	Z, r1
    1c32:	08 95       	ret

00001c34 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1c34:	80 91 d2 24 	lds	r24, 0x24D2
    1c38:	90 91 d3 24 	lds	r25, 0x24D3
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	ef 5b       	subi	r30, 0xBF	; 191
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	20 81       	ld	r18, Z
    1c44:	31 e0       	ldi	r19, 0x01	; 1
    1c46:	32 0f       	add	r19, r18
    1c48:	30 83       	st	Z, r19
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f1 1d       	adc	r31, r1
    1c50:	80 81       	ld	r24, Z
}
    1c52:	08 95       	ret

00001c54 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1c54:	20 91 d2 24 	lds	r18, 0x24D2
    1c58:	30 91 d3 24 	lds	r19, 0x24D3
    1c5c:	f9 01       	movw	r30, r18
    1c5e:	ef 5b       	subi	r30, 0xBF	; 191
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	90 81       	ld	r25, Z
    1c64:	41 e0       	ldi	r20, 0x01	; 1
    1c66:	49 0f       	add	r20, r25
    1c68:	40 83       	st	Z, r20
    1c6a:	f9 01       	movw	r30, r18
    1c6c:	e9 0f       	add	r30, r25
    1c6e:	f1 1d       	adc	r31, r1
    1c70:	80 83       	st	Z, r24
    1c72:	08 95       	ret

00001c74 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1c74:	80 93 d6 24 	sts	0x24D6, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1c78:	28 2f       	mov	r18, r24
    1c7a:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1c7e:	40 91 c6 04 	lds	r20, 0x04C6
    1c82:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1c86:	88 23       	and	r24, r24
    1c88:	e4 f4       	brge	.+56     	; 0x1cc2 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1c8a:	64 e8       	ldi	r22, 0x84	; 132
    1c8c:	62 9f       	mul	r22, r18
    1c8e:	c0 01       	movw	r24, r0
    1c90:	63 9f       	mul	r22, r19
    1c92:	90 0d       	add	r25, r0
    1c94:	11 24       	eor	r1, r1
    1c96:	87 5e       	subi	r24, 0xE7	; 231
    1c98:	9a 4d       	sbci	r25, 0xDA	; 218
    1c9a:	80 93 d2 24 	sts	0x24D2, r24
    1c9e:	90 93 d3 24 	sts	0x24D3, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1ca2:	c9 01       	movw	r24, r18
    1ca4:	82 95       	swap	r24
    1ca6:	92 95       	swap	r25
    1ca8:	90 7f       	andi	r25, 0xF0	; 240
    1caa:	98 27       	eor	r25, r24
    1cac:	80 7f       	andi	r24, 0xF0	; 240
    1cae:	98 27       	eor	r25, r24
    1cb0:	08 96       	adiw	r24, 0x08	; 8
    1cb2:	9a 01       	movw	r18, r20
    1cb4:	28 0f       	add	r18, r24
    1cb6:	39 1f       	adc	r19, r25
    1cb8:	20 93 d4 24 	sts	0x24D4, r18
    1cbc:	30 93 d5 24 	sts	0x24D5, r19
    1cc0:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1cc2:	64 e8       	ldi	r22, 0x84	; 132
    1cc4:	62 9f       	mul	r22, r18
    1cc6:	c0 01       	movw	r24, r0
    1cc8:	63 9f       	mul	r22, r19
    1cca:	90 0d       	add	r25, r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	89 52       	subi	r24, 0x29	; 41
    1cd0:	9b 4d       	sbci	r25, 0xDB	; 219
    1cd2:	80 93 d2 24 	sts	0x24D2, r24
    1cd6:	90 93 d3 24 	sts	0x24D3, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1cda:	22 95       	swap	r18
    1cdc:	32 95       	swap	r19
    1cde:	30 7f       	andi	r19, 0xF0	; 240
    1ce0:	32 27       	eor	r19, r18
    1ce2:	20 7f       	andi	r18, 0xF0	; 240
    1ce4:	32 27       	eor	r19, r18
    1ce6:	24 0f       	add	r18, r20
    1ce8:	35 1f       	adc	r19, r21
    1cea:	20 93 d4 24 	sts	0x24D4, r18
    1cee:	30 93 d5 24 	sts	0x24D5, r19
    1cf2:	08 95       	ret

00001cf4 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1cf4:	80 91 d6 24 	lds	r24, 0x24D6
    1cf8:	80 68       	ori	r24, 0x80	; 128
    1cfa:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1cfe:	e0 91 d4 24 	lds	r30, 0x24D4
    1d02:	f0 91 d5 24 	lds	r31, 0x24D5
    1d06:	80 81       	ld	r24, Z
}
    1d08:	86 95       	lsr	r24
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	08 95       	ret

00001d0e <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1d0e:	80 91 d6 24 	lds	r24, 0x24D6
    1d12:	8f 77       	andi	r24, 0x7F	; 127
    1d14:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1d18:	e0 91 d4 24 	lds	r30, 0x24D4
    1d1c:	f0 91 d5 24 	lds	r31, 0x24D5
    1d20:	80 81       	ld	r24, Z
    1d22:	85 ff       	sbrs	r24, 5
    1d24:	0c c0       	rjmp	.+24     	; 0x1d3e <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1d26:	80 91 d2 24 	lds	r24, 0x24D2
    1d2a:	90 91 d3 24 	lds	r25, 0x24D3
    1d2e:	22 81       	ldd	r18, Z+2	; 0x02
    1d30:	33 81       	ldd	r19, Z+3	; 0x03
    1d32:	fc 01       	movw	r30, r24
    1d34:	e0 5c       	subi	r30, 0xC0	; 192
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	20 83       	st	Z, r18
		return true;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
	}

	return false;
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
}
    1d40:	08 95       	ret

00001d42 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1d42:	80 91 d6 24 	lds	r24, 0x24D6
    1d46:	8f 77       	andi	r24, 0x7F	; 127
    1d48:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1d4c:	e0 91 d4 24 	lds	r30, 0x24D4
    1d50:	f0 91 d5 24 	lds	r31, 0x24D5
    1d54:	80 81       	ld	r24, Z
    1d56:	84 ff       	sbrs	r24, 4
    1d58:	0c c0       	rjmp	.+24     	; 0x1d72 <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1d5a:	80 91 d2 24 	lds	r24, 0x24D2
    1d5e:	90 91 d3 24 	lds	r25, 0x24D3
    1d62:	22 81       	ldd	r18, Z+2	; 0x02
    1d64:	33 81       	ldd	r19, Z+3	; 0x03
    1d66:	fc 01       	movw	r30, r24
    1d68:	e0 5c       	subi	r30, 0xC0	; 192
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	20 83       	st	Z, r18
		return true;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	08 95       	ret
	}

	return false;
    1d72:	80 e0       	ldi	r24, 0x00	; 0
}
    1d74:	08 95       	ret

00001d76 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1d76:	80 91 d6 24 	lds	r24, 0x24D6
    1d7a:	8f 77       	andi	r24, 0x7F	; 127
    1d7c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1d80:	e0 91 d4 24 	lds	r30, 0x24D4
    1d84:	f0 91 d5 24 	lds	r31, 0x24D5
    1d88:	80 81       	ld	r24, Z
    1d8a:	8d 78       	andi	r24, 0x8D	; 141
    1d8c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1d8e:	e0 91 d4 24 	lds	r30, 0x24D4
    1d92:	f0 91 d5 24 	lds	r31, 0x24D5
    1d96:	80 81       	ld	r24, Z
    1d98:	81 60       	ori	r24, 0x01	; 1
    1d9a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1d9c:	e0 91 d2 24 	lds	r30, 0x24D2
    1da0:	f0 91 d3 24 	lds	r31, 0x24D3
    1da4:	ef 5b       	subi	r30, 0xBF	; 191
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1daa:	80 91 d6 24 	lds	r24, 0x24D6
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1db4:	e0 91 d4 24 	lds	r30, 0x24D4
    1db8:	f0 91 d5 24 	lds	r31, 0x24D5
    1dbc:	80 81       	ld	r24, Z
    1dbe:	81 60       	ori	r24, 0x01	; 1
    1dc0:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1dc2:	e0 91 d2 24 	lds	r30, 0x24D2
    1dc6:	f0 91 d3 24 	lds	r31, 0x24D3
    1dca:	ef 5b       	subi	r30, 0xBF	; 191
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	10 82       	st	Z, r1
    1dd0:	08 95       	ret

00001dd2 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1dd2:	e0 91 d4 24 	lds	r30, 0x24D4
    1dd6:	f0 91 d5 24 	lds	r31, 0x24D5
    1dda:	81 81       	ldd	r24, Z+1	; 0x01
    1ddc:	84 60       	ori	r24, 0x04	; 4
    1dde:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    1de0:	e0 91 d4 24 	lds	r30, 0x24D4
    1de4:	f0 91 d5 24 	lds	r31, 0x24D5
    1de8:	81 81       	ldd	r24, Z+1	; 0x01
    1dea:	80 7c       	andi	r24, 0xC0	; 192
    1dec:	80 34       	cpi	r24, 0x40	; 64
    1dee:	61 f4       	brne	.+24     	; 0x1e08 <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1df0:	80 91 d6 24 	lds	r24, 0x24D6
    1df4:	80 58       	subi	r24, 0x80	; 128
    1df6:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1dfa:	e0 91 d4 24 	lds	r30, 0x24D4
    1dfe:	f0 91 d5 24 	lds	r31, 0x24D5
    1e02:	81 81       	ldd	r24, Z+1	; 0x01
    1e04:	84 60       	ori	r24, 0x04	; 4
    1e06:	81 83       	std	Z+1, r24	; 0x01
    1e08:	08 95       	ret

00001e0a <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    1e0a:	1f 93       	push	r17
    1e0c:	cf 93       	push	r28
    1e0e:	df 93       	push	r29
    1e10:	d8 2f       	mov	r29, r24
    1e12:	16 2f       	mov	r17, r22
    1e14:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    1e16:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    1e1a:	e0 91 d4 24 	lds	r30, 0x24D4
    1e1e:	f0 91 d5 24 	lds	r31, 0x24D5
    1e22:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1e24:	e0 91 d4 24 	lds	r30, 0x24D4
    1e28:	f0 91 d5 24 	lds	r31, 0x24D5
    1e2c:	dd 23       	and	r29, r29
    1e2e:	a4 f0       	brlt	.+40     	; 0x1e58 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    1e30:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1e32:	e0 91 d4 24 	lds	r30, 0x24D4
    1e36:	f0 91 d5 24 	lds	r31, 0x24D5
    1e3a:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1e3c:	e0 91 d4 24 	lds	r30, 0x24D4
    1e40:	f0 91 d5 24 	lds	r31, 0x24D5
    1e44:	12 82       	std	Z+2, r1	; 0x02
    1e46:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1e48:	80 91 d2 24 	lds	r24, 0x24D2
    1e4c:	90 91 d3 24 	lds	r25, 0x24D3
    1e50:	84 83       	std	Z+4, r24	; 0x04
    1e52:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	14 c0       	rjmp	.+40     	; 0x1e80 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1e5c:	e0 91 d4 24 	lds	r30, 0x24D4
    1e60:	f0 91 d5 24 	lds	r31, 0x24D5
    1e64:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1e66:	e0 91 d4 24 	lds	r30, 0x24D4
    1e6a:	f0 91 d5 24 	lds	r31, 0x24D5
    1e6e:	12 82       	std	Z+2, r1	; 0x02
    1e70:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1e72:	80 91 d2 24 	lds	r24, 0x24D2
    1e76:	90 91 d3 24 	lds	r25, 0x24D3
    1e7a:	84 83       	std	Z+4, r24	; 0x04
    1e7c:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1e7e:	4c 2f       	mov	r20, r28
    1e80:	fc 01       	movw	r30, r24
    1e82:	e0 5c       	subi	r30, 0xC0	; 192
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1e88:	31 96       	adiw	r30, 0x01	; 1
    1e8a:	10 82       	st	Z, r1

	return true;
}
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	1f 91       	pop	r17
    1e94:	08 95       	ret

00001e96 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1e96:	af 92       	push	r10
    1e98:	bf 92       	push	r11
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	0f 93       	push	r16
    1ea4:	1f 93       	push	r17
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    1eaa:	66 23       	and	r22, r22
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <Endpoint_ConfigureEndpointTable+0x1a>
    1eae:	57 c0       	rjmp	.+174    	; 0x1f5e <Endpoint_ConfigureEndpointTable+0xc8>
    1eb0:	a6 2e       	mov	r10, r22
    1eb2:	7c 01       	movw	r14, r24
    1eb4:	8c 01       	movw	r16, r24
    1eb6:	84 e0       	ldi	r24, 0x04	; 4
    1eb8:	e8 0e       	add	r14, r24
    1eba:	f1 1c       	adc	r15, r1
    1ebc:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	c0 80       	ld	r12, Z
    1ec2:	cc 20       	and	r12, r12
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <Endpoint_ConfigureEndpointTable+0x32>
    1ec6:	41 c0       	rjmp	.+130    	; 0x1f4a <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1ec8:	c1 81       	ldd	r28, Z+1	; 0x01
    1eca:	d2 81       	ldd	r29, Z+2	; 0x02
    1ecc:	f7 01       	movw	r30, r14
    1ece:	31 97       	sbiw	r30, 0x01	; 1
    1ed0:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1ed2:	f7 01       	movw	r30, r14
    1ed4:	90 81       	ld	r25, Z
    1ed6:	92 30       	cpi	r25, 0x02	; 2
    1ed8:	10 f4       	brcc	.+4      	; 0x1ede <Endpoint_ConfigureEndpointTable+0x48>
    1eda:	48 e0       	ldi	r20, 0x08	; 8
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <Endpoint_ConfigureEndpointTable+0x4a>
    1ede:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ee0:	c9 30       	cpi	r28, 0x09	; 9
    1ee2:	d1 05       	cpc	r29, r1
    1ee4:	50 f0       	brcs	.+20     	; 0x1efa <Endpoint_ConfigureEndpointTable+0x64>
    1ee6:	28 e0       	ldi	r18, 0x08	; 8
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    1eec:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    1eee:	22 0f       	add	r18, r18
    1ef0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1ef2:	2c 17       	cp	r18, r28
    1ef4:	3d 07       	cpc	r19, r29
    1ef6:	d0 f3       	brcs	.-12     	; 0x1eec <Endpoint_ConfigureEndpointTable+0x56>
    1ef8:	01 c0       	rjmp	.+2      	; 0x1efc <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1efa:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1efc:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    1efe:	2c 2d       	mov	r18, r12
    1f00:	2f 70       	andi	r18, 0x0F	; 15
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	22 30       	cpi	r18, 0x02	; 2
    1f06:	31 05       	cpc	r19, r1
    1f08:	64 f5       	brge	.+88     	; 0x1f62 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    1f0a:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    1f0c:	c1 34       	cpi	r28, 0x41	; 65
    1f0e:	d1 05       	cpc	r29, r1
    1f10:	50 f5       	brcc	.+84     	; 0x1f66 <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    1f12:	88 23       	and	r24, r24
    1f14:	19 f0       	breq	.+6      	; 0x1f1c <Endpoint_ConfigureEndpointTable+0x86>
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	21 f0       	breq	.+8      	; 0x1f22 <Endpoint_ConfigureEndpointTable+0x8c>
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    1f1c:	90 64       	ori	r25, 0x40	; 64
    1f1e:	d9 2e       	mov	r13, r25
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    1f22:	90 6c       	ori	r25, 0xC0	; 192
    1f24:	d9 2e       	mov	r13, r25
    1f26:	0a c0       	rjmp	.+20     	; 0x1f3c <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    1f28:	90 68       	ori	r25, 0x80	; 128
    1f2a:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	06 c0       	rjmp	.+12     	; 0x1f3c <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1f30:	4c 2f       	mov	r20, r28
    1f32:	6d 2d       	mov	r22, r13
    1f34:	80 e8       	ldi	r24, 0x80	; 128
    1f36:	8c 0d       	add	r24, r12
    1f38:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1f3c:	4c 2f       	mov	r20, r28
    1f3e:	6d 2d       	mov	r22, r13
    1f40:	8c 2d       	mov	r24, r12
    1f42:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>
    1f46:	88 23       	and	r24, r24
    1f48:	79 f0       	breq	.+30     	; 0x1f68 <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1f4a:	b3 94       	inc	r11
    1f4c:	0b 5f       	subi	r16, 0xFB	; 251
    1f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f50:	f5 e0       	ldi	r31, 0x05	; 5
    1f52:	ef 0e       	add	r14, r31
    1f54:	f1 1c       	adc	r15, r1
    1f56:	ba 10       	cpse	r11, r10
    1f58:	b2 cf       	rjmp	.-156    	; 0x1ebe <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	05 c0       	rjmp	.+10     	; 0x1f68 <Endpoint_ConfigureEndpointTable+0xd2>
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	03 c0       	rjmp	.+6      	; 0x1f68 <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <Endpoint_ConfigureEndpointTable+0xd2>
    1f66:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	ff 90       	pop	r15
    1f72:	ef 90       	pop	r14
    1f74:	df 90       	pop	r13
    1f76:	cf 90       	pop	r12
    1f78:	bf 90       	pop	r11
    1f7a:	af 90       	pop	r10
    1f7c:	08 95       	ret

00001f7e <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1f7e:	e0 ec       	ldi	r30, 0xC0	; 192
    1f80:	f4 e0       	ldi	r31, 0x04	; 4
    1f82:	a6 81       	ldd	r26, Z+6	; 0x06
    1f84:	b7 81       	ldd	r27, Z+7	; 0x07
    1f86:	19 96       	adiw	r26, 0x09	; 9
    1f88:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1f8a:	a6 81       	ldd	r26, Z+6	; 0x06
    1f8c:	b7 81       	ldd	r27, Z+7	; 0x07
    1f8e:	11 96       	adiw	r26, 0x01	; 1
    1f90:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1f92:	a6 81       	ldd	r26, Z+6	; 0x06
    1f94:	b7 81       	ldd	r27, Z+7	; 0x07
    1f96:	59 96       	adiw	r26, 0x19	; 25
    1f98:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1f9a:	06 80       	ldd	r0, Z+6	; 0x06
    1f9c:	f7 81       	ldd	r31, Z+7	; 0x07
    1f9e:	e0 2d       	mov	r30, r0
    1fa0:	11 8a       	std	Z+17, r1	; 0x11
    1fa2:	08 95       	ret

00001fa4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1fa4:	80 91 ca 24 	lds	r24, 0x24CA
    1fa8:	88 23       	and	r24, r24
    1faa:	84 f4       	brge	.+32     	; 0x1fcc <Endpoint_ClearStatusStage+0x28>
    1fac:	04 c0       	rjmp	.+8      	; 0x1fb6 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1fae:	80 91 c9 24 	lds	r24, 0x24C9
    1fb2:	88 23       	and	r24, r24
    1fb4:	89 f0       	breq	.+34     	; 0x1fd8 <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1fb6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    1fba:	88 23       	and	r24, r24
    1fbc:	c1 f3       	breq	.-16     	; 0x1fae <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    1fbe:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <Endpoint_ClearOUT>
    1fc2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1fc4:	80 91 c9 24 	lds	r24, 0x24C9
    1fc8:	88 23       	and	r24, r24
    1fca:	31 f0       	breq	.+12     	; 0x1fd8 <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1fcc:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    1fd0:	88 23       	and	r24, r24
    1fd2:	c1 f3       	breq	.-16     	; 0x1fc4 <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    1fd4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <Endpoint_ClearIN>
    1fd8:	08 95       	ret

00001fda <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1fda:	ef 92       	push	r14
    1fdc:	ff 92       	push	r15
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    1fe4:	e0 91 c6 04 	lds	r30, 0x04C6
    1fe8:	f0 91 c7 04 	lds	r31, 0x04C7
    1fec:	00 a1       	ldd	r16, Z+32	; 0x20
    1fee:	11 a1       	ldd	r17, Z+33	; 0x21
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1ff0:	c4 e6       	ldi	r28, 0x64	; 100
    1ff2:	0f 2e       	mov	r0, r31
    1ff4:	f0 ec       	ldi	r31, 0xC0	; 192
    1ff6:	ef 2e       	mov	r14, r31
    1ff8:	f4 e0       	ldi	r31, 0x04	; 4
    1ffa:	ff 2e       	mov	r15, r31
    1ffc:	f0 2d       	mov	r31, r0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <Endpoint_WaitUntilReady+0x2a>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2000:	c2 2f       	mov	r28, r18
    2002:	8c 01       	movw	r16, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    2004:	80 91 d6 24 	lds	r24, 0x24D6

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    2008:	88 23       	and	r24, r24
    200a:	2c f4       	brge	.+10     	; 0x2016 <Endpoint_WaitUntilReady+0x3c>
		{
			if (Endpoint_IsINReady())
    200c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <Endpoint_IsINReady>
    2010:	88 23       	and	r24, r24
    2012:	29 f0       	breq	.+10     	; 0x201e <Endpoint_WaitUntilReady+0x44>
    2014:	21 c0       	rjmp	.+66     	; 0x2058 <Endpoint_WaitUntilReady+0x7e>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2016:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <Endpoint_IsOUTReceived>
    201a:	81 11       	cpse	r24, r1
    201c:	1f c0       	rjmp	.+62     	; 0x205c <Endpoint_WaitUntilReady+0x82>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    201e:	80 91 c9 24 	lds	r24, 0x24C9

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2022:	88 23       	and	r24, r24
    2024:	e9 f0       	breq	.+58     	; 0x2060 <Endpoint_WaitUntilReady+0x86>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2026:	85 30       	cpi	r24, 0x05	; 5
    2028:	e9 f0       	breq	.+58     	; 0x2064 <Endpoint_WaitUntilReady+0x8a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    202a:	e0 91 d4 24 	lds	r30, 0x24D4
    202e:	f0 91 d5 24 	lds	r31, 0x24D5
    2032:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2034:	82 fd       	sbrc	r24, 2
    2036:	18 c0       	rjmp	.+48     	; 0x2068 <Endpoint_WaitUntilReady+0x8e>
    2038:	d7 01       	movw	r26, r14
    203a:	16 96       	adiw	r26, 0x06	; 6
    203c:	ed 91       	ld	r30, X+
    203e:	fc 91       	ld	r31, X
    2040:	17 97       	sbiw	r26, 0x07	; 7
    2042:	80 a1       	ldd	r24, Z+32	; 0x20
    2044:	91 a1       	ldd	r25, Z+33	; 0x21
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2046:	08 17       	cp	r16, r24
    2048:	19 07       	cpc	r17, r25
    204a:	d9 f2       	breq	.-74     	; 0x2002 <Endpoint_WaitUntilReady+0x28>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    204c:	2f ef       	ldi	r18, 0xFF	; 255
    204e:	2c 0f       	add	r18, r28
    2050:	c1 11       	cpse	r28, r1
    2052:	d6 cf       	rjmp	.-84     	; 0x2000 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_Timeout;
    2054:	84 e0       	ldi	r24, 0x04	; 4
    2056:	09 c0       	rjmp	.+18     	; 0x206a <Endpoint_WaitUntilReady+0x90>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	07 c0       	rjmp	.+14     	; 0x206a <Endpoint_WaitUntilReady+0x90>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	05 c0       	rjmp	.+10     	; 0x206a <Endpoint_WaitUntilReady+0x90>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	03 c0       	rjmp	.+6      	; 0x206a <Endpoint_WaitUntilReady+0x90>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2064:	83 e0       	ldi	r24, 0x03	; 3
    2066:	01 c0       	rjmp	.+2      	; 0x206a <Endpoint_WaitUntilReady+0x90>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2068:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	ef 90       	pop	r14
    2074:	08 95       	ret

00002076 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    207a:	e0 e4       	ldi	r30, 0x40	; 64
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    2080:	84 81       	ldd	r24, Z+4	; 0x04
    2082:	83 60       	ori	r24, 0x03	; 3
    2084:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    2086:	0e 94 99 10 	call	0x2132	; 0x2132 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    208a:	0e 94 a0 10 	call	0x2140	; 0x2140 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    208e:	c0 ec       	ldi	r28, 0xC0	; 192
    2090:	d4 e0       	ldi	r29, 0x04	; 4
    2092:	88 81       	ld	r24, Y
    2094:	8f 77       	andi	r24, 0x7F	; 127
    2096:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    2098:	88 81       	ld	r24, Y
    209a:	80 68       	ori	r24, 0x80	; 128
    209c:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    209e:	10 92 c9 24 	sts	0x24C9, r1
	USB_Device_ConfigurationNumber  = 0;
    20a2:	10 92 c5 24 	sts	0x24C5, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    20a6:	10 92 c7 24 	sts	0x24C7, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    20aa:	10 92 c6 24 	sts	0x24C6, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    20ae:	88 81       	ld	r24, Y
    20b0:	80 64       	ori	r24, 0x40	; 64
    20b2:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    20b4:	48 e0       	ldi	r20, 0x08	; 8
    20b6:	68 e4       	ldi	r22, 0x48	; 72
    20b8:	80 e8       	ldi	r24, 0x80	; 128
    20ba:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    20be:	48 e0       	ldi	r20, 0x08	; 8
    20c0:	68 e4       	ldi	r22, 0x48	; 72
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    20c8:	88 85       	ldd	r24, Y+8	; 0x08
    20ca:	80 64       	ori	r24, 0x40	; 64
    20cc:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	08 95       	ret

000020da <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    20de:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    20e0:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    20e2:	c0 ec       	ldi	r28, 0xC0	; 192
    20e4:	d1 e0       	ldi	r29, 0x01	; 1
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    20ea:	ea e1       	ldi	r30, 0x1A	; 26
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	e4 91       	lpm	r30, Z
    20f0:	a0 ec       	ldi	r26, 0xC0	; 192
    20f2:	b4 e0       	ldi	r27, 0x04	; 4
    20f4:	da 96       	adiw	r26, 0x3a	; 58
    20f6:	ec 93       	st	X, r30
    20f8:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    20fa:	eb e1       	ldi	r30, 0x1B	; 27
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	e4 91       	lpm	r30, Z
    2100:	db 96       	adiw	r26, 0x3b	; 59
    2102:	ec 93       	st	X, r30
    2104:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    2106:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    2108:	80 ee       	ldi	r24, 0xE0	; 224
    210a:	95 e2       	ldi	r25, 0x25	; 37
    210c:	8e 7f       	andi	r24, 0xFE	; 254
    210e:	16 96       	adiw	r26, 0x06	; 6
    2110:	8d 93       	st	X+, r24
    2112:	9c 93       	st	X, r25
    2114:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    2116:	81 e1       	ldi	r24, 0x11	; 17
    2118:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	18 96       	adiw	r26, 0x08	; 8
    211e:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2120:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	80 93 c8 24 	sts	0x24C8, r24

	USB_ResetInterface();
    2128:	0e 94 3b 10 	call	0x2076	; 0x2076 <USB_ResetInterface>
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    2132:	e0 ec       	ldi	r30, 0xC0	; 192
    2134:	f4 e0       	ldi	r31, 0x04	; 4
    2136:	80 85       	ldd	r24, Z+8	; 0x08
    2138:	83 70       	andi	r24, 0x03	; 3
    213a:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    213c:	11 86       	std	Z+9, r1	; 0x09
    213e:	08 95       	ret

00002140 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    2140:	e0 ec       	ldi	r30, 0xC0	; 192
    2142:	f4 e0       	ldi	r31, 0x04	; 4
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    2148:	84 87       	std	Z+12, r24	; 0x0c
    214a:	08 95       	ret

0000214c <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	0b b6       	in	r0, 0x3b	; 59
    2158:	0f 92       	push	r0
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    2172:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2176:	88 23       	and	r24, r24
    2178:	4c f4       	brge	.+18     	; 0x218c <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    217a:	80 91 c8 04 	lds	r24, 0x04C8
    217e:	88 23       	and	r24, r24
    2180:	2c f4       	brge	.+10     	; 0x218c <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    2182:	80 e8       	ldi	r24, 0x80	; 128
    2184:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2188:	0e 94 68 07 	call	0xed0	; 0xed0 <EVENT_USB_Device_StartOfFrame>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    218c:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    2190:	86 ff       	sbrs	r24, 6
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    2194:	80 e4       	ldi	r24, 0x40	; 64
    2196:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    219a:	10 92 c9 24 	sts	0x24C9, r1
		EVENT_USB_Device_Disconnect();
    219e:	0e 94 3b 07 	call	0xe76	; 0xe76 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    21a2:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    21a6:	85 ff       	sbrs	r24, 5
    21a8:	16 c0       	rjmp	.+44     	; 0x21d6 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    21aa:	80 e2       	ldi	r24, 0x20	; 32
    21ac:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    21b0:	80 91 c5 24 	lds	r24, 0x24C5
    21b4:	88 23       	and	r24, r24
    21b6:	21 f0       	breq	.+8      	; 0x21c0 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    21b8:	84 e0       	ldi	r24, 0x04	; 4
    21ba:	80 93 c9 24 	sts	0x24C9, r24
    21be:	09 c0       	rjmp	.+18     	; 0x21d2 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    21c0:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    21c4:	81 11       	cpse	r24, r1
    21c6:	02 c0       	rjmp	.+4      	; 0x21cc <__vector_125+0x80>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	01 c0       	rjmp	.+2      	; 0x21ce <__vector_125+0x82>
    21cc:	83 e0       	ldi	r24, 0x03	; 3
    21ce:	80 93 c9 24 	sts	0x24C9, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    21d2:	0e 94 2e 07 	call	0xe5c	; 0xe5c <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    21d6:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    21da:	84 ff       	sbrs	r24, 4
    21dc:	18 c0       	rjmp	.+48     	; 0x220e <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    21de:	e0 ec       	ldi	r30, 0xC0	; 192
    21e0:	f4 e0       	ldi	r31, 0x04	; 4
    21e2:	80 e1       	ldi	r24, 0x10	; 16
    21e4:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    21e6:	82 e0       	ldi	r24, 0x02	; 2
    21e8:	80 93 c9 24 	sts	0x24C9, r24
		USB_Device_ConfigurationNumber = 0;
    21ec:	10 92 c5 24 	sts	0x24C5, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    21f0:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    21f2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    21f6:	48 e0       	ldi	r20, 0x08	; 8
    21f8:	68 e4       	ldi	r22, 0x48	; 72
    21fa:	80 e8       	ldi	r24, 0x80	; 128
    21fc:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    2200:	48 e0       	ldi	r20, 0x08	; 8
    2202:	68 e4       	ldi	r22, 0x48	; 72
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    220a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <USB_Event_Stub>
	}
}
    220e:	ff 91       	pop	r31
    2210:	ef 91       	pop	r30
    2212:	bf 91       	pop	r27
    2214:	af 91       	pop	r26
    2216:	9f 91       	pop	r25
    2218:	8f 91       	pop	r24
    221a:	7f 91       	pop	r23
    221c:	6f 91       	pop	r22
    221e:	5f 91       	pop	r21
    2220:	4f 91       	pop	r20
    2222:	3f 91       	pop	r19
    2224:	2f 91       	pop	r18
    2226:	0f 90       	pop	r0
    2228:	0b be       	out	0x3b, r0	; 59
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	0f 90       	pop	r0
    2230:	1f 90       	pop	r1
    2232:	18 95       	reti

00002234 <rtc_initialize>:
/*
 *	initialize the rtc
 */
void rtc_initialize(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
    2234:	e2 ea       	ldi	r30, 0xA2	; 162
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	87 60       	ori	r24, 0x07	; 7
    223c:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
    223e:	8b e0       	ldi	r24, 0x0B	; 11
    2240:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
    2244:	e2 e0       	ldi	r30, 0x02	; 2
    2246:	f4 e0       	ldi	r31, 0x04	; 4
    2248:	80 81       	ld	r24, Z
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
    224e:	80 e2       	ldi	r24, 0x20	; 32
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	80 93 0a 04 	sts	0x040A, r24
    2256:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 00 04 	sts	0x0400, r24
	sei();
    2260:	78 94       	sei
    2262:	08 95       	ret

00002264 <rtc_ms_delay>:


/*
 *	ms wait until
 */
void rtc_ms_delay(int ms){
    2264:	0f 93       	push	r16
    2266:	1f 93       	push	r17
    2268:	cf 93       	push	r28
    226a:	df 93       	push	r29
    226c:	00 d0       	rcall	.+0      	; 0x226e <rtc_ms_delay+0xa>
    226e:	1f 92       	push	r1
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	bc 01       	movw	r22, r24
	rtctick_t tempsnap = rtc_tick_global;
    2276:	80 91 bc 24 	lds	r24, 0x24BC
    227a:	90 91 bd 24 	lds	r25, 0x24BD
    227e:	a0 91 be 24 	lds	r26, 0x24BE
    2282:	b0 91 bf 24 	lds	r27, 0x24BF
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	ab 83       	std	Y+3, r26	; 0x03
    228c:	bc 83       	std	Y+4, r27	; 0x04
	while(rtc_tick_global-tempsnap < rtc_ms_ticks(ms));
    228e:	cb 01       	movw	r24, r22
    2290:	77 0f       	add	r23, r23
    2292:	aa 0b       	sbc	r26, r26
    2294:	bb 0b       	sbc	r27, r27
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	05 2e       	mov	r0, r21
    229c:	5f e0       	ldi	r21, 0x0F	; 15
    229e:	66 0f       	add	r22, r22
    22a0:	77 1f       	adc	r23, r23
    22a2:	88 1f       	adc	r24, r24
    22a4:	99 1f       	adc	r25, r25
    22a6:	5a 95       	dec	r21
    22a8:	d1 f7       	brne	.-12     	; 0x229e <rtc_ms_delay+0x3a>
    22aa:	50 2d       	mov	r21, r0
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3d e7       	ldi	r19, 0x7D	; 125
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	0e 94 cc 11 	call	0x2398	; 0x2398 <__divmodsi4>
    22b8:	89 01       	movw	r16, r18
    22ba:	9a 01       	movw	r18, r20
    22bc:	80 91 bc 24 	lds	r24, 0x24BC
    22c0:	90 91 bd 24 	lds	r25, 0x24BD
    22c4:	a0 91 be 24 	lds	r26, 0x24BE
    22c8:	b0 91 bf 24 	lds	r27, 0x24BF
    22cc:	49 81       	ldd	r20, Y+1	; 0x01
    22ce:	5a 81       	ldd	r21, Y+2	; 0x02
    22d0:	6b 81       	ldd	r22, Y+3	; 0x03
    22d2:	7c 81       	ldd	r23, Y+4	; 0x04
    22d4:	84 1b       	sub	r24, r20
    22d6:	95 0b       	sbc	r25, r21
    22d8:	a6 0b       	sbc	r26, r22
    22da:	b7 0b       	sbc	r27, r23
    22dc:	80 17       	cp	r24, r16
    22de:	91 07       	cpc	r25, r17
    22e0:	a2 07       	cpc	r26, r18
    22e2:	b3 07       	cpc	r27, r19
    22e4:	58 f3       	brcs	.-42     	; 0x22bc <rtc_ms_delay+0x58>
}
    22e6:	24 96       	adiw	r28, 0x04	; 4
    22e8:	cd bf       	out	0x3d, r28	; 61
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	08 95       	ret

000022f6 <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
    22f6:	1f 92       	push	r1
    22f8:	0f 92       	push	r0
    22fa:	0f b6       	in	r0, 0x3f	; 63
    22fc:	0f 92       	push	r0
    22fe:	11 24       	eor	r1, r1
    2300:	8f 93       	push	r24
    2302:	9f 93       	push	r25
    2304:	af 93       	push	r26
    2306:	bf 93       	push	r27
	#if (USE_RTC_TICK == 1)
	rtc_tick_global++;	
    2308:	80 91 bc 24 	lds	r24, 0x24BC
    230c:	90 91 bd 24 	lds	r25, 0x24BD
    2310:	a0 91 be 24 	lds	r26, 0x24BE
    2314:	b0 91 bf 24 	lds	r27, 0x24BF
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	a1 1d       	adc	r26, r1
    231c:	b1 1d       	adc	r27, r1
    231e:	80 93 bc 24 	sts	0x24BC, r24
    2322:	90 93 bd 24 	sts	0x24BD, r25
    2326:	a0 93 be 24 	sts	0x24BE, r26
    232a:	b0 93 bf 24 	sts	0x24BF, r27
	#endif
}
    232e:	bf 91       	pop	r27
    2330:	af 91       	pop	r26
    2332:	9f 91       	pop	r25
    2334:	8f 91       	pop	r24
    2336:	0f 90       	pop	r0
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	0f 90       	pop	r0
    233c:	1f 90       	pop	r1
    233e:	18 95       	reti

00002340 <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
    2340:	1f 92       	push	r1
    2342:	0f 92       	push	r0
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	0f 92       	push	r0
    2348:	11 24       	eor	r1, r1


}
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	0f 90       	pop	r0
    2350:	1f 90       	pop	r1
    2352:	18 95       	reti

00002354 <__udivmodsi4>:
    2354:	a1 e2       	ldi	r26, 0x21	; 33
    2356:	1a 2e       	mov	r1, r26
    2358:	aa 1b       	sub	r26, r26
    235a:	bb 1b       	sub	r27, r27
    235c:	fd 01       	movw	r30, r26
    235e:	0d c0       	rjmp	.+26     	; 0x237a <__udivmodsi4_ep>

00002360 <__udivmodsi4_loop>:
    2360:	aa 1f       	adc	r26, r26
    2362:	bb 1f       	adc	r27, r27
    2364:	ee 1f       	adc	r30, r30
    2366:	ff 1f       	adc	r31, r31
    2368:	a2 17       	cp	r26, r18
    236a:	b3 07       	cpc	r27, r19
    236c:	e4 07       	cpc	r30, r20
    236e:	f5 07       	cpc	r31, r21
    2370:	20 f0       	brcs	.+8      	; 0x237a <__udivmodsi4_ep>
    2372:	a2 1b       	sub	r26, r18
    2374:	b3 0b       	sbc	r27, r19
    2376:	e4 0b       	sbc	r30, r20
    2378:	f5 0b       	sbc	r31, r21

0000237a <__udivmodsi4_ep>:
    237a:	66 1f       	adc	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	1a 94       	dec	r1
    2384:	69 f7       	brne	.-38     	; 0x2360 <__udivmodsi4_loop>
    2386:	60 95       	com	r22
    2388:	70 95       	com	r23
    238a:	80 95       	com	r24
    238c:	90 95       	com	r25
    238e:	9b 01       	movw	r18, r22
    2390:	ac 01       	movw	r20, r24
    2392:	bd 01       	movw	r22, r26
    2394:	cf 01       	movw	r24, r30
    2396:	08 95       	ret

00002398 <__divmodsi4>:
    2398:	05 2e       	mov	r0, r21
    239a:	97 fb       	bst	r25, 7
    239c:	1e f4       	brtc	.+6      	; 0x23a4 <__divmodsi4+0xc>
    239e:	00 94       	com	r0
    23a0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__negsi2>
    23a4:	57 fd       	sbrc	r21, 7
    23a6:	07 d0       	rcall	.+14     	; 0x23b6 <__divmodsi4_neg2>
    23a8:	0e 94 aa 11 	call	0x2354	; 0x2354 <__udivmodsi4>
    23ac:	07 fc       	sbrc	r0, 7
    23ae:	03 d0       	rcall	.+6      	; 0x23b6 <__divmodsi4_neg2>
    23b0:	4e f4       	brtc	.+18     	; 0x23c4 <__divmodsi4_exit>
    23b2:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__negsi2>

000023b6 <__divmodsi4_neg2>:
    23b6:	50 95       	com	r21
    23b8:	40 95       	com	r20
    23ba:	30 95       	com	r19
    23bc:	21 95       	neg	r18
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	4f 4f       	sbci	r20, 0xFF	; 255
    23c2:	5f 4f       	sbci	r21, 0xFF	; 255

000023c4 <__divmodsi4_exit>:
    23c4:	08 95       	ret

000023c6 <__negsi2>:
    23c6:	90 95       	com	r25
    23c8:	80 95       	com	r24
    23ca:	70 95       	com	r23
    23cc:	61 95       	neg	r22
    23ce:	7f 4f       	sbci	r23, 0xFF	; 255
    23d0:	8f 4f       	sbci	r24, 0xFF	; 255
    23d2:	9f 4f       	sbci	r25, 0xFF	; 255
    23d4:	08 95       	ret

000023d6 <__tablejump2__>:
    23d6:	ee 0f       	add	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	88 1f       	adc	r24, r24
    23dc:	8b bf       	out	0x3b, r24	; 59
    23de:	07 90       	elpm	r0, Z+
    23e0:	f6 91       	elpm	r31, Z
    23e2:	e0 2d       	mov	r30, r0
    23e4:	19 94       	eijmp

000023e6 <memcmp>:
    23e6:	fb 01       	movw	r30, r22
    23e8:	dc 01       	movw	r26, r24
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <memcmp+0xe>
    23ec:	8d 91       	ld	r24, X+
    23ee:	01 90       	ld	r0, Z+
    23f0:	80 19       	sub	r24, r0
    23f2:	21 f4       	brne	.+8      	; 0x23fc <memcmp+0x16>
    23f4:	41 50       	subi	r20, 0x01	; 1
    23f6:	50 40       	sbci	r21, 0x00	; 0
    23f8:	c8 f7       	brcc	.-14     	; 0x23ec <memcmp+0x6>
    23fa:	88 1b       	sub	r24, r24
    23fc:	99 0b       	sbc	r25, r25
    23fe:	08 95       	ret

00002400 <memcpy>:
    2400:	fb 01       	movw	r30, r22
    2402:	dc 01       	movw	r26, r24
    2404:	02 c0       	rjmp	.+4      	; 0x240a <memcpy+0xa>
    2406:	01 90       	ld	r0, Z+
    2408:	0d 92       	st	X+, r0
    240a:	41 50       	subi	r20, 0x01	; 1
    240c:	50 40       	sbci	r21, 0x00	; 0
    240e:	d8 f7       	brcc	.-10     	; 0x2406 <memcpy+0x6>
    2410:	08 95       	ret

00002412 <memset>:
    2412:	dc 01       	movw	r26, r24
    2414:	01 c0       	rjmp	.+2      	; 0x2418 <memset+0x6>
    2416:	6d 93       	st	X+, r22
    2418:	41 50       	subi	r20, 0x01	; 1
    241a:	50 40       	sbci	r21, 0x00	; 0
    241c:	e0 f7       	brcc	.-8      	; 0x2416 <memset+0x4>
    241e:	08 95       	ret

00002420 <_exit>:
    2420:	f8 94       	cli

00002422 <__stop_program>:
    2422:	ff cf       	rjmp	.-2      	; 0x2422 <__stop_program>
