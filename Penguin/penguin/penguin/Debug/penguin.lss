
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002b4  00802000  000014ca  0000155e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004bd  008022b4  008022b4  00001812  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a6b4  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c2a  00000000  00000000  0000c678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bda  00000000  00000000  0000e2a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001600  00000000  00000000  00010e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004409  00000000  00000000  0001247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000055d5  00000000  00000000  00016885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007c0  00000000  00000000  0001be5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
       c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
      28:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_10>
      2c:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_11>
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
      30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	if (Endpoint_IsSETUPReceived())
      3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
      44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

		switch (USB_ControlRequest.bRequest)
      4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      64:	0c 94 eb 07 	jmp	0xfd6	; 0xfd6 <__vector_25>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      68:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__vector_26>
      6c:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_27>
      70:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__vector_28>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
      74:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_29>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
      78:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__vector_30>
      7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
      80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
      8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
      9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
      a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
      a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				Endpoint_Write_8(Data >> 8);
      ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
      b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
      b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
      bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
      cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
      d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
      e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
      e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      e8:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_58>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
      ec:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__vector_59>
      f0:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__vector_60>
					{
						Endpoint_StallTransaction();
      f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
      f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
      fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
     108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
     114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
     124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearSETUP();
     128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
     13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_ClearStatusStage();
     140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	while (!(Endpoint_IsINReady()));
     144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
     14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     160:	0c 94 27 08 	jmp	0x104e	; 0x104e <__vector_88>
     164:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__vector_89>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     168:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__vector_90>
     16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
     190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					SerialByte = pgm_read_byte(SigReadAddress);
     19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					NVM.CMD    = 0;
     1a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					if (SerialCharNum & 0x01)
     1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
					{
						SerialByte >>= 4;
     1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;
     1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     1c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
     1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
	Endpoint_ClearOUT();
     1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
     1f4:	0c 94 3e 09 	jmp	0x127c	; 0x127c <__vector_125>
     1f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001fc <__ctors_end>:
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
     1fc:	11 24       	eor	r1, r1
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e9       	ldi	r29, 0x9F	; 159
     206:	de bf       	out	0x3e, r29	; 62
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
     208:	00 e0       	ldi	r16, 0x00	; 0
     20a:	0c bf       	out	0x3c, r16	; 60

0000020c <__do_copy_data>:
     20c:	12 e2       	ldi	r17, 0x22	; 34
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     20e:	a0 e0       	ldi	r26, 0x00	; 0
     210:	b0 e2       	ldi	r27, 0x20	; 32
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
     212:	ea ec       	ldi	r30, 0xCA	; 202
     214:	f4 e1       	ldi	r31, 0x14	; 20

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     216:	00 e0       	ldi	r16, 0x00	; 0
     218:	0b bf       	out	0x3b, r16	; 59
     21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
     21c:	07 90       	elpm	r0, Z+
	Endpoint_ClearIN();
     21e:	0d 92       	st	X+, r0
     220:	a4 3b       	cpi	r26, 0xB4	; 180

	Endpoint_ClearStatusStage();
     222:	b1 07       	cpc	r27, r17
     224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
     226:	27 e2       	ldi	r18, 0x27	; 39
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     228:	a4 eb       	ldi	r26, 0xB4	; 180
     22a:	b2 e2       	ldi	r27, 0x22	; 34
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
     22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
     230:	a1 37       	cpi	r26, 0x71	; 113
     232:	b2 07       	cpc	r27, r18
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
     234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
     236:	0e 94 96 06 	call	0xd2c	; 0xd2c <main>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     23a:	0c 94 63 0a 	jmp	0x14c6	; 0x14c6 <_exit>

0000023e <__bad_interrupt>:
     23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <arch_spi_master_transmit_byte_val>:
}


static uint8_t arch_spi_master_transmit_byte_val(uint8_t data)
{
	NRF24L01P_SPI.DATA = data;
     242:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS &(1<<SPI_IF_bp)));
     246:	e0 ec       	ldi	r30, 0xC0	; 192
     248:	f8 e0       	ldi	r31, 0x08	; 8
     24a:	82 81       	ldd	r24, Z+2	; 0x02
     24c:	88 23       	and	r24, r24
     24e:	ec f7       	brge	.-6      	; 0x24a <arch_spi_master_transmit_byte_val+0x8>
	return SPIC.DATA;
     250:	80 91 c3 08 	lds	r24, 0x08C3
}
     254:	08 95       	ret

00000256 <arch_spi_master_transmit_byte_ref>:

static uint8_t arch_spi_master_transmit_byte_ref(uint8_t *data)
{
	NRF24L01P_SPI.DATA = *data;
     256:	fc 01       	movw	r30, r24
     258:	80 81       	ld	r24, Z
     25a:	80 93 c3 08 	sts	0x08C3, r24
	while(!(NRF24L01P_SPI.STATUS &(1<<SPI_IF_bp)));
     25e:	e0 ec       	ldi	r30, 0xC0	; 192
     260:	f8 e0       	ldi	r31, 0x08	; 8
     262:	82 81       	ldd	r24, Z+2	; 0x02
     264:	88 23       	and	r24, r24
     266:	ec f7       	brge	.-6      	; 0x262 <arch_spi_master_transmit_byte_ref+0xc>
	return NRF24L01P_SPI.DATA;
     268:	80 91 c3 08 	lds	r24, 0x08C3
}
     26c:	08 95       	ret

0000026e <_nrf24l01p_ce_pin>:
 */ 

#include "nrf24l01p.h"


void _nrf24l01p_ce_pin(bool state){
     26e:	cf 93       	push	r28
     270:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_ce_pin(bool state){
	//if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	//else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
	
	if(state) DigitalPin_SetValue(&nrf24l01p_ce_pin) ;
     272:	88 23       	and	r24, r24
     274:	29 f0       	breq	.+10     	; 0x280 <_nrf24l01p_ce_pin+0x12>
     276:	80 e0       	ldi	r24, 0x00	; 0
     278:	90 e2       	ldi	r25, 0x20	; 32
     27a:	0e 94 cb 07 	call	0xf96	; 0xf96 <DigitalPin_SetValue>
     27e:	04 c0       	rjmp	.+8      	; 0x288 <_nrf24l01p_ce_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_ce_pin);
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e2       	ldi	r25, 0x20	; 32
     284:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DigitalPin_ClearValue>
	arch_nrf24l01p_ce_pin(state);
	ce_value = state;
     288:	c0 93 c3 24 	sts	0x24C3, r28
}
     28c:	cf 91       	pop	r28
     28e:	08 95       	ret

00000290 <_nrf24l01p_csn_pin>:
void _nrf24l01p_csn_pin(bool state){
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24

static void arch_nrf24l01p_csn_pin(bool state){
// 	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
// 	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);

	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
     294:	88 23       	and	r24, r24
     296:	29 f0       	breq	.+10     	; 0x2a2 <_nrf24l01p_csn_pin+0x12>
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	90 e2       	ldi	r25, 0x20	; 32
     29c:	0e 94 cb 07 	call	0xf96	; 0xf96 <DigitalPin_SetValue>
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <_nrf24l01p_csn_pin+0x1a>
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
     2a2:	83 e0       	ldi	r24, 0x03	; 3
     2a4:	90 e2       	ldi	r25, 0x20	; 32
     2a6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <DigitalPin_ClearValue>

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     2aa:	c0 93 c2 24 	sts	0x24C2, r28
}
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <_nrf24l01p_read_register>:
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
	_nrf24l01p_startup();
	
}

void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	c8 2f       	mov	r28, r24
     2c0:	7b 01       	movw	r14, r22
     2c2:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
     2ca:	8c 2f       	mov	r24, r28
     2cc:	8f 71       	andi	r24, 0x1F	; 31
     2ce:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     2d2:	10 16       	cp	r1, r16
     2d4:	11 06       	cpc	r1, r17
     2d6:	94 f4       	brge	.+36     	; 0x2fc <_nrf24l01p_read_register+0x4a>
     2d8:	e7 01       	movw	r28, r14
     2da:	0e 0d       	add	r16, r14
     2dc:	1f 1d       	adc	r17, r15
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
	*data = NRF24L01P_SPI.DATA;
     2de:	0f 2e       	mov	r0, r31
     2e0:	f0 ec       	ldi	r31, 0xC0	; 192
     2e2:	ef 2e       	mov	r14, r31
     2e4:	f8 e0       	ldi	r31, 0x08	; 8
     2e6:	ff 2e       	mov	r15, r31
     2e8:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     2ea:	8f ef       	ldi	r24, 0xFF	; 255
     2ec:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     2f0:	f7 01       	movw	r30, r14
     2f2:	83 81       	ldd	r24, Z+3	; 0x03
     2f4:	89 93       	st	Y+, r24
     2f6:	c0 17       	cp	r28, r16
     2f8:	d1 07       	cpc	r29, r17
     2fa:	b9 f7       	brne	.-18     	; 0x2ea <_nrf24l01p_read_register+0x38>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	ff 90       	pop	r15
     30c:	ef 90       	pop	r14
     30e:	08 95       	ret

00000310 <_nrf24l01p_write_register>:

void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	c8 2f       	mov	r28, r24
     31e:	7b 01       	movw	r14, r22
     320:	8a 01       	movw	r16, r20
	_nrf24l01p_csn_pin(0);
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
     328:	8c 2f       	mov	r24, r28
     32a:	8f 71       	andi	r24, 0x1F	; 31
     32c:	80 62       	ori	r24, 0x20	; 32
     32e:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     332:	10 16       	cp	r1, r16
     334:	11 06       	cpc	r1, r17
     336:	54 f4       	brge	.+20     	; 0x34c <_nrf24l01p_write_register+0x3c>
     338:	e7 01       	movw	r28, r14
     33a:	0e 0d       	add	r16, r14
     33c:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 2b 01 	call	0x256	; 0x256 <arch_spi_master_transmit_byte_ref>
     344:	21 96       	adiw	r28, 0x01	; 1
}

void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
     346:	c0 17       	cp	r28, r16
     348:	d1 07       	cpc	r29, r17
     34a:	c9 f7       	brne	.-14     	; 0x33e <_nrf24l01p_write_register+0x2e>
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <_nrf24l01p_read_rx_payload>:



void _nrf24l01p_read_rx_payload(uint8_t *dataout, int pay_len){
     360:	ef 92       	push	r14
     362:	ff 92       	push	r15
     364:	0f 93       	push	r16
     366:	1f 93       	push	r17
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	7c 01       	movw	r14, r24
     36e:	8b 01       	movw	r16, r22
	_nrf24l01p_csn_pin(0);
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_RD_RX_PAYLOAD);
     376:	81 e6       	ldi	r24, 0x61	; 97
     378:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     37c:	10 16       	cp	r1, r16
     37e:	11 06       	cpc	r1, r17
     380:	94 f4       	brge	.+36     	; 0x3a6 <_nrf24l01p_read_rx_payload+0x46>
     382:	e7 01       	movw	r28, r14
     384:	0e 0d       	add	r16, r14
     386:	1f 1d       	adc	r17, r15
     388:	0f 2e       	mov	r0, r31
     38a:	f0 ec       	ldi	r31, 0xC0	; 192
     38c:	ef 2e       	mov	r14, r31
     38e:	f8 e0       	ldi	r31, 0x08	; 8
     390:	ff 2e       	mov	r15, r31
     392:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     39a:	f7 01       	movw	r30, r14
     39c:	93 81       	ldd	r25, Z+3	; 0x03
     39e:	99 93       	st	Y+, r25
     3a0:	c0 17       	cp	r28, r16
     3a2:	d1 07       	cpc	r29, r17
     3a4:	b9 f7       	brne	.-18     	; 0x394 <_nrf24l01p_read_rx_payload+0x34>
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_nrf24l01p_flush_rx>:
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
     3c0:	82 ee       	ldi	r24, 0xE2	; 226
     3c2:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	_nrf24l01p_csn_pin(1);
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
     3cc:	08 95       	ret

000003ce <_nrf24l01p_read_rx_payload_width>:
void _nrf24l01p_reuse_tx_payload(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_REUSE_TX_PL);
	_nrf24l01p_csn_pin(1);
}
int _nrf24l01p_read_rx_payload_width(){
     3ce:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_R_RX_PL_WID);
     3d6:	80 e6       	ldi	r24, 0x60	; 96
     3d8:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
	uint8_t temp =  arch_spi_master_transmit_byte_val(0xFF);
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     3e2:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	return temp;
}
     3ea:	8c 2f       	mov	r24, r28
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	cf 91       	pop	r28
     3f0:	08 95       	ret

000003f2 <_nrf24l01p_get_status>:
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
     3f2:	cf 93       	push	r28
	_nrf24l01p_csn_pin(0);
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	0e 94 21 01 	call	0x242	; 0x242 <arch_spi_master_transmit_byte_val>
     400:	c8 2f       	mov	r28, r24
	_nrf24l01p_csn_pin(1);
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	return temp;
}
     408:	8c 2f       	mov	r24, r28
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <_nrf24l01p_power_up>:

void _nrf24l01p_power_up(){
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PWR_UP;
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	82 60       	ori	r24, 0x02	; 2
     42e:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	be 01       	movw	r22, r28
     436:	6f 5f       	subi	r22, 0xFF	; 255
     438:	7f 4f       	sbci	r23, 0xFF	; 255
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	8f e9       	ldi	r24, 0x9F	; 159
     442:	9c e8       	ldi	r25, 0x8C	; 140
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <_nrf24l01p_power_up+0x34>
     448:	00 c0       	rjmp	.+0      	; 0x44a <_nrf24l01p_power_up+0x3a>
     44a:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	mode = _NRF24L01P_MODE_STANDBY;
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	80 93 c4 24 	sts	0x24C4, r24
}
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <_nrf24l01p_power_down>:
void _nrf24l01p_power_down(){
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	1f 92       	push	r1
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     464:	41 e0       	ldi	r20, 0x01	; 1
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	be 01       	movw	r22, r28
     46a:	6f 5f       	subi	r22, 0xFF	; 255
     46c:	7f 4f       	sbci	r23, 0xFF	; 255
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PWR_UP;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	8d 7f       	andi	r24, 0xFD	; 253
     478:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     47a:	41 e0       	ldi	r20, 0x01	; 1
     47c:	50 e0       	ldi	r21, 0x00	; 0
     47e:	be 01       	movw	r22, r28
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_POWER_DOWN;
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	80 93 c4 24 	sts	0x24C4, r24
}
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <_nrf24l01p_rx_mode>:
void _nrf24l01p_rx_mode(){
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	1f 92       	push	r1
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PRIM_RX;
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	81 60       	ori	r24, 0x01	; 1
     4b6:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	be 01       	movw	r22, r28
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_RX;
     4c8:	83 e0       	ldi	r24, 0x03	; 3
     4ca:	80 93 c4 24 	sts	0x24C4, r24
}
     4ce:	0f 90       	pop	r0
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <_nrf24l01p_enable_auto_ack>:
	temp &= ~(_NRF24L01P_CONFIG_CRC_MASK);
	temp |= opt;
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
}

void _nrf24l01p_enable_auto_ack(_nrf24l01p_pipe_t pipe){
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	1f 92       	push	r1
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     4e4:	41 e0       	ldi	r20, 0x01	; 1
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	be 01       	movw	r22, r28
     4ea:	6f 5f       	subi	r22, 0xFF	; 255
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     4f4:	21 e0       	ldi	r18, 0x01	; 1
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	c9 01       	movw	r24, r18
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <_nrf24l01p_enable_auto_ack+0x2a>
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
     500:	1a 95       	dec	r17
     502:	e2 f7       	brpl	.-8      	; 0x4fc <_nrf24l01p_enable_auto_ack+0x26>
     504:	99 81       	ldd	r25, Y+1	; 0x01
     506:	89 2b       	or	r24, r25
     508:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	be 01       	movw	r22, r28
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     51a:	0f 90       	pop	r0
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <_nrf24l01p_disable_auto_ack_all_pipes>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
	clr_bit(temp,pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
}
void _nrf24l01p_disable_auto_ack_all_pipes(){
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
     52e:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     530:	41 e0       	ldi	r20, 0x01	; 1
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     540:	0f 90       	pop	r0
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	08 95       	ret

00000548 <_nrf24l01p_enable_rx_on_pipe>:

void _nrf24l01p_enable_rx_on_pipe(_nrf24l01p_pipe_t pipe){
     548:	1f 93       	push	r17
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	1f 92       	push	r1
     550:	cd b7       	in	r28, 0x3d	; 61
     552:	de b7       	in	r29, 0x3e	; 62
     554:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     556:	41 e0       	ldi	r20, 0x01	; 1
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	c9 01       	movw	r24, r18
     56c:	02 c0       	rjmp	.+4      	; 0x572 <_nrf24l01p_enable_rx_on_pipe+0x2a>
     56e:	88 0f       	add	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	1a 95       	dec	r17
     574:	e2 f7       	brpl	.-8      	; 0x56e <_nrf24l01p_enable_rx_on_pipe+0x26>
     576:	99 81       	ldd	r25, Y+1	; 0x01
     578:	89 2b       	or	r24, r25
     57a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     57c:	41 e0       	ldi	r20, 0x01	; 1
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	be 01       	movw	r22, r28
     582:	6f 5f       	subi	r22, 0xFF	; 255
     584:	7f 4f       	sbci	r23, 0xFF	; 255
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     58c:	0f 90       	pop	r0
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	08 95       	ret

00000596 <_nrf24l01p_set_auto_retransmission_delay>:
uint8_t _nrf24l01p_read_auto_retransmission_count(){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
     596:	1f 93       	push	r17
     598:	cf 93       	push	r28
     59a:	df 93       	push	r29
     59c:	1f 92       	push	r1
     59e:	cd b7       	in	r28, 0x3d	; 61
     5a0:	de b7       	in	r29, 0x3e	; 62
     5a2:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     5a4:	41 e0       	ldi	r20, 0x01	; 1
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp &= ~(0xF0);
	temp |= (times250us<<4);
     5b4:	20 e1       	ldi	r18, 0x10	; 16
     5b6:	12 9f       	mul	r17, r18
     5b8:	c0 01       	movw	r24, r0
     5ba:	11 24       	eor	r1, r1
	return temp & 0x0F;
}
void _nrf24l01p_set_auto_retransmission_delay(uint8_t times250us){
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
	temp &= ~(0xF0);
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	9f 70       	andi	r25, 0x0F	; 15
	temp |= (times250us<<4);
     5c0:	89 2b       	or	r24, r25
     5c2:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_SETUP_RETR,&temp,sizeof(temp));
     5c4:	41 e0       	ldi	r20, 0x01	; 1
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	be 01       	movw	r22, r28
     5ca:	6f 5f       	subi	r22, 0xFF	; 255
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     5d4:	0f 90       	pop	r0
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <_nrf24l01p_clear_data_ready_flag>:
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_RX_DR)flag = 1  ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_clear_data_ready_flag(){
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	1f 92       	push	r1
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     5e8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_RX_DR;
     5ec:	80 64       	ori	r24, 0x40	; 64
     5ee:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     5f0:	41 e0       	ldi	r20, 0x01	; 1
     5f2:	50 e0       	ldi	r21, 0x00	; 0
     5f4:	be 01       	movw	r22, r28
     5f6:	6f 5f       	subi	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <_nrf24l01p_set_RX_pipe_address>:
	if(temp!=0) flag = 1  ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_set_RX_pipe_address(_nrf24l01p_pipe_t pipe,uint64_t address){
     608:	2f 92       	push	r2
     60a:	3f 92       	push	r3
     60c:	4f 92       	push	r4
     60e:	5f 92       	push	r5
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	25 97       	sbiw	r28, 0x05	; 5
     632:	cd bf       	out	0x3d, r28	; 61
     634:	de bf       	out	0x3e, r29	; 62
     636:	48 2e       	mov	r4, r24
     638:	b0 2e       	mov	r11, r16
     63a:	a2 2e       	mov	r10, r18
     63c:	93 2e       	mov	r9, r19
     63e:	84 2e       	mov	r8, r20
     640:	75 2e       	mov	r7, r21
     642:	66 2e       	mov	r6, r22
     644:	57 2e       	mov	r5, r23
// 	else if (pipe == 2) max_pipe_addr_width = 1;
// 	else if (pipe == 3) max_pipe_addr_width = 1;
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
     646:	81 e0       	ldi	r24, 0x01	; 1
     648:	84 15       	cp	r24, r4
     64a:	68 f4       	brcc	.+26     	; 0x666 <_nrf24l01p_set_RX_pipe_address+0x5e>
	{
		max_pipe_addr_width = 5;
	}
	else if ((pipe>=2) && (pipe<=5)   ){
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8e ef       	ldi	r24, 0xFE	; 254
     652:	84 0d       	add	r24, r4
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	08 f0       	brcs	.+2      	; 0x65a <_nrf24l01p_set_RX_pipe_address+0x52>
     658:	20 e0       	ldi	r18, 0x00	; 0
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     65a:	c2 2e       	mov	r12, r18
     65c:	d9 2e       	mov	r13, r25
	}
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
     65e:	1c 14       	cp	r1, r12
     660:	1d 04       	cpc	r1, r13
     662:	34 f0       	brlt	.+12     	; 0x670 <_nrf24l01p_set_RX_pipe_address+0x68>
     664:	21 c0       	rjmp	.+66     	; 0x6a8 <_nrf24l01p_set_RX_pipe_address+0xa0>
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     666:	0f 2e       	mov	r0, r31
     668:	f5 e0       	ldi	r31, 0x05	; 5
     66a:	cf 2e       	mov	r12, r31
     66c:	d1 2c       	mov	r13, r1
     66e:	f0 2d       	mov	r31, r0
     670:	de 01       	movw	r26, r28
     672:	11 96       	adiw	r26, 0x01	; 1
     674:	7d 01       	movw	r14, r26
     676:	21 2c       	mov	r2, r1
     678:	31 2c       	mov	r3, r1
     67a:	e0 e0       	ldi	r30, 0x00	; 0
     67c:	f0 e0       	ldi	r31, 0x00	; 0
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
		temp[i] = (address>>(8*i))&0xFF;
     67e:	2b 2d       	mov	r18, r11
     680:	31 2f       	mov	r19, r17
     682:	4a 2d       	mov	r20, r10
     684:	59 2d       	mov	r21, r9
     686:	68 2d       	mov	r22, r8
     688:	77 2d       	mov	r23, r7
     68a:	86 2d       	mov	r24, r6
     68c:	95 2d       	mov	r25, r5
     68e:	02 2d       	mov	r16, r2
     690:	0e 94 47 0a 	call	0x148e	; 0x148e <__lshrdi3>
     694:	d7 01       	movw	r26, r14
     696:	2d 93       	st	X+, r18
     698:	7d 01       	movw	r14, r26
	}
	
	
	
	uint8_t temp[5];
	for(int i=0;i<max_pipe_addr_width;i++){
     69a:	31 96       	adiw	r30, 0x01	; 1
     69c:	b8 e0       	ldi	r27, 0x08	; 8
     69e:	2b 0e       	add	r2, r27
     6a0:	31 1c       	adc	r3, r1
     6a2:	ec 15       	cp	r30, r12
     6a4:	fd 05       	cpc	r31, r13
     6a6:	5c f3       	brlt	.-42     	; 0x67e <_nrf24l01p_set_RX_pipe_address+0x76>
		temp[i] = (address>>(8*i))&0xFF;
	}
	_nrf24l01p_write_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
     6a8:	a6 01       	movw	r20, r12
     6aa:	be 01       	movw	r22, r28
     6ac:	6f 5f       	subi	r22, 0xFF	; 255
     6ae:	7f 4f       	sbci	r23, 0xFF	; 255
     6b0:	8a e0       	ldi	r24, 0x0A	; 10
     6b2:	84 0d       	add	r24, r4
     6b4:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	
}
     6b8:	25 96       	adiw	r28, 0x05	; 5
     6ba:	cd bf       	out	0x3d, r28	; 61
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	1f 91       	pop	r17
     6c4:	0f 91       	pop	r16
     6c6:	ff 90       	pop	r15
     6c8:	ef 90       	pop	r14
     6ca:	df 90       	pop	r13
     6cc:	cf 90       	pop	r12
     6ce:	bf 90       	pop	r11
     6d0:	af 90       	pop	r10
     6d2:	9f 90       	pop	r9
     6d4:	8f 90       	pop	r8
     6d6:	7f 90       	pop	r7
     6d8:	6f 90       	pop	r6
     6da:	5f 90       	pop	r5
     6dc:	4f 90       	pop	r4
     6de:	3f 90       	pop	r3
     6e0:	2f 90       	pop	r2
     6e2:	08 95       	ret

000006e4 <_nrf24l01p_get_RX_pipe_address>:
uint64_t _nrf24l01p_get_RX_pipe_address(_nrf24l01p_pipe_t pipe){
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	2d 97       	sbiw	r28, 0x0d	; 13
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	de bf       	out	0x3e, r29	; 62
// 	else if (pipe == 2) max_pipe_addr_width = 1;
// 	else if (pipe == 3) max_pipe_addr_width = 1;
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
     6f6:	82 30       	cpi	r24, 0x02	; 2
     6f8:	90 f1       	brcs	.+100    	; 0x75e <_nrf24l01p_get_RX_pipe_address+0x7a>
	{
		max_pipe_addr_width = 5;
	}
	else if ((pipe>=2) && (pipe<=5)   ){
     6fa:	41 e0       	ldi	r20, 0x01	; 1
     6fc:	50 e0       	ldi	r21, 0x00	; 0
     6fe:	9e ef       	ldi	r25, 0xFE	; 254
     700:	98 0f       	add	r25, r24
     702:	94 30       	cpi	r25, 0x04	; 4
     704:	08 f0       	brcs	.+2      	; 0x708 <_nrf24l01p_get_RX_pipe_address+0x24>
     706:	40 e0       	ldi	r20, 0x00	; 0
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     708:	04 2f       	mov	r16, r20
     70a:	15 2f       	mov	r17, r21
	else if ((pipe>=2) && (pipe<=5)   ){
		max_pipe_addr_width = 1;
	}
	
	uint8_t temp[5];
	_nrf24l01p_read_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	86 5f       	subi	r24, 0xF6	; 246
     714:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	
	uint64_t temp_addr = 0;
     718:	1e 82       	std	Y+6, r1	; 0x06
     71a:	1f 82       	std	Y+7, r1	; 0x07
     71c:	18 86       	std	Y+8, r1	; 0x08
     71e:	19 86       	std	Y+9, r1	; 0x09
     720:	1a 86       	std	Y+10, r1	; 0x0a
     722:	1b 86       	std	Y+11, r1	; 0x0b
     724:	1c 86       	std	Y+12, r1	; 0x0c
     726:	1d 86       	std	Y+13, r1	; 0x0d
	uint8_t *temp_addr_ptr = (uint8_t*) &temp_addr;
	for(int i=0;i<max_pipe_addr_width;i++){
     728:	10 16       	cp	r1, r16
     72a:	11 06       	cpc	r1, r17
     72c:	7c f4       	brge	.+30     	; 0x74c <_nrf24l01p_get_RX_pipe_address+0x68>
     72e:	de 01       	movw	r26, r28
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	fe 01       	movw	r30, r28
     734:	36 96       	adiw	r30, 0x06	; 6
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
	_nrf24l01p_read_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
	
	uint64_t temp_addr = 0;
	uint8_t *temp_addr_ptr = (uint8_t*) &temp_addr;
	for(int i=0;i<max_pipe_addr_width;i++){
		*(temp_addr_ptr+i)|= (temp[i]);
     73a:	8d 91       	ld	r24, X+
     73c:	90 81       	ld	r25, Z
     73e:	89 2b       	or	r24, r25
     740:	81 93       	st	Z+, r24
	uint8_t temp[5];
	_nrf24l01p_read_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
	
	uint64_t temp_addr = 0;
	uint8_t *temp_addr_ptr = (uint8_t*) &temp_addr;
	for(int i=0;i<max_pipe_addr_width;i++){
     742:	2f 5f       	subi	r18, 0xFF	; 255
     744:	3f 4f       	sbci	r19, 0xFF	; 255
     746:	20 17       	cp	r18, r16
     748:	31 07       	cpc	r19, r17
     74a:	bc f3       	brlt	.-18     	; 0x73a <_nrf24l01p_get_RX_pipe_address+0x56>
		*(temp_addr_ptr+i)|= (temp[i]);
	}
	
	return temp_addr;	
     74c:	2e 81       	ldd	r18, Y+6	; 0x06
     74e:	3f 81       	ldd	r19, Y+7	; 0x07
     750:	48 85       	ldd	r20, Y+8	; 0x08
     752:	59 85       	ldd	r21, Y+9	; 0x09
     754:	6a 85       	ldd	r22, Y+10	; 0x0a
     756:	7b 85       	ldd	r23, Y+11	; 0x0b
     758:	8c 85       	ldd	r24, Y+12	; 0x0c
     75a:	9d 85       	ldd	r25, Y+13	; 0x0d
     75c:	13 c0       	rjmp	.+38     	; 0x784 <_nrf24l01p_get_RX_pipe_address+0xa0>
	else if ((pipe>=2) && (pipe<=5)   ){
		max_pipe_addr_width = 1;
	}
	
	uint8_t temp[5];
	_nrf24l01p_read_register(_NRF24L01P_REG_RX_ADDR_P0 + pipe,temp,max_pipe_addr_width);
     75e:	45 e0       	ldi	r20, 0x05	; 5
     760:	50 e0       	ldi	r21, 0x00	; 0
     762:	be 01       	movw	r22, r28
     764:	6f 5f       	subi	r22, 0xFF	; 255
     766:	7f 4f       	sbci	r23, 0xFF	; 255
     768:	86 5f       	subi	r24, 0xF6	; 246
     76a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	
	uint64_t temp_addr = 0;
     76e:	1e 82       	std	Y+6, r1	; 0x06
     770:	1f 82       	std	Y+7, r1	; 0x07
     772:	18 86       	std	Y+8, r1	; 0x08
     774:	19 86       	std	Y+9, r1	; 0x09
     776:	1a 86       	std	Y+10, r1	; 0x0a
     778:	1b 86       	std	Y+11, r1	; 0x0b
     77a:	1c 86       	std	Y+12, r1	; 0x0c
     77c:	1d 86       	std	Y+13, r1	; 0x0d
// 	else if (pipe == 4) max_pipe_addr_width = 1;
// 	else if (pipe == 5) max_pipe_addr_width = 1;
	
	if((pipe>=0) && (pipe<=1)   )
	{
		max_pipe_addr_width = 5;
     77e:	05 e0       	ldi	r16, 0x05	; 5
     780:	10 e0       	ldi	r17, 0x00	; 0
     782:	d5 cf       	rjmp	.-86     	; 0x72e <_nrf24l01p_get_RX_pipe_address+0x4a>
	for(int i=0;i<max_pipe_addr_width;i++){
		*(temp_addr_ptr+i)|= (temp[i]);
	}
	
	return temp_addr;	
}
     784:	2d 96       	adiw	r28, 0x0d	; 13
     786:	cd bf       	out	0x3d, r28	; 61
     788:	de bf       	out	0x3e, r29	; 62
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
     790:	0f 91       	pop	r16
     792:	08 95       	ret

00000794 <_nrf24l01p_get_fifo_flag_rx_empty>:
uint8_t _nrf24l01p_get_RX_pipe_width(_nrf24l01p_pipe_t pipe){
	uint8_t temp;
	_nrf24l01p_read_register((_NRF24L01P_REG_RX_PW_P0+pipe),&temp,sizeof(temp));
	return (temp&(0x3F));
}
bool _nrf24l01p_get_fifo_flag_rx_empty(){
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	1f 92       	push	r1
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	bool flag;
	_nrf24l01p_read_register(_NRF24L01P_REG_FIFO_STATUS,&temp,sizeof(temp));
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	be 01       	movw	r22, r28
     7a4:	6f 5f       	subi	r22, 0xFF	; 255
     7a6:	7f 4f       	sbci	r23, 0xFF	; 255
     7a8:	87 e1       	ldi	r24, 0x17	; 23
     7aa:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	if(temp&_NRF24L01P_FIFO_STATUS_RX_EMPTY) flag = 1 ;
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
	else flag = 0;
	return flag;
	
}
     7b0:	81 70       	andi	r24, 0x01	; 1
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <_nrf24l01p_enable_dynamic_payload_pipe>:
	if(temp&_NRF24L01P_FIFO_STATUS_RX_REUSE) flag = 1 ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_enable_dynamic_payload_pipe(_nrf24l01p_pipe_t pipe){
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	1f 92       	push	r1
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
     7c6:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	be 01       	movw	r22, r28
     7ce:	6f 5f       	subi	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	8c e1       	ldi	r24, 0x1C	; 28
     7d4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= (1<<pipe);
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	c9 01       	movw	r24, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     7e0:	88 0f       	add	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	1a 95       	dec	r17
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     7e8:	99 81       	ldd	r25, Y+1	; 0x01
     7ea:	89 2b       	or	r24, r25
     7ec:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	50 e0       	ldi	r21, 0x00	; 0
     7f2:	be 01       	movw	r22, r28
     7f4:	6f 5f       	subi	r22, 0xFF	; 255
     7f6:	7f 4f       	sbci	r23, 0xFF	; 255
     7f8:	8c e1       	ldi	r24, 0x1C	; 28
     7fa:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	08 95       	ret

00000808 <_nrf24l01p_disable_dynamic_payload_all_pipe>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
	temp &= ~(1<<pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
}
void _nrf24l01p_disable_dynamic_payload_all_pipe(){
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	1f 92       	push	r1
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0x00;
     812:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));	
     814:	41 e0       	ldi	r20, 0x01	; 1
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	8c e1       	ldi	r24, 0x1C	; 28
     820:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <_nrf24l01p_enable_dynamic_payload>:
void _nrf24l01p_enable_dynamic_payload(){
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	1f 92       	push	r1
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	be 01       	movw	r22, r28
     83c:	6f 5f       	subi	r22, 0xFF	; 255
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	8d e1       	ldi	r24, 0x1D	; 29
     842:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_DPL;
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	84 60       	ori	r24, 0x04	; 4
     84a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	be 01       	movw	r22, r28
     852:	6f 5f       	subi	r22, 0xFF	; 255
     854:	7f 4f       	sbci	r23, 0xFF	; 255
     856:	8d e1       	ldi	r24, 0x1D	; 29
     858:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <_nrf24l01p_enable_payload_with_ack>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
	temp &= ~_NRF24L01_FEATURE_EN_DPL;
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
}
void _nrf24l01p_enable_payload_with_ack(){
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	1f 92       	push	r1
     86a:	cd b7       	in	r28, 0x3d	; 61
     86c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     86e:	41 e0       	ldi	r20, 0x01	; 1
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	8d e1       	ldi	r24, 0x1D	; 29
     87a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_ACK_PAY;
     87e:	89 81       	ldd	r24, Y+1	; 0x01
     880:	82 60       	ori	r24, 0x02	; 2
     882:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	be 01       	movw	r22, r28
     88a:	6f 5f       	subi	r22, 0xFF	; 255
     88c:	7f 4f       	sbci	r23, 0xFF	; 255
     88e:	8d e1       	ldi	r24, 0x1D	; 29
     890:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
}
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <_nrf24l01p_startup>:
// 	printf("fifo status : %x\r\n",read_register(_NRF24L01P_REG_FIFO_STATUS));
}


//////////////////////////////////////////////////////////////////////////
void _nrf24l01p_startup(){
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
	#define TRANSFER_SIZE 1
	uint8_t temp = 0b00000111;
     8a6:	87 e0       	ldi	r24, 0x07	; 7
     8a8:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	be 01       	movw	r22, r28
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	86 e0       	ldi	r24, 0x06	; 6
     8b6:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>

	temp = 0;
     8ba:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(uint8_t));
     8bc:	41 e0       	ldi	r20, 0x01	; 1
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	be 01       	movw	r22, r28
     8c2:	6f 5f       	subi	r22, 0xFF	; 255
     8c4:	7f 4f       	sbci	r23, 0xFF	; 255
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	temp = TRANSFER_SIZE;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	be 01       	movw	r22, r28
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	86 e0       	ldi	r24, 0x06	; 6
     8dc:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_power_up();
     8e0:	0e 94 08 02 	call	0x410	; 0x410 <_nrf24l01p_power_up>
     8e4:	8f e9       	ldi	r24, 0x9F	; 159
     8e6:	9c e8       	ldi	r25, 0x8C	; 140
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <_nrf24l01p_startup+0x4c>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <_nrf24l01p_startup+0x52>
     8ee:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	//
	_nrf24l01p_rx_mode();
     8f0:	0e 94 4c 02 	call	0x498	; 0x498 <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(1);
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>

}
     8fa:	0f 90       	pop	r0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <_nrf24l01p_init>:

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
}

void _nrf24l01p_init(){
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	1f 92       	push	r1
     908:	1f 92       	push	r1
     90a:	cd b7       	in	r28, 0x3d	; 61
     90c:	de b7       	in	r29, 0x3e	; 62
	if(state) DigitalPin_SetValue(&nrf24l01p_csn_pin) ;
	else DigitalPin_ClearValue(&nrf24l01p_csn_pin);
}

static void arch_nrf24l01p_initialize(){
	NRF24L01P_SPI_PORT.DIRSET = (1<<5) | (1<<4) | (1<<7);
     90e:	e0 e4       	ldi	r30, 0x40	; 64
     910:	f6 e0       	ldi	r31, 0x06	; 6
     912:	80 eb       	ldi	r24, 0xB0	; 176
     914:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_SPI.CTRL = (1<<SPI_ENABLE_bp) | (1<<SPI_MASTER_bp);
     916:	80 e5       	ldi	r24, 0x50	; 80
     918:	80 93 c0 08 	sts	0x08C0, r24
	NRF24L01P_CSN_PIN_PORT.DIRSET = (1<<NRF24L01P_CSN_PIN_BIT);
     91c:	80 e1       	ldi	r24, 0x10	; 16
     91e:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_CE_PIN_PORT.DIRSET = (1<<NRF24L01P_CE_PIN_BIT);
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	81 83       	std	Z+1, r24	; 0x01
	arch_nrf24l01p_initialize();
	
	_nrf24l01p_ce_pin(0);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 37 01 	call	0x26e	; 0x26e <_nrf24l01p_ce_pin>
	_nrf24l01p_csn_pin(1);
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	0e 94 48 01 	call	0x290	; 0x290 <_nrf24l01p_csn_pin>
	
	
	_nrf24l01p_flush_rx();
     930:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
	_nrf24l01p_power_down();
     934:	0e 94 2d 02 	call	0x45a	; 0x45a <_nrf24l01p_power_down>
	uint8_t status_rst_val = 0x0e;//reset status
     938:	8e e0       	ldi	r24, 0x0E	; 14
     93a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
     93c:	41 e0       	ldi	r20, 0x01	; 1
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	be 01       	movw	r22, r28
     942:	6f 5f       	subi	r22, 0xFF	; 255
     944:	7f 4f       	sbci	r23, 0xFF	; 255
     946:	87 e0       	ldi	r24, 0x07	; 7
     948:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
     94c:	8b e0       	ldi	r24, 0x0B	; 11
     94e:	8a 83       	std	Y+2, r24	; 0x02
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	be 01       	movw	r22, r28
     956:	6e 5f       	subi	r22, 0xFE	; 254
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	0e 94 88 01 	call	0x310	; 0x310 <_nrf24l01p_write_register>
	_nrf24l01p_disable_auto_ack_all_pipes();
     960:	0e 94 92 02 	call	0x524	; 0x524 <_nrf24l01p_disable_auto_ack_all_pipes>
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
     964:	0e 94 04 04 	call	0x808	; 0x808 <_nrf24l01p_disable_dynamic_payload_all_pipe>
	_nrf24l01p_startup();
     968:	0e 94 4e 04 	call	0x89c	; 0x89c <_nrf24l01p_startup>
	
}
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <_nrf24l01p_readable>:
	_nrf24l01p_ce_pin(1);

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
     976:	cf 93       	push	r28
	bool flag = 0;
	if((pipe >=0)   && (pipe <=5)){
     978:	86 30       	cpi	r24, 0x06	; 6
     97a:	90 f4       	brcc	.+36     	; 0x9a0 <_nrf24l01p_readable+0x2a>
     97c:	c8 2f       	mov	r28, r24
		int status = _nrf24l01p_get_status();
     97e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <_nrf24l01p_get_status>
		if(   (status&_NRF24L01P_STATUS_RX_DR)  && ((status&_NRF24L01P_STATUS_RX_P_NO)>>1)==pipe){
     982:	86 ff       	sbrs	r24, 6
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <_nrf24l01p_readable+0x2e>
     986:	8e 70       	andi	r24, 0x0E	; 14
     988:	99 27       	eor	r25, r25
     98a:	ac 01       	movw	r20, r24
     98c:	55 95       	asr	r21
     98e:	47 95       	ror	r20
     990:	2c 2f       	mov	r18, r28
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	42 17       	cp	r20, r18
     998:	53 07       	cpc	r21, r19
     99a:	29 f0       	breq	.+10     	; 0x9a6 <_nrf24l01p_readable+0x30>
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <_nrf24l01p_readable+0x30>

}


bool _nrf24l01p_readable(_nrf24l01p_pipe_t pipe){
	bool flag = 0;
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <_nrf24l01p_readable+0x30>
		int status = _nrf24l01p_get_status();
		if(   (status&_NRF24L01P_STATUS_RX_DR)  && ((status&_NRF24L01P_STATUS_RX_P_NO)>>1)==pipe){
			flag = 1;
		}
		else{
			flag = 0;
     9a4:	80 e0       	ldi	r24, 0x00	; 0
		}

		
	}
	return flag;
}
     9a6:	cf 91       	pop	r28
     9a8:	08 95       	ret

000009aa <_nrf24l01p_read_dyn_pld>:
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
     9aa:	0f 93       	push	r16
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
     9b2:	86 30       	cpi	r24, 0x06	; 6
     9b4:	f0 f4       	brcc	.+60     	; 0x9f2 <_nrf24l01p_read_dyn_pld+0x48>
     9b6:	eb 01       	movw	r28, r22
		return -1;
	}
	//int x;
	if (_nrf24l01p_readable(pipe) ) {
     9b8:	0e 94 bb 04 	call	0x976	; 0x976 <_nrf24l01p_readable>
     9bc:	88 23       	and	r24, r24
     9be:	e1 f0       	breq	.+56     	; 0x9f8 <_nrf24l01p_read_dyn_pld+0x4e>
		asm("nop");
     9c0:	00 00       	nop
		int rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
     9c2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <_nrf24l01p_read_rx_payload_width>
     9c6:	8c 01       	movw	r16, r24
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
     9c8:	81 32       	cpi	r24, 0x21	; 33
     9ca:	91 05       	cpc	r25, r1
     9cc:	28 f0       	brcs	.+10     	; 0x9d8 <_nrf24l01p_read_dyn_pld+0x2e>
			_nrf24l01p_flush_rx();
     9ce:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
	}
	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	15 c0       	rjmp	.+42     	; 0xa02 <_nrf24l01p_read_dyn_pld+0x58>
		int rxPayloadWidth = _nrf24l01p_read_rx_payload_width();
		if ( ( rxPayloadWidth < 0 ) || ( rxPayloadWidth > _NRF24L01P_RX_FIFO_SIZE ) ) {
			_nrf24l01p_flush_rx();
		}
	else {
		_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
     9d8:	bc 01       	movw	r22, r24
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 b0 01 	call	0x360	; 0x360 <_nrf24l01p_read_rx_payload>
		if(_nrf24l01p_get_fifo_flag_rx_empty()) {
     9e0:	0e 94 ca 03 	call	0x794	; 0x794 <_nrf24l01p_get_fifo_flag_rx_empty>
     9e4:	88 23       	and	r24, r24
     9e6:	59 f0       	breq	.+22     	; 0x9fe <_nrf24l01p_read_dyn_pld+0x54>
			_nrf24l01p_clear_data_ready_flag();
     9e8:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_clear_data_ready_flag>
		}
		return rxPayloadWidth;
     9ec:	80 2f       	mov	r24, r16
     9ee:	91 2f       	mov	r25, r17
     9f0:	08 c0       	rjmp	.+16     	; 0xa02 <_nrf24l01p_read_dyn_pld+0x58>
	}
	return 0;
}
int _nrf24l01p_read_dyn_pld(_nrf24l01p_pipe_t pipe, uint8_t *data){
	if ( ( pipe < 0 ) || ( pipe > 5 ) ) {
		return -1;
     9f2:	8f ef       	ldi	r24, 0xFF	; 255
     9f4:	9f ef       	ldi	r25, 0xFF	; 255
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <_nrf24l01p_read_dyn_pld+0x58>
		}
		return rxPayloadWidth;
	}
	}
	else {//if pipe not readable
		return 0;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	02 c0       	rjmp	.+4      	; 0xa02 <_nrf24l01p_read_dyn_pld+0x58>
	else {
		_nrf24l01p_read_rx_payload(data,rxPayloadWidth);
		if(_nrf24l01p_get_fifo_flag_rx_empty()) {
			_nrf24l01p_clear_data_ready_flag();
		}
		return rxPayloadWidth;
     9fe:	80 2f       	mov	r24, r16
     a00:	91 2f       	mov	r25, r17
	}
	else {//if pipe not readable
		return 0;
	}
	return 0;
}
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	1f 91       	pop	r17
     a08:	0f 91       	pop	r16
     a0a:	08 95       	ret

00000a0c <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     a0c:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     a0e:	81 81       	ldd	r24, Z+1	; 0x01
     a10:	85 ff       	sbrs	r24, 5
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     a14:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     a16:	81 81       	ldd	r24, Z+1	; 0x01
     a18:	86 ff       	sbrs	r24, 6
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     a1c:	80 e4       	ldi	r24, 0x40	; 64
     a1e:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     a20:	80 81       	ld	r24, Z
}
     a22:	08 95       	ret

00000a24 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     a2a:	c0 ea       	ldi	r28, 0xA0	; 160
     a2c:	d6 e0       	ldi	r29, 0x06	; 6
     a2e:	18 e0       	ldi	r17, 0x08	; 8
     a30:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     a32:	e0 e6       	ldi	r30, 0x60	; 96
     a34:	f6 e0       	ldi	r31, 0x06	; 6
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     a3a:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     a3c:	68 2f       	mov	r22, r24
     a3e:	80 ea       	ldi	r24, 0xA0	; 160
     a40:	99 e0       	ldi	r25, 0x09	; 9
     a42:	0e 94 06 05 	call	0xa0c	; 0xa0c <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     a46:	1d 83       	std	Y+5, r17	; 0x05
	
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	08 95       	ret

00000a50 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     a50:	ef 92       	push	r14
     a52:	ff 92       	push	r15
     a54:	0f 93       	push	r16
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     a5c:	c0 ea       	ldi	r28, 0xA0	; 160
     a5e:	d6 e0       	ldi	r29, 0x06	; 6
     a60:	18 e0       	ldi	r17, 0x08	; 8
     a62:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     a64:	0f 2e       	mov	r0, r31
     a66:	f0 e6       	ldi	r31, 0x60	; 96
     a68:	ef 2e       	mov	r14, r31
     a6a:	f6 e0       	ldi	r31, 0x06	; 6
     a6c:	ff 2e       	mov	r15, r31
     a6e:	f0 2d       	mov	r31, r0
     a70:	01 e0       	ldi	r16, 0x01	; 1
     a72:	f7 01       	movw	r30, r14
     a74:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     a76:	68 2f       	mov	r22, r24
     a78:	80 ea       	ldi	r24, 0xA0	; 160
     a7a:	99 e0       	ldi	r25, 0x09	; 9
     a7c:	0e 94 06 05 	call	0xa0c	; 0xa0c <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     a80:	f7 01       	movw	r30, r14
     a82:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     a84:	1d 83       	std	Y+5, r17	; 0x05

}
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     a94:	87 70       	andi	r24, 0x07	; 7
     a96:	80 6b       	ori	r24, 0xB0	; 176
     a98:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
     a9c:	08 95       	ret

00000a9e <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     a9e:	cf 93       	push	r28
     aa0:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     aa2:	98 2f       	mov	r25, r24
     aa4:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     aa6:	89 2f       	mov	r24, r25
     aa8:	82 95       	swap	r24
     aaa:	8f 70       	andi	r24, 0x0F	; 15
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     ab2:	8c 2f       	mov	r24, r28
     ab4:	8f 70       	andi	r24, 0x0F	; 15
     ab6:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
}
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     ac6:	8c 81       	ldd	r24, Y+4	; 0x04
     ac8:	8f 7e       	andi	r24, 0xEF	; 239
     aca:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     acc:	a0 e6       	ldi	r26, 0x60	; 96
     ace:	b6 e0       	ldi	r27, 0x06	; 6
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	11 96       	adiw	r26, 0x01	; 1
     ad4:	8c 93       	st	X, r24
     ad6:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     ad8:	15 96       	adiw	r26, 0x05	; 5
     ada:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     adc:	8d 81       	ldd	r24, Y+5	; 0x05
     ade:	80 6c       	ori	r24, 0xC0	; 192
     ae0:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     ae2:	84 81       	ldd	r24, Z+4	; 0x04
     ae4:	8d 7f       	andi	r24, 0xFD	; 253
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     aea:	8d 81       	ldd	r24, Y+5	; 0x05
     aec:	82 60       	ori	r24, 0x02	; 2
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     af2:	8d 81       	ldd	r24, Y+5	; 0x05
     af4:	8d 7f       	andi	r24, 0xFD	; 253
     af6:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     af8:	85 81       	ldd	r24, Z+5	; 0x05
     afa:	88 23       	and	r24, r24
     afc:	21 f0       	breq	.+8      	; 0xb06 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     afe:	8d 81       	ldd	r24, Y+5	; 0x05
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	03 c0       	rjmp	.+6      	; 0xb0c <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     b06:	8d 81       	ldd	r24, Y+5	; 0x05
     b08:	8b 7f       	andi	r24, 0xFB	; 251
     b0a:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	a2 81       	ldd	r26, Z+2	; 0x02
     b12:	b3 81       	ldd	r27, Z+3	; 0x03
     b14:	9c 01       	movw	r18, r24
     b16:	ad 01       	movw	r20, r26
     b18:	22 0f       	add	r18, r18
     b1a:	33 1f       	adc	r19, r19
     b1c:	44 1f       	adc	r20, r20
     b1e:	55 1f       	adc	r21, r21
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	78 e4       	ldi	r23, 0x48	; 72
     b24:	88 ee       	ldi	r24, 0xE8	; 232
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 23 0a 	call	0x1446	; 0x1446 <__udivmodsi4>
     b2c:	21 50       	subi	r18, 0x01	; 1
     b2e:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     b30:	83 2f       	mov	r24, r19
     b32:	8f 70       	andi	r24, 0x0F	; 15
     b34:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b36:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	88 60       	ori	r24, 0x08	; 8
     b3c:	8c 83       	std	Y+4, r24	; 0x04

}
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <ssd1306_init>:




void ssd1306_init(void)
{
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	00 d0       	rcall	.+0      	; 0xb4a <ssd1306_init+0x6>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <ssd1306_init+0x8>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     b50:	20 ea       	ldi	r18, 0xA0	; 160
     b52:	36 e0       	ldi	r19, 0x06	; 6
     b54:	88 e0       	ldi	r24, 0x08	; 8
     b56:	d9 01       	movw	r26, r18
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     b5c:	a0 e6       	ldi	r26, 0x60	; 96
     b5e:	b6 e0       	ldi	r27, 0x06	; 6
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	11 96       	adiw	r26, 0x01	; 1
     b64:	9c 93       	st	X, r25
     b66:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTA,(1<<3));//reset
     b68:	e0 e0       	ldi	r30, 0x00	; 0
     b6a:	f6 e0       	ldi	r31, 0x06	; 6
     b6c:	81 83       	std	Z+1, r24	; 0x01
	port_direction_set_mask(&PORTD,(1<<1));//sck
     b6e:	92 e0       	ldi	r25, 0x02	; 2
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	9c 93       	st	X, r25
     b74:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     b76:	11 96       	adiw	r26, 0x01	; 1
     b78:	8c 93       	st	X, r24
// 	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     b7a:	d9 01       	movw	r26, r18
     b7c:	15 96       	adiw	r26, 0x05	; 5
     b7e:	8c 93       	st	X, r24
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     b80:	86 83       	std	Z+6, r24	; 0x06
     b82:	ba e6       	ldi	r27, 0x6A	; 106
     b84:	ba 95       	dec	r27
     b86:	f1 f7       	brne	.-4      	; 0xb84 <ssd1306_init+0x40>
     b88:	00 c0       	rjmp	.+0      	; 0xb8a <ssd1306_init+0x46>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     b8a:	85 83       	std	Z+5, r24	; 0x05
     b8c:	ea e6       	ldi	r30, 0x6A	; 106
     b8e:	ea 95       	dec	r30
     b90:	f1 f7       	brne	.-4      	; 0xb8e <ssd1306_init+0x4a>
     b92:	00 c0       	rjmp	.+0      	; 0xb94 <ssd1306_init+0x50>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     b94:	e0 e7       	ldi	r30, 0x70	; 112
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	84 81       	ldd	r24, Z+4	; 0x04
     b9a:	8f 7e       	andi	r24, 0xEF	; 239
     b9c:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	9b e1       	ldi	r25, 0x1B	; 27
     ba2:	a7 eb       	ldi	r26, 0xB7	; 183
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	9a 83       	std	Y+2, r25	; 0x02
     baa:	ab 83       	std	Y+3, r26	; 0x03
     bac:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     bae:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     bb0:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     bb2:	be 01       	movw	r22, r28
     bb4:	6f 5f       	subi	r22, 0xFF	; 255
     bb6:	7f 4f       	sbci	r23, 0xFF	; 255
     bb8:	80 ea       	ldi	r24, 0xA0	; 160
     bba:	99 e0       	ldi	r25, 0x09	; 9
     bbc:	0e 94 5f 05 	call	0xabe	; 0xabe <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     bc0:	88 ea       	ldi	r24, 0xA8	; 168
     bc2:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     bc6:	8f e1       	ldi	r24, 0x1F	; 31
     bc8:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     bcc:	83 ed       	ldi	r24, 0xD3	; 211
     bce:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x00);
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     bd8:	80 e4       	ldi	r24, 0x40	; 64
     bda:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     bde:	81 ea       	ldi	r24, 0xA1	; 161
     be0:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     be4:	88 ec       	ldi	r24, 0xC8	; 200
     be6:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     bea:	8a ed       	ldi	r24, 0xDA	; 218
     bec:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x02);
     bf0:	82 e0       	ldi	r24, 0x02	; 2
     bf2:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     bf6:	81 e8       	ldi	r24, 0x81	; 129
     bf8:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     bfc:	8f e8       	ldi	r24, 0x8F	; 143
     bfe:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     c02:	84 ea       	ldi	r24, 0xA4	; 164
     c04:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     c08:	86 ea       	ldi	r24, 0xA6	; 166
     c0a:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     c0e:	85 ed       	ldi	r24, 0xD5	; 213
     c10:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x80);
     c14:	80 e8       	ldi	r24, 0x80	; 128
     c16:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     c1a:	8d e8       	ldi	r24, 0x8D	; 141
     c1c:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x14);
     c20:	84 e1       	ldi	r24, 0x14	; 20
     c22:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     c26:	8b ed       	ldi	r24, 0xDB	; 219
     c28:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     c2c:	80 e4       	ldi	r24, 0x40	; 64
     c2e:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     c32:	89 ed       	ldi	r24, 0xD9	; 217
     c34:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     c38:	81 ef       	ldi	r24, 0xF1	; 241
     c3a:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     c3e:	8f ea       	ldi	r24, 0xAF	; 175
     c40:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
}
     c44:	26 96       	adiw	r28, 0x06	; 6
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     c5a:	dc 01       	movw	r26, r24
     c5c:	ec 91       	ld	r30, X
     c5e:	ee 23       	and	r30, r30
     c60:	29 f1       	breq	.+74     	; 0xcac <ssd1306_write_text+0x5c>
     c62:	7c 01       	movw	r14, r24
     c64:	bf ef       	ldi	r27, 0xFF	; 255
     c66:	eb 1a       	sub	r14, r27
     c68:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     c6a:	ef 37       	cpi	r30, 0x7F	; 127
     c6c:	d0 f4       	brcc	.+52     	; 0xca2 <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ef 56       	subi	r30, 0x6F	; 111
     c76:	fe 4d       	sbci	r31, 0xDE	; 222
     c78:	00 81       	ld	r16, Z
     c7a:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     c7c:	f8 01       	movw	r30, r16
     c7e:	80 81       	ld	r24, Z
     c80:	88 23       	and	r24, r24
     c82:	61 f0       	breq	.+24     	; 0xc9c <ssd1306_write_text+0x4c>
     c84:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     c86:	f8 01       	movw	r30, r16
     c88:	ec 0f       	add	r30, r28
     c8a:	f1 1d       	adc	r31, r1
     c8c:	80 81       	ld	r24, Z
     c8e:	0e 94 28 05 	call	0xa50	; 0xa50 <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     c92:	cf 5f       	subi	r28, 0xFF	; 255
     c94:	d8 01       	movw	r26, r16
     c96:	9c 91       	ld	r25, X
     c98:	9c 17       	cp	r25, r28
     c9a:	a8 f7       	brcc	.-22     	; 0xc86 <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 28 05 	call	0xa50	; 0xa50 <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     ca2:	d7 01       	movw	r26, r14
     ca4:	ed 91       	ld	r30, X+
     ca6:	7d 01       	movw	r14, r26
     ca8:	e1 11       	cpse	r30, r1
     caa:	df cf       	rjmp	.-66     	; 0xc6a <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	08 95       	ret

00000cb8 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     cb8:	20 e8       	ldi	r18, 0x80	; 128
     cba:	82 9f       	mul	r24, r18
     cbc:	c0 01       	movw	r24, r0
     cbe:	11 24       	eor	r1, r1
     cc0:	86 0f       	add	r24, r22
     cc2:	91 1d       	adc	r25, r1
     cc4:	e0 91 bc 22 	lds	r30, 0x22BC
     cc8:	f0 91 bd 22 	lds	r31, 0x22BD
     ccc:	e8 0f       	add	r30, r24
     cce:	f9 1f       	adc	r31, r25
     cd0:	40 83       	st	Z, r20
     cd2:	08 95       	ret

00000cd4 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     cd4:	20 e8       	ldi	r18, 0x80	; 128
     cd6:	82 9f       	mul	r24, r18
     cd8:	c0 01       	movw	r24, r0
     cda:	11 24       	eor	r1, r1
     cdc:	86 0f       	add	r24, r22
     cde:	91 1d       	adc	r25, r1
     ce0:	e0 91 bc 22 	lds	r30, 0x22BC
     ce4:	f0 91 bd 22 	lds	r31, 0x22BD
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
}
     cec:	80 81       	ld	r24, Z
     cee:	08 95       	ret

00000cf0 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	18 2f       	mov	r17, r24
     cf8:	d6 2f       	mov	r29, r22
     cfa:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     cfc:	21 11       	cpse	r18, r1
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <gfx_mono_ssd1306_put_byte+0x18>
     d00:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <gfx_mono_framebuffer_get_byte>
     d04:	8c 17       	cp	r24, r28
     d06:	71 f0       	breq	.+28     	; 0xd24 <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     d08:	4c 2f       	mov	r20, r28
     d0a:	6d 2f       	mov	r22, r29
     d0c:	81 2f       	mov	r24, r17
     d0e:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     d12:	81 2f       	mov	r24, r17
     d14:	0e 94 4a 05 	call	0xa94	; 0xa94 <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     d18:	8d 2f       	mov	r24, r29
     d1a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd1306_set_column_address>

	ssd1306_write_data(data);
     d1e:	8c 2f       	mov	r24, r28
     d20:	0e 94 28 05 	call	0xa50	; 0xa50 <ssd1306_write_data>
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	08 95       	ret

00000d2c <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	cf 56       	subi	r28, 0x6F	; 111
     d36:	d1 09       	sbc	r29, r1
     d38:	cd bf       	out	0x3d, r28	; 61
     d3a:	de bf       	out	0x3e, r29	; 62
	
	//set_system_time (1463064367);
	rtc_initialize();
     d3c:	0e 94 b2 09 	call	0x1364	; 0x1364 <rtc_initialize>
	
	DigitalPin_t led = {&PORTR, 0};
     d40:	80 ee       	ldi	r24, 0xE0	; 224
     d42:	97 e0       	ldi	r25, 0x07	; 7
     d44:	89 83       	std	Y+1, r24	; 0x01
     d46:	9a 83       	std	Y+2, r25	; 0x02
     d48:	1b 82       	std	Y+3, r1	; 0x03
	

	
	_nrf24l01p_init();
     d4a:	0e 94 81 04 	call	0x902	; 0x902 <_nrf24l01p_init>
	_nrf24l01p_enable_dynamic_payload();
     d4e:	0e 94 16 04 	call	0x82c	; 0x82c <_nrf24l01p_enable_dynamic_payload>
	_nrf24l01p_enable_payload_with_ack();
     d52:	0e 94 32 04 	call	0x864	; 0x864 <_nrf24l01p_enable_payload_with_ack>

	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P0);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P1);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P2);
     d62:	82 e0       	ldi	r24, 0x02	; 2
     d64:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P3);
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P4);
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	_nrf24l01p_enable_auto_ack(_NRF24L01P_PIPE_P5);
     d74:	85 e0       	ldi	r24, 0x05	; 5
     d76:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_nrf24l01p_enable_auto_ack>
	
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P0);
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P1);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P2);
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P3);
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P4);
     d92:	84 e0       	ldi	r24, 0x04	; 4
     d94:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P5);
     d98:	85 e0       	ldi	r24, 0x05	; 5
     d9a:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_nrf24l01p_enable_dynamic_payload_pipe>
	
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P0);
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P1);
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P2);
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P3);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P4);
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P5);
     dbc:	85 e0       	ldi	r24, 0x05	; 5
     dbe:	0e 94 a4 02 	call	0x548	; 0x548 <_nrf24l01p_enable_rx_on_pipe>


	_nrf24l01p_set_auto_retransmission_delay(15);
     dc2:	8f e0       	ldi	r24, 0x0F	; 15
     dc4:	0e 94 cb 02 	call	0x596	; 0x596 <_nrf24l01p_set_auto_retransmission_delay>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     dc8:	8e eb       	ldi	r24, 0xBE	; 190
     dca:	92 e2       	ldi	r25, 0x22	; 34
     dcc:	80 93 bc 22 	sts	0x22BC, r24
     dd0:	90 93 bd 22 	sts	0x22BD, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
     dd4:	0e 94 a2 05 	call	0xb44	; 0xb44 <ssd1306_init>
	asm("nop");
     dd8:	00 00       	nop
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	0f c0       	rjmp	.+30     	; 0xdfc <main+0xd0>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
     dde:	81 2f       	mov	r24, r17
     de0:	0e 94 4a 05 	call	0xa94	; 0xa94 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
     de4:	80 2f       	mov	r24, r16
     de6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	0e 94 28 05 	call	0xa50	; 0xa50 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
     df0:	0f 5f       	subi	r16, 0xFF	; 255
     df2:	00 38       	cpi	r16, 0x80	; 128
     df4:	a1 f7       	brne	.-24     	; 0xdde <main+0xb2>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     df6:	1f 5f       	subi	r17, 0xFF	; 255
     df8:	14 30       	cpi	r17, 0x04	; 4
     dfa:	11 f0       	breq	.+4      	; 0xe00 <main+0xd4>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     dfc:	00 e0       	ldi	r16, 0x00	; 0
     dfe:	ef cf       	rjmp	.-34     	; 0xdde <main+0xb2>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
     e00:	80 e4       	ldi	r24, 0x40	; 64
     e02:	0e 94 12 05 	call	0xa24	; 0xa24 <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     e06:	10 e0       	ldi	r17, 0x00	; 0
     e08:	0c c0       	rjmp	.+24     	; 0xe22 <main+0xf6>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	60 2f       	mov	r22, r16
     e10:	81 2f       	mov	r24, r17
     e12:	0e 94 78 06 	call	0xcf0	; 0xcf0 <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     e16:	0f 5f       	subi	r16, 0xFF	; 255
     e18:	00 38       	cpi	r16, 0x80	; 128
     e1a:	b9 f7       	brne	.-18     	; 0xe0a <main+0xde>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     e1c:	1f 5f       	subi	r17, 0xFF	; 255
     e1e:	14 30       	cpi	r17, 0x04	; 4
     e20:	11 f0       	breq	.+4      	; 0xe26 <main+0xfa>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     e22:	00 e0       	ldi	r16, 0x00	; 0
     e24:	f2 cf       	rjmp	.-28     	; 0xe0a <main+0xde>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
     e26:	00 00       	nop
	ssd1306_set_page_address(0);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	0e 94 4a 05 	call	0xa94	; 0xa94 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
     e2e:	8f e9       	ldi	r24, 0x9F	; 159
     e30:	92 e2       	ldi	r25, 0x22	; 34
     e32:	0e 94 28 06 	call	0xc50	; 0xc50 <ssd1306_write_text>
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e36:	83 e0       	ldi	r24, 0x03	; 3
     e38:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e48:	10 92 65 06 	sts	0x0665, r1
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
     e4c:	78 94       	sei
 	//SetupHardware();
// 
 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	GlobalInterruptEnable();

	DigitalPin_SetDIr(&led,1);
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	0e 94 b9 07 	call	0xf72	; 0xf72 <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
     e58:	e0 e5       	ldi	r30, 0x50	; 80
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     e62:	81 81       	ldd	r24, Z+1	; 0x01
     e64:	81 ff       	sbrs	r24, 1
     e66:	fd cf       	rjmp	.-6      	; 0xe62 <main+0x136>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 82 08 	call	0x1104	; 0x1104 <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 78 08 	call	0x10f0	; 0x10f0 <CLKSYS_Disable>
	
	_nrf24l01p_flush_rx();
     e74:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
		
	//_nrf24l01p_set_TX_pipe_address(0x1918171615);	
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P0, 0x1918171615);
     e78:	05 e1       	ldi	r16, 0x15	; 21
     e7a:	16 e1       	ldi	r17, 0x16	; 22
     e7c:	27 e1       	ldi	r18, 0x17	; 23
     e7e:	38 e1       	ldi	r19, 0x18	; 24
     e80:	49 e1       	ldi	r20, 0x19	; 25
     e82:	50 e0       	ldi	r21, 0x00	; 0
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 04 03 	call	0x608	; 0x608 <_nrf24l01p_set_RX_pipe_address>
	
	//volatile uint64_t bladdress = _nrf24l01p_get_TX_pipe_address();
	volatile uint64_t bladdress = _nrf24l01p_get_RX_pipe_address(_NRF24L01P_PIPE_P0);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_nrf24l01p_get_RX_pipe_address>
     e94:	2c 83       	std	Y+4, r18	; 0x04
     e96:	3d 83       	std	Y+5, r19	; 0x05
     e98:	4e 83       	std	Y+6, r20	; 0x06
     e9a:	5f 83       	std	Y+7, r21	; 0x07
     e9c:	68 87       	std	Y+8, r22	; 0x08
     e9e:	79 87       	std	Y+9, r23	; 0x09
     ea0:	8a 87       	std	Y+10, r24	; 0x0a
     ea2:	9b 87       	std	Y+11, r25	; 0x0b
	//volatile uint64_t bladdress;
	//_nrf24l01p_read_register(_NRF24L01P_REG_RX_ADDR_P1,&bladdress,5);
	asm("nop");
     ea4:	00 00       	nop
// 			_nrf24l01p_write(msg,strlen(msg));
			 //_nrf24l01p_write_ack(_NRF24L01P_PIPE_P0,msg,strlen(msg));
		
			
			if((_nrf24l01p_readable(_NRF24L01P_PIPE_P3))){
				PORTR.OUTTGL = (1<<0);
     ea6:	0f 2e       	mov	r0, r31
     ea8:	f0 ee       	ldi	r31, 0xE0	; 224
     eaa:	cf 2e       	mov	r12, r31
     eac:	f7 e0       	ldi	r31, 0x07	; 7
     eae:	df 2e       	mov	r13, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	ff 24       	eor	r15, r15
     eb4:	f3 94       	inc	r15
// 			char msg[] = "get time";
// 			_nrf24l01p_write(msg,strlen(msg));
			 //_nrf24l01p_write_ack(_NRF24L01P_PIPE_P0,msg,strlen(msg));
		
			
			if((_nrf24l01p_readable(_NRF24L01P_PIPE_P3))){
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	0e 94 bb 04 	call	0x976	; 0x976 <_nrf24l01p_readable>
     ebc:	88 23       	and	r24, r24
     ebe:	d9 f3       	breq	.-10     	; 0xeb6 <main+0x18a>
				PORTR.OUTTGL = (1<<0);
     ec0:	f6 01       	movw	r30, r12
     ec2:	f7 82       	std	Z+7, r15	; 0x07
				//printf("status %x\r\n",_nrf24l01p_get_status());
				//printf("pipe : %d\r\n", _nrf24l01p_get_rx_payload_pipe());
				//led1 = !led1;
				
				int width = _nrf24l01p_read_dyn_pld(_NRF24L01P_PIPE_P3, (uint8_t*) emon_rxData);
     ec4:	be 01       	movw	r22, r28
     ec6:	64 5f       	subi	r22, 0xF4	; 244
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	83 e0       	ldi	r24, 0x03	; 3
     ecc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <_nrf24l01p_read_dyn_pld>
				emon_rxData[width] = '\0';
     ed0:	2c e0       	ldi	r18, 0x0C	; 12
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	2c 0f       	add	r18, r28
     ed6:	3d 1f       	adc	r19, r29
     ed8:	82 0f       	add	r24, r18
     eda:	93 1f       	adc	r25, r19
     edc:	fc 01       	movw	r30, r24
     ede:	10 82       	st	Z, r1
				_nrf24l01p_flush_rx();
     ee0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>
				_nrf24l01p_clear_data_ready_flag();
     ee4:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_clear_data_ready_flag>
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	0f c0       	rjmp	.+30     	; 0xf0a <main+0x1de>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
     eec:	80 2f       	mov	r24, r16
     eee:	0e 94 4a 05 	call	0xa94	; 0xa94 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
     ef2:	81 2f       	mov	r24, r17
     ef4:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 28 05 	call	0xa50	; 0xa50 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
     efe:	1f 5f       	subi	r17, 0xFF	; 255
     f00:	10 38       	cpi	r17, 0x80	; 128
     f02:	a1 f7       	brne	.-24     	; 0xeec <main+0x1c0>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     f04:	0f 5f       	subi	r16, 0xFF	; 255
     f06:	04 30       	cpi	r16, 0x04	; 4
     f08:	11 f0       	breq	.+4      	; 0xf0e <main+0x1e2>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	ef cf       	rjmp	.-34     	; 0xeec <main+0x1c0>
// 					if(arg_index >=10) break;
// 					pch = strtok (NULL, "\"{},\r");
// 				}
		  
	  			ssd1306_clear();
	  			ssd1306_set_column_address(0);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	0e 94 4f 05 	call	0xa9e	; 0xa9e <ssd1306_set_column_address>
				ssd1306_set_page_address(0);
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	0e 94 4a 05 	call	0xa94	; 0xa94 <ssd1306_set_page_address>
	  			ssd1306_write_text(emon_rxData);
     f1a:	ce 01       	movw	r24, r28
     f1c:	0c 96       	adiw	r24, 0x0c	; 12
     f1e:	0e 94 28 06 	call	0xc50	; 0xc50 <ssd1306_write_text>
				  
				_nrf24l01p_flush_rx();
     f22:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_flush_rx>


		
 			//HID_Device_USBTask(&Generic_HID_Interface);
 			//USB_USBTask();
	}
     f26:	c7 cf       	rjmp	.-114    	; 0xeb6 <main+0x18a>

00000f28 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     f28:	83 e0       	ldi	r24, 0x03	; 3
     f2a:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     f2e:	80 e3       	ldi	r24, 0x30	; 48
     f30:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     f34:	82 e0       	ldi	r24, 0x02	; 2
     f36:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     f3a:	80 e1       	ldi	r24, 0x10	; 16
     f3c:	80 93 65 06 	sts	0x0665, r24
     f40:	08 95       	ret

00000f42 <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     f42:	83 e0       	ldi	r24, 0x03	; 3
     f44:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     f48:	80 e3       	ldi	r24, 0x30	; 48
     f4a:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     f54:	10 92 65 06 	sts	0x0665, r1
     f58:	08 95       	ret

00000f5a <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     f5a:	80 91 9d 22 	lds	r24, 0x229D
     f5e:	90 91 9e 22 	lds	r25, 0x229E
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	29 f0       	breq	.+10     	; 0xf70 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	80 93 9d 22 	sts	0x229D, r24
     f6c:	90 93 9e 22 	sts	0x229E, r25
     f70:	08 95       	ret

00000f72 <DigitalPin_SetDIr>:
	SREG = sreg;	
}


void DigitalPin_SetDIr(DigitalPin_t *pin , bool dir){
	if(dir) pin->_port->DIRSET = (1<< pin->_pin);
     f72:	66 23       	and	r22, r22
     f74:	79 f0       	breq	.+30     	; 0xf94 <DigitalPin_SetDIr+0x22>
     f76:	dc 01       	movw	r26, r24
     f78:	ed 91       	ld	r30, X+
     f7a:	fc 91       	ld	r31, X
     f7c:	11 97       	sbiw	r26, 0x01	; 1
     f7e:	21 e0       	ldi	r18, 0x01	; 1
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	a9 01       	movw	r20, r18
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	0c 90       	ld	r0, X
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <DigitalPin_SetDIr+0x1c>
     f8a:	44 0f       	add	r20, r20
     f8c:	55 1f       	adc	r21, r21
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <DigitalPin_SetDIr+0x18>
     f92:	41 83       	std	Z+1, r20	; 0x01
     f94:	08 95       	ret

00000f96 <DigitalPin_SetValue>:
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
     f96:	dc 01       	movw	r26, r24
     f98:	ed 91       	ld	r30, X+
     f9a:	fc 91       	ld	r31, X
     f9c:	11 97       	sbiw	r26, 0x01	; 1
     f9e:	21 e0       	ldi	r18, 0x01	; 1
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	a9 01       	movw	r20, r18
     fa4:	12 96       	adiw	r26, 0x02	; 2
     fa6:	0c 90       	ld	r0, X
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DigitalPin_SetValue+0x18>
     faa:	44 0f       	add	r20, r20
     fac:	55 1f       	adc	r21, r21
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DigitalPin_SetValue+0x14>
     fb2:	45 83       	std	Z+5, r20	; 0x05
     fb4:	08 95       	ret

00000fb6 <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
     fb6:	dc 01       	movw	r26, r24
     fb8:	ed 91       	ld	r30, X+
     fba:	fc 91       	ld	r31, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	21 e0       	ldi	r18, 0x01	; 1
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	a9 01       	movw	r20, r18
     fc4:	12 96       	adiw	r26, 0x02	; 2
     fc6:	0c 90       	ld	r0, X
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DigitalPin_ClearValue+0x18>
     fca:	44 0f       	add	r20, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	0a 94       	dec	r0
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DigitalPin_ClearValue+0x14>
     fd2:	46 83       	std	Z+6, r20	; 0x06
     fd4:	08 95       	ret

00000fd6 <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
     fd6:	1f 92       	push	r1
     fd8:	0f 92       	push	r0
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	0f 92       	push	r0
     fde:	11 24       	eor	r1, r1

}
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_27>:

ISR(USARTC0_TXC_vect){
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
	
}
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_26>:

ISR(USARTC0_DRE_vect){
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
	
}
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    1012:	1f 92       	push	r1
    1014:	0f 92       	push	r0
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	0f 92       	push	r0
    101a:	11 24       	eor	r1, r1
	
}
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	0f 90       	pop	r0
    1022:	1f 90       	pop	r1
    1024:	18 95       	reti

00001026 <__vector_30>:

ISR(USARTC1_TXC_vect){
    1026:	1f 92       	push	r1
    1028:	0f 92       	push	r0
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	0f 92       	push	r0
    102e:	11 24       	eor	r1, r1
	
}
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_29>:

ISR(USARTC1_DRE_vect){
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
	
}
    1044:	0f 90       	pop	r0
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	0f 90       	pop	r0
    104a:	1f 90       	pop	r1
    104c:	18 95       	reti

0000104e <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    104e:	1f 92       	push	r1
    1050:	0f 92       	push	r0
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	0f 92       	push	r0
    1056:	11 24       	eor	r1, r1
	
}
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_90>:

ISR(USARTD0_TXC_vect){
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
	
}
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <__vector_89>:

ISR(USARTD0_DRE_vect){
    1076:	1f 92       	push	r1
    1078:	0f 92       	push	r0
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	0f 92       	push	r0
    107e:	11 24       	eor	r1, r1
	
}
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
	
}
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_60>:

ISR(USARTE0_TXC_vect){
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
	
}
    10a8:	0f 90       	pop	r0
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	0f 90       	pop	r0
    10ae:	1f 90       	pop	r1
    10b0:	18 95       	reti

000010b2 <__vector_59>:

ISR(USARTE0_DRE_vect){
    10b2:	1f 92       	push	r1
    10b4:	0f 92       	push	r0
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	0f 92       	push	r0
    10ba:	11 24       	eor	r1, r1
	
}
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    10c6:	0f 93       	push	r16
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	1f 92       	push	r1
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    10d2:	2f b7       	in	r18, 0x3f	; 63
    10d4:	29 83       	std	Y+1, r18	; 0x01
    10d6:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    10d8:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    10da:	fc 01       	movw	r30, r24
    10dc:	08 ed       	ldi	r16, 0xD8	; 216
    10de:	04 bf       	out	0x34, r16	; 52
    10e0:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	8f bf       	out	0x3f, r24	; 63
#endif
}
    10e6:	0f 90       	pop	r0
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	0f 91       	pop	r16
    10ee:	08 95       	ret

000010f0 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    10f0:	e0 e5       	ldi	r30, 0x50	; 80
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	90 81       	ld	r25, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	20 95       	com	r18
    10fa:	92 23       	and	r25, r18
    10fc:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    10fe:	90 81       	ld	r25, Z
	return clkEnabled;
}
    1100:	89 23       	and	r24, r25
    1102:	08 95       	ret

00001104 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    110c:	00 e4       	ldi	r16, 0x40	; 64
    110e:	10 e0       	ldi	r17, 0x00	; 0
    1110:	f8 01       	movw	r30, r16
    1112:	60 81       	ld	r22, Z
    1114:	68 7f       	andi	r22, 0xF8	; 248
    1116:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    1118:	80 e4       	ldi	r24, 0x40	; 64
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	0e 94 63 08 	call	0x10c6	; 0x10c6 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    1120:	f8 01       	movw	r30, r16
    1122:	80 81       	ld	r24, Z
	return clkCtrl;
}
    1124:	8c 23       	and	r24, r28
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    112e:	08 95       	ret

00001130 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1130:	80 93 dc 24 	sts	0x24DC, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1134:	28 2f       	mov	r18, r24
    1136:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1138:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    113a:	40 91 c6 04 	lds	r20, 0x04C6
    113e:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1142:	88 23       	and	r24, r24
    1144:	e4 f4       	brge	.+56     	; 0x117e <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1146:	64 e8       	ldi	r22, 0x84	; 132
    1148:	62 9f       	mul	r22, r18
    114a:	c0 01       	movw	r24, r0
    114c:	63 9f       	mul	r22, r19
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	81 5e       	subi	r24, 0xE1	; 225
    1154:	9a 4d       	sbci	r25, 0xDA	; 218
    1156:	80 93 d8 24 	sts	0x24D8, r24
    115a:	90 93 d9 24 	sts	0x24D9, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    115e:	c9 01       	movw	r24, r18
    1160:	82 95       	swap	r24
    1162:	92 95       	swap	r25
    1164:	90 7f       	andi	r25, 0xF0	; 240
    1166:	98 27       	eor	r25, r24
    1168:	80 7f       	andi	r24, 0xF0	; 240
    116a:	98 27       	eor	r25, r24
    116c:	08 96       	adiw	r24, 0x08	; 8
    116e:	9a 01       	movw	r18, r20
    1170:	28 0f       	add	r18, r24
    1172:	39 1f       	adc	r19, r25
    1174:	20 93 da 24 	sts	0x24DA, r18
    1178:	30 93 db 24 	sts	0x24DB, r19
    117c:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    117e:	64 e8       	ldi	r22, 0x84	; 132
    1180:	62 9f       	mul	r22, r18
    1182:	c0 01       	movw	r24, r0
    1184:	63 9f       	mul	r22, r19
    1186:	90 0d       	add	r25, r0
    1188:	11 24       	eor	r1, r1
    118a:	83 52       	subi	r24, 0x23	; 35
    118c:	9b 4d       	sbci	r25, 0xDB	; 219
    118e:	80 93 d8 24 	sts	0x24D8, r24
    1192:	90 93 d9 24 	sts	0x24D9, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1196:	22 95       	swap	r18
    1198:	32 95       	swap	r19
    119a:	30 7f       	andi	r19, 0xF0	; 240
    119c:	32 27       	eor	r19, r18
    119e:	20 7f       	andi	r18, 0xF0	; 240
    11a0:	32 27       	eor	r19, r18
    11a2:	24 0f       	add	r18, r20
    11a4:	35 1f       	adc	r19, r21
    11a6:	20 93 da 24 	sts	0x24DA, r18
    11aa:	30 93 db 24 	sts	0x24DB, r19
    11ae:	08 95       	ret

000011b0 <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    11b0:	1f 93       	push	r17
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	d8 2f       	mov	r29, r24
    11b8:	16 2f       	mov	r17, r22
    11ba:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    11bc:	0e 94 98 08 	call	0x1130	; 0x1130 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    11c0:	e0 91 da 24 	lds	r30, 0x24DA
    11c4:	f0 91 db 24 	lds	r31, 0x24DB
    11c8:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    11ca:	e0 91 da 24 	lds	r30, 0x24DA
    11ce:	f0 91 db 24 	lds	r31, 0x24DB
    11d2:	dd 23       	and	r29, r29
    11d4:	a4 f0       	brlt	.+40     	; 0x11fe <Endpoint_ConfigureEndpoint_PRV+0x4e>
    11d6:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    11d8:	e0 91 da 24 	lds	r30, 0x24DA
    11dc:	f0 91 db 24 	lds	r31, 0x24DB
    11e0:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    11e2:	e0 91 da 24 	lds	r30, 0x24DA
    11e6:	f0 91 db 24 	lds	r31, 0x24DB
    11ea:	12 82       	std	Z+2, r1	; 0x02
    11ec:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    11ee:	80 91 d8 24 	lds	r24, 0x24D8
    11f2:	90 91 d9 24 	lds	r25, 0x24D9
    11f6:	84 83       	std	Z+4, r24	; 0x04
    11f8:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1202:	e0 91 da 24 	lds	r30, 0x24DA
    1206:	f0 91 db 24 	lds	r31, 0x24DB
    120a:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    120c:	e0 91 da 24 	lds	r30, 0x24DA
    1210:	f0 91 db 24 	lds	r31, 0x24DB
    1214:	12 82       	std	Z+2, r1	; 0x02
    1216:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1218:	80 91 d8 24 	lds	r24, 0x24D8
    121c:	90 91 d9 24 	lds	r25, 0x24D9
    1220:	84 83       	std	Z+4, r24	; 0x04
    1222:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1224:	4c 2f       	mov	r20, r28
    1226:	fc 01       	movw	r30, r24
    1228:	e0 5c       	subi	r30, 0xC0	; 192
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    122e:	31 96       	adiw	r30, 0x01	; 1
    1230:	10 82       	st	Z, r1

	return true;
}
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	08 95       	ret

0000123c <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1240:	a0 ec       	ldi	r26, 0xC0	; 192
    1242:	b4 e0       	ldi	r27, 0x04	; 4
    1244:	16 96       	adiw	r26, 0x06	; 6
    1246:	ed 91       	ld	r30, X+
    1248:	fc 91       	ld	r31, X
    124a:	17 97       	sbiw	r26, 0x07	; 7
    124c:	c9 01       	movw	r24, r18
    124e:	82 95       	swap	r24
    1250:	92 95       	swap	r25
    1252:	90 7f       	andi	r25, 0xF0	; 240
    1254:	98 27       	eor	r25, r24
    1256:	80 7f       	andi	r24, 0xF0	; 240
    1258:	98 27       	eor	r25, r24
    125a:	e8 0f       	add	r30, r24
    125c:	f9 1f       	adc	r31, r25
    125e:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1260:	16 96       	adiw	r26, 0x06	; 6
    1262:	4d 91       	ld	r20, X+
    1264:	5c 91       	ld	r21, X
    1266:	17 97       	sbiw	r26, 0x07	; 7
    1268:	fa 01       	movw	r30, r20
    126a:	e8 0f       	add	r30, r24
    126c:	f9 1f       	adc	r31, r25
    126e:	11 82       	std	Z+1, r1	; 0x01
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1274:	25 30       	cpi	r18, 0x05	; 5
    1276:	31 05       	cpc	r19, r1
    1278:	29 f7       	brne	.-54     	; 0x1244 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    127a:	08 95       	ret

0000127c <__vector_125>:
	USB.INTFLAGSACLR = 0xFF;
	USB.INTFLAGSBCLR = 0xFF;
}

ISR(USB_BUSEVENT_vect)
{
    127c:	1f 92       	push	r1
    127e:	0f 92       	push	r0
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	0f 92       	push	r0
    1284:	11 24       	eor	r1, r1
    1286:	0b b6       	in	r0, 0x3b	; 59
    1288:	0f 92       	push	r0
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    12a2:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    12a6:	88 23       	and	r24, r24
    12a8:	4c f4       	brge	.+18     	; 0x12bc <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    12aa:	80 91 c8 04 	lds	r24, 0x04C8
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    12b2:	80 e8       	ldi	r24, 0x80	; 128
    12b4:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    12b8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <EVENT_USB_Device_StartOfFrame>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    12bc:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    12c0:	86 ff       	sbrs	r24, 6
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    12c4:	80 e4       	ldi	r24, 0x40	; 64
    12c6:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    12ca:	10 92 cf 24 	sts	0x24CF, r1
		EVENT_USB_Device_Disconnect();
    12ce:	0e 94 a1 07 	call	0xf42	; 0xf42 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    12d2:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    12d6:	85 ff       	sbrs	r24, 5
    12d8:	16 c0       	rjmp	.+44     	; 0x1306 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    12e0:	80 91 cb 24 	lds	r24, 0x24CB
    12e4:	88 23       	and	r24, r24
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	80 93 cf 24 	sts	0x24CF, r24
    12ee:	09 c0       	rjmp	.+18     	; 0x1302 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    12f0:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    12f4:	81 11       	cpse	r24, r1
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <__vector_125+0x80>
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <__vector_125+0x82>
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	80 93 cf 24 	sts	0x24CF, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1302:	0e 94 94 07 	call	0xf28	; 0xf28 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1306:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    130a:	84 ff       	sbrs	r24, 4
    130c:	18 c0       	rjmp	.+48     	; 0x133e <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    130e:	e0 ec       	ldi	r30, 0xC0	; 192
    1310:	f4 e0       	ldi	r31, 0x04	; 4
    1312:	80 e1       	ldi	r24, 0x10	; 16
    1314:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	80 93 cf 24 	sts	0x24CF, r24
		USB_Device_ConfigurationNumber = 0;
    131c:	10 92 cb 24 	sts	0x24CB, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1320:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    1322:	0e 94 1e 09 	call	0x123c	; 0x123c <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1326:	48 e0       	ldi	r20, 0x08	; 8
    1328:	68 e4       	ldi	r22, 0x48	; 72
    132a:	80 e8       	ldi	r24, 0x80	; 128
    132c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1330:	48 e0       	ldi	r20, 0x08	; 8
    1332:	68 e4       	ldi	r22, 0x48	; 72
    1334:	80 e0       	ldi	r24, 0x00	; 0
    1336:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    133a:	0e 94 97 08 	call	0x112e	; 0x112e <USB_Event_Stub>
	}
}
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0b be       	out	0x3b, r0	; 59
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <rtc_initialize>:
/*
 *	initialize the rtc
 */
void rtc_initialize(){
	//enabling interrupt all three level, high, mid, and low
	PMIC_CTRL |= (7<<0);
    1364:	e2 ea       	ldi	r30, 0xA2	; 162
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	87 60       	ori	r24, 0x07	; 7
    136c:	80 83       	st	Z, r24
	//selecting clock source 32.768kHz from 32.768kHz crystal oscillator on TOSC, enabling RTC clock source
	CLK_RTCCTRL = (5<<1) | (1<<0);//crystal oscillator on TOSC| enabling clock
    136e:	8b e0       	ldi	r24, 0x0B	; 11
    1370:	80 93 43 00 	sts	0x0043, r24
	//enabling interrupts for overflow
	RTC_INTCTRL	|= (0b00000001);
    1374:	e2 e0       	ldi	r30, 0x02	; 2
    1376:	f4 e0       	ldi	r31, 0x04	; 4
    1378:	80 81       	ld	r24, Z
    137a:	81 60       	ori	r24, 0x01	; 1
    137c:	80 83       	st	Z, r24
	RTC_PER = RTC_PER_VAL; //period_val  = 2
    137e:	80 e2       	ldi	r24, 0x20	; 32
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	80 93 0a 04 	sts	0x040A, r24
    1386:	90 93 0b 04 	sts	0x040B, r25
	//selecting clock prescaling
	RTC_CTRL = (1<<0);//no prescaling
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	80 93 00 04 	sts	0x0400, r24
	sei();
    1390:	78 94       	sei
    1392:	08 95       	ret

00001394 <__vector_10>:

/*
 *	interrupt service routine for overflow interrupt event
 */
ISR(RTC_OVF_vect)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	0b b6       	in	r0, 0x3b	; 59
    13a0:	0f 92       	push	r0
    13a2:	2f 93       	push	r18
    13a4:	3f 93       	push	r19
    13a6:	4f 93       	push	r20
    13a8:	5f 93       	push	r21
    13aa:	6f 93       	push	r22
    13ac:	7f 93       	push	r23
    13ae:	8f 93       	push	r24
    13b0:	9f 93       	push	r25
    13b2:	af 93       	push	r26
    13b4:	bf 93       	push	r27
    13b6:	ef 93       	push	r30
    13b8:	ff 93       	push	r31
	#if (USE_RTC_TICK == 1)
	rtc_tick_global++;	
    13ba:	80 91 be 24 	lds	r24, 0x24BE
    13be:	90 91 bf 24 	lds	r25, 0x24BF
    13c2:	a0 91 c0 24 	lds	r26, 0x24C0
    13c6:	b0 91 c1 24 	lds	r27, 0x24C1
    13ca:	01 96       	adiw	r24, 0x01	; 1
    13cc:	a1 1d       	adc	r26, r1
    13ce:	b1 1d       	adc	r27, r1
    13d0:	80 93 be 24 	sts	0x24BE, r24
    13d4:	90 93 bf 24 	sts	0x24BF, r25
    13d8:	a0 93 c0 24 	sts	0x24C0, r26
    13dc:	b0 93 c1 24 	sts	0x24C1, r27
	#endif
	
	system_tick();
    13e0:	0e 94 0f 0a 	call	0x141e	; 0x141e <system_tick>

	
}
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	0f 90       	pop	r0
    13fe:	0b be       	out	0x3b, r0	; 59
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_11>:

/*
 *	interrupt service routine for compare interrupt event
 */
ISR(RTC_COMP_vect)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1


}
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <system_tick>:



void            system_tick(void){
	
	__system_time++;
    141e:	80 91 c7 24 	lds	r24, 0x24C7
    1422:	90 91 c8 24 	lds	r25, 0x24C8
    1426:	a0 91 c9 24 	lds	r26, 0x24C9
    142a:	b0 91 ca 24 	lds	r27, 0x24CA
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	a1 1d       	adc	r26, r1
    1432:	b1 1d       	adc	r27, r1
    1434:	80 93 c7 24 	sts	0x24C7, r24
    1438:	90 93 c8 24 	sts	0x24C8, r25
    143c:	a0 93 c9 24 	sts	0x24C9, r26
    1440:	b0 93 ca 24 	sts	0x24CA, r27
    1444:	08 95       	ret

00001446 <__udivmodsi4>:
    1446:	a1 e2       	ldi	r26, 0x21	; 33
    1448:	1a 2e       	mov	r1, r26
    144a:	aa 1b       	sub	r26, r26
    144c:	bb 1b       	sub	r27, r27
    144e:	fd 01       	movw	r30, r26
    1450:	0d c0       	rjmp	.+26     	; 0x146c <__udivmodsi4_ep>

00001452 <__udivmodsi4_loop>:
    1452:	aa 1f       	adc	r26, r26
    1454:	bb 1f       	adc	r27, r27
    1456:	ee 1f       	adc	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	a2 17       	cp	r26, r18
    145c:	b3 07       	cpc	r27, r19
    145e:	e4 07       	cpc	r30, r20
    1460:	f5 07       	cpc	r31, r21
    1462:	20 f0       	brcs	.+8      	; 0x146c <__udivmodsi4_ep>
    1464:	a2 1b       	sub	r26, r18
    1466:	b3 0b       	sbc	r27, r19
    1468:	e4 0b       	sbc	r30, r20
    146a:	f5 0b       	sbc	r31, r21

0000146c <__udivmodsi4_ep>:
    146c:	66 1f       	adc	r22, r22
    146e:	77 1f       	adc	r23, r23
    1470:	88 1f       	adc	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	1a 94       	dec	r1
    1476:	69 f7       	brne	.-38     	; 0x1452 <__udivmodsi4_loop>
    1478:	60 95       	com	r22
    147a:	70 95       	com	r23
    147c:	80 95       	com	r24
    147e:	90 95       	com	r25
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	bd 01       	movw	r22, r26
    1486:	cf 01       	movw	r24, r30
    1488:	08 95       	ret

0000148a <__ashrdi3>:
    148a:	97 fb       	bst	r25, 7
    148c:	10 f8       	bld	r1, 0

0000148e <__lshrdi3>:
    148e:	16 94       	lsr	r1
    1490:	00 08       	sbc	r0, r0
    1492:	0f 93       	push	r16
    1494:	08 30       	cpi	r16, 0x08	; 8
    1496:	98 f0       	brcs	.+38     	; 0x14be <__lshrdi3+0x30>
    1498:	08 50       	subi	r16, 0x08	; 8
    149a:	23 2f       	mov	r18, r19
    149c:	34 2f       	mov	r19, r20
    149e:	45 2f       	mov	r20, r21
    14a0:	56 2f       	mov	r21, r22
    14a2:	67 2f       	mov	r22, r23
    14a4:	78 2f       	mov	r23, r24
    14a6:	89 2f       	mov	r24, r25
    14a8:	90 2d       	mov	r25, r0
    14aa:	f4 cf       	rjmp	.-24     	; 0x1494 <__lshrdi3+0x6>
    14ac:	05 94       	asr	r0
    14ae:	97 95       	ror	r25
    14b0:	87 95       	ror	r24
    14b2:	77 95       	ror	r23
    14b4:	67 95       	ror	r22
    14b6:	57 95       	ror	r21
    14b8:	47 95       	ror	r20
    14ba:	37 95       	ror	r19
    14bc:	27 95       	ror	r18
    14be:	0a 95       	dec	r16
    14c0:	aa f7       	brpl	.-22     	; 0x14ac <__lshrdi3+0x1e>
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <_exit>:
    14c6:	f8 94       	cli

000014c8 <__stop_program>:
    14c8:	ff cf       	rjmp	.-2      	; 0x14c8 <__stop_program>
