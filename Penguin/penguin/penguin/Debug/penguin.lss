
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000300  00802000  00003c1e  00003cb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000075c2  00802300  00802300  00003fb2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a38  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011276  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003003  00000000  00000000  00015cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006eac  00000000  00000000  00018d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c44  00000000  00000000  0001fbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006a14  00000000  00000000  000217f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000832e  00000000  00000000  00028208  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ce0  00000000  00000000  00030536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__ctors_end>
       4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
       c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      10:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      14:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      18:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      1c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      20:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      24:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      28:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      2c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      30:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      34:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      38:	0c 94 1d 06 	jmp	0xc3a	; 0xc3a <__vector_14>
      3c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      40:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      44:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      4c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      50:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      54:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      58:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      5c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      60:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      64:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__vector_25>
      68:	0c 94 83 17 	jmp	0x2f06	; 0x2f06 <__vector_26>
      6c:	0c 94 79 17 	jmp	0x2ef2	; 0x2ef2 <__vector_27>
      70:	0c 94 8d 17 	jmp	0x2f1a	; 0x2f1a <__vector_28>
      74:	0c 94 a1 17 	jmp	0x2f42	; 0x2f42 <__vector_29>
      78:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__vector_30>
      7c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      80:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      84:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      88:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      8c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      90:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      94:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      98:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      9c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      a0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      a4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      a8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      ac:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      b0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      b4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      b8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      bc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      c0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      c4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      c8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      cc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      d0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      d4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      d8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      dc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      e0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      e4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      e8:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__vector_58>
      ec:	0c 94 dd 17 	jmp	0x2fba	; 0x2fba <__vector_59>
      f0:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__vector_60>
      f4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      f8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
      fc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     100:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     104:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     108:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     10c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     110:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     114:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     118:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     11c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     120:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     124:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     128:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     12c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     130:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     134:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     138:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     13c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     140:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     144:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     148:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     14c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     150:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     154:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     158:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     15c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     160:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__vector_88>
     164:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__vector_89>
     168:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__vector_90>
     16c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     170:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     174:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     178:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     17c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     180:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     184:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     188:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     18c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     190:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     194:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     198:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     19c:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1a0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1a4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1a8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1ac:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1b0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1b4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1b8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1bc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1c0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1c4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1c8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1cc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1d0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1d4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1d8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1dc:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1e0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1e4:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1e8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1ec:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1f0:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1f4:	0c 94 97 11 	jmp	0x232e	; 0x232e <__vector_125>
     1f8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__bad_interrupt>
     1fc:	6f 0c       	add	r6, r15
     1fe:	9a 0c       	add	r9, r10
     200:	71 0d       	add	r23, r1
     202:	9a 0c       	add	r9, r10
     204:	71 0d       	add	r23, r1
     206:	d5 0c       	add	r13, r5
     208:	ec 0c       	add	r14, r12
     20a:	71 0d       	add	r23, r1
     20c:	43 0d       	add	r20, r3
     20e:	50 0d       	add	r21, r0

00000210 <__trampolines_start>:
     210:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <thread_5>
     214:	0c 94 9a 0c 	jmp	0x1934	; 0x1934 <USB_Device_ProcessControlRequest+0xbc>
     218:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <USB_Device_ProcessControlRequest+0x20e>
     21c:	0c 94 ab 15 	jmp	0x2b56	; 0x2b56 <thread_4>
     220:	0c 94 50 0d 	jmp	0x1aa0	; 0x1aa0 <USB_Device_ProcessControlRequest+0x228>
     224:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <USB_Device_ProcessControlRequest+0x66>
     228:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <USB_Device_ProcessControlRequest+0x160>
     22c:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <prvIdleTask>
     230:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
     234:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <USBThread>
     238:	0c 94 89 0a 	jmp	0x1512	; 0x1512 <CDC_Device_putchar>
     23c:	0c 94 d5 0c 	jmp	0x19aa	; 0x19aa <USB_Device_ProcessControlRequest+0x132>
     240:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <CDC_Device_getchar>

00000244 <ProductString>:
     244:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     254:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000262 <ManufacturerString>:
     262:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     272:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000027c <LanguageString>:
     27c:	04 03 09 04                                         ....

00000280 <ConfigurationDescriptor>:
     280:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     290:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     2a0:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2b0:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002be <DeviceDescriptor>:
     2be:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2ce:	dc 01                                               ..

000002d0 <__c.2242>:
     2d0:	6e 61 6e 00                                         nan.

000002d4 <__c.2240>:
     2d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     304:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     314:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     324:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     334:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     344:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     354:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     364:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     374:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     384:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     394:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d2 <__ctors_end>:
     3d2:	11 24       	eor	r1, r1
     3d4:	1f be       	out	0x3f, r1	; 63
     3d6:	cf ef       	ldi	r28, 0xFF	; 255
     3d8:	cd bf       	out	0x3d, r28	; 61
     3da:	df e9       	ldi	r29, 0x9F	; 159
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	00 e0       	ldi	r16, 0x00	; 0
     3e0:	0c bf       	out	0x3c, r16	; 60

000003e2 <__do_copy_data>:
     3e2:	13 e2       	ldi	r17, 0x23	; 35
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b0 e2       	ldi	r27, 0x20	; 32
     3e8:	ee e1       	ldi	r30, 0x1E	; 30
     3ea:	fc e3       	ldi	r31, 0x3C	; 60
     3ec:	00 e0       	ldi	r16, 0x00	; 0
     3ee:	0b bf       	out	0x3b, r16	; 59
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <__do_copy_data+0x14>
     3f2:	07 90       	elpm	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	a0 30       	cpi	r26, 0x00	; 0
     3f8:	b1 07       	cpc	r27, r17
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <__do_copy_data+0x10>

000003fc <__do_clear_bss>:
     3fc:	28 e9       	ldi	r18, 0x98	; 152
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	b3 e2       	ldi	r27, 0x23	; 35
     402:	01 c0       	rjmp	.+2      	; 0x406 <.do_clear_bss_start>

00000404 <.do_clear_bss_loop>:
     404:	1d 92       	st	X+, r1

00000406 <.do_clear_bss_start>:
     406:	a2 3c       	cpi	r26, 0xC2	; 194
     408:	b2 07       	cpc	r27, r18
     40a:	e1 f7       	brne	.-8      	; 0x404 <.do_clear_bss_loop>
     40c:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <main>
     410:	0c 94 0d 1e 	jmp	0x3c1a	; 0x3c1a <_exit>

00000414 <__bad_interrupt>:
     414:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000418 <localtime>:
     418:	60 eb       	ldi	r22, 0xB0	; 176
     41a:	78 e9       	ldi	r23, 0x98	; 152
     41c:	0e 94 13 02 	call	0x426	; 0x426 <localtime_r>
     420:	80 eb       	ldi	r24, 0xB0	; 176
     422:	98 e9       	ldi	r25, 0x98	; 152
     424:	08 95       	ret

00000426 <localtime_r>:
     426:	cf 92       	push	r12
     428:	df 92       	push	r13
     42a:	ef 92       	push	r14
     42c:	ff 92       	push	r15
     42e:	0f 93       	push	r16
     430:	1f 93       	push	r17
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	00 d0       	rcall	.+0      	; 0x438 <localtime_r+0x12>
     438:	1f 92       	push	r1
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	6c 01       	movw	r12, r24
     440:	7b 01       	movw	r14, r22
     442:	e0 91 c0 98 	lds	r30, 0x98C0
     446:	f0 91 c1 98 	lds	r31, 0x98C1
     44a:	30 97       	sbiw	r30, 0x00	; 0
     44c:	29 f0       	breq	.+10     	; 0x458 <localtime_r+0x32>
     44e:	6c eb       	ldi	r22, 0xBC	; 188
     450:	78 e9       	ldi	r23, 0x98	; 152
     452:	19 95       	eicall
     454:	8c 01       	movw	r16, r24
     456:	02 c0       	rjmp	.+4      	; 0x45c <localtime_r+0x36>
     458:	0f ef       	ldi	r16, 0xFF	; 255
     45a:	1f ef       	ldi	r17, 0xFF	; 255
     45c:	f6 01       	movw	r30, r12
     45e:	40 81       	ld	r20, Z
     460:	51 81       	ldd	r21, Z+1	; 0x01
     462:	62 81       	ldd	r22, Z+2	; 0x02
     464:	73 81       	ldd	r23, Z+3	; 0x03
     466:	80 91 bc 98 	lds	r24, 0x98BC
     46a:	90 91 bd 98 	lds	r25, 0x98BD
     46e:	a0 91 be 98 	lds	r26, 0x98BE
     472:	b0 91 bf 98 	lds	r27, 0x98BF
     476:	48 0f       	add	r20, r24
     478:	59 1f       	adc	r21, r25
     47a:	6a 1f       	adc	r22, r26
     47c:	7b 1f       	adc	r23, r27
     47e:	10 16       	cp	r1, r16
     480:	11 06       	cpc	r1, r17
     482:	4c f4       	brge	.+18     	; 0x496 <localtime_r+0x70>
     484:	c8 01       	movw	r24, r16
     486:	01 2e       	mov	r0, r17
     488:	00 0c       	add	r0, r0
     48a:	aa 0b       	sbc	r26, r26
     48c:	bb 0b       	sbc	r27, r27
     48e:	48 0f       	add	r20, r24
     490:	59 1f       	adc	r21, r25
     492:	6a 1f       	adc	r22, r26
     494:	7b 1f       	adc	r23, r27
     496:	49 83       	std	Y+1, r20	; 0x01
     498:	5a 83       	std	Y+2, r21	; 0x02
     49a:	6b 83       	std	Y+3, r22	; 0x03
     49c:	7c 83       	std	Y+4, r23	; 0x04
     49e:	b7 01       	movw	r22, r14
     4a0:	ce 01       	movw	r24, r28
     4a2:	01 96       	adiw	r24, 0x01	; 1
     4a4:	0e 94 d6 02 	call	0x5ac	; 0x5ac <gmtime_r>
     4a8:	f7 01       	movw	r30, r14
     4aa:	02 87       	std	Z+10, r16	; 0x0a
     4ac:	13 87       	std	Z+11, r17	; 0x0b
     4ae:	24 96       	adiw	r28, 0x04	; 4
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	1f 91       	pop	r17
     4ba:	0f 91       	pop	r16
     4bc:	ff 90       	pop	r15
     4be:	ef 90       	pop	r14
     4c0:	df 90       	pop	r13
     4c2:	cf 90       	pop	r12
     4c4:	08 95       	ret

000004c6 <mktime>:
     4c6:	cf 92       	push	r12
     4c8:	df 92       	push	r13
     4ca:	ef 92       	push	r14
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <mktime+0x12>
     4d8:	1f 92       	push	r1
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	8c 01       	movw	r16, r24
     4e0:	0e 94 ac 03 	call	0x758	; 0x758 <mk_gmtime>
     4e4:	69 83       	std	Y+1, r22	; 0x01
     4e6:	7a 83       	std	Y+2, r23	; 0x02
     4e8:	8b 83       	std	Y+3, r24	; 0x03
     4ea:	9c 83       	std	Y+4, r25	; 0x04
     4ec:	f8 01       	movw	r30, r16
     4ee:	82 85       	ldd	r24, Z+10	; 0x0a
     4f0:	93 85       	ldd	r25, Z+11	; 0x0b
     4f2:	97 ff       	sbrs	r25, 7
     4f4:	0e c0       	rjmp	.+28     	; 0x512 <mktime+0x4c>
     4f6:	e0 91 c0 98 	lds	r30, 0x98C0
     4fa:	f0 91 c1 98 	lds	r31, 0x98C1
     4fe:	30 97       	sbiw	r30, 0x00	; 0
     500:	41 f0       	breq	.+16     	; 0x512 <mktime+0x4c>
     502:	6c eb       	ldi	r22, 0xBC	; 188
     504:	78 e9       	ldi	r23, 0x98	; 152
     506:	ce 01       	movw	r24, r28
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	19 95       	eicall
     50c:	f8 01       	movw	r30, r16
     50e:	82 87       	std	Z+10, r24	; 0x0a
     510:	93 87       	std	Z+11, r25	; 0x0b
     512:	f8 01       	movw	r30, r16
     514:	82 85       	ldd	r24, Z+10	; 0x0a
     516:	93 85       	ldd	r25, Z+11	; 0x0b
     518:	18 16       	cp	r1, r24
     51a:	19 06       	cpc	r1, r25
     51c:	94 f4       	brge	.+36     	; 0x542 <mktime+0x7c>
     51e:	09 2e       	mov	r0, r25
     520:	00 0c       	add	r0, r0
     522:	aa 0b       	sbc	r26, r26
     524:	bb 0b       	sbc	r27, r27
     526:	49 81       	ldd	r20, Y+1	; 0x01
     528:	5a 81       	ldd	r21, Y+2	; 0x02
     52a:	6b 81       	ldd	r22, Y+3	; 0x03
     52c:	7c 81       	ldd	r23, Y+4	; 0x04
     52e:	6a 01       	movw	r12, r20
     530:	7b 01       	movw	r14, r22
     532:	c8 1a       	sub	r12, r24
     534:	d9 0a       	sbc	r13, r25
     536:	ea 0a       	sbc	r14, r26
     538:	fb 0a       	sbc	r15, r27
     53a:	c9 82       	std	Y+1, r12	; 0x01
     53c:	da 82       	std	Y+2, r13	; 0x02
     53e:	eb 82       	std	Y+3, r14	; 0x03
     540:	fc 82       	std	Y+4, r15	; 0x04
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	9a 81       	ldd	r25, Y+2	; 0x02
     546:	ab 81       	ldd	r26, Y+3	; 0x03
     548:	bc 81       	ldd	r27, Y+4	; 0x04
     54a:	40 91 bc 98 	lds	r20, 0x98BC
     54e:	50 91 bd 98 	lds	r21, 0x98BD
     552:	60 91 be 98 	lds	r22, 0x98BE
     556:	70 91 bf 98 	lds	r23, 0x98BF
     55a:	84 1b       	sub	r24, r20
     55c:	95 0b       	sbc	r25, r21
     55e:	a6 0b       	sbc	r26, r22
     560:	b7 0b       	sbc	r27, r23
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	ab 83       	std	Y+3, r26	; 0x03
     568:	bc 83       	std	Y+4, r27	; 0x04
     56a:	b8 01       	movw	r22, r16
     56c:	ce 01       	movw	r24, r28
     56e:	01 96       	adiw	r24, 0x01	; 1
     570:	0e 94 13 02 	call	0x426	; 0x426 <localtime_r>
     574:	69 81       	ldd	r22, Y+1	; 0x01
     576:	7a 81       	ldd	r23, Y+2	; 0x02
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	24 96       	adiw	r28, 0x04	; 4
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	de bf       	out	0x3e, r29	; 62
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	0f 91       	pop	r16
     58a:	ff 90       	pop	r15
     58c:	ef 90       	pop	r14
     58e:	df 90       	pop	r13
     590:	cf 90       	pop	r12
     592:	08 95       	ret

00000594 <set_system_time>:
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	60 93 ac 98 	sts	0x98AC, r22
     59c:	70 93 ad 98 	sts	0x98AD, r23
     5a0:	80 93 ae 98 	sts	0x98AE, r24
     5a4:	90 93 af 98 	sts	0x98AF, r25
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	08 95       	ret

000005ac <gmtime_r>:
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	28 97       	sbiw	r28, 0x08	; 8
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	8b 01       	movw	r16, r22
     5c8:	fc 01       	movw	r30, r24
     5ca:	60 81       	ld	r22, Z
     5cc:	71 81       	ldd	r23, Z+1	; 0x01
     5ce:	82 81       	ldd	r24, Z+2	; 0x02
     5d0:	93 81       	ldd	r25, Z+3	; 0x03
     5d2:	20 e8       	ldi	r18, 0x80	; 128
     5d4:	31 e5       	ldi	r19, 0x51	; 81
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmodsi4>
     5de:	69 01       	movw	r12, r18
     5e0:	7a 01       	movw	r14, r20
     5e2:	2c e3       	ldi	r18, 0x3C	; 60
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__divmodsi4>
     5ee:	29 83       	std	Y+1, r18	; 0x01
     5f0:	3a 83       	std	Y+2, r19	; 0x02
     5f2:	4b 83       	std	Y+3, r20	; 0x03
     5f4:	5c 83       	std	Y+4, r21	; 0x04
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	ab 81       	ldd	r26, Y+3	; 0x03
     5fc:	bc 81       	ldd	r27, Y+4	; 0x04
     5fe:	f8 01       	movw	r30, r16
     600:	60 83       	st	Z, r22
     602:	6c e3       	ldi	r22, 0x3C	; 60
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	f8 01       	movw	r30, r16
     610:	a1 83       	std	Z+1, r26	; 0x01
     612:	82 83       	std	Z+2, r24	; 0x02
     614:	c6 01       	movw	r24, r12
     616:	06 96       	adiw	r24, 0x06	; 6
     618:	67 e0       	ldi	r22, 0x07	; 7
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	0e 94 15 1c 	call	0x382a	; 0x382a <__udivmodhi4>
     620:	84 83       	std	Z+4, r24	; 0x04
     622:	2d ea       	ldi	r18, 0xAD	; 173
     624:	3e e8       	ldi	r19, 0x8E	; 142
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__divmodsi4>
     632:	29 83       	std	Y+1, r18	; 0x01
     634:	3a 83       	std	Y+2, r19	; 0x02
     636:	6d 83       	std	Y+5, r22	; 0x05
     638:	7e 83       	std	Y+6, r23	; 0x06
     63a:	8f 83       	std	Y+7, r24	; 0x07
     63c:	98 87       	std	Y+8, r25	; 0x08
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	9a 81       	ldd	r25, Y+2	; 0x02
     642:	24 e6       	ldi	r18, 0x64	; 100
     644:	28 9f       	mul	r18, r24
     646:	60 01       	movw	r12, r0
     648:	29 9f       	mul	r18, r25
     64a:	d0 0c       	add	r13, r0
     64c:	11 24       	eor	r1, r1
     64e:	6d 81       	ldd	r22, Y+5	; 0x05
     650:	7e 81       	ldd	r23, Y+6	; 0x06
     652:	8f 81       	ldd	r24, Y+7	; 0x07
     654:	98 85       	ldd	r25, Y+8	; 0x08
     656:	25 eb       	ldi	r18, 0xB5	; 181
     658:	35 e0       	ldi	r19, 0x05	; 5
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <__divmodsi4>
     662:	29 83       	std	Y+1, r18	; 0x01
     664:	3a 83       	std	Y+2, r19	; 0x02
     666:	6d 83       	std	Y+5, r22	; 0x05
     668:	7e 83       	std	Y+6, r23	; 0x06
     66a:	e9 80       	ldd	r14, Y+1	; 0x01
     66c:	fa 80       	ldd	r15, Y+2	; 0x02
     66e:	ee 0c       	add	r14, r14
     670:	ff 1c       	adc	r15, r15
     672:	ee 0c       	add	r14, r14
     674:	ff 1c       	adc	r15, r15
     676:	ec 0c       	add	r14, r12
     678:	fd 1c       	adc	r15, r13
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	f5 e6       	ldi	r31, 0x65	; 101
     680:	ef 16       	cp	r14, r31
     682:	f1 04       	cpc	r15, r1
     684:	10 f0       	brcs	.+4      	; 0x68a <gmtime_r+0xde>
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	04 c0       	rjmp	.+8      	; 0x692 <gmtime_r+0xe6>
     68a:	24 e6       	ldi	r18, 0x64	; 100
     68c:	e2 16       	cp	r14, r18
     68e:	f1 04       	cpc	r15, r1
     690:	19 f0       	breq	.+6      	; 0x698 <gmtime_r+0xec>
     692:	21 e0       	ldi	r18, 0x01	; 1
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	02 c0       	rjmp	.+4      	; 0x69c <gmtime_r+0xf0>
     698:	20 e0       	ldi	r18, 0x00	; 0
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	a9 01       	movw	r20, r18
     69e:	44 59       	subi	r20, 0x94	; 148
     6a0:	5e 4f       	sbci	r21, 0xFE	; 254
     6a2:	48 17       	cp	r20, r24
     6a4:	59 07       	cpc	r21, r25
     6a6:	68 f4       	brcc	.+26     	; 0x6c2 <gmtime_r+0x116>
     6a8:	6d e6       	ldi	r22, 0x6D	; 109
     6aa:	71 e0       	ldi	r23, 0x01	; 1
     6ac:	82 1b       	sub	r24, r18
     6ae:	93 0b       	sbc	r25, r19
     6b0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     6b4:	dc 01       	movw	r26, r24
     6b6:	cb 01       	movw	r24, r22
     6b8:	e8 0e       	add	r14, r24
     6ba:	f9 1e       	adc	r15, r25
     6bc:	cd 01       	movw	r24, r26
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	44 e6       	ldi	r20, 0x64	; 100
     6c4:	e4 0e       	add	r14, r20
     6c6:	f1 1c       	adc	r15, r1
     6c8:	f8 01       	movw	r30, r16
     6ca:	e6 82       	std	Z+6, r14	; 0x06
     6cc:	f7 82       	std	Z+7, r15	; 0x07
     6ce:	80 87       	std	Z+8, r24	; 0x08
     6d0:	91 87       	std	Z+9, r25	; 0x09
     6d2:	25 5c       	subi	r18, 0xC5	; 197
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	82 17       	cp	r24, r18
     6d8:	93 07       	cpc	r25, r19
     6da:	48 f4       	brcc	.+18     	; 0x6ee <gmtime_r+0x142>
     6dc:	6f e1       	ldi	r22, 0x1F	; 31
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	f8 01       	movw	r30, r16
     6ea:	85 83       	std	Z+5, r24	; 0x05
     6ec:	22 c0       	rjmp	.+68     	; 0x732 <gmtime_r+0x186>
     6ee:	69 e9       	ldi	r22, 0x99	; 153
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	82 1b       	sub	r24, r18
     6f4:	93 0b       	sbc	r25, r19
     6f6:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     6fa:	dc 01       	movw	r26, r24
     6fc:	cb 01       	movw	r24, r22
     6fe:	f8 2e       	mov	r15, r24
     700:	ff 0c       	add	r15, r15
     702:	ff 0c       	add	r15, r15
     704:	f8 0e       	add	r15, r24
     706:	6d e3       	ldi	r22, 0x3D	; 61
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	cd 01       	movw	r24, r26
     70c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	e8 2e       	mov	r14, r24
     716:	ee 0c       	add	r14, r14
     718:	6f e1       	ldi	r22, 0x1F	; 31
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	cd 01       	movw	r24, r26
     71e:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     722:	dc 01       	movw	r26, r24
     724:	cb 01       	movw	r24, r22
     726:	22 e0       	ldi	r18, 0x02	; 2
     728:	28 0f       	add	r18, r24
     72a:	f2 0e       	add	r15, r18
     72c:	fe 0c       	add	r15, r14
     72e:	f8 01       	movw	r30, r16
     730:	f5 82       	std	Z+5, r15	; 0x05
     732:	a3 83       	std	Z+3, r26	; 0x03
     734:	f8 01       	movw	r30, r16
     736:	12 86       	std	Z+10, r1	; 0x0a
     738:	13 86       	std	Z+11, r1	; 0x0b
     73a:	83 81       	ldd	r24, Z+3	; 0x03
     73c:	8f 5f       	subi	r24, 0xFF	; 255
     73e:	83 83       	std	Z+3, r24	; 0x03
     740:	28 96       	adiw	r28, 0x08	; 8
     742:	cd bf       	out	0x3d, r28	; 61
     744:	de bf       	out	0x3e, r29	; 62
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	08 95       	ret

00000758 <mk_gmtime>:
     758:	8f 92       	push	r8
     75a:	9f 92       	push	r9
     75c:	af 92       	push	r10
     75e:	bf 92       	push	r11
     760:	cf 92       	push	r12
     762:	df 92       	push	r13
     764:	ef 92       	push	r14
     766:	ff 92       	push	r15
     768:	0f 93       	push	r16
     76a:	1f 93       	push	r17
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	ec 01       	movw	r28, r24
     772:	ee 81       	ldd	r30, Y+6	; 0x06
     774:	ff 81       	ldd	r31, Y+7	; 0x07
     776:	8f 01       	movw	r16, r30
     778:	04 56       	subi	r16, 0x64	; 100
     77a:	11 09       	sbc	r17, r1
     77c:	b9 f0       	breq	.+46     	; 0x7ac <mk_gmtime+0x54>
     77e:	cf 01       	movw	r24, r30
     780:	85 56       	subi	r24, 0x65	; 101
     782:	91 09       	sbc	r25, r1
     784:	6c 01       	movw	r12, r24
     786:	97 ff       	sbrs	r25, 7
     788:	03 c0       	rjmp	.+6      	; 0x790 <mk_gmtime+0x38>
     78a:	23 e0       	ldi	r18, 0x03	; 3
     78c:	c2 0e       	add	r12, r18
     78e:	d1 1c       	adc	r13, r1
     790:	d5 94       	asr	r13
     792:	c7 94       	ror	r12
     794:	d5 94       	asr	r13
     796:	c7 94       	ror	r12
     798:	6c e9       	ldi	r22, 0x9C	; 156
     79a:	7f ef       	ldi	r23, 0xFF	; 255
     79c:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     7a0:	c6 0e       	add	r12, r22
     7a2:	d7 1e       	adc	r13, r23
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	c8 1a       	sub	r12, r24
     7a8:	d8 0a       	sbc	r13, r24
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <mk_gmtime+0x58>
     7ac:	c1 2c       	mov	r12, r1
     7ae:	d1 2c       	mov	r13, r1
     7b0:	0d 2c       	mov	r0, r13
     7b2:	00 0c       	add	r0, r0
     7b4:	ee 08       	sbc	r14, r14
     7b6:	ff 08       	sbc	r15, r15
     7b8:	2d e6       	ldi	r18, 0x6D	; 109
     7ba:	31 e0       	ldi	r19, 0x01	; 1
     7bc:	d8 01       	movw	r26, r16
     7be:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__usmulhisi3>
     7c2:	c6 0e       	add	r12, r22
     7c4:	d7 1e       	adc	r13, r23
     7c6:	e8 1e       	adc	r14, r24
     7c8:	f9 1e       	adc	r15, r25
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	08 2e       	mov	r0, r24
     7ce:	00 0c       	add	r0, r0
     7d0:	99 0b       	sbc	r25, r25
     7d2:	8c 01       	movw	r16, r24
     7d4:	01 50       	subi	r16, 0x01	; 1
     7d6:	11 09       	sbc	r17, r1
     7d8:	2d 81       	ldd	r18, Y+5	; 0x05
     7da:	22 30       	cpi	r18, 0x02	; 2
     7dc:	2c f4       	brge	.+10     	; 0x7e8 <mk_gmtime+0x90>
     7de:	22 23       	and	r18, r18
     7e0:	79 f1       	breq	.+94     	; 0x840 <mk_gmtime+0xe8>
     7e2:	01 5e       	subi	r16, 0xE1	; 225
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	2c c0       	rjmp	.+88     	; 0x840 <mk_gmtime+0xe8>
     7e8:	cf 01       	movw	r24, r30
     7ea:	84 59       	subi	r24, 0x94	; 148
     7ec:	98 4f       	sbci	r25, 0xF8	; 248
     7ee:	0e 94 67 04 	call	0x8ce	; 0x8ce <is_leap_year>
     7f2:	e8 2f       	mov	r30, r24
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	fb 96       	adiw	r30, 0x3b	; 59
     7f8:	e0 0f       	add	r30, r16
     7fa:	f1 1f       	adc	r31, r17
     7fc:	8d 81       	ldd	r24, Y+5	; 0x05
     7fe:	08 2e       	mov	r0, r24
     800:	00 0c       	add	r0, r0
     802:	99 0b       	sbc	r25, r25
     804:	02 97       	sbiw	r24, 0x02	; 2
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	91 05       	cpc	r25, r1
     80a:	14 f0       	brlt	.+4      	; 0x810 <mk_gmtime+0xb8>
     80c:	e7 56       	subi	r30, 0x67	; 103
     80e:	ff 4f       	sbci	r31, 0xFF	; 255
     810:	65 e0       	ldi	r22, 0x05	; 5
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     818:	9c 01       	movw	r18, r24
     81a:	97 ff       	sbrs	r25, 7
     81c:	02 c0       	rjmp	.+4      	; 0x822 <mk_gmtime+0xca>
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	35 95       	asr	r19
     824:	27 95       	ror	r18
     826:	9d e3       	ldi	r25, 0x3D	; 61
     828:	92 9f       	mul	r25, r18
     82a:	a0 01       	movw	r20, r0
     82c:	93 9f       	mul	r25, r19
     82e:	50 0d       	add	r21, r0
     830:	11 24       	eor	r1, r1
     832:	8f 01       	movw	r16, r30
     834:	04 0f       	add	r16, r20
     836:	15 1f       	adc	r17, r21
     838:	80 ff       	sbrs	r24, 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <mk_gmtime+0xe8>
     83c:	01 5e       	subi	r16, 0xE1	; 225
     83e:	1f 4f       	sbci	r17, 0xFF	; 255
     840:	a8 01       	movw	r20, r16
     842:	11 0f       	add	r17, r17
     844:	66 0b       	sbc	r22, r22
     846:	77 0b       	sbc	r23, r23
     848:	9a 01       	movw	r18, r20
     84a:	ab 01       	movw	r20, r22
     84c:	2c 0d       	add	r18, r12
     84e:	3d 1d       	adc	r19, r13
     850:	4e 1d       	adc	r20, r14
     852:	5f 1d       	adc	r21, r15
     854:	60 e8       	ldi	r22, 0x80	; 128
     856:	71 e5       	ldi	r23, 0x51	; 81
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <__mulsi3>
     860:	6b 01       	movw	r12, r22
     862:	7c 01       	movw	r14, r24
     864:	aa 81       	ldd	r26, Y+2	; 0x02
     866:	0a 2e       	mov	r0, r26
     868:	00 0c       	add	r0, r0
     86a:	bb 0b       	sbc	r27, r27
     86c:	20 e1       	ldi	r18, 0x10	; 16
     86e:	3e e0       	ldi	r19, 0x0E	; 14
     870:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__usmulhisi3>
     874:	4b 01       	movw	r8, r22
     876:	5c 01       	movw	r10, r24
     878:	a9 81       	ldd	r26, Y+1	; 0x01
     87a:	0a 2e       	mov	r0, r26
     87c:	00 0c       	add	r0, r0
     87e:	bb 0b       	sbc	r27, r27
     880:	2c e3       	ldi	r18, 0x3C	; 60
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__usmulhisi3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	88 0d       	add	r24, r8
     88e:	99 1d       	adc	r25, r9
     890:	aa 1d       	adc	r26, r10
     892:	bb 1d       	adc	r27, r11
     894:	48 81       	ld	r20, Y
     896:	04 2e       	mov	r0, r20
     898:	00 0c       	add	r0, r0
     89a:	55 0b       	sbc	r21, r21
     89c:	66 0b       	sbc	r22, r22
     89e:	77 0b       	sbc	r23, r23
     8a0:	84 0f       	add	r24, r20
     8a2:	95 1f       	adc	r25, r21
     8a4:	a6 1f       	adc	r26, r22
     8a6:	b7 1f       	adc	r27, r23
     8a8:	bc 01       	movw	r22, r24
     8aa:	cd 01       	movw	r24, r26
     8ac:	6c 0d       	add	r22, r12
     8ae:	7d 1d       	adc	r23, r13
     8b0:	8e 1d       	adc	r24, r14
     8b2:	9f 1d       	adc	r25, r15
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	08 95       	ret

000008ce <is_leap_year>:
     8ce:	9c 01       	movw	r18, r24
     8d0:	23 70       	andi	r18, 0x03	; 3
     8d2:	33 27       	eor	r19, r19
     8d4:	23 2b       	or	r18, r19
     8d6:	59 f4       	brne	.+22     	; 0x8ee <is_leap_year+0x20>
     8d8:	64 e6       	ldi	r22, 0x64	; 100
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
     8e0:	89 2b       	or	r24, r25
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <is_leap_year+0x24>
     8e4:	63 70       	andi	r22, 0x03	; 3
     8e6:	77 27       	eor	r23, r23
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	67 2b       	or	r22, r23
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <is_leap_year+0x26>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	08 95       	ret
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	08 95       	ret

000008f6 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     8f6:	29 2f       	mov	r18, r25
     8f8:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     8fa:	22 30       	cpi	r18, 0x02	; 2
     8fc:	31 05       	cpc	r19, r1
     8fe:	59 f0       	breq	.+22     	; 0x916 <CALLBACK_USB_GetDescriptor+0x20>
     900:	23 30       	cpi	r18, 0x03	; 3
     902:	31 05       	cpc	r19, r1
     904:	69 f0       	breq	.+26     	; 0x920 <CALLBACK_USB_GetDescriptor+0x2a>
     906:	21 30       	cpi	r18, 0x01	; 1
     908:	31 05       	cpc	r19, r1
     90a:	29 f5       	brne	.+74     	; 0x956 <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     90c:	82 e1       	ldi	r24, 0x12	; 18
     90e:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     910:	2e eb       	ldi	r18, 0xBE	; 190
     912:	32 e0       	ldi	r19, 0x02	; 2
     914:	29 c0       	rjmp	.+82     	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     916:	8e e3       	ldi	r24, 0x3E	; 62
     918:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     91a:	20 e8       	ldi	r18, 0x80	; 128
     91c:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     91e:	24 c0       	rjmp	.+72     	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
     920:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     922:	81 30       	cpi	r24, 0x01	; 1
     924:	91 05       	cpc	r25, r1
     926:	59 f0       	breq	.+22     	; 0x93e <CALLBACK_USB_GetDescriptor+0x48>
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	91 05       	cpc	r25, r1
     92c:	71 f0       	breq	.+28     	; 0x94a <CALLBACK_USB_GetDescriptor+0x54>
     92e:	89 2b       	or	r24, r25
     930:	b9 f4       	brne	.+46     	; 0x960 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     932:	ec e7       	ldi	r30, 0x7C	; 124
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	84 91       	lpm	r24, Z
     938:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     93a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     93c:	15 c0       	rjmp	.+42     	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     93e:	e2 e6       	ldi	r30, 0x62	; 98
     940:	f2 e0       	ldi	r31, 0x02	; 2
     942:	84 91       	lpm	r24, Z
     944:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     946:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     948:	0f c0       	rjmp	.+30     	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     94a:	e4 e4       	ldi	r30, 0x44	; 68
     94c:	f2 e0       	ldi	r31, 0x02	; 2
     94e:	84 91       	lpm	r24, Z
     950:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     952:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     954:	09 c0       	rjmp	.+18     	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	04 c0       	rjmp	.+8      	; 0x968 <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     968:	fa 01       	movw	r30, r20
     96a:	20 83       	st	Z, r18
     96c:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     96e:	08 95       	ret

00000970 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     970:	31 e1       	ldi	r19, 0x11	; 17
     972:	fc 01       	movw	r30, r24
     974:	30 83       	st	Z, r19
     976:	31 97       	sbiw	r30, 0x01	; 1
     978:	22 e2       	ldi	r18, 0x22	; 34
     97a:	20 83       	st	Z, r18
     97c:	31 97       	sbiw	r30, 0x01	; 1
     97e:	a3 e3       	ldi	r26, 0x33	; 51
     980:	a0 83       	st	Z, r26
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	60 83       	st	Z, r22
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	70 83       	st	Z, r23
     98a:	31 97       	sbiw	r30, 0x01	; 1
     98c:	10 82       	st	Z, r1
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	10 82       	st	Z, r1
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	60 e8       	ldi	r22, 0x80	; 128
     996:	60 83       	st	Z, r22
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	10 82       	st	Z, r1
     99c:	31 97       	sbiw	r30, 0x01	; 1
     99e:	62 e0       	ldi	r22, 0x02	; 2
     9a0:	60 83       	st	Z, r22
     9a2:	31 97       	sbiw	r30, 0x01	; 1
     9a4:	63 e0       	ldi	r22, 0x03	; 3
     9a6:	60 83       	st	Z, r22
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	60 83       	st	Z, r22
     9ae:	31 97       	sbiw	r30, 0x01	; 1
     9b0:	65 e0       	ldi	r22, 0x05	; 5
     9b2:	60 83       	st	Z, r22
     9b4:	31 97       	sbiw	r30, 0x01	; 1
     9b6:	66 e0       	ldi	r22, 0x06	; 6
     9b8:	60 83       	st	Z, r22
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	67 e0       	ldi	r22, 0x07	; 7
     9be:	60 83       	st	Z, r22
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	68 e0       	ldi	r22, 0x08	; 8
     9c4:	60 83       	st	Z, r22
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	69 e0       	ldi	r22, 0x09	; 9
     9ca:	60 83       	st	Z, r22
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	60 e1       	ldi	r22, 0x10	; 16
     9d0:	60 83       	st	Z, r22
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	30 83       	st	Z, r19
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	32 e1       	ldi	r19, 0x12	; 18
     9da:	30 83       	st	Z, r19
     9dc:	31 97       	sbiw	r30, 0x01	; 1
     9de:	33 e1       	ldi	r19, 0x13	; 19
     9e0:	30 83       	st	Z, r19
     9e2:	31 97       	sbiw	r30, 0x01	; 1
     9e4:	34 e1       	ldi	r19, 0x14	; 20
     9e6:	30 83       	st	Z, r19
     9e8:	31 97       	sbiw	r30, 0x01	; 1
     9ea:	35 e1       	ldi	r19, 0x15	; 21
     9ec:	30 83       	st	Z, r19
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	36 e1       	ldi	r19, 0x16	; 22
     9f2:	30 83       	st	Z, r19
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	37 e1       	ldi	r19, 0x17	; 23
     9f8:	30 83       	st	Z, r19
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	38 e1       	ldi	r19, 0x18	; 24
     9fe:	30 83       	st	Z, r19
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	39 e1       	ldi	r19, 0x19	; 25
     a04:	30 83       	st	Z, r19
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	30 e2       	ldi	r19, 0x20	; 32
     a0a:	30 83       	st	Z, r19
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	31 e2       	ldi	r19, 0x21	; 33
     a10:	30 83       	st	Z, r19
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	20 83       	st	Z, r18
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	23 e2       	ldi	r18, 0x23	; 35
     a1a:	20 83       	st	Z, r18
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	40 83       	st	Z, r20
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	50 83       	st	Z, r21
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	26 e2       	ldi	r18, 0x26	; 38
     a28:	20 83       	st	Z, r18
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	27 e2       	ldi	r18, 0x27	; 39
     a2e:	20 83       	st	Z, r18
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	28 e2       	ldi	r18, 0x28	; 40
     a34:	20 83       	st	Z, r18
     a36:	31 97       	sbiw	r30, 0x01	; 1
     a38:	29 e2       	ldi	r18, 0x29	; 41
     a3a:	20 83       	st	Z, r18
     a3c:	31 97       	sbiw	r30, 0x01	; 1
     a3e:	20 e3       	ldi	r18, 0x30	; 48
     a40:	20 83       	st	Z, r18
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	21 e3       	ldi	r18, 0x31	; 49
     a46:	20 83       	st	Z, r18
     a48:	87 97       	sbiw	r24, 0x27	; 39
     a4a:	08 95       	ret

00000a4c <xPortStartScheduler>:
     a4c:	65 e0       	ldi	r22, 0x05	; 5
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	98 e0       	ldi	r25, 0x08	; 8
     a52:	0e 94 1b 18 	call	0x3036	; 0x3036 <TC0_ConfigClockSource>
     a56:	83 ef       	ldi	r24, 0xF3	; 243
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	80 93 26 08 	sts	0x0826, r24
     a5e:	90 93 27 08 	sts	0x0827, r25
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	98 e0       	ldi	r25, 0x08	; 8
     a68:	0e 94 21 18 	call	0x3042	; 0x3042 <TC0_SetOverflowIntLevel>
     a6c:	e0 ea       	ldi	r30, 0xA0	; 160
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	82 81       	ldd	r24, Z+2	; 0x02
     a72:	81 60       	ori	r24, 0x01	; 1
     a74:	82 83       	std	Z+2, r24	; 0x02
     a76:	a0 91 51 93 	lds	r26, 0x9351
     a7a:	b0 91 52 93 	lds	r27, 0x9352
     a7e:	cd 91       	ld	r28, X+
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	dd 91       	ld	r29, X+
     a84:	de bf       	out	0x3e, r29	; 62
     a86:	ff 91       	pop	r31
     a88:	ef 91       	pop	r30
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	bf 91       	pop	r27
     a90:	af 91       	pop	r26
     a92:	9f 91       	pop	r25
     a94:	8f 91       	pop	r24
     a96:	7f 91       	pop	r23
     a98:	6f 91       	pop	r22
     a9a:	5f 91       	pop	r21
     a9c:	4f 91       	pop	r20
     a9e:	3f 91       	pop	r19
     aa0:	2f 91       	pop	r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	9f 90       	pop	r9
     ab4:	8f 90       	pop	r8
     ab6:	7f 90       	pop	r7
     ab8:	6f 90       	pop	r6
     aba:	5f 90       	pop	r5
     abc:	4f 90       	pop	r4
     abe:	3f 90       	pop	r3
     ac0:	2f 90       	pop	r2
     ac2:	1f 90       	pop	r1
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	08 95       	ret
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	08 95       	ret

00000ad0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	0f 92       	push	r0
     ad8:	1f 92       	push	r1
     ada:	11 24       	eor	r1, r1
     adc:	2f 92       	push	r2
     ade:	3f 92       	push	r3
     ae0:	4f 92       	push	r4
     ae2:	5f 92       	push	r5
     ae4:	6f 92       	push	r6
     ae6:	7f 92       	push	r7
     ae8:	8f 92       	push	r8
     aea:	9f 92       	push	r9
     aec:	af 92       	push	r10
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	ef 93       	push	r30
     b16:	ff 93       	push	r31
     b18:	a0 91 51 93 	lds	r26, 0x9351
     b1c:	b0 91 52 93 	lds	r27, 0x9352
     b20:	0d b6       	in	r0, 0x3d	; 61
     b22:	0d 92       	st	X+, r0
     b24:	0e b6       	in	r0, 0x3e	; 62
     b26:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b28:	0e 94 c9 09 	call	0x1392	; 0x1392 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b2c:	a0 91 51 93 	lds	r26, 0x9351
     b30:	b0 91 52 93 	lds	r27, 0x9352
     b34:	cd 91       	ld	r28, X+
     b36:	cd bf       	out	0x3d, r28	; 61
     b38:	dd 91       	ld	r29, X+
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	1f 91       	pop	r17
     b5a:	0f 91       	pop	r16
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	df 90       	pop	r13
     b62:	cf 90       	pop	r12
     b64:	bf 90       	pop	r11
     b66:	af 90       	pop	r10
     b68:	9f 90       	pop	r9
     b6a:	8f 90       	pop	r8
     b6c:	7f 90       	pop	r7
     b6e:	6f 90       	pop	r6
     b70:	5f 90       	pop	r5
     b72:	4f 90       	pop	r4
     b74:	3f 90       	pop	r3
     b76:	2f 90       	pop	r2
     b78:	1f 90       	pop	r1
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b80:	08 95       	ret

00000b82 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b82:	0f 92       	push	r0
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	0f 92       	push	r0
     b8a:	1f 92       	push	r1
     b8c:	11 24       	eor	r1, r1
     b8e:	2f 92       	push	r2
     b90:	3f 92       	push	r3
     b92:	4f 92       	push	r4
     b94:	5f 92       	push	r5
     b96:	6f 92       	push	r6
     b98:	7f 92       	push	r7
     b9a:	8f 92       	push	r8
     b9c:	9f 92       	push	r9
     b9e:	af 92       	push	r10
     ba0:	bf 92       	push	r11
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	0f 93       	push	r16
     bac:	1f 93       	push	r17
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	ef 93       	push	r30
     bc8:	ff 93       	push	r31
     bca:	a0 91 51 93 	lds	r26, 0x9351
     bce:	b0 91 52 93 	lds	r27, 0x9352
     bd2:	0d b6       	in	r0, 0x3d	; 61
     bd4:	0d 92       	st	X+, r0
     bd6:	0e b6       	in	r0, 0x3e	; 62
     bd8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     bda:	0e 94 51 08 	call	0x10a2	; 0x10a2 <xTaskIncrementTick>
     bde:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     be0:	0e 94 c9 09 	call	0x1392	; 0x1392 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     be4:	a0 91 51 93 	lds	r26, 0x9351
     be8:	b0 91 52 93 	lds	r27, 0x9352
     bec:	cd 91       	ld	r28, X+
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	dd 91       	ld	r29, X+
     bf2:	de bf       	out	0x3e, r29	; 62
     bf4:	ff 91       	pop	r31
     bf6:	ef 91       	pop	r30
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	bf 91       	pop	r27
     bfe:	af 91       	pop	r26
     c00:	9f 91       	pop	r25
     c02:	8f 91       	pop	r24
     c04:	7f 91       	pop	r23
     c06:	6f 91       	pop	r22
     c08:	5f 91       	pop	r21
     c0a:	4f 91       	pop	r20
     c0c:	3f 91       	pop	r19
     c0e:	2f 91       	pop	r18
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	df 90       	pop	r13
     c1a:	cf 90       	pop	r12
     c1c:	bf 90       	pop	r11
     c1e:	af 90       	pop	r10
     c20:	9f 90       	pop	r9
     c22:	8f 90       	pop	r8
     c24:	7f 90       	pop	r7
     c26:	6f 90       	pop	r6
     c28:	5f 90       	pop	r5
     c2a:	4f 90       	pop	r4
     c2c:	3f 90       	pop	r3
     c2e:	2f 90       	pop	r2
     c30:	1f 90       	pop	r1
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c38:	08 95       	ret

00000c3a <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
     c3a:	0e 94 c1 05 	call	0xb82	; 0xb82 <vPortYieldFromTick>
		asm volatile ( "reti" );
     c3e:	18 95       	reti

00000c40 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
     c44:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     c46:	0e 94 4b 08 	call	0x1096	; 0x1096 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     c4a:	80 91 00 23 	lds	r24, 0x2300
     c4e:	90 91 01 23 	lds	r25, 0x2301
     c52:	89 2b       	or	r24, r25
     c54:	31 f4       	brne	.+12     	; 0xc62 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     c56:	85 e0       	ldi	r24, 0x05	; 5
     c58:	93 e2       	ldi	r25, 0x23	; 35
     c5a:	80 93 00 23 	sts	0x2300, r24
     c5e:	90 93 01 23 	sts	0x2301, r25
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     c62:	20 91 02 23 	lds	r18, 0x2302
     c66:	30 91 03 23 	lds	r19, 0x2303
     c6a:	ce 01       	movw	r24, r28
     c6c:	82 0f       	add	r24, r18
     c6e:	93 1f       	adc	r25, r19
     c70:	8f 3f       	cpi	r24, 0xFF	; 255
     c72:	4f e6       	ldi	r20, 0x6F	; 111
     c74:	94 07       	cpc	r25, r20
     c76:	70 f4       	brcc	.+28     	; 0xc94 <pvPortMalloc+0x54>
     c78:	28 17       	cp	r18, r24
     c7a:	39 07       	cpc	r19, r25
     c7c:	70 f4       	brcc	.+28     	; 0xc9a <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     c7e:	c0 91 00 23 	lds	r28, 0x2300
     c82:	d0 91 01 23 	lds	r29, 0x2301
     c86:	c2 0f       	add	r28, r18
     c88:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     c8a:	80 93 02 23 	sts	0x2302, r24
     c8e:	90 93 03 23 	sts	0x2303, r25
     c92:	05 c0       	rjmp	.+10     	; 0xc9e <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     c94:	c0 e0       	ldi	r28, 0x00	; 0
     c96:	d0 e0       	ldi	r29, 0x00	; 0
     c98:	02 c0       	rjmp	.+4      	; 0xc9e <pvPortMalloc+0x5e>
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
     c9c:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     c9e:	0e 94 27 09 	call	0x124e	; 0x124e <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     ca2:	ce 01       	movw	r24, r28
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	08 95       	ret

00000caa <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     caa:	08 95       	ret

00000cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     cac:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	81 83       	std	Z+1, r24	; 0x01
     cb2:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     cb4:	2f ef       	ldi	r18, 0xFF	; 255
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	23 83       	std	Z+3, r18	; 0x03
     cba:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cbc:	85 83       	std	Z+5, r24	; 0x05
     cbe:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     cc0:	87 83       	std	Z+7, r24	; 0x07
     cc2:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     cc4:	10 82       	st	Z, r1
     cc6:	08 95       	ret

00000cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     cc8:	fc 01       	movw	r30, r24
     cca:	10 86       	std	Z+8, r1	; 0x08
     ccc:	11 86       	std	Z+9, r1	; 0x09
     cce:	08 95       	ret

00000cd0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	9c 01       	movw	r18, r24
     cd6:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     cd8:	dc 01       	movw	r26, r24
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	cd 91       	ld	r28, X+
     cde:	dc 91       	ld	r29, X
     ce0:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     ce2:	c2 83       	std	Z+2, r28	; 0x02
     ce4:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ce6:	8c 81       	ldd	r24, Y+4	; 0x04
     ce8:	9d 81       	ldd	r25, Y+5	; 0x05
     cea:	84 83       	std	Z+4, r24	; 0x04
     cec:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     cee:	8c 81       	ldd	r24, Y+4	; 0x04
     cf0:	9d 81       	ldd	r25, Y+5	; 0x05
     cf2:	dc 01       	movw	r26, r24
     cf4:	12 96       	adiw	r26, 0x02	; 2
     cf6:	6d 93       	st	X+, r22
     cf8:	7c 93       	st	X, r23
     cfa:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
     cfc:	6c 83       	std	Y+4, r22	; 0x04
     cfe:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d00:	20 87       	std	Z+8, r18	; 0x08
     d02:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
     d04:	f9 01       	movw	r30, r18
     d06:	80 81       	ld	r24, Z
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	80 83       	st	Z, r24
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d18:	48 81       	ld	r20, Y
     d1a:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d1c:	4f 3f       	cpi	r20, 0xFF	; 255
     d1e:	2f ef       	ldi	r18, 0xFF	; 255
     d20:	52 07       	cpc	r21, r18
     d22:	21 f4       	brne	.+8      	; 0xd2c <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d24:	fc 01       	movw	r30, r24
     d26:	a7 81       	ldd	r26, Z+7	; 0x07
     d28:	b0 85       	ldd	r27, Z+8	; 0x08
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d2c:	dc 01       	movw	r26, r24
     d2e:	13 96       	adiw	r26, 0x03	; 3
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <vListInsert+0x22>
     d32:	df 01       	movw	r26, r30
     d34:	12 96       	adiw	r26, 0x02	; 2
     d36:	ed 91       	ld	r30, X+
     d38:	fc 91       	ld	r31, X
     d3a:	13 97       	sbiw	r26, 0x03	; 3
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	42 17       	cp	r20, r18
     d42:	53 07       	cpc	r21, r19
     d44:	b0 f7       	brcc	.-20     	; 0xd32 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     d46:	12 96       	adiw	r26, 0x02	; 2
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	13 97       	sbiw	r26, 0x03	; 3
     d4e:	ea 83       	std	Y+2, r30	; 0x02
     d50:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     d52:	c4 83       	std	Z+4, r28	; 0x04
     d54:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
     d56:	ac 83       	std	Y+4, r26	; 0x04
     d58:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	cd 93       	st	X+, r28
     d5e:	dc 93       	st	X, r29
     d60:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d62:	88 87       	std	Y+8, r24	; 0x08
     d64:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
     d66:	fc 01       	movw	r30, r24
     d68:	20 81       	ld	r18, Z
     d6a:	2f 5f       	subi	r18, 0xFF	; 255
     d6c:	20 83       	st	Z, r18
}
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	08 95       	ret

00000d74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d7a:	a0 85       	ldd	r26, Z+8	; 0x08
     d7c:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d7e:	c2 81       	ldd	r28, Z+2	; 0x02
     d80:	d3 81       	ldd	r29, Z+3	; 0x03
     d82:	84 81       	ldd	r24, Z+4	; 0x04
     d84:	95 81       	ldd	r25, Z+5	; 0x05
     d86:	8c 83       	std	Y+4, r24	; 0x04
     d88:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d8a:	c4 81       	ldd	r28, Z+4	; 0x04
     d8c:	d5 81       	ldd	r29, Z+5	; 0x05
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	8a 83       	std	Y+2, r24	; 0x02
     d94:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	cd 91       	ld	r28, X+
     d9a:	dc 91       	ld	r29, X
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	ce 17       	cp	r28, r30
     da0:	df 07       	cpc	r29, r31
     da2:	31 f4       	brne	.+12     	; 0xdb0 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	8d 93       	st	X+, r24
     dac:	9c 93       	st	X, r25
     dae:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     db0:	10 86       	std	Z+8, r1	; 0x08
     db2:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
     db4:	8c 91       	ld	r24, X
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	08 95       	ret

00000dc0 <prvIdleTask>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
     dc0:	ff cf       	rjmp	.-2      	; 0xdc0 <prvIdleTask>

00000dc2 <prvAddCurrentTaskToDelayedList>:
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	ec 01       	movw	r28, r24
     dc8:	e0 91 51 93 	lds	r30, 0x9351
     dcc:	f0 91 52 93 	lds	r31, 0x9352
     dd0:	82 83       	std	Z+2, r24	; 0x02
     dd2:	93 83       	std	Z+3, r25	; 0x03
     dd4:	80 91 0b 93 	lds	r24, 0x930B
     dd8:	90 91 0c 93 	lds	r25, 0x930C
     ddc:	c8 17       	cp	r28, r24
     dde:	d9 07       	cpc	r29, r25
     de0:	68 f4       	brcc	.+26     	; 0xdfc <prvAddCurrentTaskToDelayedList+0x3a>
     de2:	60 91 51 93 	lds	r22, 0x9351
     de6:	70 91 52 93 	lds	r23, 0x9352
     dea:	80 91 17 93 	lds	r24, 0x9317
     dee:	90 91 18 93 	lds	r25, 0x9318
     df2:	6e 5f       	subi	r22, 0xFE	; 254
     df4:	7f 4f       	sbci	r23, 0xFF	; 255
     df6:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInsert>
     dfa:	17 c0       	rjmp	.+46     	; 0xe2a <prvAddCurrentTaskToDelayedList+0x68>
     dfc:	60 91 51 93 	lds	r22, 0x9351
     e00:	70 91 52 93 	lds	r23, 0x9352
     e04:	80 91 19 93 	lds	r24, 0x9319
     e08:	90 91 1a 93 	lds	r25, 0x931A
     e0c:	6e 5f       	subi	r22, 0xFE	; 254
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
     e10:	0e 94 89 06 	call	0xd12	; 0xd12 <vListInsert>
     e14:	80 91 89 22 	lds	r24, 0x2289
     e18:	90 91 8a 22 	lds	r25, 0x228A
     e1c:	c8 17       	cp	r28, r24
     e1e:	d9 07       	cpc	r29, r25
     e20:	20 f4       	brcc	.+8      	; 0xe2a <prvAddCurrentTaskToDelayedList+0x68>
     e22:	c0 93 89 22 	sts	0x2289, r28
     e26:	d0 93 8a 22 	sts	0x228A, r29
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <xTaskGenericCreate>:
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	4c 01       	movw	r8, r24
     e52:	eb 01       	movw	r28, r22
     e54:	5a 01       	movw	r10, r20
     e56:	29 01       	movw	r4, r18
     e58:	81 e2       	ldi	r24, 0x21	; 33
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 20 06 	call	0xc40	; 0xc40 <pvPortMalloc>
     e60:	3c 01       	movw	r6, r24
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	09 f4       	brne	.+2      	; 0xe68 <xTaskGenericCreate+0x38>
     e66:	da c0       	rjmp	.+436    	; 0x101c <xTaskGenericCreate+0x1ec>
     e68:	c1 14       	cp	r12, r1
     e6a:	d1 04       	cpc	r13, r1
     e6c:	09 f0       	breq	.+2      	; 0xe70 <xTaskGenericCreate+0x40>
     e6e:	d2 c0       	rjmp	.+420    	; 0x1014 <xTaskGenericCreate+0x1e4>
     e70:	c5 01       	movw	r24, r10
     e72:	0e 94 20 06 	call	0xc40	; 0xc40 <pvPortMalloc>
     e76:	f3 01       	movw	r30, r6
     e78:	87 8b       	std	Z+23, r24	; 0x17
     e7a:	90 8f       	std	Z+24, r25	; 0x18
     e7c:	89 2b       	or	r24, r25
     e7e:	21 f4       	brne	.+8      	; 0xe88 <xTaskGenericCreate+0x58>
     e80:	c3 01       	movw	r24, r6
     e82:	0e 94 55 06 	call	0xcaa	; 0xcaa <vPortFree>
     e86:	ca c0       	rjmp	.+404    	; 0x101c <xTaskGenericCreate+0x1ec>
     e88:	f1 e0       	ldi	r31, 0x01	; 1
     e8a:	af 1a       	sub	r10, r31
     e8c:	b1 08       	sbc	r11, r1
     e8e:	f3 01       	movw	r30, r6
     e90:	87 89       	ldd	r24, Z+23	; 0x17
     e92:	90 8d       	ldd	r25, Z+24	; 0x18
     e94:	a8 0e       	add	r10, r24
     e96:	b9 1e       	adc	r11, r25
     e98:	88 81       	ld	r24, Y
     e9a:	81 8f       	std	Z+25, r24	; 0x19
     e9c:	88 81       	ld	r24, Y
     e9e:	88 23       	and	r24, r24
     ea0:	81 f0       	breq	.+32     	; 0xec2 <xTaskGenericCreate+0x92>
     ea2:	d3 01       	movw	r26, r6
     ea4:	5a 96       	adiw	r26, 0x1a	; 26
     ea6:	fe 01       	movw	r30, r28
     ea8:	31 96       	adiw	r30, 0x01	; 1
     eaa:	9e 01       	movw	r18, r28
     eac:	28 5f       	subi	r18, 0xF8	; 248
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	ef 01       	movw	r28, r30
     eb2:	81 91       	ld	r24, Z+
     eb4:	8d 93       	st	X+, r24
     eb6:	88 81       	ld	r24, Y
     eb8:	88 23       	and	r24, r24
     eba:	19 f0       	breq	.+6      	; 0xec2 <xTaskGenericCreate+0x92>
     ebc:	e2 17       	cp	r30, r18
     ebe:	f3 07       	cpc	r31, r19
     ec0:	b9 f7       	brne	.-18     	; 0xeb0 <xTaskGenericCreate+0x80>
     ec2:	f3 01       	movw	r30, r6
     ec4:	10 a2       	std	Z+32, r1	; 0x20
     ec6:	10 2f       	mov	r17, r16
     ec8:	04 30       	cpi	r16, 0x04	; 4
     eca:	08 f0       	brcs	.+2      	; 0xece <xTaskGenericCreate+0x9e>
     ecc:	13 e0       	ldi	r17, 0x03	; 3
     ece:	f3 01       	movw	r30, r6
     ed0:	16 8b       	std	Z+22, r17	; 0x16
     ed2:	e3 01       	movw	r28, r6
     ed4:	22 96       	adiw	r28, 0x02	; 2
     ed6:	ce 01       	movw	r24, r28
     ed8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <vListInitialiseItem>
     edc:	c3 01       	movw	r24, r6
     ede:	0c 96       	adiw	r24, 0x0c	; 12
     ee0:	0e 94 64 06 	call	0xcc8	; 0xcc8 <vListInitialiseItem>
     ee4:	f3 01       	movw	r30, r6
     ee6:	60 86       	std	Z+8, r6	; 0x08
     ee8:	71 86       	std	Z+9, r7	; 0x09
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	81 1b       	sub	r24, r17
     ef0:	91 09       	sbc	r25, r1
     ef2:	84 87       	std	Z+12, r24	; 0x0c
     ef4:	95 87       	std	Z+13, r25	; 0x0d
     ef6:	62 8a       	std	Z+18, r6	; 0x12
     ef8:	73 8a       	std	Z+19, r7	; 0x13
     efa:	a2 01       	movw	r20, r4
     efc:	b4 01       	movw	r22, r8
     efe:	c5 01       	movw	r24, r10
     f00:	0e 94 b8 04 	call	0x970	; 0x970 <pxPortInitialiseStack>
     f04:	f3 01       	movw	r30, r6
     f06:	80 83       	st	Z, r24
     f08:	91 83       	std	Z+1, r25	; 0x01
     f0a:	e1 14       	cp	r14, r1
     f0c:	f1 04       	cpc	r15, r1
     f0e:	19 f0       	breq	.+6      	; 0xf16 <xTaskGenericCreate+0xe6>
     f10:	f7 01       	movw	r30, r14
     f12:	60 82       	st	Z, r6
     f14:	71 82       	std	Z+1, r7	; 0x01
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	0f 92       	push	r0
     f1c:	80 91 0d 93 	lds	r24, 0x930D
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	80 93 0d 93 	sts	0x930D, r24
     f26:	80 91 51 93 	lds	r24, 0x9351
     f2a:	90 91 52 93 	lds	r25, 0x9352
     f2e:	89 2b       	or	r24, r25
     f30:	89 f5       	brne	.+98     	; 0xf94 <xTaskGenericCreate+0x164>
     f32:	60 92 51 93 	sts	0x9351, r6
     f36:	70 92 52 93 	sts	0x9352, r7
     f3a:	80 91 0d 93 	lds	r24, 0x930D
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	c1 f5       	brne	.+112    	; 0xfb2 <xTaskGenericCreate+0x182>
     f42:	8d e2       	ldi	r24, 0x2D	; 45
     f44:	93 e9       	ldi	r25, 0x93	; 147
     f46:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f4a:	86 e3       	ldi	r24, 0x36	; 54
     f4c:	93 e9       	ldi	r25, 0x93	; 147
     f4e:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f52:	8f e3       	ldi	r24, 0x3F	; 63
     f54:	93 e9       	ldi	r25, 0x93	; 147
     f56:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f5a:	88 e4       	ldi	r24, 0x48	; 72
     f5c:	93 e9       	ldi	r25, 0x93	; 147
     f5e:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f62:	84 e2       	ldi	r24, 0x24	; 36
     f64:	93 e9       	ldi	r25, 0x93	; 147
     f66:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f6a:	8b e1       	ldi	r24, 0x1B	; 27
     f6c:	93 e9       	ldi	r25, 0x93	; 147
     f6e:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f72:	8e e0       	ldi	r24, 0x0E	; 14
     f74:	93 e9       	ldi	r25, 0x93	; 147
     f76:	0e 94 56 06 	call	0xcac	; 0xcac <vListInitialise>
     f7a:	84 e2       	ldi	r24, 0x24	; 36
     f7c:	93 e9       	ldi	r25, 0x93	; 147
     f7e:	80 93 19 93 	sts	0x9319, r24
     f82:	90 93 1a 93 	sts	0x931A, r25
     f86:	8b e1       	ldi	r24, 0x1B	; 27
     f88:	93 e9       	ldi	r25, 0x93	; 147
     f8a:	80 93 17 93 	sts	0x9317, r24
     f8e:	90 93 18 93 	sts	0x9318, r25
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <xTaskGenericCreate+0x182>
     f94:	80 91 09 93 	lds	r24, 0x9309
     f98:	81 11       	cpse	r24, r1
     f9a:	0b c0       	rjmp	.+22     	; 0xfb2 <xTaskGenericCreate+0x182>
     f9c:	e0 91 51 93 	lds	r30, 0x9351
     fa0:	f0 91 52 93 	lds	r31, 0x9352
     fa4:	86 89       	ldd	r24, Z+22	; 0x16
     fa6:	08 17       	cp	r16, r24
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <xTaskGenericCreate+0x182>
     faa:	60 92 51 93 	sts	0x9351, r6
     fae:	70 92 52 93 	sts	0x9352, r7
     fb2:	80 91 05 93 	lds	r24, 0x9305
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 05 93 	sts	0x9305, r24
     fbc:	f3 01       	movw	r30, r6
     fbe:	86 89       	ldd	r24, Z+22	; 0x16
     fc0:	90 91 0a 93 	lds	r25, 0x930A
     fc4:	98 17       	cp	r25, r24
     fc6:	10 f4       	brcc	.+4      	; 0xfcc <xTaskGenericCreate+0x19c>
     fc8:	80 93 0a 93 	sts	0x930A, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9c 01       	movw	r18, r24
     fd0:	22 0f       	add	r18, r18
     fd2:	33 1f       	adc	r19, r19
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	22 0f       	add	r18, r18
     fda:	33 1f       	adc	r19, r19
     fdc:	82 0f       	add	r24, r18
     fde:	93 1f       	adc	r25, r19
     fe0:	be 01       	movw	r22, r28
     fe2:	83 5d       	subi	r24, 0xD3	; 211
     fe4:	9c 46       	sbci	r25, 0x6C	; 108
     fe6:	0e 94 68 06 	call	0xcd0	; 0xcd0 <vListInsertEnd>
     fea:	0f 90       	pop	r0
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	80 91 09 93 	lds	r24, 0x9309
     ff2:	88 23       	and	r24, r24
     ff4:	59 f0       	breq	.+22     	; 0x100c <xTaskGenericCreate+0x1dc>
     ff6:	e0 91 51 93 	lds	r30, 0x9351
     ffa:	f0 91 52 93 	lds	r31, 0x9352
     ffe:	86 89       	ldd	r24, Z+22	; 0x16
    1000:	80 17       	cp	r24, r16
    1002:	30 f4       	brcc	.+12     	; 0x1010 <xTaskGenericCreate+0x1e0>
    1004:	0e 94 68 05 	call	0xad0	; 0xad0 <vPortYield>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	09 c0       	rjmp	.+18     	; 0x101e <xTaskGenericCreate+0x1ee>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	07 c0       	rjmp	.+14     	; 0x101e <xTaskGenericCreate+0x1ee>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	05 c0       	rjmp	.+10     	; 0x101e <xTaskGenericCreate+0x1ee>
    1014:	fc 01       	movw	r30, r24
    1016:	c7 8a       	std	Z+23, r12	; 0x17
    1018:	d0 8e       	std	Z+24, r13	; 0x18
    101a:	36 cf       	rjmp	.-404    	; 0xe88 <xTaskGenericCreate+0x58>
    101c:	8f ef       	ldi	r24, 0xFF	; 255
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	5f 90       	pop	r5
    103c:	4f 90       	pop	r4
    103e:	08 95       	ret

00001040 <vTaskStartScheduler>:
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	a1 2c       	mov	r10, r1
    1050:	b1 2c       	mov	r11, r1
    1052:	c1 2c       	mov	r12, r1
    1054:	d1 2c       	mov	r13, r1
    1056:	e1 2c       	mov	r14, r1
    1058:	f1 2c       	mov	r15, r1
    105a:	00 e0       	ldi	r16, 0x00	; 0
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	44 e6       	ldi	r20, 0x64	; 100
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	65 eb       	ldi	r22, 0xB5	; 181
    1066:	72 e2       	ldi	r23, 0x22	; 34
    1068:	80 ee       	ldi	r24, 0xE0	; 224
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	0e 94 18 07 	call	0xe30	; 0xe30 <xTaskGenericCreate>
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	49 f4       	brne	.+18     	; 0x1086 <vTaskStartScheduler+0x46>
    1074:	f8 94       	cli
    1076:	80 93 09 93 	sts	0x9309, r24
    107a:	10 92 0b 93 	sts	0x930B, r1
    107e:	10 92 0c 93 	sts	0x930C, r1
    1082:	0e 94 26 05 	call	0xa4c	; 0xa4c <xPortStartScheduler>
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	bf 90       	pop	r11
    1092:	af 90       	pop	r10
    1094:	08 95       	ret

00001096 <vTaskSuspendAll>:
    1096:	80 91 04 93 	lds	r24, 0x9304
    109a:	8f 5f       	subi	r24, 0xFF	; 255
    109c:	80 93 04 93 	sts	0x9304, r24
    10a0:	08 95       	ret

000010a2 <xTaskIncrementTick>:
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	80 91 04 93 	lds	r24, 0x9304
    10b4:	81 11       	cpse	r24, r1
    10b6:	b6 c0       	rjmp	.+364    	; 0x1224 <xTaskIncrementTick+0x182>
    10b8:	80 91 0b 93 	lds	r24, 0x930B
    10bc:	90 91 0c 93 	lds	r25, 0x930C
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	80 93 0b 93 	sts	0x930B, r24
    10c6:	90 93 0c 93 	sts	0x930C, r25
    10ca:	e0 90 0b 93 	lds	r14, 0x930B
    10ce:	f0 90 0c 93 	lds	r15, 0x930C
    10d2:	e1 14       	cp	r14, r1
    10d4:	f1 04       	cpc	r15, r1
    10d6:	99 f5       	brne	.+102    	; 0x113e <xTaskIncrementTick+0x9c>
    10d8:	80 91 19 93 	lds	r24, 0x9319
    10dc:	90 91 1a 93 	lds	r25, 0x931A
    10e0:	20 91 17 93 	lds	r18, 0x9317
    10e4:	30 91 18 93 	lds	r19, 0x9318
    10e8:	20 93 19 93 	sts	0x9319, r18
    10ec:	30 93 1a 93 	sts	0x931A, r19
    10f0:	80 93 17 93 	sts	0x9317, r24
    10f4:	90 93 18 93 	sts	0x9318, r25
    10f8:	80 91 06 93 	lds	r24, 0x9306
    10fc:	8f 5f       	subi	r24, 0xFF	; 255
    10fe:	80 93 06 93 	sts	0x9306, r24
    1102:	e0 91 19 93 	lds	r30, 0x9319
    1106:	f0 91 1a 93 	lds	r31, 0x931A
    110a:	80 81       	ld	r24, Z
    110c:	81 11       	cpse	r24, r1
    110e:	07 c0       	rjmp	.+14     	; 0x111e <xTaskIncrementTick+0x7c>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	80 93 89 22 	sts	0x2289, r24
    1118:	90 93 8a 22 	sts	0x228A, r25
    111c:	10 c0       	rjmp	.+32     	; 0x113e <xTaskIncrementTick+0x9c>
    111e:	e0 91 19 93 	lds	r30, 0x9319
    1122:	f0 91 1a 93 	lds	r31, 0x931A
    1126:	05 80       	ldd	r0, Z+5	; 0x05
    1128:	f6 81       	ldd	r31, Z+6	; 0x06
    112a:	e0 2d       	mov	r30, r0
    112c:	06 80       	ldd	r0, Z+6	; 0x06
    112e:	f7 81       	ldd	r31, Z+7	; 0x07
    1130:	e0 2d       	mov	r30, r0
    1132:	82 81       	ldd	r24, Z+2	; 0x02
    1134:	93 81       	ldd	r25, Z+3	; 0x03
    1136:	80 93 89 22 	sts	0x2289, r24
    113a:	90 93 8a 22 	sts	0x228A, r25
    113e:	80 91 89 22 	lds	r24, 0x2289
    1142:	90 91 8a 22 	lds	r25, 0x228A
    1146:	e8 16       	cp	r14, r24
    1148:	f9 06       	cpc	r15, r25
    114a:	10 f4       	brcc	.+4      	; 0x1150 <xTaskIncrementTick+0xae>
    114c:	d1 2c       	mov	r13, r1
    114e:	52 c0       	rjmp	.+164    	; 0x11f4 <xTaskIncrementTick+0x152>
    1150:	d1 2c       	mov	r13, r1
    1152:	e0 91 19 93 	lds	r30, 0x9319
    1156:	f0 91 1a 93 	lds	r31, 0x931A
    115a:	90 81       	ld	r25, Z
    115c:	91 11       	cpse	r25, r1
    115e:	07 c0       	rjmp	.+14     	; 0x116e <xTaskIncrementTick+0xcc>
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	9f ef       	ldi	r25, 0xFF	; 255
    1164:	80 93 89 22 	sts	0x2289, r24
    1168:	90 93 8a 22 	sts	0x228A, r25
    116c:	43 c0       	rjmp	.+134    	; 0x11f4 <xTaskIncrementTick+0x152>
    116e:	e0 91 19 93 	lds	r30, 0x9319
    1172:	f0 91 1a 93 	lds	r31, 0x931A
    1176:	05 80       	ldd	r0, Z+5	; 0x05
    1178:	f6 81       	ldd	r31, Z+6	; 0x06
    117a:	e0 2d       	mov	r30, r0
    117c:	c6 81       	ldd	r28, Z+6	; 0x06
    117e:	d7 81       	ldd	r29, Z+7	; 0x07
    1180:	2a 81       	ldd	r18, Y+2	; 0x02
    1182:	3b 81       	ldd	r19, Y+3	; 0x03
    1184:	e2 16       	cp	r14, r18
    1186:	f3 06       	cpc	r15, r19
    1188:	28 f4       	brcc	.+10     	; 0x1194 <xTaskIncrementTick+0xf2>
    118a:	20 93 89 22 	sts	0x2289, r18
    118e:	30 93 8a 22 	sts	0x228A, r19
    1192:	30 c0       	rjmp	.+96     	; 0x11f4 <xTaskIncrementTick+0x152>
    1194:	8e 01       	movw	r16, r28
    1196:	0e 5f       	subi	r16, 0xFE	; 254
    1198:	1f 4f       	sbci	r17, 0xFF	; 255
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 ba 06 	call	0xd74	; 0xd74 <uxListRemove>
    11a0:	8c 89       	ldd	r24, Y+20	; 0x14
    11a2:	9d 89       	ldd	r25, Y+21	; 0x15
    11a4:	89 2b       	or	r24, r25
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <xTaskIncrementTick+0x10e>
    11a8:	ce 01       	movw	r24, r28
    11aa:	0c 96       	adiw	r24, 0x0c	; 12
    11ac:	0e 94 ba 06 	call	0xd74	; 0xd74 <uxListRemove>
    11b0:	2e 89       	ldd	r18, Y+22	; 0x16
    11b2:	80 91 0a 93 	lds	r24, 0x930A
    11b6:	82 17       	cp	r24, r18
    11b8:	10 f4       	brcc	.+4      	; 0x11be <xTaskIncrementTick+0x11c>
    11ba:	20 93 0a 93 	sts	0x930A, r18
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	c9 01       	movw	r24, r18
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	88 0f       	add	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	82 0f       	add	r24, r18
    11d0:	93 1f       	adc	r25, r19
    11d2:	b8 01       	movw	r22, r16
    11d4:	83 5d       	subi	r24, 0xD3	; 211
    11d6:	9c 46       	sbci	r25, 0x6C	; 108
    11d8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <vListInsertEnd>
    11dc:	e0 91 51 93 	lds	r30, 0x9351
    11e0:	f0 91 52 93 	lds	r31, 0x9352
    11e4:	9e 89       	ldd	r25, Y+22	; 0x16
    11e6:	86 89       	ldd	r24, Z+22	; 0x16
    11e8:	98 17       	cp	r25, r24
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <xTaskIncrementTick+0x14c>
    11ec:	b2 cf       	rjmp	.-156    	; 0x1152 <xTaskIncrementTick+0xb0>
    11ee:	dd 24       	eor	r13, r13
    11f0:	d3 94       	inc	r13
    11f2:	af cf       	rjmp	.-162    	; 0x1152 <xTaskIncrementTick+0xb0>
    11f4:	e0 91 51 93 	lds	r30, 0x9351
    11f8:	f0 91 52 93 	lds	r31, 0x9352
    11fc:	86 89       	ldd	r24, Z+22	; 0x16
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	fc 01       	movw	r30, r24
    1202:	ee 0f       	add	r30, r30
    1204:	ff 1f       	adc	r31, r31
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	ee 0f       	add	r30, r30
    120c:	ff 1f       	adc	r31, r31
    120e:	8e 0f       	add	r24, r30
    1210:	9f 1f       	adc	r25, r31
    1212:	fc 01       	movw	r30, r24
    1214:	e3 5d       	subi	r30, 0xD3	; 211
    1216:	fc 46       	sbci	r31, 0x6C	; 108
    1218:	80 81       	ld	r24, Z
    121a:	82 30       	cpi	r24, 0x02	; 2
    121c:	48 f0       	brcs	.+18     	; 0x1230 <xTaskIncrementTick+0x18e>
    121e:	dd 24       	eor	r13, r13
    1220:	d3 94       	inc	r13
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <xTaskIncrementTick+0x18e>
    1224:	80 91 08 93 	lds	r24, 0x9308
    1228:	8f 5f       	subi	r24, 0xFF	; 255
    122a:	80 93 08 93 	sts	0x9308, r24
    122e:	d1 2c       	mov	r13, r1
    1230:	80 91 07 93 	lds	r24, 0x9307
    1234:	88 23       	and	r24, r24
    1236:	11 f0       	breq	.+4      	; 0x123c <xTaskIncrementTick+0x19a>
    1238:	dd 24       	eor	r13, r13
    123a:	d3 94       	inc	r13
    123c:	8d 2d       	mov	r24, r13
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	ff 90       	pop	r15
    1248:	ef 90       	pop	r14
    124a:	df 90       	pop	r13
    124c:	08 95       	ret

0000124e <xTaskResumeAll>:
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	0f 92       	push	r0
    1262:	80 91 04 93 	lds	r24, 0x9304
    1266:	81 50       	subi	r24, 0x01	; 1
    1268:	80 93 04 93 	sts	0x9304, r24
    126c:	80 91 04 93 	lds	r24, 0x9304
    1270:	81 11       	cpse	r24, r1
    1272:	62 c0       	rjmp	.+196    	; 0x1338 <xTaskResumeAll+0xea>
    1274:	80 91 0d 93 	lds	r24, 0x930D
    1278:	81 11       	cpse	r24, r1
    127a:	33 c0       	rjmp	.+102    	; 0x12e2 <xTaskResumeAll+0x94>
    127c:	60 c0       	rjmp	.+192    	; 0x133e <xTaskResumeAll+0xf0>
    127e:	d7 01       	movw	r26, r14
    1280:	15 96       	adiw	r26, 0x05	; 5
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	16 97       	sbiw	r26, 0x06	; 6
    1288:	c6 81       	ldd	r28, Z+6	; 0x06
    128a:	d7 81       	ldd	r29, Z+7	; 0x07
    128c:	ce 01       	movw	r24, r28
    128e:	0c 96       	adiw	r24, 0x0c	; 12
    1290:	0e 94 ba 06 	call	0xd74	; 0xd74 <uxListRemove>
    1294:	8e 01       	movw	r16, r28
    1296:	0e 5f       	subi	r16, 0xFE	; 254
    1298:	1f 4f       	sbci	r17, 0xFF	; 255
    129a:	c8 01       	movw	r24, r16
    129c:	0e 94 ba 06 	call	0xd74	; 0xd74 <uxListRemove>
    12a0:	2e 89       	ldd	r18, Y+22	; 0x16
    12a2:	80 91 0a 93 	lds	r24, 0x930A
    12a6:	82 17       	cp	r24, r18
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <xTaskResumeAll+0x60>
    12aa:	20 93 0a 93 	sts	0x930A, r18
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	c9 01       	movw	r24, r18
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	b8 01       	movw	r22, r16
    12c4:	83 5d       	subi	r24, 0xD3	; 211
    12c6:	9c 46       	sbci	r25, 0x6C	; 108
    12c8:	0e 94 68 06 	call	0xcd0	; 0xcd0 <vListInsertEnd>
    12cc:	e0 91 51 93 	lds	r30, 0x9351
    12d0:	f0 91 52 93 	lds	r31, 0x9352
    12d4:	9e 89       	ldd	r25, Y+22	; 0x16
    12d6:	86 89       	ldd	r24, Z+22	; 0x16
    12d8:	98 17       	cp	r25, r24
    12da:	58 f0       	brcs	.+22     	; 0x12f2 <xTaskResumeAll+0xa4>
    12dc:	d0 92 07 93 	sts	0x9307, r13
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <xTaskResumeAll+0xa4>
    12e2:	0f 2e       	mov	r0, r31
    12e4:	fe e0       	ldi	r31, 0x0E	; 14
    12e6:	ef 2e       	mov	r14, r31
    12e8:	f3 e9       	ldi	r31, 0x93	; 147
    12ea:	ff 2e       	mov	r15, r31
    12ec:	f0 2d       	mov	r31, r0
    12ee:	dd 24       	eor	r13, r13
    12f0:	d3 94       	inc	r13
    12f2:	f7 01       	movw	r30, r14
    12f4:	80 81       	ld	r24, Z
    12f6:	81 11       	cpse	r24, r1
    12f8:	c2 cf       	rjmp	.-124    	; 0x127e <xTaskResumeAll+0x30>
    12fa:	80 91 08 93 	lds	r24, 0x9308
    12fe:	88 23       	and	r24, r24
    1300:	99 f0       	breq	.+38     	; 0x1328 <xTaskResumeAll+0xda>
    1302:	80 91 08 93 	lds	r24, 0x9308
    1306:	88 23       	and	r24, r24
    1308:	79 f0       	breq	.+30     	; 0x1328 <xTaskResumeAll+0xda>
    130a:	c1 e0       	ldi	r28, 0x01	; 1
    130c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <xTaskIncrementTick>
    1310:	81 11       	cpse	r24, r1
    1312:	c0 93 07 93 	sts	0x9307, r28
    1316:	80 91 08 93 	lds	r24, 0x9308
    131a:	81 50       	subi	r24, 0x01	; 1
    131c:	80 93 08 93 	sts	0x9308, r24
    1320:	80 91 08 93 	lds	r24, 0x9308
    1324:	81 11       	cpse	r24, r1
    1326:	f2 cf       	rjmp	.-28     	; 0x130c <xTaskResumeAll+0xbe>
    1328:	80 91 07 93 	lds	r24, 0x9307
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	31 f4       	brne	.+12     	; 0x133c <xTaskResumeAll+0xee>
    1330:	0e 94 68 05 	call	0xad0	; 0xad0 <vPortYield>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	03 c0       	rjmp	.+6      	; 0x133e <xTaskResumeAll+0xf0>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	01 c0       	rjmp	.+2      	; 0x133e <xTaskResumeAll+0xf0>
    133c:	80 e0       	ldi	r24, 0x00	; 0
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	08 95       	ret

00001352 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    1358:	89 2b       	or	r24, r25
    135a:	b1 f0       	breq	.+44     	; 0x1388 <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    135c:	0e 94 4b 08 	call	0x1096	; 0x1096 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1360:	80 91 0b 93 	lds	r24, 0x930B
    1364:	90 91 0c 93 	lds	r25, 0x930C
    1368:	c8 0f       	add	r28, r24
    136a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    136c:	80 91 51 93 	lds	r24, 0x9351
    1370:	90 91 52 93 	lds	r25, 0x9352
    1374:	02 96       	adiw	r24, 0x02	; 2
    1376:	0e 94 ba 06 	call	0xd74	; 0xd74 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1380:	0e 94 27 09 	call	0x124e	; 0x124e <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1384:	81 11       	cpse	r24, r1
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
    1388:	0e 94 68 05 	call	0xad0	; 0xad0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1392:	80 91 04 93 	lds	r24, 0x9304
    1396:	88 23       	and	r24, r24
    1398:	21 f0       	breq	.+8      	; 0x13a2 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 07 93 	sts	0x9307, r24
    13a0:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    13a2:	10 92 07 93 	sts	0x9307, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    13a6:	80 91 0a 93 	lds	r24, 0x930A
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	fc 01       	movw	r30, r24
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	ee 0f       	add	r30, r30
    13b4:	ff 1f       	adc	r31, r31
    13b6:	ee 0f       	add	r30, r30
    13b8:	ff 1f       	adc	r31, r31
    13ba:	8e 0f       	add	r24, r30
    13bc:	9f 1f       	adc	r25, r31
    13be:	fc 01       	movw	r30, r24
    13c0:	e3 5d       	subi	r30, 0xD3	; 211
    13c2:	fc 46       	sbci	r31, 0x6C	; 108
    13c4:	80 81       	ld	r24, Z
    13c6:	81 11       	cpse	r24, r1
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <vTaskSwitchContext+0x66>
    13ca:	80 91 0a 93 	lds	r24, 0x930A
    13ce:	81 50       	subi	r24, 0x01	; 1
    13d0:	80 93 0a 93 	sts	0x930A, r24
    13d4:	80 91 0a 93 	lds	r24, 0x930A
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	fc 01       	movw	r30, r24
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	8e 0f       	add	r24, r30
    13ea:	9f 1f       	adc	r25, r31
    13ec:	fc 01       	movw	r30, r24
    13ee:	e3 5d       	subi	r30, 0xD3	; 211
    13f0:	fc 46       	sbci	r31, 0x6C	; 108
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	49 f3       	breq	.-46     	; 0x13ca <vTaskSwitchContext+0x38>
    13f8:	80 91 0a 93 	lds	r24, 0x930A
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 01       	movw	r18, r24
    1400:	22 0f       	add	r18, r18
    1402:	33 1f       	adc	r19, r19
    1404:	22 0f       	add	r18, r18
    1406:	33 1f       	adc	r19, r19
    1408:	22 0f       	add	r18, r18
    140a:	33 1f       	adc	r19, r19
    140c:	28 0f       	add	r18, r24
    140e:	39 1f       	adc	r19, r25
    1410:	d9 01       	movw	r26, r18
    1412:	a3 5d       	subi	r26, 0xD3	; 211
    1414:	bc 46       	sbci	r27, 0x6C	; 108
    1416:	11 96       	adiw	r26, 0x01	; 1
    1418:	ed 91       	ld	r30, X+
    141a:	fc 91       	ld	r31, X
    141c:	12 97       	sbiw	r26, 0x02	; 2
    141e:	02 80       	ldd	r0, Z+2	; 0x02
    1420:	f3 81       	ldd	r31, Z+3	; 0x03
    1422:	e0 2d       	mov	r30, r0
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	ed 93       	st	X+, r30
    1428:	fc 93       	st	X, r31
    142a:	12 97       	sbiw	r26, 0x02	; 2
    142c:	20 5d       	subi	r18, 0xD0	; 208
    142e:	3c 46       	sbci	r19, 0x6C	; 108
    1430:	e2 17       	cp	r30, r18
    1432:	f3 07       	cpc	r31, r19
    1434:	29 f4       	brne	.+10     	; 0x1440 <vTaskSwitchContext+0xae>
    1436:	22 81       	ldd	r18, Z+2	; 0x02
    1438:	33 81       	ldd	r19, Z+3	; 0x03
    143a:	fd 01       	movw	r30, r26
    143c:	21 83       	std	Z+1, r18	; 0x01
    143e:	32 83       	std	Z+2, r19	; 0x02
    1440:	fc 01       	movw	r30, r24
    1442:	ee 0f       	add	r30, r30
    1444:	ff 1f       	adc	r31, r31
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	ee 0f       	add	r30, r30
    144c:	ff 1f       	adc	r31, r31
    144e:	8e 0f       	add	r24, r30
    1450:	9f 1f       	adc	r25, r31
    1452:	fc 01       	movw	r30, r24
    1454:	e3 5d       	subi	r30, 0xD3	; 211
    1456:	fc 46       	sbci	r31, 0x6C	; 108
    1458:	01 80       	ldd	r0, Z+1	; 0x01
    145a:	f2 81       	ldd	r31, Z+2	; 0x02
    145c:	e0 2d       	mov	r30, r0
    145e:	86 81       	ldd	r24, Z+6	; 0x06
    1460:	97 81       	ldd	r25, Z+7	; 0x07
    1462:	80 93 51 93 	sts	0x9351, r24
    1466:	90 93 52 93 	sts	0x9352, r25
    146a:	08 95       	ret

0000146c <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	fc 01       	movw	r30, r24
    1474:	70 96       	adiw	r30, 0x10	; 16
    1476:	8b e0       	ldi	r24, 0x0B	; 11
    1478:	df 01       	movw	r26, r30
    147a:	1d 92       	st	X+, r1
    147c:	8a 95       	dec	r24
    147e:	e9 f7       	brne	.-6      	; 0x147a <CDC_Device_ConfigureEndpoints+0xe>
    1480:	82 e0       	ldi	r24, 0x02	; 2
    1482:	8c 83       	std	Y+4, r24	; 0x04
    1484:	89 87       	std	Y+9, r24	; 0x09
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	8e 87       	std	Y+14, r24	; 0x0e
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	0e 94 2c 10 	call	0x2058	; 0x2058 <Endpoint_ConfigureEndpointTable>
    1494:	88 23       	and	r24, r24
    1496:	61 f0       	breq	.+24     	; 0x14b0 <CDC_Device_ConfigureEndpoints+0x44>
    1498:	61 e0       	ldi	r22, 0x01	; 1
    149a:	ce 01       	movw	r24, r28
    149c:	06 96       	adiw	r24, 0x06	; 6
    149e:	0e 94 2c 10 	call	0x2058	; 0x2058 <Endpoint_ConfigureEndpointTable>
    14a2:	88 23       	and	r24, r24
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <CDC_Device_ConfigureEndpoints+0x44>
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	ce 01       	movw	r24, r28
    14aa:	0b 96       	adiw	r24, 0x0b	; 11
    14ac:	0e 94 2c 10 	call	0x2058	; 0x2058 <Endpoint_ConfigureEndpointTable>
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <CDC_Device_SendByte>:
    14b6:	cf 93       	push	r28
    14b8:	fc 01       	movw	r30, r24
    14ba:	90 91 82 95 	lds	r25, 0x9582
    14be:	94 30       	cpi	r25, 0x04	; 4
    14c0:	19 f5       	brne	.+70     	; 0x1508 <CDC_Device_SendByte+0x52>
    14c2:	84 89       	ldd	r24, Z+20	; 0x14
    14c4:	95 89       	ldd	r25, Z+21	; 0x15
    14c6:	a6 89       	ldd	r26, Z+22	; 0x16
    14c8:	b7 89       	ldd	r27, Z+23	; 0x17
    14ca:	89 2b       	or	r24, r25
    14cc:	8a 2b       	or	r24, r26
    14ce:	8b 2b       	or	r24, r27
    14d0:	e9 f0       	breq	.+58     	; 0x150c <CDC_Device_SendByte+0x56>
    14d2:	c6 2f       	mov	r28, r22
    14d4:	81 81       	ldd	r24, Z+1	; 0x01
    14d6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
    14da:	80 91 8b 95 	lds	r24, 0x958B
    14de:	90 91 8c 95 	lds	r25, 0x958C
    14e2:	fc 01       	movw	r30, r24
    14e4:	ef 5b       	subi	r30, 0xBF	; 191
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	20 81       	ld	r18, Z
    14ea:	31 97       	sbiw	r30, 0x01	; 1
    14ec:	80 81       	ld	r24, Z
    14ee:	28 17       	cp	r18, r24
    14f0:	30 f0       	brcs	.+12     	; 0x14fe <CDC_Device_SendByte+0x48>
    14f2:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    14f6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Endpoint_WaitUntilReady>
    14fa:	81 11       	cpse	r24, r1
    14fc:	08 c0       	rjmp	.+16     	; 0x150e <CDC_Device_SendByte+0x58>
    14fe:	8c 2f       	mov	r24, r28
    1500:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	03 c0       	rjmp	.+6      	; 0x150e <CDC_Device_SendByte+0x58>
    1508:	82 e0       	ldi	r24, 0x02	; 2
    150a:	01 c0       	rjmp	.+2      	; 0x150e <CDC_Device_SendByte+0x58>
    150c:	82 e0       	ldi	r24, 0x02	; 2
    150e:	cf 91       	pop	r28
    1510:	08 95       	ret

00001512 <CDC_Device_putchar>:
    1512:	fb 01       	movw	r30, r22
    1514:	68 2f       	mov	r22, r24
    1516:	84 85       	ldd	r24, Z+12	; 0x0c
    1518:	95 85       	ldd	r25, Z+13	; 0x0d
    151a:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <CDC_Device_SendByte>
    151e:	21 e0       	ldi	r18, 0x01	; 1
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 11       	cpse	r24, r1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <CDC_Device_putchar+0x18>
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	88 27       	eor	r24, r24
    152c:	99 27       	eor	r25, r25
    152e:	82 1b       	sub	r24, r18
    1530:	93 0b       	sbc	r25, r19
    1532:	08 95       	ret

00001534 <CDC_Device_Flush>:
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	fc 01       	movw	r30, r24
    153a:	90 91 82 95 	lds	r25, 0x9582
    153e:	94 30       	cpi	r25, 0x04	; 4
    1540:	f1 f5       	brne	.+124    	; 0x15be <CDC_Device_Flush+0x8a>
    1542:	84 89       	ldd	r24, Z+20	; 0x14
    1544:	95 89       	ldd	r25, Z+21	; 0x15
    1546:	a6 89       	ldd	r26, Z+22	; 0x16
    1548:	b7 89       	ldd	r27, Z+23	; 0x17
    154a:	89 2b       	or	r24, r25
    154c:	8a 2b       	or	r24, r26
    154e:	8b 2b       	or	r24, r27
    1550:	c1 f1       	breq	.+112    	; 0x15c2 <CDC_Device_Flush+0x8e>
    1552:	81 81       	ldd	r24, Z+1	; 0x01
    1554:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
    1558:	80 91 8f 95 	lds	r24, 0x958F
    155c:	88 23       	and	r24, r24
    155e:	4c f4       	brge	.+18     	; 0x1572 <CDC_Device_Flush+0x3e>
    1560:	e0 91 8b 95 	lds	r30, 0x958B
    1564:	f0 91 8c 95 	lds	r31, 0x958C
    1568:	ef 5b       	subi	r30, 0xBF	; 191
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0d c0       	rjmp	.+26     	; 0x158c <CDC_Device_Flush+0x58>
    1572:	20 91 8b 95 	lds	r18, 0x958B
    1576:	30 91 8c 95 	lds	r19, 0x958C
    157a:	f9 01       	movw	r30, r18
    157c:	e0 5c       	subi	r30, 0xC0	; 192
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 81       	ld	r24, Z
    1582:	31 96       	adiw	r30, 0x01	; 1
    1584:	20 81       	ld	r18, Z
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	82 1b       	sub	r24, r18
    158a:	91 09       	sbc	r25, r1
    158c:	89 2b       	or	r24, r25
    158e:	d9 f0       	breq	.+54     	; 0x15c6 <CDC_Device_Flush+0x92>
    1590:	80 91 8b 95 	lds	r24, 0x958B
    1594:	90 91 8c 95 	lds	r25, 0x958C
    1598:	fc 01       	movw	r30, r24
    159a:	ef 5b       	subi	r30, 0xBF	; 191
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	d0 81       	ld	r29, Z
    15a0:	31 97       	sbiw	r30, 0x01	; 1
    15a2:	c0 81       	ld	r28, Z
    15a4:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    15a8:	dc 17       	cp	r29, r28
    15aa:	78 f0       	brcs	.+30     	; 0x15ca <CDC_Device_Flush+0x96>
    15ac:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Endpoint_WaitUntilReady>
    15b0:	c8 2f       	mov	r28, r24
    15b2:	81 11       	cpse	r24, r1
    15b4:	0c c0       	rjmp	.+24     	; 0x15ce <CDC_Device_Flush+0x9a>
    15b6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    15ba:	8c 2f       	mov	r24, r28
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <CDC_Device_Flush+0x9a>
    15be:	82 e0       	ldi	r24, 0x02	; 2
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <CDC_Device_Flush+0x9a>
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <CDC_Device_Flush+0x9a>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <CDC_Device_Flush+0x9a>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	00 c0       	rjmp	.+0      	; 0x15ce <CDC_Device_Flush+0x9a>
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <CDC_Device_USBTask>:
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	fc 01       	movw	r30, r24
    15da:	90 91 82 95 	lds	r25, 0x9582
    15de:	94 30       	cpi	r25, 0x04	; 4
    15e0:	99 f4       	brne	.+38     	; 0x1608 <CDC_Device_USBTask+0x34>
    15e2:	84 89       	ldd	r24, Z+20	; 0x14
    15e4:	95 89       	ldd	r25, Z+21	; 0x15
    15e6:	a6 89       	ldd	r26, Z+22	; 0x16
    15e8:	b7 89       	ldd	r27, Z+23	; 0x17
    15ea:	89 2b       	or	r24, r25
    15ec:	8a 2b       	or	r24, r26
    15ee:	8b 2b       	or	r24, r27
    15f0:	59 f0       	breq	.+22     	; 0x1608 <CDC_Device_USBTask+0x34>
    15f2:	ef 01       	movw	r28, r30
    15f4:	81 81       	ldd	r24, Z+1	; 0x01
    15f6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
    15fa:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    15fe:	88 23       	and	r24, r24
    1600:	19 f0       	breq	.+6      	; 0x1608 <CDC_Device_USBTask+0x34>
    1602:	ce 01       	movw	r24, r28
    1604:	0e 94 9a 0a 	call	0x1534	; 0x1534 <CDC_Device_Flush>
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <CDC_Device_ReceiveByte>:
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	20 91 82 95 	lds	r18, 0x9582
    1616:	24 30       	cpi	r18, 0x04	; 4
    1618:	09 f0       	breq	.+2      	; 0x161c <CDC_Device_ReceiveByte+0xe>
    161a:	56 c0       	rjmp	.+172    	; 0x16c8 <CDC_Device_ReceiveByte+0xba>
    161c:	fc 01       	movw	r30, r24
    161e:	44 89       	ldd	r20, Z+20	; 0x14
    1620:	55 89       	ldd	r21, Z+21	; 0x15
    1622:	66 89       	ldd	r22, Z+22	; 0x16
    1624:	77 89       	ldd	r23, Z+23	; 0x17
    1626:	45 2b       	or	r20, r21
    1628:	46 2b       	or	r20, r22
    162a:	47 2b       	or	r20, r23
    162c:	09 f4       	brne	.+2      	; 0x1630 <CDC_Device_ReceiveByte+0x22>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <CDC_Device_ReceiveByte+0xc0>
    1630:	86 81       	ldd	r24, Z+6	; 0x06
    1632:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
    1636:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    163a:	88 23       	and	r24, r24
    163c:	09 f4       	brne	.+2      	; 0x1640 <CDC_Device_ReceiveByte+0x32>
    163e:	4a c0       	rjmp	.+148    	; 0x16d4 <CDC_Device_ReceiveByte+0xc6>
    1640:	80 91 8f 95 	lds	r24, 0x958F
    1644:	88 23       	and	r24, r24
    1646:	4c f4       	brge	.+18     	; 0x165a <CDC_Device_ReceiveByte+0x4c>
    1648:	e0 91 8b 95 	lds	r30, 0x958B
    164c:	f0 91 8c 95 	lds	r31, 0x958C
    1650:	ef 5b       	subi	r30, 0xBF	; 191
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <CDC_Device_ReceiveByte+0x66>
    165a:	20 91 8b 95 	lds	r18, 0x958B
    165e:	30 91 8c 95 	lds	r19, 0x958C
    1662:	f9 01       	movw	r30, r18
    1664:	e0 5c       	subi	r30, 0xC0	; 192
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	80 81       	ld	r24, Z
    166a:	31 96       	adiw	r30, 0x01	; 1
    166c:	20 81       	ld	r18, Z
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	82 1b       	sub	r24, r18
    1672:	91 09       	sbc	r25, r1
    1674:	89 2b       	or	r24, r25
    1676:	29 f0       	breq	.+10     	; 0x1682 <CDC_Device_ReceiveByte+0x74>
    1678:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    167c:	c8 2f       	mov	r28, r24
    167e:	d0 e0       	ldi	r29, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <CDC_Device_ReceiveByte+0x78>
    1682:	cf ef       	ldi	r28, 0xFF	; 255
    1684:	df ef       	ldi	r29, 0xFF	; 255
    1686:	80 91 8f 95 	lds	r24, 0x958F
    168a:	88 23       	and	r24, r24
    168c:	4c f4       	brge	.+18     	; 0x16a0 <CDC_Device_ReceiveByte+0x92>
    168e:	e0 91 8b 95 	lds	r30, 0x958B
    1692:	f0 91 8c 95 	lds	r31, 0x958C
    1696:	ef 5b       	subi	r30, 0xBF	; 191
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	20 81       	ld	r18, Z
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <CDC_Device_ReceiveByte+0xac>
    16a0:	40 91 8b 95 	lds	r20, 0x958B
    16a4:	50 91 8c 95 	lds	r21, 0x958C
    16a8:	fa 01       	movw	r30, r20
    16aa:	e0 5c       	subi	r30, 0xC0	; 192
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	20 81       	ld	r18, Z
    16b0:	31 96       	adiw	r30, 0x01	; 1
    16b2:	80 81       	ld	r24, Z
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	28 1b       	sub	r18, r24
    16b8:	31 09       	sbc	r19, r1
    16ba:	23 2b       	or	r18, r19
    16bc:	71 f4       	brne	.+28     	; 0x16da <CDC_Device_ReceiveByte+0xcc>
    16be:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Endpoint_ClearOUT>
    16c2:	8c 2f       	mov	r24, r28
    16c4:	9d 2f       	mov	r25, r29
    16c6:	0b c0       	rjmp	.+22     	; 0x16de <CDC_Device_ReceiveByte+0xd0>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	9f ef       	ldi	r25, 0xFF	; 255
    16cc:	08 c0       	rjmp	.+16     	; 0x16de <CDC_Device_ReceiveByte+0xd0>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	05 c0       	rjmp	.+10     	; 0x16de <CDC_Device_ReceiveByte+0xd0>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	9f ef       	ldi	r25, 0xFF	; 255
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <CDC_Device_ReceiveByte+0xd0>
    16da:	8c 2f       	mov	r24, r28
    16dc:	9d 2f       	mov	r25, r29
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <CDC_Device_getchar>:
    16e4:	fc 01       	movw	r30, r24
    16e6:	84 85       	ldd	r24, Z+12	; 0x0c
    16e8:	95 85       	ldd	r25, Z+13	; 0x0d
    16ea:	0e 94 07 0b 	call	0x160e	; 0x160e <CDC_Device_ReceiveByte>
    16ee:	99 23       	and	r25, r25
    16f0:	14 f4       	brge	.+4      	; 0x16f6 <CDC_Device_getchar+0x12>
    16f2:	8e ef       	ldi	r24, 0xFE	; 254
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	08 95       	ret

000016f8 <CDC_Device_CreateStream>:
    16f8:	fb 01       	movw	r30, r22
    16fa:	2e e0       	ldi	r18, 0x0E	; 14
    16fc:	db 01       	movw	r26, r22
    16fe:	1d 92       	st	X+, r1
    1700:	2a 95       	dec	r18
    1702:	e9 f7       	brne	.-6      	; 0x16fe <CDC_Device_CreateStream+0x6>
    1704:	23 e0       	ldi	r18, 0x03	; 3
    1706:	23 83       	std	Z+3, r18	; 0x03
    1708:	29 e8       	ldi	r18, 0x89	; 137
    170a:	3a e0       	ldi	r19, 0x0A	; 10
    170c:	20 87       	std	Z+8, r18	; 0x08
    170e:	31 87       	std	Z+9, r19	; 0x09
    1710:	22 e7       	ldi	r18, 0x72	; 114
    1712:	3b e0       	ldi	r19, 0x0B	; 11
    1714:	22 87       	std	Z+10, r18	; 0x0a
    1716:	33 87       	std	Z+11, r19	; 0x0b
    1718:	84 87       	std	Z+12, r24	; 0x0c
    171a:	95 87       	std	Z+13, r25	; 0x0d
    171c:	08 95       	ret

0000171e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    171e:	08 95       	ret

00001720 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1720:	ff 92       	push	r15
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    172c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1730:	88 23       	and	r24, r24
    1732:	09 f4       	brne	.+2      	; 0x1736 <CDC_Device_ProcessControlRequest+0x16>
    1734:	9b c0       	rjmp	.+310    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1736:	28 81       	ld	r18, Y
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	80 91 87 95 	lds	r24, 0x9587
    173e:	90 91 88 95 	lds	r25, 0x9588
    1742:	82 17       	cp	r24, r18
    1744:	93 07       	cpc	r25, r19
    1746:	09 f0       	breq	.+2      	; 0x174a <CDC_Device_ProcessControlRequest+0x2a>
    1748:	91 c0       	rjmp	.+290    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	switch (USB_ControlRequest.bRequest)
    174a:	80 91 84 95 	lds	r24, 0x9584
    174e:	81 32       	cpi	r24, 0x21	; 33
    1750:	59 f0       	breq	.+22     	; 0x1768 <CDC_Device_ProcessControlRequest+0x48>
    1752:	18 f4       	brcc	.+6      	; 0x175a <CDC_Device_ProcessControlRequest+0x3a>
    1754:	80 32       	cpi	r24, 0x20	; 32
    1756:	81 f1       	breq	.+96     	; 0x17b8 <CDC_Device_ProcessControlRequest+0x98>
    1758:	89 c0       	rjmp	.+274    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
    175a:	82 32       	cpi	r24, 0x22	; 34
    175c:	09 f4       	brne	.+2      	; 0x1760 <CDC_Device_ProcessControlRequest+0x40>
    175e:	67 c0       	rjmp	.+206    	; 0x182e <CDC_Device_ProcessControlRequest+0x10e>
    1760:	83 32       	cpi	r24, 0x23	; 35
    1762:	09 f4       	brne	.+2      	; 0x1766 <CDC_Device_ProcessControlRequest+0x46>
    1764:	76 c0       	rjmp	.+236    	; 0x1852 <CDC_Device_ProcessControlRequest+0x132>
    1766:	82 c0       	rjmp	.+260    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1768:	80 91 83 95 	lds	r24, 0x9583
    176c:	81 3a       	cpi	r24, 0xA1	; 161
    176e:	09 f0       	breq	.+2      	; 0x1772 <CDC_Device_ProcessControlRequest+0x52>
    1770:	7d c0       	rjmp	.+250    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1772:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    1776:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    177a:	88 23       	and	r24, r24
    177c:	e1 f3       	breq	.-8      	; 0x1776 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    177e:	8c 89       	ldd	r24, Y+20	; 0x14
    1780:	fd 88       	ldd	r15, Y+21	; 0x15
    1782:	0e 89       	ldd	r16, Y+22	; 0x16
    1784:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1786:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    178a:	8f 2d       	mov	r24, r15
    178c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    1790:	80 2f       	mov	r24, r16
    1792:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    1796:	81 2f       	mov	r24, r17
    1798:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    179c:	88 8d       	ldd	r24, Y+24	; 0x18
    179e:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    17a2:	89 8d       	ldd	r24, Y+25	; 0x19
    17a4:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    17a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    17aa:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>

				Endpoint_ClearIN();
    17ae:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    17b2:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>
    17b6:	5a c0       	rjmp	.+180    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    17b8:	80 91 83 95 	lds	r24, 0x9583
    17bc:	81 32       	cpi	r24, 0x21	; 33
    17be:	09 f0       	breq	.+2      	; 0x17c2 <CDC_Device_ProcessControlRequest+0xa2>
    17c0:	55 c0       	rjmp	.+170    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    17c2:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    17c6:	05 c0       	rjmp	.+10     	; 0x17d2 <CDC_Device_ProcessControlRequest+0xb2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    17c8:	80 91 82 95 	lds	r24, 0x9582
    17cc:	88 23       	and	r24, r24
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <CDC_Device_ProcessControlRequest+0xb2>
    17d0:	4d c0       	rjmp	.+154    	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    17d2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    17d6:	88 23       	and	r24, r24
    17d8:	b9 f3       	breq	.-18     	; 0x17c8 <CDC_Device_ProcessControlRequest+0xa8>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    17da:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    17de:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    17e0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    17e4:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    17e6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    17ea:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    17ec:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    17f0:	40 2f       	mov	r20, r16
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    17f8:	ba 01       	movw	r22, r20
    17fa:	55 27       	eor	r21, r21
    17fc:	44 27       	eor	r20, r20
    17fe:	78 2b       	or	r23, r24
    1800:	4f 29       	or	r20, r15
    1802:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1804:	4c 8b       	std	Y+20, r20	; 0x14
    1806:	5d 8b       	std	Y+21, r21	; 0x15
    1808:	6e 8b       	std	Y+22, r22	; 0x16
    180a:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    180c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    1810:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1812:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    1816:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1818:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    181c:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    181e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    1822:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1826:	ce 01       	movw	r24, r28
    1828:	0e 94 8f 0b 	call	0x171e	; 0x171e <CDC_Device_Event_Stub>
    182c:	1f c0       	rjmp	.+62     	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    182e:	80 91 83 95 	lds	r24, 0x9583
    1832:	81 32       	cpi	r24, 0x21	; 33
    1834:	d9 f4       	brne	.+54     	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1836:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    183a:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    183e:	80 91 85 95 	lds	r24, 0x9585
    1842:	90 91 86 95 	lds	r25, 0x9586
    1846:	88 8b       	std	Y+16, r24	; 0x10
    1848:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    184a:	ce 01       	movw	r24, r28
    184c:	0e 94 ff 16 	call	0x2dfe	; 0x2dfe <EVENT_CDC_Device_ControLineStateChanged>
    1850:	0d c0       	rjmp	.+26     	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1852:	80 91 83 95 	lds	r24, 0x9583
    1856:	81 32       	cpi	r24, 0x21	; 33
    1858:	49 f4       	brne	.+18     	; 0x186c <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    185a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    185e:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1862:	60 91 85 95 	lds	r22, 0x9585
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 8f 0b 	call	0x171e	; 0x171e <CDC_Device_Event_Stub>
			}

			break;
	}
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	ff 90       	pop	r15
    1876:	08 95       	ret

00001878 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	ea 97       	sbiw	r28, 0x3a	; 58
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	03 e8       	ldi	r16, 0x83	; 131
    1890:	15 e9       	ldi	r17, 0x95	; 149
    1892:	0f 2e       	mov	r0, r31
    1894:	fb e8       	ldi	r31, 0x8B	; 139
    1896:	ef 2e       	mov	r14, r31
    1898:	f5 e9       	ldi	r31, 0x95	; 149
    189a:	ff 2e       	mov	r15, r31
    189c:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    189e:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <Endpoint_Read_8>
    18a2:	f8 01       	movw	r30, r16
    18a4:	81 93       	st	Z+, r24
    18a6:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    18a8:	ee 15       	cp	r30, r14
    18aa:	ff 05       	cpc	r31, r15
    18ac:	c1 f7       	brne	.-16     	; 0x189e <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    18ae:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    18b2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    18b6:	88 23       	and	r24, r24
    18b8:	09 f4       	brne	.+2      	; 0x18bc <USB_Device_ProcessControlRequest+0x44>
    18ba:	13 c1       	rjmp	.+550    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    18bc:	e3 e8       	ldi	r30, 0x83	; 131
    18be:	f5 e9       	ldi	r31, 0x95	; 149
    18c0:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    18c2:	31 81       	ldd	r19, Z+1	; 0x01
    18c4:	83 2f       	mov	r24, r19
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	8a 30       	cpi	r24, 0x0A	; 10
    18ca:	91 05       	cpc	r25, r1
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <USB_Device_ProcessControlRequest+0x58>
    18ce:	09 c1       	rjmp	.+530    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
    18d0:	fc 01       	movw	r30, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	e2 50       	subi	r30, 0x02	; 2
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	8f 4f       	sbci	r24, 0xFF	; 255
    18da:	0c 94 0d 1c 	jmp	0x381a	; 0x381a <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    18de:	20 38       	cpi	r18, 0x80	; 128
    18e0:	21 f0       	breq	.+8      	; 0x18ea <USB_Device_ProcessControlRequest+0x72>
    18e2:	22 38       	cpi	r18, 0x82	; 130
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <USB_Device_ProcessControlRequest+0x70>
    18e6:	fd c0       	rjmp	.+506    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
    18e8:	08 c0       	rjmp	.+16     	; 0x18fa <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    18ea:	10 91 7f 95 	lds	r17, 0x957F
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    18ee:	80 91 80 95 	lds	r24, 0x9580
    18f2:	88 23       	and	r24, r24
    18f4:	91 f0       	breq	.+36     	; 0x191a <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    18f6:	12 60       	ori	r17, 0x02	; 2
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    18fa:	80 91 87 95 	lds	r24, 0x9587
    18fe:	8f 70       	andi	r24, 0x0F	; 15
    1900:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    1904:	e0 91 8d 95 	lds	r30, 0x958D
    1908:	f0 91 8e 95 	lds	r31, 0x958E
    190c:	11 81       	ldd	r17, Z+1	; 0x01
    190e:	12 fb       	bst	r17, 2
    1910:	11 27       	eor	r17, r17
    1912:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    191a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    191e:	81 2f       	mov	r24, r17
    1920:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    192a:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    192e:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>
    1932:	d7 c0       	rjmp	.+430    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1934:	22 23       	and	r18, r18
    1936:	09 f4       	brne	.+2      	; 0x193a <USB_Device_ProcessControlRequest+0xc2>
    1938:	dd c0       	rjmp	.+442    	; 0x1af4 <USB_Device_ProcessControlRequest+0x27c>
    193a:	22 30       	cpi	r18, 0x02	; 2
    193c:	09 f0       	breq	.+2      	; 0x1940 <USB_Device_ProcessControlRequest+0xc8>
    193e:	d1 c0       	rjmp	.+418    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
    1940:	de c0       	rjmp	.+444    	; 0x1afe <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	33 30       	cpi	r19, 0x03	; 3
    1946:	09 f0       	breq	.+2      	; 0x194a <USB_Device_ProcessControlRequest+0xd2>
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	80 93 80 95 	sts	0x9580, r24
    194e:	25 c0       	rjmp	.+74     	; 0x199a <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1950:	e0 91 87 95 	lds	r30, 0x9587
    1954:	1e 2f       	mov	r17, r30
    1956:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1958:	09 f4       	brne	.+2      	; 0x195c <USB_Device_ProcessControlRequest+0xe4>
    195a:	c3 c0       	rjmp	.+390    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    195c:	81 2f       	mov	r24, r17
    195e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1962:	80 91 84 95 	lds	r24, 0x9584
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	19 f4       	brne	.+6      	; 0x1970 <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    196a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_StallTransaction>
    196e:	15 c0       	rjmp	.+42     	; 0x199a <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1970:	e0 91 8d 95 	lds	r30, 0x958D
    1974:	f0 91 8e 95 	lds	r31, 0x958E
    1978:	81 81       	ldd	r24, Z+1	; 0x01
    197a:	8b 7f       	andi	r24, 0xFB	; 251
    197c:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    197e:	24 e8       	ldi	r18, 0x84	; 132
    1980:	12 9f       	mul	r17, r18
    1982:	f0 01       	movw	r30, r0
    1984:	11 24       	eor	r1, r1
    1986:	ef 52       	subi	r30, 0x2F	; 47
    1988:	fa 46       	sbci	r31, 0x6A	; 106
    198a:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    198c:	e0 91 8d 95 	lds	r30, 0x958D
    1990:	f0 91 8e 95 	lds	r31, 0x958E
    1994:	80 81       	ld	r24, Z
    1996:	8e 7f       	andi	r24, 0xFE	; 254
    1998:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    19a0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    19a4:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>
    19a8:	9c c0       	rjmp	.+312    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    19aa:	21 11       	cpse	r18, r1
    19ac:	9a c0       	rjmp	.+308    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    19ae:	10 91 85 95 	lds	r17, 0x9585
    19b2:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    19b4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    19b8:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    19bc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    19c0:	88 23       	and	r24, r24
    19c2:	e1 f3       	breq	.-8      	; 0x19bc <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    19c4:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    19c8:	11 11       	cpse	r17, r1
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <USB_Device_ProcessControlRequest+0x158>
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <USB_Device_ProcessControlRequest+0x15a>
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	80 93 82 95 	sts	0x9582, r24
    19d6:	85 c0       	rjmp	.+266    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    19d8:	20 58       	subi	r18, 0x80	; 128
    19da:	22 30       	cpi	r18, 0x02	; 2
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <USB_Device_ProcessControlRequest+0x168>
    19de:	81 c0       	rjmp	.+258    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    19e0:	80 91 85 95 	lds	r24, 0x9585
    19e4:	90 91 86 95 	lds	r25, 0x9586
    19e8:	8c 3d       	cpi	r24, 0xDC	; 220
    19ea:	e3 e0       	ldi	r30, 0x03	; 3
    19ec:	9e 07       	cpc	r25, r30
    19ee:	b9 f5       	brne	.+110    	; 0x1a5e <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    19f2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    19f4:	8a e3       	ldi	r24, 0x3A	; 58
    19f6:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    19f8:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    19fa:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    19fc:	ae 01       	movw	r20, r28
    19fe:	4d 5f       	subi	r20, 0xFD	; 253
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a02:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1a04:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    1a06:	a0 ec       	ldi	r26, 0xC0	; 192
    1a08:	b1 e0       	ldi	r27, 0x01	; 1
    1a0a:	62 e0       	ldi	r22, 0x02	; 2
    1a0c:	1a 96       	adiw	r26, 0x0a	; 10
    1a0e:	6c 93       	st	X, r22
    1a10:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    1a12:	e3 2f       	mov	r30, r19
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    1a18:	1a 96       	adiw	r26, 0x0a	; 10
    1a1a:	1c 92       	st	X, r1
    1a1c:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    1a1e:	20 ff       	sbrs	r18, 0
    1a20:	03 c0       	rjmp	.+6      	; 0x1a28 <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    1a22:	82 95       	swap	r24
    1a24:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1a26:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1a28:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1a2a:	8a 30       	cpi	r24, 0x0A	; 10
    1a2c:	18 f0       	brcs	.+6      	; 0x1a34 <USB_Device_ProcessControlRequest+0x1bc>
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	c7 96       	adiw	r24, 0x37	; 55
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <USB_Device_ProcessControlRequest+0x1c0>
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	c0 96       	adiw	r24, 0x30	; 48
    1a38:	fa 01       	movw	r30, r20
    1a3a:	81 93       	st	Z+, r24
    1a3c:	91 93       	st	Z+, r25
    1a3e:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1a40:	2f 5f       	subi	r18, 0xFF	; 255
    1a42:	2c 31       	cpi	r18, 0x1C	; 28
    1a44:	19 f7       	brne	.-58     	; 0x1a0c <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1a46:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1a48:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1a4c:	6a e3       	ldi	r22, 0x3A	; 58
    1a4e:	70 e0       	ldi	r23, 0x00	; 0
    1a50:	ce 01       	movw	r24, r28
    1a52:	01 96       	adiw	r24, 0x01	; 1
    1a54:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1a58:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Endpoint_ClearOUT>
    1a5c:	42 c0       	rjmp	.+132    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1a5e:	ae 01       	movw	r20, r28
    1a60:	4f 5f       	subi	r20, 0xFF	; 255
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	60 91 87 95 	lds	r22, 0x9587
    1a68:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <CALLBACK_USB_GetDescriptor>
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	89 2b       	or	r24, r25
    1a70:	c1 f1       	breq	.+112    	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1a72:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1a76:	b8 01       	movw	r22, r16
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1a80:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Endpoint_ClearOUT>
    1a84:	2e c0       	rjmp	.+92     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1a86:	20 38       	cpi	r18, 0x80	; 128
    1a88:	61 f5       	brne	.+88     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1a8a:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1a8e:	80 91 7e 95 	lds	r24, 0x957E
    1a92:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
	Endpoint_ClearIN();
    1a96:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1a9a:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>
    1a9e:	21 c0       	rjmp	.+66     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1aa0:	21 11       	cpse	r18, r1
    1aa2:	1f c0       	rjmp	.+62     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1aa4:	80 91 85 95 	lds	r24, 0x9585
    1aa8:	82 30       	cpi	r24, 0x02	; 2
    1aaa:	d8 f4       	brcc	.+54     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1aac:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1ab0:	80 91 85 95 	lds	r24, 0x9585
    1ab4:	80 93 7e 95 	sts	0x957E, r24

	Endpoint_ClearStatusStage();
    1ab8:	0e 94 c0 10 	call	0x2180	; 0x2180 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1abc:	80 91 7e 95 	lds	r24, 0x957E
    1ac0:	88 23       	and	r24, r24
    1ac2:	21 f0       	breq	.+8      	; 0x1acc <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1ac4:	84 e0       	ldi	r24, 0x04	; 4
    1ac6:	80 93 82 95 	sts	0x9582, r24
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1acc:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1ad0:	81 11       	cpse	r24, r1
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <USB_Device_ProcessControlRequest+0x260>
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <USB_Device_ProcessControlRequest+0x262>
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	80 93 82 95 	sts	0x9582, r24

	EVENT_USB_Device_ConfigurationChanged();
    1ade:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1ae2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1ae6:	88 23       	and	r24, r24
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    1aea:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    1aee:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <Endpoint_StallTransaction>
    1af2:	0b c0       	rjmp	.+22     	; 0x1b0a <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1af4:	80 91 85 95 	lds	r24, 0x9585
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	99 f7       	brne	.-26     	; 0x1ae2 <USB_Device_ProcessControlRequest+0x26a>
    1afc:	22 cf       	rjmp	.-444    	; 0x1942 <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1afe:	80 91 85 95 	lds	r24, 0x9585
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <USB_Device_ProcessControlRequest+0x290>
    1b06:	24 cf       	rjmp	.-440    	; 0x1950 <USB_Device_ProcessControlRequest+0xd8>
    1b08:	48 cf       	rjmp	.-368    	; 0x199a <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1b0a:	ea 96       	adiw	r28, 0x3a	; 58
    1b0c:	cd bf       	out	0x3d, r28	; 61
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	ff 90       	pop	r15
    1b1a:	ef 90       	pop	r14
    1b1c:	08 95       	ret

00001b1e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1b1e:	08 95       	ret

00001b20 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1b20:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1b22:	80 91 82 95 	lds	r24, 0x9582
    1b26:	88 23       	and	r24, r24
    1b28:	69 f0       	breq	.+26     	; 0x1b44 <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    1b2a:	c0 91 8f 95 	lds	r28, 0x958F
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    1b34:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1b38:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    1b3a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    1b3e:	8c 2f       	mov	r24, r28
    1b40:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1b48:	cf 92       	push	r12
    1b4a:	df 92       	push	r13
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	cf 93       	push	r28
    1b56:	df 93       	push	r29
    1b58:	c8 2e       	mov	r12, r24
    1b5a:	d9 2e       	mov	r13, r25
    1b5c:	8b 01       	movw	r16, r22
    1b5e:	80 91 8f 95 	lds	r24, 0x958F
    1b62:	80 68       	ori	r24, 0x80	; 128
    1b64:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
    1b68:	c0 91 89 95 	lds	r28, 0x9589
    1b6c:	d0 91 8a 95 	lds	r29, 0x958A
    1b70:	c0 17       	cp	r28, r16
    1b72:	d1 07       	cpc	r29, r17
    1b74:	40 f0       	brcs	.+16     	; 0x1b86 <Endpoint_Write_Control_Stream_LE+0x3e>
    1b76:	01 15       	cp	r16, r1
    1b78:	11 05       	cpc	r17, r1
    1b7a:	21 f4       	brne	.+8      	; 0x1b84 <Endpoint_Write_Control_Stream_LE+0x3c>
    1b7c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    1b80:	e8 01       	movw	r28, r16
    1b82:	01 c0       	rjmp	.+2      	; 0x1b86 <Endpoint_Write_Control_Stream_LE+0x3e>
    1b84:	e8 01       	movw	r28, r16
    1b86:	ec 2c       	mov	r14, r12
    1b88:	fd 2c       	mov	r15, r13
    1b8a:	d1 2c       	mov	r13, r1
    1b8c:	49 c0       	rjmp	.+146    	; 0x1c20 <Endpoint_Write_Control_Stream_LE+0xd8>
    1b8e:	80 91 82 95 	lds	r24, 0x9582
    1b92:	88 23       	and	r24, r24
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <Endpoint_Write_Control_Stream_LE+0x50>
    1b96:	5a c0       	rjmp	.+180    	; 0x1c4c <Endpoint_Write_Control_Stream_LE+0x104>
    1b98:	85 30       	cpi	r24, 0x05	; 5
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <Endpoint_Write_Control_Stream_LE+0x56>
    1b9c:	59 c0       	rjmp	.+178    	; 0x1c50 <Endpoint_Write_Control_Stream_LE+0x108>
    1b9e:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	57 c0       	rjmp	.+174    	; 0x1c54 <Endpoint_Write_Control_Stream_LE+0x10c>
    1ba6:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    1baa:	81 11       	cpse	r24, r1
    1bac:	49 c0       	rjmp	.+146    	; 0x1c40 <Endpoint_Write_Control_Stream_LE+0xf8>
    1bae:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    1bb2:	88 23       	and	r24, r24
    1bb4:	a9 f1       	breq	.+106    	; 0x1c20 <Endpoint_Write_Control_Stream_LE+0xd8>
    1bb6:	80 91 8f 95 	lds	r24, 0x958F
    1bba:	88 23       	and	r24, r24
    1bbc:	74 f4       	brge	.+28     	; 0x1bda <Endpoint_Write_Control_Stream_LE+0x92>
    1bbe:	e0 91 8b 95 	lds	r30, 0x958B
    1bc2:	f0 91 8c 95 	lds	r31, 0x958C
    1bc6:	ef 5b       	subi	r30, 0xBF	; 191
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	00 81       	ld	r16, Z
    1bcc:	10 e0       	ldi	r17, 0x00	; 0
    1bce:	20 97       	sbiw	r28, 0x00	; 0
    1bd0:	f9 f0       	breq	.+62     	; 0x1c10 <Endpoint_Write_Control_Stream_LE+0xc8>
    1bd2:	08 30       	cpi	r16, 0x08	; 8
    1bd4:	11 05       	cpc	r17, r1
    1bd6:	78 f0       	brcs	.+30     	; 0x1bf6 <Endpoint_Write_Control_Stream_LE+0xae>
    1bd8:	1b c0       	rjmp	.+54     	; 0x1c10 <Endpoint_Write_Control_Stream_LE+0xc8>
    1bda:	80 91 8b 95 	lds	r24, 0x958B
    1bde:	90 91 8c 95 	lds	r25, 0x958C
    1be2:	fc 01       	movw	r30, r24
    1be4:	e0 5c       	subi	r30, 0xC0	; 192
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	00 81       	ld	r16, Z
    1bea:	31 96       	adiw	r30, 0x01	; 1
    1bec:	80 81       	ld	r24, Z
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	08 1b       	sub	r16, r24
    1bf2:	11 09       	sbc	r17, r1
    1bf4:	ec cf       	rjmp	.-40     	; 0x1bce <Endpoint_Write_Control_Stream_LE+0x86>
    1bf6:	f7 01       	movw	r30, r14
    1bf8:	81 91       	ld	r24, Z+
    1bfa:	7f 01       	movw	r14, r30
    1bfc:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
    1c00:	21 97       	sbiw	r28, 0x01	; 1
    1c02:	0f 5f       	subi	r16, 0xFF	; 255
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	20 97       	sbiw	r28, 0x00	; 0
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <Endpoint_Write_Control_Stream_LE+0xc8>
    1c0a:	08 30       	cpi	r16, 0x08	; 8
    1c0c:	11 05       	cpc	r17, r1
    1c0e:	99 f7       	brne	.-26     	; 0x1bf6 <Endpoint_Write_Control_Stream_LE+0xae>
    1c10:	dd 24       	eor	r13, r13
    1c12:	d3 94       	inc	r13
    1c14:	08 30       	cpi	r16, 0x08	; 8
    1c16:	11 05       	cpc	r17, r1
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <Endpoint_Write_Control_Stream_LE+0xd4>
    1c1a:	d1 2c       	mov	r13, r1
    1c1c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    1c20:	20 97       	sbiw	r28, 0x00	; 0
    1c22:	09 f0       	breq	.+2      	; 0x1c26 <Endpoint_Write_Control_Stream_LE+0xde>
    1c24:	b4 cf       	rjmp	.-152    	; 0x1b8e <Endpoint_Write_Control_Stream_LE+0x46>
    1c26:	d1 10       	cpse	r13, r1
    1c28:	b2 cf       	rjmp	.-156    	; 0x1b8e <Endpoint_Write_Control_Stream_LE+0x46>
    1c2a:	0a c0       	rjmp	.+20     	; 0x1c40 <Endpoint_Write_Control_Stream_LE+0xf8>
    1c2c:	80 91 82 95 	lds	r24, 0x9582
    1c30:	88 23       	and	r24, r24
    1c32:	91 f0       	breq	.+36     	; 0x1c58 <Endpoint_Write_Control_Stream_LE+0x110>
    1c34:	85 30       	cpi	r24, 0x05	; 5
    1c36:	91 f0       	breq	.+36     	; 0x1c5c <Endpoint_Write_Control_Stream_LE+0x114>
    1c38:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1c3c:	81 11       	cpse	r24, r1
    1c3e:	10 c0       	rjmp	.+32     	; 0x1c60 <Endpoint_Write_Control_Stream_LE+0x118>
    1c40:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    1c44:	88 23       	and	r24, r24
    1c46:	91 f3       	breq	.-28     	; 0x1c2c <Endpoint_Write_Control_Stream_LE+0xe4>
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	0b c0       	rjmp	.+22     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c4c:	82 e0       	ldi	r24, 0x02	; 2
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c50:	83 e0       	ldi	r24, 0x03	; 3
    1c52:	07 c0       	rjmp	.+14     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c5c:	83 e0       	ldi	r24, 0x03	; 3
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <Endpoint_Write_Control_Stream_LE+0x11a>
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	0f 91       	pop	r16
    1c6a:	ff 90       	pop	r15
    1c6c:	ef 90       	pop	r14
    1c6e:	df 90       	pop	r13
    1c70:	cf 90       	pop	r12
    1c72:	08 95       	ret

00001c74 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	e8 2e       	mov	r14, r24
    1c84:	f9 2e       	mov	r15, r25
    1c86:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1c88:	80 91 8f 95 	lds	r24, 0x958F
    1c8c:	80 68       	ori	r24, 0x80	; 128
    1c8e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    1c92:	c0 91 89 95 	lds	r28, 0x9589
    1c96:	d0 91 8a 95 	lds	r29, 0x958A
    1c9a:	c0 17       	cp	r28, r16
    1c9c:	d1 07       	cpc	r29, r17
    1c9e:	40 f0       	brcs	.+16     	; 0x1cb0 <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1ca0:	01 15       	cp	r16, r1
    1ca2:	11 05       	cpc	r17, r1
    1ca4:	21 f4       	brne	.+8      	; 0x1cae <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    1ca6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    1caa:	e8 01       	movw	r28, r16
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <Endpoint_Write_Control_PStream_LE+0x3c>
    1cae:	e8 01       	movw	r28, r16
    1cb0:	0e 2d       	mov	r16, r14
    1cb2:	1f 2d       	mov	r17, r15
    1cb4:	d1 2c       	mov	r13, r1
    1cb6:	4e c0       	rjmp	.+156    	; 0x1d54 <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1cb8:	80 91 82 95 	lds	r24, 0x9582

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1cbc:	88 23       	and	r24, r24
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <Endpoint_Write_Control_PStream_LE+0x4e>
    1cc0:	5f c0       	rjmp	.+190    	; 0x1d80 <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1cc2:	85 30       	cpi	r24, 0x05	; 5
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <Endpoint_Write_Control_PStream_LE+0x54>
    1cc6:	5e c0       	rjmp	.+188    	; 0x1d84 <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1cc8:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1ccc:	81 11       	cpse	r24, r1
    1cce:	5c c0       	rjmp	.+184    	; 0x1d88 <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1cd0:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    1cd4:	81 11       	cpse	r24, r1
    1cd6:	4e c0       	rjmp	.+156    	; 0x1d74 <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    1cd8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    1cdc:	88 23       	and	r24, r24
    1cde:	d1 f1       	breq	.+116    	; 0x1d54 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1ce0:	80 91 8f 95 	lds	r24, 0x958F
    1ce4:	88 23       	and	r24, r24
    1ce6:	7c f4       	brge	.+30     	; 0x1d06 <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1ce8:	e0 91 8b 95 	lds	r30, 0x958B
    1cec:	f0 91 8c 95 	lds	r31, 0x958C
    1cf0:	ef 5b       	subi	r30, 0xBF	; 191
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	e0 80       	ld	r14, Z
    1cf6:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1cf8:	20 97       	sbiw	r28, 0x00	; 0
    1cfa:	19 f1       	breq	.+70     	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0xce>
    1cfc:	88 e0       	ldi	r24, 0x08	; 8
    1cfe:	e8 16       	cp	r14, r24
    1d00:	f1 04       	cpc	r15, r1
    1d02:	78 f0       	brcs	.+30     	; 0x1d22 <Endpoint_Write_Control_PStream_LE+0xae>
    1d04:	1e c0       	rjmp	.+60     	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1d06:	80 91 8b 95 	lds	r24, 0x958B
    1d0a:	90 91 8c 95 	lds	r25, 0x958C
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e0 5c       	subi	r30, 0xC0	; 192
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	e0 80       	ld	r14, Z
    1d16:	31 96       	adiw	r30, 0x01	; 1
    1d18:	80 81       	ld	r24, Z
    1d1a:	f1 2c       	mov	r15, r1
    1d1c:	e8 1a       	sub	r14, r24
    1d1e:	f1 08       	sbc	r15, r1
    1d20:	eb cf       	rjmp	.-42     	; 0x1cf8 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1d22:	f8 01       	movw	r30, r16
    1d24:	84 91       	lpm	r24, Z
    1d26:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1d2a:	0f 5f       	subi	r16, 0xFF	; 255
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1d2e:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1d30:	ff ef       	ldi	r31, 0xFF	; 255
    1d32:	ef 1a       	sub	r14, r31
    1d34:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1d36:	20 97       	sbiw	r28, 0x00	; 0
    1d38:	21 f0       	breq	.+8      	; 0x1d42 <Endpoint_Write_Control_PStream_LE+0xce>
    1d3a:	88 e0       	ldi	r24, 0x08	; 8
    1d3c:	e8 16       	cp	r14, r24
    1d3e:	f1 04       	cpc	r15, r1
    1d40:	81 f7       	brne	.-32     	; 0x1d22 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1d42:	dd 24       	eor	r13, r13
    1d44:	d3 94       	inc	r13
    1d46:	e8 e0       	ldi	r30, 0x08	; 8
    1d48:	ee 16       	cp	r14, r30
    1d4a:	f1 04       	cpc	r15, r1
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <Endpoint_Write_Control_PStream_LE+0xdc>
    1d4e:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1d50:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1d54:	20 97       	sbiw	r28, 0x00	; 0
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <Endpoint_Write_Control_PStream_LE+0xe6>
    1d58:	af cf       	rjmp	.-162    	; 0x1cb8 <Endpoint_Write_Control_PStream_LE+0x44>
    1d5a:	d1 10       	cpse	r13, r1
    1d5c:	ad cf       	rjmp	.-166    	; 0x1cb8 <Endpoint_Write_Control_PStream_LE+0x44>
    1d5e:	0a c0       	rjmp	.+20     	; 0x1d74 <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1d60:	80 91 82 95 	lds	r24, 0x9582

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1d64:	88 23       	and	r24, r24
    1d66:	91 f0       	breq	.+36     	; 0x1d8c <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1d68:	85 30       	cpi	r24, 0x05	; 5
    1d6a:	91 f0       	breq	.+36     	; 0x1d90 <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1d6c:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <Endpoint_IsSETUPReceived>
    1d70:	81 11       	cpse	r24, r1
    1d72:	10 c0       	rjmp	.+32     	; 0x1d94 <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1d74:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    1d78:	88 23       	and	r24, r24
    1d7a:	91 f3       	breq	.-28     	; 0x1d60 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	0b c0       	rjmp	.+22     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d80:	82 e0       	ldi	r24, 0x02	; 2
    1d82:	09 c0       	rjmp	.+18     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	05 c0       	rjmp	.+10     	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	03 c0       	rjmp	.+6      	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1d90:	83 e0       	ldi	r24, 0x03	; 3
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	1f 91       	pop	r17
    1d9c:	0f 91       	pop	r16
    1d9e:	ff 90       	pop	r15
    1da0:	ef 90       	pop	r14
    1da2:	df 90       	pop	r13
    1da4:	08 95       	ret

00001da6 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1da6:	e0 91 8d 95 	lds	r30, 0x958D
    1daa:	f0 91 8e 95 	lds	r31, 0x958E
    1dae:	a0 91 8b 95 	lds	r26, 0x958B
    1db2:	b0 91 8c 95 	lds	r27, 0x958C
    1db6:	af 5b       	subi	r26, 0xBF	; 191
    1db8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dba:	8c 91       	ld	r24, X
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8d 79       	andi	r24, 0x9D	; 157
    1dc6:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1dc8:	e0 91 8b 95 	lds	r30, 0x958B
    1dcc:	f0 91 8c 95 	lds	r31, 0x958C
    1dd0:	ef 5b       	subi	r30, 0xBF	; 191
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	10 82       	st	Z, r1
    1dd6:	08 95       	ret

00001dd8 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1dd8:	e0 91 8d 95 	lds	r30, 0x958D
    1ddc:	f0 91 8e 95 	lds	r31, 0x958E
    1de0:	80 81       	ld	r24, Z
    1de2:	8d 79       	andi	r24, 0x9D	; 157
    1de4:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1de6:	e0 91 8b 95 	lds	r30, 0x958B
    1dea:	f0 91 8c 95 	lds	r31, 0x958C
    1dee:	ef 5b       	subi	r30, 0xBF	; 191
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	10 82       	st	Z, r1
    1df4:	08 95       	ret

00001df6 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1df6:	80 91 8b 95 	lds	r24, 0x958B
    1dfa:	90 91 8c 95 	lds	r25, 0x958C
    1dfe:	fc 01       	movw	r30, r24
    1e00:	ef 5b       	subi	r30, 0xBF	; 191
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	20 81       	ld	r18, Z
    1e06:	31 e0       	ldi	r19, 0x01	; 1
    1e08:	32 0f       	add	r19, r18
    1e0a:	30 83       	st	Z, r19
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f1 1d       	adc	r31, r1
    1e12:	80 81       	ld	r24, Z
}
    1e14:	08 95       	ret

00001e16 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1e16:	20 91 8b 95 	lds	r18, 0x958B
    1e1a:	30 91 8c 95 	lds	r19, 0x958C
    1e1e:	f9 01       	movw	r30, r18
    1e20:	ef 5b       	subi	r30, 0xBF	; 191
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	90 81       	ld	r25, Z
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	49 0f       	add	r20, r25
    1e2a:	40 83       	st	Z, r20
    1e2c:	f9 01       	movw	r30, r18
    1e2e:	e9 0f       	add	r30, r25
    1e30:	f1 1d       	adc	r31, r1
    1e32:	80 83       	st	Z, r24
    1e34:	08 95       	ret

00001e36 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1e36:	80 93 8f 95 	sts	0x958F, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1e40:	40 91 c6 04 	lds	r20, 0x04C6
    1e44:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1e48:	88 23       	and	r24, r24
    1e4a:	e4 f4       	brge	.+56     	; 0x1e84 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1e4c:	64 e8       	ldi	r22, 0x84	; 132
    1e4e:	62 9f       	mul	r22, r18
    1e50:	c0 01       	movw	r24, r0
    1e52:	63 9f       	mul	r22, r19
    1e54:	90 0d       	add	r25, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	8e 52       	subi	r24, 0x2E	; 46
    1e5a:	9a 46       	sbci	r25, 0x6A	; 106
    1e5c:	80 93 8b 95 	sts	0x958B, r24
    1e60:	90 93 8c 95 	sts	0x958C, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1e64:	c9 01       	movw	r24, r18
    1e66:	82 95       	swap	r24
    1e68:	92 95       	swap	r25
    1e6a:	90 7f       	andi	r25, 0xF0	; 240
    1e6c:	98 27       	eor	r25, r24
    1e6e:	80 7f       	andi	r24, 0xF0	; 240
    1e70:	98 27       	eor	r25, r24
    1e72:	08 96       	adiw	r24, 0x08	; 8
    1e74:	9a 01       	movw	r18, r20
    1e76:	28 0f       	add	r18, r24
    1e78:	39 1f       	adc	r19, r25
    1e7a:	20 93 8d 95 	sts	0x958D, r18
    1e7e:	30 93 8e 95 	sts	0x958E, r19
    1e82:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1e84:	64 e8       	ldi	r22, 0x84	; 132
    1e86:	62 9f       	mul	r22, r18
    1e88:	c0 01       	movw	r24, r0
    1e8a:	63 9f       	mul	r22, r19
    1e8c:	90 0d       	add	r25, r0
    1e8e:	11 24       	eor	r1, r1
    1e90:	80 57       	subi	r24, 0x70	; 112
    1e92:	9a 46       	sbci	r25, 0x6A	; 106
    1e94:	80 93 8b 95 	sts	0x958B, r24
    1e98:	90 93 8c 95 	sts	0x958C, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1e9c:	22 95       	swap	r18
    1e9e:	32 95       	swap	r19
    1ea0:	30 7f       	andi	r19, 0xF0	; 240
    1ea2:	32 27       	eor	r19, r18
    1ea4:	20 7f       	andi	r18, 0xF0	; 240
    1ea6:	32 27       	eor	r19, r18
    1ea8:	24 0f       	add	r18, r20
    1eaa:	35 1f       	adc	r19, r21
    1eac:	20 93 8d 95 	sts	0x958D, r18
    1eb0:	30 93 8e 95 	sts	0x958E, r19
    1eb4:	08 95       	ret

00001eb6 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1eb6:	80 91 8f 95 	lds	r24, 0x958F
    1eba:	80 68       	ori	r24, 0x80	; 128
    1ebc:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1ec0:	e0 91 8d 95 	lds	r30, 0x958D
    1ec4:	f0 91 8e 95 	lds	r31, 0x958E
    1ec8:	80 81       	ld	r24, Z
}
    1eca:	86 95       	lsr	r24
    1ecc:	81 70       	andi	r24, 0x01	; 1
    1ece:	08 95       	ret

00001ed0 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1ed0:	80 91 8f 95 	lds	r24, 0x958F
    1ed4:	8f 77       	andi	r24, 0x7F	; 127
    1ed6:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1eda:	e0 91 8d 95 	lds	r30, 0x958D
    1ede:	f0 91 8e 95 	lds	r31, 0x958E
    1ee2:	80 81       	ld	r24, Z
    1ee4:	85 ff       	sbrs	r24, 5
    1ee6:	0c c0       	rjmp	.+24     	; 0x1f00 <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1ee8:	80 91 8b 95 	lds	r24, 0x958B
    1eec:	90 91 8c 95 	lds	r25, 0x958C
    1ef0:	22 81       	ldd	r18, Z+2	; 0x02
    1ef2:	33 81       	ldd	r19, Z+3	; 0x03
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	e0 5c       	subi	r30, 0xC0	; 192
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	20 83       	st	Z, r18
		return true;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	08 95       	ret
	}

	return false;
    1f00:	80 e0       	ldi	r24, 0x00	; 0
}
    1f02:	08 95       	ret

00001f04 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1f04:	80 91 8f 95 	lds	r24, 0x958F
    1f08:	8f 77       	andi	r24, 0x7F	; 127
    1f0a:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1f0e:	e0 91 8d 95 	lds	r30, 0x958D
    1f12:	f0 91 8e 95 	lds	r31, 0x958E
    1f16:	80 81       	ld	r24, Z
    1f18:	84 ff       	sbrs	r24, 4
    1f1a:	0c c0       	rjmp	.+24     	; 0x1f34 <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1f1c:	80 91 8b 95 	lds	r24, 0x958B
    1f20:	90 91 8c 95 	lds	r25, 0x958C
    1f24:	22 81       	ldd	r18, Z+2	; 0x02
    1f26:	33 81       	ldd	r19, Z+3	; 0x03
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e0 5c       	subi	r30, 0xC0	; 192
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	20 83       	st	Z, r18
		return true;
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	08 95       	ret
	}

	return false;
    1f34:	80 e0       	ldi	r24, 0x00	; 0
}
    1f36:	08 95       	ret

00001f38 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1f38:	80 91 8f 95 	lds	r24, 0x958F
    1f3c:	8f 77       	andi	r24, 0x7F	; 127
    1f3e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1f42:	e0 91 8d 95 	lds	r30, 0x958D
    1f46:	f0 91 8e 95 	lds	r31, 0x958E
    1f4a:	80 81       	ld	r24, Z
    1f4c:	8d 78       	andi	r24, 0x8D	; 141
    1f4e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1f50:	e0 91 8d 95 	lds	r30, 0x958D
    1f54:	f0 91 8e 95 	lds	r31, 0x958E
    1f58:	80 81       	ld	r24, Z
    1f5a:	81 60       	ori	r24, 0x01	; 1
    1f5c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f5e:	e0 91 8b 95 	lds	r30, 0x958B
    1f62:	f0 91 8c 95 	lds	r31, 0x958C
    1f66:	ef 5b       	subi	r30, 0xBF	; 191
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1f6c:	80 91 8f 95 	lds	r24, 0x958F
    1f70:	80 68       	ori	r24, 0x80	; 128
    1f72:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1f76:	e0 91 8d 95 	lds	r30, 0x958D
    1f7a:	f0 91 8e 95 	lds	r31, 0x958E
    1f7e:	80 81       	ld	r24, Z
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1f84:	e0 91 8b 95 	lds	r30, 0x958B
    1f88:	f0 91 8c 95 	lds	r31, 0x958C
    1f8c:	ef 5b       	subi	r30, 0xBF	; 191
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	10 82       	st	Z, r1
    1f92:	08 95       	ret

00001f94 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1f94:	e0 91 8d 95 	lds	r30, 0x958D
    1f98:	f0 91 8e 95 	lds	r31, 0x958E
    1f9c:	81 81       	ldd	r24, Z+1	; 0x01
    1f9e:	84 60       	ori	r24, 0x04	; 4
    1fa0:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    1fa2:	e0 91 8d 95 	lds	r30, 0x958D
    1fa6:	f0 91 8e 95 	lds	r31, 0x958E
    1faa:	81 81       	ldd	r24, Z+1	; 0x01
    1fac:	80 7c       	andi	r24, 0xC0	; 192
    1fae:	80 34       	cpi	r24, 0x40	; 64
    1fb0:	61 f4       	brne	.+24     	; 0x1fca <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1fb2:	80 91 8f 95 	lds	r24, 0x958F
    1fb6:	80 58       	subi	r24, 0x80	; 128
    1fb8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1fbc:	e0 91 8d 95 	lds	r30, 0x958D
    1fc0:	f0 91 8e 95 	lds	r31, 0x958E
    1fc4:	81 81       	ldd	r24, Z+1	; 0x01
    1fc6:	84 60       	ori	r24, 0x04	; 4
    1fc8:	81 83       	std	Z+1, r24	; 0x01
    1fca:	08 95       	ret

00001fcc <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    1fcc:	1f 93       	push	r17
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	d8 2f       	mov	r29, r24
    1fd4:	16 2f       	mov	r17, r22
    1fd6:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    1fd8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    1fdc:	e0 91 8d 95 	lds	r30, 0x958D
    1fe0:	f0 91 8e 95 	lds	r31, 0x958E
    1fe4:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1fe6:	e0 91 8d 95 	lds	r30, 0x958D
    1fea:	f0 91 8e 95 	lds	r31, 0x958E
    1fee:	dd 23       	and	r29, r29
    1ff0:	a4 f0       	brlt	.+40     	; 0x201a <Endpoint_ConfigureEndpoint_PRV+0x4e>
    1ff2:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1ff4:	e0 91 8d 95 	lds	r30, 0x958D
    1ff8:	f0 91 8e 95 	lds	r31, 0x958E
    1ffc:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1ffe:	e0 91 8d 95 	lds	r30, 0x958D
    2002:	f0 91 8e 95 	lds	r31, 0x958E
    2006:	12 82       	std	Z+2, r1	; 0x02
    2008:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    200a:	80 91 8b 95 	lds	r24, 0x958B
    200e:	90 91 8c 95 	lds	r25, 0x958C
    2012:	84 83       	std	Z+4, r24	; 0x04
    2014:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    201e:	e0 91 8d 95 	lds	r30, 0x958D
    2022:	f0 91 8e 95 	lds	r31, 0x958E
    2026:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    2028:	e0 91 8d 95 	lds	r30, 0x958D
    202c:	f0 91 8e 95 	lds	r31, 0x958E
    2030:	12 82       	std	Z+2, r1	; 0x02
    2032:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    2034:	80 91 8b 95 	lds	r24, 0x958B
    2038:	90 91 8c 95 	lds	r25, 0x958C
    203c:	84 83       	std	Z+4, r24	; 0x04
    203e:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    2040:	4c 2f       	mov	r20, r28
    2042:	fc 01       	movw	r30, r24
    2044:	e0 5c       	subi	r30, 0xC0	; 192
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    204a:	31 96       	adiw	r30, 0x01	; 1
    204c:	10 82       	st	Z, r1

	return true;
}
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	08 95       	ret

00002058 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    2058:	af 92       	push	r10
    205a:	bf 92       	push	r11
    205c:	cf 92       	push	r12
    205e:	df 92       	push	r13
    2060:	ef 92       	push	r14
    2062:	ff 92       	push	r15
    2064:	0f 93       	push	r16
    2066:	1f 93       	push	r17
    2068:	cf 93       	push	r28
    206a:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    206c:	66 23       	and	r22, r22
    206e:	09 f4       	brne	.+2      	; 0x2072 <Endpoint_ConfigureEndpointTable+0x1a>
    2070:	57 c0       	rjmp	.+174    	; 0x2120 <Endpoint_ConfigureEndpointTable+0xc8>
    2072:	a6 2e       	mov	r10, r22
    2074:	7c 01       	movw	r14, r24
    2076:	8c 01       	movw	r16, r24
    2078:	84 e0       	ldi	r24, 0x04	; 4
    207a:	e8 0e       	add	r14, r24
    207c:	f1 1c       	adc	r15, r1
    207e:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    2080:	f8 01       	movw	r30, r16
    2082:	c0 80       	ld	r12, Z
    2084:	cc 20       	and	r12, r12
    2086:	09 f4       	brne	.+2      	; 0x208a <Endpoint_ConfigureEndpointTable+0x32>
    2088:	41 c0       	rjmp	.+130    	; 0x210c <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    208a:	c1 81       	ldd	r28, Z+1	; 0x01
    208c:	d2 81       	ldd	r29, Z+2	; 0x02
    208e:	f7 01       	movw	r30, r14
    2090:	31 97       	sbiw	r30, 0x01	; 1
    2092:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    2094:	f7 01       	movw	r30, r14
    2096:	90 81       	ld	r25, Z
    2098:	92 30       	cpi	r25, 0x02	; 2
    209a:	10 f4       	brcc	.+4      	; 0x20a0 <Endpoint_ConfigureEndpointTable+0x48>
    209c:	48 e0       	ldi	r20, 0x08	; 8
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <Endpoint_ConfigureEndpointTable+0x4a>
    20a0:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    20a2:	c9 30       	cpi	r28, 0x09	; 9
    20a4:	d1 05       	cpc	r29, r1
    20a6:	50 f0       	brcs	.+20     	; 0x20bc <Endpoint_ConfigureEndpointTable+0x64>
    20a8:	28 e0       	ldi	r18, 0x08	; 8
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    20ae:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    20b4:	2c 17       	cp	r18, r28
    20b6:	3d 07       	cpc	r19, r29
    20b8:	d0 f3       	brcs	.-12     	; 0x20ae <Endpoint_ConfigureEndpointTable+0x56>
    20ba:	01 c0       	rjmp	.+2      	; 0x20be <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    20bc:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    20be:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    20c0:	2c 2d       	mov	r18, r12
    20c2:	2f 70       	andi	r18, 0x0F	; 15
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	25 30       	cpi	r18, 0x05	; 5
    20c8:	31 05       	cpc	r19, r1
    20ca:	64 f5       	brge	.+88     	; 0x2124 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    20cc:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    20ce:	c1 34       	cpi	r28, 0x41	; 65
    20d0:	d1 05       	cpc	r29, r1
    20d2:	50 f5       	brcc	.+84     	; 0x2128 <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    20d4:	88 23       	and	r24, r24
    20d6:	19 f0       	breq	.+6      	; 0x20de <Endpoint_ConfigureEndpointTable+0x86>
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	21 f0       	breq	.+8      	; 0x20e4 <Endpoint_ConfigureEndpointTable+0x8c>
    20dc:	06 c0       	rjmp	.+12     	; 0x20ea <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    20de:	90 64       	ori	r25, 0x40	; 64
    20e0:	d9 2e       	mov	r13, r25
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    20e4:	90 6c       	ori	r25, 0xC0	; 192
    20e6:	d9 2e       	mov	r13, r25
    20e8:	0a c0       	rjmp	.+20     	; 0x20fe <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    20ea:	90 68       	ori	r25, 0x80	; 128
    20ec:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    20ee:	81 11       	cpse	r24, r1
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    20f2:	4c 2f       	mov	r20, r28
    20f4:	6d 2d       	mov	r22, r13
    20f6:	80 e8       	ldi	r24, 0x80	; 128
    20f8:	8c 0d       	add	r24, r12
    20fa:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    20fe:	4c 2f       	mov	r20, r28
    2100:	6d 2d       	mov	r22, r13
    2102:	8c 2d       	mov	r24, r12
    2104:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>
    2108:	88 23       	and	r24, r24
    210a:	79 f0       	breq	.+30     	; 0x212a <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    210c:	b3 94       	inc	r11
    210e:	0b 5f       	subi	r16, 0xFB	; 251
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	f5 e0       	ldi	r31, 0x05	; 5
    2114:	ef 0e       	add	r14, r31
    2116:	f1 1c       	adc	r15, r1
    2118:	ba 10       	cpse	r11, r10
    211a:	b2 cf       	rjmp	.-156    	; 0x2080 <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	05 c0       	rjmp	.+10     	; 0x212a <Endpoint_ConfigureEndpointTable+0xd2>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	03 c0       	rjmp	.+6      	; 0x212a <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	01 c0       	rjmp	.+2      	; 0x212a <Endpoint_ConfigureEndpointTable+0xd2>
    2128:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    212a:	df 91       	pop	r29
    212c:	cf 91       	pop	r28
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	ff 90       	pop	r15
    2134:	ef 90       	pop	r14
    2136:	df 90       	pop	r13
    2138:	cf 90       	pop	r12
    213a:	bf 90       	pop	r11
    213c:	af 90       	pop	r10
    213e:	08 95       	ret

00002140 <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    2144:	a0 ec       	ldi	r26, 0xC0	; 192
    2146:	b4 e0       	ldi	r27, 0x04	; 4
    2148:	16 96       	adiw	r26, 0x06	; 6
    214a:	ed 91       	ld	r30, X+
    214c:	fc 91       	ld	r31, X
    214e:	17 97       	sbiw	r26, 0x07	; 7
    2150:	c9 01       	movw	r24, r18
    2152:	82 95       	swap	r24
    2154:	92 95       	swap	r25
    2156:	90 7f       	andi	r25, 0xF0	; 240
    2158:	98 27       	eor	r25, r24
    215a:	80 7f       	andi	r24, 0xF0	; 240
    215c:	98 27       	eor	r25, r24
    215e:	e8 0f       	add	r30, r24
    2160:	f9 1f       	adc	r31, r25
    2162:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    2164:	16 96       	adiw	r26, 0x06	; 6
    2166:	4d 91       	ld	r20, X+
    2168:	5c 91       	ld	r21, X
    216a:	17 97       	sbiw	r26, 0x07	; 7
    216c:	fa 01       	movw	r30, r20
    216e:	e8 0f       	add	r30, r24
    2170:	f9 1f       	adc	r31, r25
    2172:	11 82       	std	Z+1, r1	; 0x01
    2174:	2f 5f       	subi	r18, 0xFF	; 255
    2176:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2178:	25 30       	cpi	r18, 0x05	; 5
    217a:	31 05       	cpc	r19, r1
    217c:	29 f7       	brne	.-54     	; 0x2148 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    217e:	08 95       	ret

00002180 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2180:	80 91 83 95 	lds	r24, 0x9583
    2184:	88 23       	and	r24, r24
    2186:	84 f4       	brge	.+32     	; 0x21a8 <Endpoint_ClearStatusStage+0x28>
    2188:	04 c0       	rjmp	.+8      	; 0x2192 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    218a:	80 91 82 95 	lds	r24, 0x9582
    218e:	88 23       	and	r24, r24
    2190:	89 f0       	breq	.+34     	; 0x21b4 <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2192:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    2196:	88 23       	and	r24, r24
    2198:	c1 f3       	breq	.-16     	; 0x218a <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    219a:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <Endpoint_ClearOUT>
    219e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    21a0:	80 91 82 95 	lds	r24, 0x9582
    21a4:	88 23       	and	r24, r24
    21a6:	31 f0       	breq	.+12     	; 0x21b4 <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    21a8:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    21ac:	88 23       	and	r24, r24
    21ae:	c1 f3       	breq	.-16     	; 0x21a0 <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    21b0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Endpoint_ClearIN>
    21b4:	08 95       	ret

000021b6 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    21c0:	e0 91 c6 04 	lds	r30, 0x04C6
    21c4:	f0 91 c7 04 	lds	r31, 0x04C7
    21c8:	e0 5b       	subi	r30, 0xB0	; 176
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	c0 81       	ld	r28, Z
    21ce:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    21d0:	0f 2e       	mov	r0, r31
    21d2:	f4 e6       	ldi	r31, 0x64	; 100
    21d4:	ff 2e       	mov	r15, r31
    21d6:	f0 2d       	mov	r31, r0
    21d8:	00 ec       	ldi	r16, 0xC0	; 192
    21da:	14 e0       	ldi	r17, 0x04	; 4
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <Endpoint_WaitUntilReady+0x2c>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    21de:	f2 2e       	mov	r15, r18
    21e0:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    21e2:	80 91 8f 95 	lds	r24, 0x958F

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    21e6:	88 23       	and	r24, r24
    21e8:	2c f4       	brge	.+10     	; 0x21f4 <Endpoint_WaitUntilReady+0x3e>
		{
			if (Endpoint_IsINReady())
    21ea:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <Endpoint_IsINReady>
    21ee:	88 23       	and	r24, r24
    21f0:	29 f0       	breq	.+10     	; 0x21fc <Endpoint_WaitUntilReady+0x46>
    21f2:	23 c0       	rjmp	.+70     	; 0x223a <Endpoint_WaitUntilReady+0x84>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    21f4:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <Endpoint_IsOUTReceived>
    21f8:	81 11       	cpse	r24, r1
    21fa:	21 c0       	rjmp	.+66     	; 0x223e <Endpoint_WaitUntilReady+0x88>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21fc:	80 91 82 95 	lds	r24, 0x9582

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2200:	88 23       	and	r24, r24
    2202:	f9 f0       	breq	.+62     	; 0x2242 <Endpoint_WaitUntilReady+0x8c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2204:	85 30       	cpi	r24, 0x05	; 5
    2206:	f9 f0       	breq	.+62     	; 0x2246 <Endpoint_WaitUntilReady+0x90>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    2208:	e0 91 8d 95 	lds	r30, 0x958D
    220c:	f0 91 8e 95 	lds	r31, 0x958E
    2210:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2212:	82 fd       	sbrc	r24, 2
    2214:	1a c0       	rjmp	.+52     	; 0x224a <Endpoint_WaitUntilReady+0x94>
    2216:	d8 01       	movw	r26, r16
    2218:	16 96       	adiw	r26, 0x06	; 6
    221a:	ed 91       	ld	r30, X+
    221c:	fc 91       	ld	r31, X
    221e:	17 97       	sbiw	r26, 0x07	; 7
    2220:	e0 5b       	subi	r30, 0xB0	; 176
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2228:	c8 17       	cp	r28, r24
    222a:	d9 07       	cpc	r29, r25
    222c:	c9 f2       	breq	.-78     	; 0x21e0 <Endpoint_WaitUntilReady+0x2a>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    222e:	2f ef       	ldi	r18, 0xFF	; 255
    2230:	2f 0d       	add	r18, r15
    2232:	f1 10       	cpse	r15, r1
    2234:	d4 cf       	rjmp	.-88     	; 0x21de <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_Timeout;
    2236:	84 e0       	ldi	r24, 0x04	; 4
    2238:	09 c0       	rjmp	.+18     	; 0x224c <Endpoint_WaitUntilReady+0x96>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	07 c0       	rjmp	.+14     	; 0x224c <Endpoint_WaitUntilReady+0x96>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	05 c0       	rjmp	.+10     	; 0x224c <Endpoint_WaitUntilReady+0x96>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	03 c0       	rjmp	.+6      	; 0x224c <Endpoint_WaitUntilReady+0x96>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	01 c0       	rjmp	.+2      	; 0x224c <Endpoint_WaitUntilReady+0x96>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    224a:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	08 95       	ret

00002258 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2258:	cf 93       	push	r28
    225a:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    225c:	e0 e4       	ldi	r30, 0x40	; 64
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    2262:	84 81       	ldd	r24, Z+4	; 0x04
    2264:	83 60       	ori	r24, 0x03	; 3
    2266:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    2268:	0e 94 8a 11 	call	0x2314	; 0x2314 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    226c:	0e 94 91 11 	call	0x2322	; 0x2322 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    2270:	c0 ec       	ldi	r28, 0xC0	; 192
    2272:	d4 e0       	ldi	r29, 0x04	; 4
    2274:	88 81       	ld	r24, Y
    2276:	8f 77       	andi	r24, 0x7F	; 127
    2278:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    227a:	88 81       	ld	r24, Y
    227c:	80 68       	ori	r24, 0x80	; 128
    227e:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2280:	10 92 82 95 	sts	0x9582, r1
	USB_Device_ConfigurationNumber  = 0;
    2284:	10 92 7e 95 	sts	0x957E, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2288:	10 92 80 95 	sts	0x9580, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    228c:	10 92 7f 95 	sts	0x957F, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    2290:	88 81       	ld	r24, Y
    2292:	80 64       	ori	r24, 0x40	; 64
    2294:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2296:	48 e0       	ldi	r20, 0x08	; 8
    2298:	68 e4       	ldi	r22, 0x48	; 72
    229a:	80 e8       	ldi	r24, 0x80	; 128
    229c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    22a0:	48 e0       	ldi	r20, 0x08	; 8
    22a2:	68 e4       	ldi	r22, 0x48	; 72
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    22aa:	88 85       	ldd	r24, Y+8	; 0x08
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
    22b2:	81 60       	ori	r24, 0x01	; 1
    22b4:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    22b6:	df 91       	pop	r29
    22b8:	cf 91       	pop	r28
    22ba:	08 95       	ret

000022bc <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    22c0:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    22c2:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    22c4:	c0 ec       	ldi	r28, 0xC0	; 192
    22c6:	d1 e0       	ldi	r29, 0x01	; 1
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    22cc:	ea e1       	ldi	r30, 0x1A	; 26
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	e4 91       	lpm	r30, Z
    22d2:	a0 ec       	ldi	r26, 0xC0	; 192
    22d4:	b4 e0       	ldi	r27, 0x04	; 4
    22d6:	da 96       	adiw	r26, 0x3a	; 58
    22d8:	ec 93       	st	X, r30
    22da:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    22dc:	eb e1       	ldi	r30, 0x1B	; 27
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	e4 91       	lpm	r30, Z
    22e2:	db 96       	adiw	r26, 0x3b	; 59
    22e4:	ec 93       	st	X, r30
    22e6:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    22e8:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    22ea:	85 e2       	ldi	r24, 0x25	; 37
    22ec:	98 e9       	ldi	r25, 0x98	; 152
    22ee:	8e 7f       	andi	r24, 0xFE	; 254
    22f0:	16 96       	adiw	r26, 0x06	; 6
    22f2:	8d 93       	st	X+, r24
    22f4:	9c 93       	st	X, r25
    22f6:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    22f8:	84 e1       	ldi	r24, 0x14	; 20
    22fa:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    22fc:	83 e0       	ldi	r24, 0x03	; 3
    22fe:	18 96       	adiw	r26, 0x08	; 8
    2300:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2302:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    2304:	81 e0       	ldi	r24, 0x01	; 1
    2306:	80 93 81 95 	sts	0x9581, r24

	USB_ResetInterface();
    230a:	0e 94 2c 11 	call	0x2258	; 0x2258 <USB_ResetInterface>
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    2314:	e0 ec       	ldi	r30, 0xC0	; 192
    2316:	f4 e0       	ldi	r31, 0x04	; 4
    2318:	80 85       	ldd	r24, Z+8	; 0x08
    231a:	83 70       	andi	r24, 0x03	; 3
    231c:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    231e:	11 86       	std	Z+9, r1	; 0x09
    2320:	08 95       	ret

00002322 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    2322:	e0 ec       	ldi	r30, 0xC0	; 192
    2324:	f4 e0       	ldi	r31, 0x04	; 4
    2326:	8f ef       	ldi	r24, 0xFF	; 255
    2328:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    232a:	84 87       	std	Z+12, r24	; 0x0c
    232c:	08 95       	ret

0000232e <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    232e:	1f 92       	push	r1
    2330:	0f 92       	push	r0
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	0f 92       	push	r0
    2336:	11 24       	eor	r1, r1
    2338:	0b b6       	in	r0, 0x3b	; 59
    233a:	0f 92       	push	r0
    233c:	2f 93       	push	r18
    233e:	3f 93       	push	r19
    2340:	4f 93       	push	r20
    2342:	5f 93       	push	r21
    2344:	6f 93       	push	r22
    2346:	7f 93       	push	r23
    2348:	8f 93       	push	r24
    234a:	9f 93       	push	r25
    234c:	af 93       	push	r26
    234e:	bf 93       	push	r27
    2350:	ef 93       	push	r30
    2352:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    2354:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2358:	88 23       	and	r24, r24
    235a:	4c f4       	brge	.+18     	; 0x236e <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    235c:	80 91 c8 04 	lds	r24, 0x04C8
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    2364:	80 e8       	ldi	r24, 0x80	; 128
    2366:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    236a:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    236e:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    2372:	86 ff       	sbrs	r24, 6
    2374:	07 c0       	rjmp	.+14     	; 0x2384 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    2376:	80 e4       	ldi	r24, 0x40	; 64
    2378:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    237c:	10 92 82 95 	sts	0x9582, r1
		EVENT_USB_Device_Disconnect();
    2380:	0e 94 d7 16 	call	0x2dae	; 0x2dae <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    2384:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    2388:	85 ff       	sbrs	r24, 5
    238a:	16 c0       	rjmp	.+44     	; 0x23b8 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    238c:	80 e2       	ldi	r24, 0x20	; 32
    238e:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    2392:	80 91 7e 95 	lds	r24, 0x957E
    2396:	88 23       	and	r24, r24
    2398:	21 f0       	breq	.+8      	; 0x23a2 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    239a:	84 e0       	ldi	r24, 0x04	; 4
    239c:	80 93 82 95 	sts	0x9582, r24
    23a0:	09 c0       	rjmp	.+18     	; 0x23b4 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    23a2:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    23a6:	81 11       	cpse	r24, r1
    23a8:	02 c0       	rjmp	.+4      	; 0x23ae <__vector_125+0x80>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <__vector_125+0x82>
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	80 93 82 95 	sts	0x9582, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    23b4:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    23b8:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    23bc:	84 ff       	sbrs	r24, 4
    23be:	18 c0       	rjmp	.+48     	; 0x23f0 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    23c0:	e0 ec       	ldi	r30, 0xC0	; 192
    23c2:	f4 e0       	ldi	r31, 0x04	; 4
    23c4:	80 e1       	ldi	r24, 0x10	; 16
    23c6:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	80 93 82 95 	sts	0x9582, r24
		USB_Device_ConfigurationNumber = 0;
    23ce:	10 92 7e 95 	sts	0x957E, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    23d2:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    23d4:	0e 94 a0 10 	call	0x2140	; 0x2140 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    23d8:	48 e0       	ldi	r20, 0x08	; 8
    23da:	68 e4       	ldi	r22, 0x48	; 72
    23dc:	80 e8       	ldi	r24, 0x80	; 128
    23de:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    23e2:	48 e0       	ldi	r20, 0x08	; 8
    23e4:	68 e4       	ldi	r22, 0x48	; 72
    23e6:	80 e0       	ldi	r24, 0x00	; 0
    23e8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    23ec:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <USB_Event_Stub>
	}
}
    23f0:	ff 91       	pop	r31
    23f2:	ef 91       	pop	r30
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	9f 91       	pop	r25
    23fa:	8f 91       	pop	r24
    23fc:	7f 91       	pop	r23
    23fe:	6f 91       	pop	r22
    2400:	5f 91       	pop	r21
    2402:	4f 91       	pop	r20
    2404:	3f 91       	pop	r19
    2406:	2f 91       	pop	r18
    2408:	0f 90       	pop	r0
    240a:	0b be       	out	0x3b, r0	; 59
    240c:	0f 90       	pop	r0
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	0f 90       	pop	r0
    2412:	1f 90       	pop	r1
    2414:	18 95       	reti

00002416 <USBThread>:
		
		
		//int retval = _nrf24l01p_send_to_address_ack(0x4C4C4C4C31, (uint8_t*)txData,strlen(txData));
		vTaskDelay(10);
		
	}
    2416:	0e 94 4b 08 	call	0x1096	; 0x1096 <vTaskSuspendAll>
    241a:	8b e8       	ldi	r24, 0x8B	; 139
    241c:	92 e2       	ldi	r25, 0x22	; 34
    241e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <CDC_Device_USBTask>
    2422:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <USB_USBTask>
    2426:	0e 94 27 09 	call	0x124e	; 0x124e <xTaskResumeAll>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2432:	f1 cf       	rjmp	.-30     	; 0x2416 <USBThread>

00002434 <thread_5>:
    2434:	0a eb       	ldi	r16, 0xBA	; 186
    2436:	12 e2       	ldi	r17, 0x22	; 34
    2438:	c3 e5       	ldi	r28, 0x53	; 83
    243a:	d3 e9       	ldi	r29, 0x93	; 147
    243c:	80 91 a7 98 	lds	r24, 0x98A7
    2440:	90 91 a8 98 	lds	r25, 0x98A8
    2444:	a0 91 a9 98 	lds	r26, 0x98A9
    2448:	b0 91 aa 98 	lds	r27, 0x98AA
    244c:	bf 93       	push	r27
    244e:	af 93       	push	r26
    2450:	9f 93       	push	r25
    2452:	8f 93       	push	r24
    2454:	1f 93       	push	r17
    2456:	0f 93       	push	r16
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	0e 94 31 1d 	call	0x3a62	; 0x3a62 <fprintf>
    2460:	88 ee       	ldi	r24, 0xE8	; 232
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2468:	8d b7       	in	r24, 0x3d	; 61
    246a:	9e b7       	in	r25, 0x3e	; 62
    246c:	08 96       	adiw	r24, 0x08	; 8
    246e:	8d bf       	out	0x3d, r24	; 61
    2470:	9e bf       	out	0x3e, r25	; 62
    2472:	e4 cf       	rjmp	.-56     	; 0x243c <thread_5+0x8>

00002474 <usart_spi_transmit_receive>:
    2474:	fc 01       	movw	r30, r24
    2476:	81 81       	ldd	r24, Z+1	; 0x01
    2478:	85 ff       	sbrs	r24, 5
    247a:	fd cf       	rjmp	.-6      	; 0x2476 <usart_spi_transmit_receive+0x2>
    247c:	60 83       	st	Z, r22
    247e:	81 81       	ldd	r24, Z+1	; 0x01
    2480:	86 ff       	sbrs	r24, 6
    2482:	fd cf       	rjmp	.-6      	; 0x247e <usart_spi_transmit_receive+0xa>
    2484:	80 e4       	ldi	r24, 0x40	; 64
    2486:	81 83       	std	Z+1, r24	; 0x01
    2488:	80 81       	ld	r24, Z
    248a:	08 95       	ret

0000248c <ssd1306_write_command>:
    248c:	1f 93       	push	r17
    248e:	cf 93       	push	r28
    2490:	df 93       	push	r29
    2492:	c0 ea       	ldi	r28, 0xA0	; 160
    2494:	d6 e0       	ldi	r29, 0x06	; 6
    2496:	18 e0       	ldi	r17, 0x08	; 8
    2498:	1e 83       	std	Y+6, r17	; 0x06
    249a:	e0 e6       	ldi	r30, 0x60	; 96
    249c:	f6 e0       	ldi	r31, 0x06	; 6
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	96 83       	std	Z+6, r25	; 0x06
    24a2:	96 83       	std	Z+6, r25	; 0x06
    24a4:	68 2f       	mov	r22, r24
    24a6:	80 ea       	ldi	r24, 0xA0	; 160
    24a8:	99 e0       	ldi	r25, 0x09	; 9
    24aa:	0e 94 3a 12 	call	0x2474	; 0x2474 <usart_spi_transmit_receive>
    24ae:	1d 83       	std	Y+5, r17	; 0x05
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	1f 91       	pop	r17
    24b6:	08 95       	ret

000024b8 <ssd1306_write_data>:
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	c0 ea       	ldi	r28, 0xA0	; 160
    24c6:	d6 e0       	ldi	r29, 0x06	; 6
    24c8:	18 e0       	ldi	r17, 0x08	; 8
    24ca:	1e 83       	std	Y+6, r17	; 0x06
    24cc:	0f 2e       	mov	r0, r31
    24ce:	f0 e6       	ldi	r31, 0x60	; 96
    24d0:	ef 2e       	mov	r14, r31
    24d2:	f6 e0       	ldi	r31, 0x06	; 6
    24d4:	ff 2e       	mov	r15, r31
    24d6:	f0 2d       	mov	r31, r0
    24d8:	01 e0       	ldi	r16, 0x01	; 1
    24da:	f7 01       	movw	r30, r14
    24dc:	05 83       	std	Z+5, r16	; 0x05
    24de:	68 2f       	mov	r22, r24
    24e0:	80 ea       	ldi	r24, 0xA0	; 160
    24e2:	99 e0       	ldi	r25, 0x09	; 9
    24e4:	0e 94 3a 12 	call	0x2474	; 0x2474 <usart_spi_transmit_receive>
    24e8:	f7 01       	movw	r30, r14
    24ea:	06 83       	std	Z+6, r16	; 0x06
    24ec:	1d 83       	std	Y+5, r17	; 0x05
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	08 95       	ret

000024fc <ssd1306_set_page_address>:
    24fc:	87 70       	andi	r24, 0x07	; 7
    24fe:	80 6b       	ori	r24, 0xB0	; 176
    2500:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2504:	08 95       	ret

00002506 <ssd1306_set_column_address>:
    2506:	cf 93       	push	r28
    2508:	c8 2f       	mov	r28, r24
    250a:	98 2f       	mov	r25, r24
    250c:	9f 77       	andi	r25, 0x7F	; 127
    250e:	89 2f       	mov	r24, r25
    2510:	82 95       	swap	r24
    2512:	8f 70       	andi	r24, 0x0F	; 15
    2514:	80 61       	ori	r24, 0x10	; 16
    2516:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    251a:	8c 2f       	mov	r24, r28
    251c:	8f 70       	andi	r24, 0x0F	; 15
    251e:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2522:	cf 91       	pop	r28
    2524:	08 95       	ret

00002526 <usart_init_spi>:
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	ec 01       	movw	r28, r24
    252c:	fb 01       	movw	r30, r22
    252e:	8c 81       	ldd	r24, Y+4	; 0x04
    2530:	8f 7e       	andi	r24, 0xEF	; 239
    2532:	8c 83       	std	Y+4, r24	; 0x04
    2534:	a0 e6       	ldi	r26, 0x60	; 96
    2536:	b6 e0       	ldi	r27, 0x06	; 6
    2538:	82 e0       	ldi	r24, 0x02	; 2
    253a:	11 96       	adiw	r26, 0x01	; 1
    253c:	8c 93       	st	X, r24
    253e:	11 97       	sbiw	r26, 0x01	; 1
    2540:	15 96       	adiw	r26, 0x05	; 5
    2542:	8c 93       	st	X, r24
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	80 6c       	ori	r24, 0xC0	; 192
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	84 81       	ldd	r24, Z+4	; 0x04
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	21 f4       	brne	.+8      	; 0x255a <usart_init_spi+0x34>
    2552:	8d 81       	ldd	r24, Y+5	; 0x05
    2554:	82 60       	ori	r24, 0x02	; 2
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	03 c0       	rjmp	.+6      	; 0x2560 <usart_init_spi+0x3a>
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	8d 7f       	andi	r24, 0xFD	; 253
    255e:	8d 83       	std	Y+5, r24	; 0x05
    2560:	85 81       	ldd	r24, Z+5	; 0x05
    2562:	88 23       	and	r24, r24
    2564:	21 f0       	breq	.+8      	; 0x256e <usart_init_spi+0x48>
    2566:	8d 81       	ldd	r24, Y+5	; 0x05
    2568:	84 60       	ori	r24, 0x04	; 4
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	03 c0       	rjmp	.+6      	; 0x2574 <usart_init_spi+0x4e>
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	8b 7f       	andi	r24, 0xFB	; 251
    2572:	8d 83       	std	Y+5, r24	; 0x05
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	a2 81       	ldd	r26, Z+2	; 0x02
    257a:	b3 81       	ldd	r27, Z+3	; 0x03
    257c:	9c 01       	movw	r18, r24
    257e:	ad 01       	movw	r20, r26
    2580:	22 0f       	add	r18, r18
    2582:	33 1f       	adc	r19, r19
    2584:	44 1f       	adc	r20, r20
    2586:	55 1f       	adc	r21, r21
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	78 e4       	ldi	r23, 0x48	; 72
    258c:	88 ee       	ldi	r24, 0xE8	; 232
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmodsi4>
    2594:	21 50       	subi	r18, 0x01	; 1
    2596:	31 09       	sbc	r19, r1
    2598:	83 2f       	mov	r24, r19
    259a:	8f 70       	andi	r24, 0x0F	; 15
    259c:	8f 83       	std	Y+7, r24	; 0x07
    259e:	2e 83       	std	Y+6, r18	; 0x06
    25a0:	8c 81       	ldd	r24, Y+4	; 0x04
    25a2:	88 60       	ori	r24, 0x08	; 8
    25a4:	8c 83       	std	Y+4, r24	; 0x04
    25a6:	df 91       	pop	r29
    25a8:	cf 91       	pop	r28
    25aa:	08 95       	ret

000025ac <ssd1306_init>:
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <ssd1306_init+0x6>
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <ssd1306_init+0x8>
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	20 ea       	ldi	r18, 0xA0	; 160
    25ba:	36 e0       	ldi	r19, 0x06	; 6
    25bc:	88 e0       	ldi	r24, 0x08	; 8
    25be:	d9 01       	movw	r26, r18
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	8c 93       	st	X, r24
    25c4:	a0 e6       	ldi	r26, 0x60	; 96
    25c6:	b6 e0       	ldi	r27, 0x06	; 6
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	9c 93       	st	X, r25
    25ce:	11 97       	sbiw	r26, 0x01	; 1
    25d0:	e0 e0       	ldi	r30, 0x00	; 0
    25d2:	f6 e0       	ldi	r31, 0x06	; 6
    25d4:	81 83       	std	Z+1, r24	; 0x01
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	11 96       	adiw	r26, 0x01	; 1
    25da:	9c 93       	st	X, r25
    25dc:	11 97       	sbiw	r26, 0x01	; 1
    25de:	11 96       	adiw	r26, 0x01	; 1
    25e0:	8c 93       	st	X, r24
    25e2:	d9 01       	movw	r26, r18
    25e4:	15 96       	adiw	r26, 0x05	; 5
    25e6:	8c 93       	st	X, r24
    25e8:	86 83       	std	Z+6, r24	; 0x06
    25ea:	ba e6       	ldi	r27, 0x6A	; 106
    25ec:	ba 95       	dec	r27
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <ssd1306_init+0x40>
    25f0:	00 c0       	rjmp	.+0      	; 0x25f2 <ssd1306_init+0x46>
    25f2:	85 83       	std	Z+5, r24	; 0x05
    25f4:	ea e6       	ldi	r30, 0x6A	; 106
    25f6:	ea 95       	dec	r30
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <ssd1306_init+0x4a>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <ssd1306_init+0x50>
    25fc:	e0 e7       	ldi	r30, 0x70	; 112
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	84 81       	ldd	r24, Z+4	; 0x04
    2602:	8f 7e       	andi	r24, 0xEF	; 239
    2604:	84 83       	std	Z+4, r24	; 0x04
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	9b e1       	ldi	r25, 0x1B	; 27
    260a:	a7 eb       	ldi	r26, 0xB7	; 183
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	9a 83       	std	Y+2, r25	; 0x02
    2612:	ab 83       	std	Y+3, r26	; 0x03
    2614:	bc 83       	std	Y+4, r27	; 0x04
    2616:	1d 82       	std	Y+5, r1	; 0x05
    2618:	1e 82       	std	Y+6, r1	; 0x06
    261a:	be 01       	movw	r22, r28
    261c:	6f 5f       	subi	r22, 0xFF	; 255
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	80 ea       	ldi	r24, 0xA0	; 160
    2622:	99 e0       	ldi	r25, 0x09	; 9
    2624:	0e 94 93 12 	call	0x2526	; 0x2526 <usart_init_spi>
    2628:	88 ea       	ldi	r24, 0xA8	; 168
    262a:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    262e:	8f e1       	ldi	r24, 0x1F	; 31
    2630:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2634:	83 ed       	ldi	r24, 0xD3	; 211
    2636:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2640:	80 e4       	ldi	r24, 0x40	; 64
    2642:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2646:	81 ea       	ldi	r24, 0xA1	; 161
    2648:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    264c:	88 ec       	ldi	r24, 0xC8	; 200
    264e:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2652:	8a ed       	ldi	r24, 0xDA	; 218
    2654:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    265e:	81 e8       	ldi	r24, 0x81	; 129
    2660:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2664:	8f e8       	ldi	r24, 0x8F	; 143
    2666:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    266a:	84 ea       	ldi	r24, 0xA4	; 164
    266c:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2670:	86 ea       	ldi	r24, 0xA6	; 166
    2672:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2676:	85 ed       	ldi	r24, 0xD5	; 213
    2678:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    267c:	80 e8       	ldi	r24, 0x80	; 128
    267e:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2682:	8d e8       	ldi	r24, 0x8D	; 141
    2684:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2688:	84 e1       	ldi	r24, 0x14	; 20
    268a:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    268e:	8b ed       	ldi	r24, 0xDB	; 219
    2690:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    2694:	80 e4       	ldi	r24, 0x40	; 64
    2696:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    269a:	89 ed       	ldi	r24, 0xD9	; 217
    269c:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    26a0:	81 ef       	ldi	r24, 0xF1	; 241
    26a2:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    26a6:	8f ea       	ldi	r24, 0xAF	; 175
    26a8:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
    26ac:	26 96       	adiw	r28, 0x06	; 6
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	08 95       	ret

000026b8 <ssd1306_write_text>:
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	dc 01       	movw	r26, r24
    26c4:	ec 91       	ld	r30, X
    26c6:	ee 23       	and	r30, r30
    26c8:	29 f1       	breq	.+74     	; 0x2714 <ssd1306_write_text+0x5c>
    26ca:	7c 01       	movw	r14, r24
    26cc:	bf ef       	ldi	r27, 0xFF	; 255
    26ce:	eb 1a       	sub	r14, r27
    26d0:	fb 0a       	sbc	r15, r27
    26d2:	ef 37       	cpi	r30, 0x7F	; 127
    26d4:	d0 f4       	brcc	.+52     	; 0x270a <ssd1306_write_text+0x52>
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	ee 0f       	add	r30, r30
    26da:	ff 1f       	adc	r31, r31
    26dc:	e5 57       	subi	r30, 0x75	; 117
    26de:	fe 4d       	sbci	r31, 0xDE	; 222
    26e0:	00 81       	ld	r16, Z
    26e2:	11 81       	ldd	r17, Z+1	; 0x01
    26e4:	f8 01       	movw	r30, r16
    26e6:	80 81       	ld	r24, Z
    26e8:	88 23       	and	r24, r24
    26ea:	61 f0       	breq	.+24     	; 0x2704 <ssd1306_write_text+0x4c>
    26ec:	c1 e0       	ldi	r28, 0x01	; 1
    26ee:	f8 01       	movw	r30, r16
    26f0:	ec 0f       	add	r30, r28
    26f2:	f1 1d       	adc	r31, r1
    26f4:	80 81       	ld	r24, Z
    26f6:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <ssd1306_write_data>
    26fa:	cf 5f       	subi	r28, 0xFF	; 255
    26fc:	d8 01       	movw	r26, r16
    26fe:	9c 91       	ld	r25, X
    2700:	9c 17       	cp	r25, r28
    2702:	a8 f7       	brcc	.-22     	; 0x26ee <ssd1306_write_text+0x36>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <ssd1306_write_data>
    270a:	d7 01       	movw	r26, r14
    270c:	ed 91       	ld	r30, X+
    270e:	7d 01       	movw	r14, r26
    2710:	e1 11       	cpse	r30, r1
    2712:	df cf       	rjmp	.-66     	; 0x26d2 <ssd1306_write_text+0x1a>
    2714:	cf 91       	pop	r28
    2716:	1f 91       	pop	r17
    2718:	0f 91       	pop	r16
    271a:	ff 90       	pop	r15
    271c:	ef 90       	pop	r14
    271e:	08 95       	ret

00002720 <gfx_mono_framebuffer_put_byte>:
    2720:	20 e8       	ldi	r18, 0x80	; 128
    2722:	82 9f       	mul	r24, r18
    2724:	c0 01       	movw	r24, r0
    2726:	11 24       	eor	r1, r1
    2728:	86 0f       	add	r24, r22
    272a:	91 1d       	adc	r25, r1
    272c:	e0 91 61 93 	lds	r30, 0x9361
    2730:	f0 91 62 93 	lds	r31, 0x9362
    2734:	e8 0f       	add	r30, r24
    2736:	f9 1f       	adc	r31, r25
    2738:	40 83       	st	Z, r20
    273a:	08 95       	ret

0000273c <gfx_mono_framebuffer_get_byte>:
    273c:	20 e8       	ldi	r18, 0x80	; 128
    273e:	82 9f       	mul	r24, r18
    2740:	c0 01       	movw	r24, r0
    2742:	11 24       	eor	r1, r1
    2744:	86 0f       	add	r24, r22
    2746:	91 1d       	adc	r25, r1
    2748:	e0 91 61 93 	lds	r30, 0x9361
    274c:	f0 91 62 93 	lds	r31, 0x9362
    2750:	e8 0f       	add	r30, r24
    2752:	f9 1f       	adc	r31, r25
    2754:	80 81       	ld	r24, Z
    2756:	08 95       	ret

00002758 <gfx_mono_ssd1306_put_byte>:
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	18 2f       	mov	r17, r24
    2760:	d6 2f       	mov	r29, r22
    2762:	c4 2f       	mov	r28, r20
    2764:	21 11       	cpse	r18, r1
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <gfx_mono_ssd1306_put_byte+0x18>
    2768:	0e 94 9e 13 	call	0x273c	; 0x273c <gfx_mono_framebuffer_get_byte>
    276c:	8c 17       	cp	r24, r28
    276e:	71 f0       	breq	.+28     	; 0x278c <gfx_mono_ssd1306_put_byte+0x34>
    2770:	4c 2f       	mov	r20, r28
    2772:	6d 2f       	mov	r22, r29
    2774:	81 2f       	mov	r24, r17
    2776:	0e 94 90 13 	call	0x2720	; 0x2720 <gfx_mono_framebuffer_put_byte>
    277a:	81 2f       	mov	r24, r17
    277c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <ssd1306_set_page_address>
    2780:	8d 2f       	mov	r24, r29
    2782:	0e 94 83 12 	call	0x2506	; 0x2506 <ssd1306_set_column_address>
    2786:	8c 2f       	mov	r24, r28
    2788:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <ssd1306_write_data>
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	08 95       	ret

00002794 <ds1302_arch_initialize>:
    2794:	0f 93       	push	r16
    2796:	07 e0       	ldi	r16, 0x07	; 7
    2798:	20 e1       	ldi	r18, 0x10	; 16
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	60 e0       	ldi	r22, 0x00	; 0
    279e:	8f ea       	ldi	r24, 0xAF	; 175
    27a0:	92 e2       	ldi	r25, 0x22	; 34
    27a2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <DigitalPin_Config>
    27a6:	0f 91       	pop	r16
    27a8:	08 95       	ret

000027aa <ds1302_initialize>:
    27aa:	61 e0       	ldi	r22, 0x01	; 1
    27ac:	8f ea       	ldi	r24, 0xAF	; 175
    27ae:	92 e2       	ldi	r25, 0x22	; 34
    27b0:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	8f ea       	ldi	r24, 0xAF	; 175
    27b8:	92 e2       	ldi	r25, 0x22	; 34
    27ba:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    27be:	61 e0       	ldi	r22, 0x01	; 1
    27c0:	82 eb       	ldi	r24, 0xB2	; 178
    27c2:	92 e2       	ldi	r25, 0x22	; 34
    27c4:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	8c ea       	ldi	r24, 0xAC	; 172
    27cc:	92 e2       	ldi	r25, 0x22	; 34
    27ce:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    27d2:	0e 94 ca 13 	call	0x2794	; 0x2794 <ds1302_arch_initialize>
    27d6:	08 95       	ret

000027d8 <ds1302_writeByte>:
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	18 2f       	mov	r17, r24
    27e0:	61 e0       	ldi	r22, 0x01	; 1
    27e2:	8f ea       	ldi	r24, 0xAF	; 175
    27e4:	92 e2       	ldi	r25, 0x22	; 34
    27e6:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    27ea:	c8 e0       	ldi	r28, 0x08	; 8
    27ec:	d0 e0       	ldi	r29, 0x00	; 0
    27ee:	10 ff       	sbrs	r17, 0
    27f0:	05 c0       	rjmp	.+10     	; 0x27fc <ds1302_writeByte+0x24>
    27f2:	8f ea       	ldi	r24, 0xAF	; 175
    27f4:	92 e2       	ldi	r25, 0x22	; 34
    27f6:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <DigitalPin_SetValue>
    27fa:	04 c0       	rjmp	.+8      	; 0x2804 <ds1302_writeByte+0x2c>
    27fc:	8f ea       	ldi	r24, 0xAF	; 175
    27fe:	92 e2       	ldi	r25, 0x22	; 34
    2800:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <DigitalPin_ClearValue>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    280c:	82 eb       	ldi	r24, 0xB2	; 178
    280e:	92 e2       	ldi	r25, 0x22	; 34
    2810:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <DigitalPin_SetValue>
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    281c:	82 eb       	ldi	r24, 0xB2	; 178
    281e:	92 e2       	ldi	r25, 0x22	; 34
    2820:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <DigitalPin_ClearValue>
    2824:	16 95       	lsr	r17
    2826:	21 97       	sbiw	r28, 0x01	; 1
    2828:	11 f7       	brne	.-60     	; 0x27ee <ds1302_writeByte+0x16>
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	8f ea       	ldi	r24, 0xAF	; 175
    282e:	92 e2       	ldi	r25, 0x22	; 34
    2830:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    2834:	df 91       	pop	r29
    2836:	cf 91       	pop	r28
    2838:	1f 91       	pop	r17
    283a:	08 95       	ret

0000283c <ds1302_readByte>:
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	60 e0       	ldi	r22, 0x00	; 0
    2844:	8f ea       	ldi	r24, 0xAF	; 175
    2846:	92 e2       	ldi	r25, 0x22	; 34
    2848:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
    284c:	c0 e0       	ldi	r28, 0x00	; 0
    284e:	d0 e0       	ldi	r29, 0x00	; 0
    2850:	10 e0       	ldi	r17, 0x00	; 0
    2852:	8f ea       	ldi	r24, 0xAF	; 175
    2854:	92 e2       	ldi	r25, 0x22	; 34
    2856:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <DigitalPin_GetValue>
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	0c 2e       	mov	r0, r28
    2860:	02 c0       	rjmp	.+4      	; 0x2866 <ds1302_readByte+0x2a>
    2862:	22 0f       	add	r18, r18
    2864:	33 1f       	adc	r19, r19
    2866:	0a 94       	dec	r0
    2868:	e2 f7       	brpl	.-8      	; 0x2862 <ds1302_readByte+0x26>
    286a:	12 2b       	or	r17, r18
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2874:	82 eb       	ldi	r24, 0xB2	; 178
    2876:	92 e2       	ldi	r25, 0x22	; 34
    2878:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <DigitalPin_SetValue>
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2884:	82 eb       	ldi	r24, 0xB2	; 178
    2886:	92 e2       	ldi	r25, 0x22	; 34
    2888:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <DigitalPin_ClearValue>
    288c:	21 96       	adiw	r28, 0x01	; 1
    288e:	c8 30       	cpi	r28, 0x08	; 8
    2890:	d1 05       	cpc	r29, r1
    2892:	f9 f6       	brne	.-66     	; 0x2852 <ds1302_readByte+0x16>
    2894:	81 2f       	mov	r24, r17
    2896:	df 91       	pop	r29
    2898:	cf 91       	pop	r28
    289a:	1f 91       	pop	r17
    289c:	08 95       	ret

0000289e <ds1302_writeReg>:
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
    28a2:	d8 2f       	mov	r29, r24
    28a4:	c6 2f       	mov	r28, r22
    28a6:	80 91 ab 98 	lds	r24, 0x98AB
    28aa:	88 23       	and	r24, r24
    28ac:	31 f0       	breq	.+12     	; 0x28ba <ds1302_writeReg+0x1c>
    28ae:	10 92 ab 98 	sts	0x98AB, r1
    28b2:	60 e0       	ldi	r22, 0x00	; 0
    28b4:	8e e8       	ldi	r24, 0x8E	; 142
    28b6:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    28ba:	8c ea       	ldi	r24, 0xAC	; 172
    28bc:	92 e2       	ldi	r25, 0x22	; 34
    28be:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <DigitalPin_SetValue>
    28c2:	84 e0       	ldi	r24, 0x04	; 4
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    28ca:	8d 2f       	mov	r24, r29
    28cc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <ds1302_writeByte>
    28d0:	8c 2f       	mov	r24, r28
    28d2:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <ds1302_writeByte>
    28d6:	84 e0       	ldi	r24, 0x04	; 4
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    28de:	8c ea       	ldi	r24, 0xAC	; 172
    28e0:	92 e2       	ldi	r25, 0x22	; 34
    28e2:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <DigitalPin_ClearValue>
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	08 95       	ret

000028ec <ds1302_setTimestamp>:
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	cf 93       	push	r28
    28f6:	df 93       	push	r29
    28f8:	00 d0       	rcall	.+0      	; 0x28fa <ds1302_setTimestamp+0xe>
    28fa:	1f 92       	push	r1
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	69 83       	std	Y+1, r22	; 0x01
    2902:	7a 83       	std	Y+2, r23	; 0x02
    2904:	8b 83       	std	Y+3, r24	; 0x03
    2906:	9c 83       	std	Y+4, r25	; 0x04
    2908:	ce 01       	movw	r24, r28
    290a:	01 96       	adiw	r24, 0x01	; 1
    290c:	0e 94 0c 02 	call	0x418	; 0x418 <localtime>
    2910:	7c 01       	movw	r14, r24
    2912:	fc 01       	movw	r30, r24
    2914:	86 81       	ldd	r24, Z+6	; 0x06
    2916:	97 81       	ldd	r25, Z+7	; 0x07
    2918:	4e 97       	sbiw	r24, 0x1e	; 30
    291a:	86 83       	std	Z+6, r24	; 0x06
    291c:	97 83       	std	Z+7, r25	; 0x07
    291e:	60 81       	ld	r22, Z
    2920:	17 e6       	ldi	r17, 0x67	; 103
    2922:	61 02       	muls	r22, r17
    2924:	81 2d       	mov	r24, r1
    2926:	11 24       	eor	r1, r1
    2928:	85 95       	asr	r24
    292a:	85 95       	asr	r24
    292c:	67 fd       	sbrc	r22, 7
    292e:	83 95       	inc	r24
    2930:	28 2f       	mov	r18, r24
    2932:	22 0f       	add	r18, r18
    2934:	92 2f       	mov	r25, r18
    2936:	99 0f       	add	r25, r25
    2938:	99 0f       	add	r25, r25
    293a:	92 0f       	add	r25, r18
    293c:	69 1b       	sub	r22, r25
    293e:	f0 e1       	ldi	r31, 0x10	; 16
    2940:	8f 9f       	mul	r24, r31
    2942:	60 0d       	add	r22, r0
    2944:	11 24       	eor	r1, r1
    2946:	80 e8       	ldi	r24, 0x80	; 128
    2948:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    294c:	f7 01       	movw	r30, r14
    294e:	61 81       	ldd	r22, Z+1	; 0x01
    2950:	61 02       	muls	r22, r17
    2952:	81 2d       	mov	r24, r1
    2954:	11 24       	eor	r1, r1
    2956:	85 95       	asr	r24
    2958:	85 95       	asr	r24
    295a:	67 fd       	sbrc	r22, 7
    295c:	83 95       	inc	r24
    295e:	28 2f       	mov	r18, r24
    2960:	22 0f       	add	r18, r18
    2962:	92 2f       	mov	r25, r18
    2964:	99 0f       	add	r25, r25
    2966:	99 0f       	add	r25, r25
    2968:	92 0f       	add	r25, r18
    296a:	69 1b       	sub	r22, r25
    296c:	f0 e1       	ldi	r31, 0x10	; 16
    296e:	8f 9f       	mul	r24, r31
    2970:	60 0d       	add	r22, r0
    2972:	11 24       	eor	r1, r1
    2974:	82 e8       	ldi	r24, 0x82	; 130
    2976:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    297a:	f7 01       	movw	r30, r14
    297c:	62 81       	ldd	r22, Z+2	; 0x02
    297e:	61 02       	muls	r22, r17
    2980:	81 2d       	mov	r24, r1
    2982:	11 24       	eor	r1, r1
    2984:	85 95       	asr	r24
    2986:	85 95       	asr	r24
    2988:	67 fd       	sbrc	r22, 7
    298a:	83 95       	inc	r24
    298c:	28 2f       	mov	r18, r24
    298e:	22 0f       	add	r18, r18
    2990:	92 2f       	mov	r25, r18
    2992:	99 0f       	add	r25, r25
    2994:	99 0f       	add	r25, r25
    2996:	92 0f       	add	r25, r18
    2998:	69 1b       	sub	r22, r25
    299a:	f0 e1       	ldi	r31, 0x10	; 16
    299c:	8f 9f       	mul	r24, r31
    299e:	60 0d       	add	r22, r0
    29a0:	11 24       	eor	r1, r1
    29a2:	84 e8       	ldi	r24, 0x84	; 132
    29a4:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    29a8:	f7 01       	movw	r30, r14
    29aa:	63 81       	ldd	r22, Z+3	; 0x03
    29ac:	61 02       	muls	r22, r17
    29ae:	11 2d       	mov	r17, r1
    29b0:	11 24       	eor	r1, r1
    29b2:	15 95       	asr	r17
    29b4:	15 95       	asr	r17
    29b6:	67 fd       	sbrc	r22, 7
    29b8:	13 95       	inc	r17
    29ba:	91 2f       	mov	r25, r17
    29bc:	99 0f       	add	r25, r25
    29be:	89 2f       	mov	r24, r25
    29c0:	88 0f       	add	r24, r24
    29c2:	88 0f       	add	r24, r24
    29c4:	89 0f       	add	r24, r25
    29c6:	68 1b       	sub	r22, r24
    29c8:	f0 e1       	ldi	r31, 0x10	; 16
    29ca:	1f 9f       	mul	r17, r31
    29cc:	60 0d       	add	r22, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	86 e8       	ldi	r24, 0x86	; 134
    29d2:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    29d6:	f7 01       	movw	r30, r14
    29d8:	85 81       	ldd	r24, Z+5	; 0x05
    29da:	08 2e       	mov	r0, r24
    29dc:	00 0c       	add	r0, r0
    29de:	99 0b       	sbc	r25, r25
    29e0:	01 96       	adiw	r24, 0x01	; 1
    29e2:	0a e0       	ldi	r16, 0x0A	; 10
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    29e6:	b8 01       	movw	r22, r16
    29e8:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
    29ec:	f0 e1       	ldi	r31, 0x10	; 16
    29ee:	6f 9f       	mul	r22, r31
    29f0:	80 0d       	add	r24, r0
    29f2:	11 24       	eor	r1, r1
    29f4:	68 2f       	mov	r22, r24
    29f6:	88 e8       	ldi	r24, 0x88	; 136
    29f8:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    29fc:	f7 01       	movw	r30, r14
    29fe:	64 81       	ldd	r22, Z+4	; 0x04
    2a00:	6f 5f       	subi	r22, 0xFF	; 255
    2a02:	8a e8       	ldi	r24, 0x8A	; 138
    2a04:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    2a08:	f7 01       	movw	r30, r14
    2a0a:	86 81       	ldd	r24, Z+6	; 0x06
    2a0c:	97 81       	ldd	r25, Z+7	; 0x07
    2a0e:	84 56       	subi	r24, 0x64	; 100
    2a10:	91 09       	sbc	r25, r1
    2a12:	b8 01       	movw	r22, r16
    2a14:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__divmodhi4>
    2a18:	f0 e1       	ldi	r31, 0x10	; 16
    2a1a:	6f 9f       	mul	r22, r31
    2a1c:	80 0d       	add	r24, r0
    2a1e:	11 24       	eor	r1, r1
    2a20:	68 2f       	mov	r22, r24
    2a22:	8c e8       	ldi	r24, 0x8C	; 140
    2a24:	0e 94 4f 14 	call	0x289e	; 0x289e <ds1302_writeReg>
    2a28:	24 96       	adiw	r28, 0x04	; 4
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	ff 90       	pop	r15
    2a38:	ef 90       	pop	r14
    2a3a:	08 95       	ret

00002a3c <ds1302_getTimestamp>:
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
    2a42:	1f 93       	push	r17
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	63 97       	sbiw	r28, 0x13	; 19
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	8c ea       	ldi	r24, 0xAC	; 172
    2a54:	92 e2       	ldi	r25, 0x22	; 34
    2a56:	0e 94 3e 17 	call	0x2e7c	; 0x2e7c <DigitalPin_SetValue>
    2a5a:	84 e0       	ldi	r24, 0x04	; 4
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2a62:	8f eb       	ldi	r24, 0xBF	; 191
    2a64:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <ds1302_writeByte>
    2a68:	8e 01       	movw	r16, r28
    2a6a:	0f 5f       	subi	r16, 0xFF	; 255
    2a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6e:	7e 01       	movw	r14, r28
    2a70:	88 e0       	ldi	r24, 0x08	; 8
    2a72:	e8 0e       	add	r14, r24
    2a74:	f1 1c       	adc	r15, r1
    2a76:	0e 94 1e 14 	call	0x283c	; 0x283c <ds1302_readByte>
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	81 93       	st	Z+, r24
    2a7e:	8f 01       	movw	r16, r30
    2a80:	ee 15       	cp	r30, r14
    2a82:	ff 05       	cpc	r31, r15
    2a84:	c1 f7       	brne	.-16     	; 0x2a76 <ds1302_getTimestamp+0x3a>
    2a86:	8c ea       	ldi	r24, 0xAC	; 172
    2a88:	92 e2       	ldi	r25, 0x22	; 34
    2a8a:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <DigitalPin_ClearValue>
    2a8e:	00 00       	nop
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	98 2f       	mov	r25, r24
    2a94:	92 95       	swap	r25
    2a96:	9f 70       	andi	r25, 0x0F	; 15
    2a98:	99 0f       	add	r25, r25
    2a9a:	29 2f       	mov	r18, r25
    2a9c:	22 0f       	add	r18, r18
    2a9e:	22 0f       	add	r18, r18
    2aa0:	92 0f       	add	r25, r18
    2aa2:	8f 70       	andi	r24, 0x0F	; 15
    2aa4:	89 0f       	add	r24, r25
    2aa6:	88 87       	std	Y+8, r24	; 0x08
    2aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aaa:	98 2f       	mov	r25, r24
    2aac:	92 95       	swap	r25
    2aae:	9f 70       	andi	r25, 0x0F	; 15
    2ab0:	99 0f       	add	r25, r25
    2ab2:	29 2f       	mov	r18, r25
    2ab4:	22 0f       	add	r18, r18
    2ab6:	22 0f       	add	r18, r18
    2ab8:	92 0f       	add	r25, r18
    2aba:	8f 70       	andi	r24, 0x0F	; 15
    2abc:	89 0f       	add	r24, r25
    2abe:	89 87       	std	Y+9, r24	; 0x09
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	92 95       	swap	r25
    2ac6:	9f 70       	andi	r25, 0x0F	; 15
    2ac8:	99 0f       	add	r25, r25
    2aca:	29 2f       	mov	r18, r25
    2acc:	22 0f       	add	r18, r18
    2ace:	22 0f       	add	r18, r18
    2ad0:	92 0f       	add	r25, r18
    2ad2:	8f 70       	andi	r24, 0x0F	; 15
    2ad4:	89 0f       	add	r24, r25
    2ad6:	8a 87       	std	Y+10, r24	; 0x0a
    2ad8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ada:	98 2f       	mov	r25, r24
    2adc:	92 95       	swap	r25
    2ade:	9f 70       	andi	r25, 0x0F	; 15
    2ae0:	99 0f       	add	r25, r25
    2ae2:	29 2f       	mov	r18, r25
    2ae4:	22 0f       	add	r18, r18
    2ae6:	22 0f       	add	r18, r18
    2ae8:	92 0f       	add	r25, r18
    2aea:	8f 70       	andi	r24, 0x0F	; 15
    2aec:	89 0f       	add	r24, r25
    2aee:	8b 87       	std	Y+11, r24	; 0x0b
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	28 2f       	mov	r18, r24
    2af4:	2f 70       	andi	r18, 0x0F	; 15
    2af6:	21 50       	subi	r18, 0x01	; 1
    2af8:	82 95       	swap	r24
    2afa:	8f 70       	andi	r24, 0x0F	; 15
    2afc:	88 0f       	add	r24, r24
    2afe:	98 2f       	mov	r25, r24
    2b00:	99 0f       	add	r25, r25
    2b02:	99 0f       	add	r25, r25
    2b04:	89 0f       	add	r24, r25
    2b06:	82 0f       	add	r24, r18
    2b08:	8d 87       	std	Y+13, r24	; 0x0d
    2b0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b0c:	28 2f       	mov	r18, r24
    2b0e:	2f 70       	andi	r18, 0x0F	; 15
    2b10:	82 95       	swap	r24
    2b12:	8f 70       	andi	r24, 0x0F	; 15
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	ac 01       	movw	r20, r24
    2b18:	44 0f       	add	r20, r20
    2b1a:	55 1f       	adc	r21, r21
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	84 0f       	add	r24, r20
    2b2a:	95 1f       	adc	r25, r21
    2b2c:	82 0f       	add	r24, r18
    2b2e:	91 1d       	adc	r25, r1
    2b30:	8c 59       	subi	r24, 0x9C	; 156
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	8e 87       	std	Y+14, r24	; 0x0e
    2b36:	9f 87       	std	Y+15, r25	; 0x0f
    2b38:	00 00       	nop
    2b3a:	ce 01       	movw	r24, r28
    2b3c:	08 96       	adiw	r24, 0x08	; 8
    2b3e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <mktime>
    2b42:	63 96       	adiw	r28, 0x13	; 19
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	de bf       	out	0x3e, r29	; 62
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	1f 91       	pop	r17
    2b4e:	0f 91       	pop	r16
    2b50:	ff 90       	pop	r15
    2b52:	ef 90       	pop	r14
    2b54:	08 95       	ret

00002b56 <thread_4>:
    2b56:	0e 94 d5 13 	call	0x27aa	; 0x27aa <ds1302_initialize>
    2b5a:	6b ef       	ldi	r22, 0xFB	; 251
    2b5c:	7c e8       	ldi	r23, 0x8C	; 140
    2b5e:	8e e8       	ldi	r24, 0x8E	; 142
    2b60:	97 e5       	ldi	r25, 0x57	; 87
    2b62:	0e 94 76 14 	call	0x28ec	; 0x28ec <ds1302_setTimestamp>
    2b66:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <ds1302_getTimestamp>
    2b6a:	60 93 a7 98 	sts	0x98A7, r22
    2b6e:	70 93 a8 98 	sts	0x98A8, r23
    2b72:	80 93 a9 98 	sts	0x98A9, r24
    2b76:	90 93 aa 98 	sts	0x98AA, r25
    2b7a:	60 91 a7 98 	lds	r22, 0x98A7
    2b7e:	70 91 a8 98 	lds	r23, 0x98A8
    2b82:	80 91 a9 98 	lds	r24, 0x98A9
    2b86:	90 91 aa 98 	lds	r25, 0x98AA
    2b8a:	0e 94 ca 02 	call	0x594	; 0x594 <set_system_time>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	0e 94 a9 09 	call	0x1352	; 0x1352 <vTaskDelay>
    2b96:	e7 cf       	rjmp	.-50     	; 0x2b66 <thread_4+0x10>

00002b98 <SetupHardware>:
}


/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
    2b9c:	e0 e5       	ldi	r30, 0x50	; 80
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 e1       	ldi	r24, 0x10	; 16
    2ba2:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 61       	ori	r24, 0x10	; 16
    2ba8:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
    2baa:	81 81       	ldd	r24, Z+1	; 0x01
    2bac:	84 ff       	sbrs	r24, 4
    2bae:	fd cf       	rjmp	.-6      	; 0x2baa <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    2bb0:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2bb2:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
    2bb4:	a0 e4       	ldi	r26, 0x40	; 64
    2bb6:	b0 e0       	ldi	r27, 0x00	; 0
    2bb8:	94 e0       	ldi	r25, 0x04	; 4
    2bba:	28 ed       	ldi	r18, 0xD8	; 216
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	1b be       	out	0x3b, r1	; 59
    2bc0:	fd 01       	movw	r30, r26
    2bc2:	24 bf       	out	0x34, r18	; 52
    2bc4:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2bc6:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2bc8:	8f e3       	ldi	r24, 0x3F	; 63
    2bca:	9f e1       	ldi	r25, 0x1F	; 31
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <SetupHardware+0x34>
    2bd0:	00 c0       	rjmp	.+0      	; 0x2bd2 <SetupHardware+0x3a>
    2bd2:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
    2bd4:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
    2bd6:	e0 e5       	ldi	r30, 0x50	; 80
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	82 60       	ori	r24, 0x02	; 2
    2bde:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    2be0:	81 81       	ldd	r24, Z+1	; 0x01
    2be2:	81 ff       	sbrs	r24, 1
    2be4:	fd cf       	rjmp	.-6      	; 0x2be0 <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
    2be6:	e0 e5       	ldi	r30, 0x50	; 80
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	86 81       	ldd	r24, Z+6	; 0x06
    2bec:	84 60       	ori	r24, 0x04	; 4
    2bee:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
    2bf0:	a0 e6       	ldi	r26, 0x60	; 96
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	8b e1       	ldi	r24, 0x1B	; 27
    2bf6:	15 96       	adiw	r26, 0x05	; 5
    2bf8:	8c 93       	st	X, r24
    2bfa:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
    2bfc:	87 eb       	ldi	r24, 0xB7	; 183
    2bfe:	16 96       	adiw	r26, 0x06	; 6
    2c00:	8c 93       	st	X, r24
    2c02:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
    2c04:	c0 ec       	ldi	r28, 0xC0	; 192
    2c06:	d1 e0       	ldi	r29, 0x01	; 1
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
    2c0c:	ed e1       	ldi	r30, 0x1D	; 29
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	e4 91       	lpm	r30, Z
    2c12:	12 96       	adiw	r26, 0x02	; 2
    2c14:	ec 93       	st	X, r30
    2c16:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
    2c18:	ec e1       	ldi	r30, 0x1C	; 28
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	e4 91       	lpm	r30, Z
    2c1e:	13 96       	adiw	r26, 0x03	; 3
    2c20:	ec 93       	st	X, r30
    2c22:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
    2c24:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2c2a:	87 e0       	ldi	r24, 0x07	; 7
    2c2c:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
    2c30:	e0 ee       	ldi	r30, 0xE0	; 224
    2c32:	f7 e0       	ldi	r31, 0x07	; 7
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
    2c38:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
    2c3a:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
    2c3e:	80 e4       	ldi	r24, 0x40	; 64
    2c40:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
    2c42:	e0 e6       	ldi	r30, 0x60	; 96
    2c44:	f6 e0       	ldi	r31, 0x06	; 6
    2c46:	90 e3       	ldi	r25, 0x30	; 48
    2c48:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
    2c4a:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
    2c4c:	84 8b       	std	Z+20, r24	; 0x14
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    2c4e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <USB_Init>
}
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	08 95       	ret

00002c58 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	DigitalPin_SetDIr(&led,1);
    2c58:	61 e0       	ldi	r22, 0x01	; 1
    2c5a:	89 ea       	ldi	r24, 0xA9	; 169
    2c5c:	92 e2       	ldi	r25, 0x22	; 34
    2c5e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	86 ea       	ldi	r24, 0xA6	; 166
    2c66:	92 e2       	ldi	r25, 0x22	; 34
    2c68:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
	
	SetupHardware();
    2c6c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <SetupHardware>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    2c70:	83 e6       	ldi	r24, 0x63	; 99
    2c72:	93 e9       	ldi	r25, 0x93	; 147
    2c74:	80 93 61 93 	sts	0x9361, r24
    2c78:	90 93 62 93 	sts	0x9362, r25

	uint8_t page;
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
    2c7c:	0e 94 d6 12 	call	0x25ac	; 0x25ac <ssd1306_init>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2c80:	d0 e0       	ldi	r29, 0x00	; 0
    2c82:	0f c0       	rjmp	.+30     	; 0x2ca2 <main+0x4a>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
    2c84:	8d 2f       	mov	r24, r29
    2c86:	0e 94 7e 12 	call	0x24fc	; 0x24fc <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
    2c8a:	8c 2f       	mov	r24, r28
    2c8c:	0e 94 83 12 	call	0x2506	; 0x2506 <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    2c96:	cf 5f       	subi	r28, 0xFF	; 255
    2c98:	c0 38       	cpi	r28, 0x80	; 128
    2c9a:	a1 f7       	brne	.-24     	; 0x2c84 <main+0x2c>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2c9c:	df 5f       	subi	r29, 0xFF	; 255
    2c9e:	d4 30       	cpi	r29, 0x04	; 4
    2ca0:	11 f0       	breq	.+4      	; 0x2ca6 <main+0x4e>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    2ca2:	c0 e0       	ldi	r28, 0x00	; 0
    2ca4:	ef cf       	rjmp	.-34     	; 0x2c84 <main+0x2c>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    2ca6:	80 e4       	ldi	r24, 0x40	; 64
    2ca8:	0e 94 46 12 	call	0x248c	; 0x248c <ssd1306_write_command>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2cac:	d0 e0       	ldi	r29, 0x00	; 0
    2cae:	0c c0       	rjmp	.+24     	; 0x2cc8 <main+0x70>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    2cb0:	21 e0       	ldi	r18, 0x01	; 1
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	6c 2f       	mov	r22, r28
    2cb6:	8d 2f       	mov	r24, r29
    2cb8:	0e 94 ac 13 	call	0x2758	; 0x2758 <gfx_mono_ssd1306_put_byte>
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    2cbc:	cf 5f       	subi	r28, 0xFF	; 255
    2cbe:	c0 38       	cpi	r28, 0x80	; 128
    2cc0:	b9 f7       	brne	.-18     	; 0x2cb0 <main+0x58>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2cc2:	df 5f       	subi	r29, 0xFF	; 255
    2cc4:	d4 30       	cpi	r29, 0x04	; 4
    2cc6:	11 f0       	breq	.+4      	; 0x2ccc <main+0x74>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2cc8:	c0 e0       	ldi	r28, 0x00	; 0
    2cca:	f2 cf       	rjmp	.-28     	; 0x2cb0 <main+0x58>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
    2ccc:	00 00       	nop
	ssd1306_set_page_address(0);
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	0e 94 7e 12 	call	0x24fc	; 0x24fc <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    2cd4:	81 ef       	ldi	r24, 0xF1	; 241
    2cd6:	92 e2       	ldi	r25, 0x22	; 34
    2cd8:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <ssd1306_write_text>


	DigitalPin_SetDIr(&led,1);
    2cdc:	61 e0       	ldi	r22, 0x01	; 1
    2cde:	89 ea       	ldi	r24, 0xA9	; 169
    2ce0:	92 e2       	ldi	r25, 0x22	; 34
    2ce2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	86 ea       	ldi	r24, 0xA6	; 166
    2cea:	92 e2       	ldi	r25, 0x22	; 34
    2cec:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
    2cf0:	e0 e5       	ldi	r30, 0x50	; 80
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	82 60       	ori	r24, 0x02	; 2
    2cf8:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    2cfa:	81 81       	ldd	r24, Z+1	; 0x01
    2cfc:	81 ff       	sbrs	r24, 1
    2cfe:	fd cf       	rjmp	.-6      	; 0x2cfa <main+0xa2>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	0e 94 06 18 	call	0x300c	; 0x300c <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2d06:	81 e0       	ldi	r24, 0x01	; 1
    2d08:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <CLKSYS_Disable>

	char time_string[20];
	uint8_t rxData[33];


	PORTR.DIRSET = (1<<0);
    2d0c:	e0 ee       	ldi	r30, 0xE0	; 224
    2d0e:	f7 e0       	ldi	r31, 0x07	; 7
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = (1<<1);
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = (1<<4);
    2d18:	80 e1       	ldi	r24, 0x10	; 16
    2d1a:	80 93 61 06 	sts	0x0661, r24

	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2d1e:	63 e5       	ldi	r22, 0x53	; 83
    2d20:	73 e9       	ldi	r23, 0x93	; 147
    2d22:	8b e8       	ldi	r24, 0x8B	; 139
    2d24:	92 e2       	ldi	r25, 0x22	; 34
    2d26:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <CDC_Device_CreateStream>
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
    2d2a:	78 94       	sei
	GlobalInterruptEnable();

	asm("nop");
    2d2c:	00 00       	nop

	TWI_MasterInit(&lcd03i2c,
    2d2e:	2b e9       	ldi	r18, 0x9B	; 155
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	60 ea       	ldi	r22, 0xA0	; 160
    2d34:	74 e0       	ldi	r23, 0x04	; 4
    2d36:	83 e6       	ldi	r24, 0x63	; 99
    2d38:	95 e9       	ldi	r25, 0x95	; 149
    2d3a:	0e 94 27 18 	call	0x304e	; 0x304e <TWI_MasterInit>
	&TWIE,
	TWI_MASTER_INTLVL_OFF_gc,
	TWI_BAUD(F_CPU, 100000));
	
	asm("nop");
    2d3e:	00 00       	nop
// 		while(!(TWIE.MASTER.STATUS&TWI_MASTER_WIF_bm));
// 	}
	


	asm("nop");
    2d40:	00 00       	nop





	asm("nop");
    2d42:	00 00       	nop

	
	//xTaskCreate(thread_1,(signed portCHAR *) "t1", 100, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_2,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
	//xTaskCreate(thread_3,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
	xTaskCreate(thread_4,(signed portCHAR *) "t4", 500, NULL, tskIDLE_PRIORITY, NULL );
    2d44:	a1 2c       	mov	r10, r1
    2d46:	b1 2c       	mov	r11, r1
    2d48:	c1 2c       	mov	r12, r1
    2d4a:	d1 2c       	mov	r13, r1
    2d4c:	e1 2c       	mov	r14, r1
    2d4e:	f1 2c       	mov	r15, r1
    2d50:	00 e0       	ldi	r16, 0x00	; 0
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	44 ef       	ldi	r20, 0xF4	; 244
    2d58:	51 e0       	ldi	r21, 0x01	; 1
    2d5a:	66 ef       	ldi	r22, 0xF6	; 246
    2d5c:	72 e2       	ldi	r23, 0x22	; 34
    2d5e:	8b ea       	ldi	r24, 0xAB	; 171
    2d60:	95 e1       	ldi	r25, 0x15	; 21
    2d62:	0e 94 18 07 	call	0xe30	; 0xe30 <xTaskGenericCreate>
	xTaskCreate(thread_5,(signed portCHAR *) "t5", 500, NULL, tskIDLE_PRIORITY, NULL );
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	30 e0       	ldi	r19, 0x00	; 0
    2d6a:	44 ef       	ldi	r20, 0xF4	; 244
    2d6c:	51 e0       	ldi	r21, 0x01	; 1
    2d6e:	69 ef       	ldi	r22, 0xF9	; 249
    2d70:	72 e2       	ldi	r23, 0x22	; 34
    2d72:	8a e1       	ldi	r24, 0x1A	; 26
    2d74:	92 e1       	ldi	r25, 0x12	; 18
    2d76:	0e 94 18 07 	call	0xe30	; 0xe30 <xTaskGenericCreate>
	xTaskCreate(USBThread,(signed portCHAR *) "usb", 200, NULL, tskIDLE_PRIORITY, NULL );
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	48 ec       	ldi	r20, 0xC8	; 200
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	6c ef       	ldi	r22, 0xFC	; 252
    2d84:	72 e2       	ldi	r23, 0x22	; 34
    2d86:	8b e0       	ldi	r24, 0x0B	; 11
    2d88:	92 e1       	ldi	r25, 0x12	; 18
    2d8a:	0e 94 18 07 	call	0xe30	; 0xe30 <xTaskGenericCreate>
	

	//starting the scheduler
	vTaskStartScheduler();
    2d8e:	0e 94 20 08 	call	0x1040	; 0x1040 <vTaskStartScheduler>

	for (;;)
	{
// 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
// 		USB_USBTask();
	}
    2d92:	ff cf       	rjmp	.-2      	; 0x2d92 <main+0x13a>

00002d94 <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2d94:	83 e0       	ldi	r24, 0x03	; 3
    2d96:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2d9a:	80 e3       	ldi	r24, 0x30	; 48
    2d9c:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2da0:	82 e0       	ldi	r24, 0x02	; 2
    2da2:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2da6:	80 e1       	ldi	r24, 0x10	; 16
    2da8:	80 93 65 06 	sts	0x0665, r24
    2dac:	08 95       	ret

00002dae <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2dae:	83 e0       	ldi	r24, 0x03	; 3
    2db0:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2db4:	80 e3       	ldi	r24, 0x30	; 48
    2db6:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2dc0:	10 92 65 06 	sts	0x0665, r1
    2dc4:	08 95       	ret

00002dc6 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    2dc6:	8b e8       	ldi	r24, 0x8B	; 139
    2dc8:	92 e2       	ldi	r25, 0x22	; 34
    2dca:	0e 94 36 0a 	call	0x146c	; 0x146c <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    2dce:	81 11       	cpse	r24, r1
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <EVENT_USB_Device_ConfigurationChanged+0x10>
    2dd2:	81 e1       	ldi	r24, 0x11	; 17
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <EVENT_USB_Device_ConfigurationChanged+0x12>
    2dd6:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2dde:	90 e3       	ldi	r25, 0x30	; 48
    2de0:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2de4:	98 2f       	mov	r25, r24
    2de6:	93 70       	andi	r25, 0x03	; 3
    2de8:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2dec:	80 73       	andi	r24, 0x30	; 48
    2dee:	80 93 65 06 	sts	0x0665, r24
    2df2:	08 95       	ret

00002df4 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    2df4:	8b e8       	ldi	r24, 0x8B	; 139
    2df6:	92 e2       	ldi	r25, 0x22	; 34
    2df8:	0e 94 90 0b 	call	0x1720	; 0x1720 <CDC_Device_ProcessControlRequest>
    2dfc:	08 95       	ret

00002dfe <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    2dfe:	08 95       	ret

00002e00 <DigitalPin_Config>:
void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    2e00:	0f 93       	push	r16
    2e02:	20 2b       	or	r18, r16
    2e04:	61 11       	cpse	r22, r1
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <DigitalPin_Config+0xc>
    2e08:	00 e0       	ldi	r16, 0x00	; 0
    2e0a:	01 c0       	rjmp	.+2      	; 0x2e0e <DigitalPin_Config+0xe>
    2e0c:	00 e8       	ldi	r16, 0x80	; 128
    2e0e:	20 2b       	or	r18, r16
    2e10:	41 11       	cpse	r20, r1
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <DigitalPin_Config+0x18>
    2e14:	00 e0       	ldi	r16, 0x00	; 0
    2e16:	01 c0       	rjmp	.+2      	; 0x2e1a <DigitalPin_Config+0x1a>
    2e18:	00 e4       	ldi	r16, 0x40	; 64
    2e1a:	20 2b       	or	r18, r16
    2e1c:	3f b7       	in	r19, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	dc 01       	movw	r26, r24
    2e22:	12 96       	adiw	r26, 0x02	; 2
    2e24:	4c 91       	ld	r20, X
    2e26:	12 97       	sbiw	r26, 0x02	; 2
    2e28:	40 93 b0 00 	sts	0x00B0, r20
    2e2c:	ed 91       	ld	r30, X+
    2e2e:	fc 91       	ld	r31, X
    2e30:	20 8b       	std	Z+16, r18	; 0x10
    2e32:	3f bf       	out	0x3f, r19	; 63
    2e34:	0f 91       	pop	r16
    2e36:	08 95       	ret

00002e38 <DigitalPin_SetDIr>:
    2e38:	66 23       	and	r22, r22
    2e3a:	81 f0       	breq	.+32     	; 0x2e5c <DigitalPin_SetDIr+0x24>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	ed 91       	ld	r30, X+
    2e40:	fc 91       	ld	r31, X
    2e42:	11 97       	sbiw	r26, 0x01	; 1
    2e44:	21 e0       	ldi	r18, 0x01	; 1
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	a9 01       	movw	r20, r18
    2e4a:	12 96       	adiw	r26, 0x02	; 2
    2e4c:	0c 90       	ld	r0, X
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <DigitalPin_SetDIr+0x1c>
    2e50:	44 0f       	add	r20, r20
    2e52:	55 1f       	adc	r21, r21
    2e54:	0a 94       	dec	r0
    2e56:	e2 f7       	brpl	.-8      	; 0x2e50 <DigitalPin_SetDIr+0x18>
    2e58:	41 83       	std	Z+1, r20	; 0x01
    2e5a:	08 95       	ret
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	ed 91       	ld	r30, X+
    2e60:	fc 91       	ld	r31, X
    2e62:	11 97       	sbiw	r26, 0x01	; 1
    2e64:	21 e0       	ldi	r18, 0x01	; 1
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	a9 01       	movw	r20, r18
    2e6a:	12 96       	adiw	r26, 0x02	; 2
    2e6c:	0c 90       	ld	r0, X
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <DigitalPin_SetDIr+0x3c>
    2e70:	44 0f       	add	r20, r20
    2e72:	55 1f       	adc	r21, r21
    2e74:	0a 94       	dec	r0
    2e76:	e2 f7       	brpl	.-8      	; 0x2e70 <DigitalPin_SetDIr+0x38>
    2e78:	42 83       	std	Z+2, r20	; 0x02
    2e7a:	08 95       	ret

00002e7c <DigitalPin_SetValue>:
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	ed 91       	ld	r30, X+
    2e80:	fc 91       	ld	r31, X
    2e82:	11 97       	sbiw	r26, 0x01	; 1
    2e84:	21 e0       	ldi	r18, 0x01	; 1
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	a9 01       	movw	r20, r18
    2e8a:	12 96       	adiw	r26, 0x02	; 2
    2e8c:	0c 90       	ld	r0, X
    2e8e:	02 c0       	rjmp	.+4      	; 0x2e94 <DigitalPin_SetValue+0x18>
    2e90:	44 0f       	add	r20, r20
    2e92:	55 1f       	adc	r21, r21
    2e94:	0a 94       	dec	r0
    2e96:	e2 f7       	brpl	.-8      	; 0x2e90 <DigitalPin_SetValue+0x14>
    2e98:	45 83       	std	Z+5, r20	; 0x05
    2e9a:	08 95       	ret

00002e9c <DigitalPin_ClearValue>:
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	ed 91       	ld	r30, X+
    2ea0:	fc 91       	ld	r31, X
    2ea2:	11 97       	sbiw	r26, 0x01	; 1
    2ea4:	21 e0       	ldi	r18, 0x01	; 1
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	a9 01       	movw	r20, r18
    2eaa:	12 96       	adiw	r26, 0x02	; 2
    2eac:	0c 90       	ld	r0, X
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <DigitalPin_ClearValue+0x18>
    2eb0:	44 0f       	add	r20, r20
    2eb2:	55 1f       	adc	r21, r21
    2eb4:	0a 94       	dec	r0
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <DigitalPin_ClearValue+0x14>
    2eb8:	46 83       	std	Z+6, r20	; 0x06
    2eba:	08 95       	ret

00002ebc <DigitalPin_GetValue>:
}
bool DigitalPin_GetValue(DigitalPin_t *pin){
	bool pinValue;
	if((pin->_port->IN)&(1<<(pin->_pin))) pinValue = 1 ;
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	ed 91       	ld	r30, X+
    2ec0:	fc 91       	ld	r31, X
    2ec2:	11 97       	sbiw	r26, 0x01	; 1
    2ec4:	20 85       	ldd	r18, Z+8	; 0x08
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	f9 01       	movw	r30, r18
    2eca:	12 96       	adiw	r26, 0x02	; 2
    2ecc:	0c 90       	ld	r0, X
    2ece:	02 c0       	rjmp	.+4      	; 0x2ed4 <DigitalPin_GetValue+0x18>
    2ed0:	f5 95       	asr	r31
    2ed2:	e7 95       	ror	r30
    2ed4:	0a 94       	dec	r0
    2ed6:	e2 f7       	brpl	.-8      	; 0x2ed0 <DigitalPin_GetValue+0x14>
    2ed8:	cf 01       	movw	r24, r30
	else pinValue = 0;
	return pinValue;
    2eda:	81 70       	andi	r24, 0x01	; 1
    2edc:	08 95       	ret

00002ede <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    2ede:	1f 92       	push	r1
    2ee0:	0f 92       	push	r0
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	0f 92       	push	r0
    2ee6:	11 24       	eor	r1, r1

}
    2ee8:	0f 90       	pop	r0
    2eea:	0f be       	out	0x3f, r0	; 63
    2eec:	0f 90       	pop	r0
    2eee:	1f 90       	pop	r1
    2ef0:	18 95       	reti

00002ef2 <__vector_27>:

ISR(USARTC0_TXC_vect){
    2ef2:	1f 92       	push	r1
    2ef4:	0f 92       	push	r0
    2ef6:	0f b6       	in	r0, 0x3f	; 63
    2ef8:	0f 92       	push	r0
    2efa:	11 24       	eor	r1, r1
	
}
    2efc:	0f 90       	pop	r0
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	0f 90       	pop	r0
    2f02:	1f 90       	pop	r1
    2f04:	18 95       	reti

00002f06 <__vector_26>:

ISR(USARTC0_DRE_vect){
    2f06:	1f 92       	push	r1
    2f08:	0f 92       	push	r0
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	0f 92       	push	r0
    2f0e:	11 24       	eor	r1, r1
	
}
    2f10:	0f 90       	pop	r0
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	0f 90       	pop	r0
    2f16:	1f 90       	pop	r1
    2f18:	18 95       	reti

00002f1a <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    2f1a:	1f 92       	push	r1
    2f1c:	0f 92       	push	r0
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	0f 92       	push	r0
    2f22:	11 24       	eor	r1, r1
	
}
    2f24:	0f 90       	pop	r0
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	0f 90       	pop	r0
    2f2a:	1f 90       	pop	r1
    2f2c:	18 95       	reti

00002f2e <__vector_30>:

ISR(USARTC1_TXC_vect){
    2f2e:	1f 92       	push	r1
    2f30:	0f 92       	push	r0
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	0f 92       	push	r0
    2f36:	11 24       	eor	r1, r1
	
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	0f 90       	pop	r0
    2f3e:	1f 90       	pop	r1
    2f40:	18 95       	reti

00002f42 <__vector_29>:

ISR(USARTC1_DRE_vect){
    2f42:	1f 92       	push	r1
    2f44:	0f 92       	push	r0
    2f46:	0f b6       	in	r0, 0x3f	; 63
    2f48:	0f 92       	push	r0
    2f4a:	11 24       	eor	r1, r1
	
}
    2f4c:	0f 90       	pop	r0
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	0f 90       	pop	r0
    2f52:	1f 90       	pop	r1
    2f54:	18 95       	reti

00002f56 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    2f56:	1f 92       	push	r1
    2f58:	0f 92       	push	r0
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	0f 92       	push	r0
    2f5e:	11 24       	eor	r1, r1
	
}
    2f60:	0f 90       	pop	r0
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	0f 90       	pop	r0
    2f66:	1f 90       	pop	r1
    2f68:	18 95       	reti

00002f6a <__vector_90>:

ISR(USARTD0_TXC_vect){
    2f6a:	1f 92       	push	r1
    2f6c:	0f 92       	push	r0
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	0f 92       	push	r0
    2f72:	11 24       	eor	r1, r1
	
}
    2f74:	0f 90       	pop	r0
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	0f 90       	pop	r0
    2f7a:	1f 90       	pop	r1
    2f7c:	18 95       	reti

00002f7e <__vector_89>:

ISR(USARTD0_DRE_vect){
    2f7e:	1f 92       	push	r1
    2f80:	0f 92       	push	r0
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	0f 92       	push	r0
    2f86:	11 24       	eor	r1, r1
	
}
    2f88:	0f 90       	pop	r0
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	0f 90       	pop	r0
    2f8e:	1f 90       	pop	r1
    2f90:	18 95       	reti

00002f92 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    2f92:	1f 92       	push	r1
    2f94:	0f 92       	push	r0
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	0f 92       	push	r0
    2f9a:	11 24       	eor	r1, r1
	
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	0f 90       	pop	r0
    2fa2:	1f 90       	pop	r1
    2fa4:	18 95       	reti

00002fa6 <__vector_60>:

ISR(USARTE0_TXC_vect){
    2fa6:	1f 92       	push	r1
    2fa8:	0f 92       	push	r0
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	0f 92       	push	r0
    2fae:	11 24       	eor	r1, r1
	
}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	0f 90       	pop	r0
    2fb6:	1f 90       	pop	r1
    2fb8:	18 95       	reti

00002fba <__vector_59>:

ISR(USARTE0_DRE_vect){
    2fba:	1f 92       	push	r1
    2fbc:	0f 92       	push	r0
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	0f 92       	push	r0
    2fc2:	11 24       	eor	r1, r1
	
}
    2fc4:	0f 90       	pop	r0
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	0f 90       	pop	r0
    2fca:	1f 90       	pop	r1
    2fcc:	18 95       	reti

00002fce <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    2fce:	0f 93       	push	r16
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	1f 92       	push	r1
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	2f b7       	in	r18, 0x3f	; 63
    2fdc:	29 83       	std	Y+1, r18	; 0x01
    2fde:	f8 94       	cli
    2fe0:	1b be       	out	0x3b, r1	; 59
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	08 ed       	ldi	r16, 0xD8	; 216
    2fe6:	04 bf       	out	0x34, r16	; 52
    2fe8:	60 83       	st	Z, r22
    2fea:	89 81       	ldd	r24, Y+1	; 0x01
    2fec:	8f bf       	out	0x3f, r24	; 63
    2fee:	0f 90       	pop	r0
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	0f 91       	pop	r16
    2ff6:	08 95       	ret

00002ff8 <CLKSYS_Disable>:
    2ff8:	e0 e5       	ldi	r30, 0x50	; 80
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	90 81       	ld	r25, Z
    2ffe:	28 2f       	mov	r18, r24
    3000:	20 95       	com	r18
    3002:	92 23       	and	r25, r18
    3004:	90 83       	st	Z, r25
    3006:	90 81       	ld	r25, Z
    3008:	89 23       	and	r24, r25
    300a:	08 95       	ret

0000300c <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    300c:	0f 93       	push	r16
    300e:	1f 93       	push	r17
    3010:	cf 93       	push	r28
    3012:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3014:	00 e4       	ldi	r16, 0x40	; 64
    3016:	10 e0       	ldi	r17, 0x00	; 0
    3018:	f8 01       	movw	r30, r16
    301a:	60 81       	ld	r22, Z
    301c:	68 7f       	andi	r22, 0xF8	; 248
    301e:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    3020:	80 e4       	ldi	r24, 0x40	; 64
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	0e 94 e7 17 	call	0x2fce	; 0x2fce <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    3028:	f8 01       	movw	r30, r16
    302a:	80 81       	ld	r24, Z
	return clkCtrl;
}
    302c:	8c 23       	and	r24, r28
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	08 95       	ret

00003036 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    3036:	fc 01       	movw	r30, r24
    3038:	90 81       	ld	r25, Z
    303a:	90 7f       	andi	r25, 0xF0	; 240
    303c:	69 2b       	or	r22, r25
    303e:	60 83       	st	Z, r22
    3040:	08 95       	ret

00003042 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    3042:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    3044:	96 81       	ldd	r25, Z+6	; 0x06
    3046:	9c 7f       	andi	r25, 0xFC	; 252
    3048:	69 2b       	or	r22, r25
    304a:	66 83       	std	Z+6, r22	; 0x06
    304c:	08 95       	ret

0000304e <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    304e:	fc 01       	movw	r30, r24
	twi->interface = module;
    3050:	60 83       	st	Z, r22
    3052:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    3054:	48 63       	ori	r20, 0x38	; 56
    3056:	db 01       	movw	r26, r22
    3058:	11 96       	adiw	r26, 0x01	; 1
    305a:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    305c:	a0 81       	ld	r26, Z
    305e:	b1 81       	ldd	r27, Z+1	; 0x01
    3060:	15 96       	adiw	r26, 0x05	; 5
    3062:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3064:	01 90       	ld	r0, Z+
    3066:	f0 81       	ld	r31, Z
    3068:	e0 2d       	mov	r30, r0
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	84 83       	std	Z+4, r24	; 0x04
    306e:	08 95       	ret

00003070 <vfprintf>:
    3070:	2f 92       	push	r2
    3072:	3f 92       	push	r3
    3074:	4f 92       	push	r4
    3076:	5f 92       	push	r5
    3078:	6f 92       	push	r6
    307a:	7f 92       	push	r7
    307c:	8f 92       	push	r8
    307e:	9f 92       	push	r9
    3080:	af 92       	push	r10
    3082:	bf 92       	push	r11
    3084:	cf 92       	push	r12
    3086:	df 92       	push	r13
    3088:	ef 92       	push	r14
    308a:	ff 92       	push	r15
    308c:	0f 93       	push	r16
    308e:	1f 93       	push	r17
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	63 97       	sbiw	r28, 0x13	; 19
    309a:	cd bf       	out	0x3d, r28	; 61
    309c:	de bf       	out	0x3e, r29	; 62
    309e:	6c 01       	movw	r12, r24
    30a0:	4b 01       	movw	r8, r22
    30a2:	2a 01       	movw	r4, r20
    30a4:	fc 01       	movw	r30, r24
    30a6:	16 82       	std	Z+6, r1	; 0x06
    30a8:	17 82       	std	Z+7, r1	; 0x07
    30aa:	83 81       	ldd	r24, Z+3	; 0x03
    30ac:	81 ff       	sbrs	r24, 1
    30ae:	43 c3       	rjmp	.+1670   	; 0x3736 <vfprintf+0x6c6>
    30b0:	ae 01       	movw	r20, r28
    30b2:	4f 5f       	subi	r20, 0xFF	; 255
    30b4:	5f 4f       	sbci	r21, 0xFF	; 255
    30b6:	3a 01       	movw	r6, r20
    30b8:	f6 01       	movw	r30, r12
    30ba:	93 81       	ldd	r25, Z+3	; 0x03
    30bc:	f4 01       	movw	r30, r8
    30be:	93 fd       	sbrc	r25, 3
    30c0:	85 91       	lpm	r24, Z+
    30c2:	93 ff       	sbrs	r25, 3
    30c4:	81 91       	ld	r24, Z+
    30c6:	4f 01       	movw	r8, r30
    30c8:	88 23       	and	r24, r24
    30ca:	09 f4       	brne	.+2      	; 0x30ce <vfprintf+0x5e>
    30cc:	30 c3       	rjmp	.+1632   	; 0x372e <vfprintf+0x6be>
    30ce:	85 32       	cpi	r24, 0x25	; 37
    30d0:	39 f4       	brne	.+14     	; 0x30e0 <vfprintf+0x70>
    30d2:	93 fd       	sbrc	r25, 3
    30d4:	85 91       	lpm	r24, Z+
    30d6:	93 ff       	sbrs	r25, 3
    30d8:	81 91       	ld	r24, Z+
    30da:	4f 01       	movw	r8, r30
    30dc:	85 32       	cpi	r24, 0x25	; 37
    30de:	39 f4       	brne	.+14     	; 0x30ee <vfprintf+0x7e>
    30e0:	b6 01       	movw	r22, r12
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    30e8:	52 01       	movw	r10, r4
    30ea:	25 01       	movw	r4, r10
    30ec:	e5 cf       	rjmp	.-54     	; 0x30b8 <vfprintf+0x48>
    30ee:	10 e0       	ldi	r17, 0x00	; 0
    30f0:	f1 2c       	mov	r15, r1
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	20 32       	cpi	r18, 0x20	; 32
    30f6:	a0 f4       	brcc	.+40     	; 0x3120 <vfprintf+0xb0>
    30f8:	8b 32       	cpi	r24, 0x2B	; 43
    30fa:	69 f0       	breq	.+26     	; 0x3116 <vfprintf+0xa6>
    30fc:	30 f4       	brcc	.+12     	; 0x310a <vfprintf+0x9a>
    30fe:	80 32       	cpi	r24, 0x20	; 32
    3100:	59 f0       	breq	.+22     	; 0x3118 <vfprintf+0xa8>
    3102:	83 32       	cpi	r24, 0x23	; 35
    3104:	69 f4       	brne	.+26     	; 0x3120 <vfprintf+0xb0>
    3106:	20 61       	ori	r18, 0x10	; 16
    3108:	2c c0       	rjmp	.+88     	; 0x3162 <vfprintf+0xf2>
    310a:	8d 32       	cpi	r24, 0x2D	; 45
    310c:	39 f0       	breq	.+14     	; 0x311c <vfprintf+0xac>
    310e:	80 33       	cpi	r24, 0x30	; 48
    3110:	39 f4       	brne	.+14     	; 0x3120 <vfprintf+0xb0>
    3112:	21 60       	ori	r18, 0x01	; 1
    3114:	26 c0       	rjmp	.+76     	; 0x3162 <vfprintf+0xf2>
    3116:	22 60       	ori	r18, 0x02	; 2
    3118:	24 60       	ori	r18, 0x04	; 4
    311a:	23 c0       	rjmp	.+70     	; 0x3162 <vfprintf+0xf2>
    311c:	28 60       	ori	r18, 0x08	; 8
    311e:	21 c0       	rjmp	.+66     	; 0x3162 <vfprintf+0xf2>
    3120:	27 fd       	sbrc	r18, 7
    3122:	27 c0       	rjmp	.+78     	; 0x3172 <vfprintf+0x102>
    3124:	30 ed       	ldi	r19, 0xD0	; 208
    3126:	38 0f       	add	r19, r24
    3128:	3a 30       	cpi	r19, 0x0A	; 10
    312a:	78 f4       	brcc	.+30     	; 0x314a <vfprintf+0xda>
    312c:	26 ff       	sbrs	r18, 6
    312e:	06 c0       	rjmp	.+12     	; 0x313c <vfprintf+0xcc>
    3130:	fa e0       	ldi	r31, 0x0A	; 10
    3132:	1f 9f       	mul	r17, r31
    3134:	30 0d       	add	r19, r0
    3136:	11 24       	eor	r1, r1
    3138:	13 2f       	mov	r17, r19
    313a:	13 c0       	rjmp	.+38     	; 0x3162 <vfprintf+0xf2>
    313c:	4a e0       	ldi	r20, 0x0A	; 10
    313e:	f4 9e       	mul	r15, r20
    3140:	30 0d       	add	r19, r0
    3142:	11 24       	eor	r1, r1
    3144:	f3 2e       	mov	r15, r19
    3146:	20 62       	ori	r18, 0x20	; 32
    3148:	0c c0       	rjmp	.+24     	; 0x3162 <vfprintf+0xf2>
    314a:	8e 32       	cpi	r24, 0x2E	; 46
    314c:	21 f4       	brne	.+8      	; 0x3156 <vfprintf+0xe6>
    314e:	26 fd       	sbrc	r18, 6
    3150:	ee c2       	rjmp	.+1500   	; 0x372e <vfprintf+0x6be>
    3152:	20 64       	ori	r18, 0x40	; 64
    3154:	06 c0       	rjmp	.+12     	; 0x3162 <vfprintf+0xf2>
    3156:	8c 36       	cpi	r24, 0x6C	; 108
    3158:	11 f4       	brne	.+4      	; 0x315e <vfprintf+0xee>
    315a:	20 68       	ori	r18, 0x80	; 128
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <vfprintf+0xf2>
    315e:	88 36       	cpi	r24, 0x68	; 104
    3160:	41 f4       	brne	.+16     	; 0x3172 <vfprintf+0x102>
    3162:	f4 01       	movw	r30, r8
    3164:	93 fd       	sbrc	r25, 3
    3166:	85 91       	lpm	r24, Z+
    3168:	93 ff       	sbrs	r25, 3
    316a:	81 91       	ld	r24, Z+
    316c:	4f 01       	movw	r8, r30
    316e:	81 11       	cpse	r24, r1
    3170:	c1 cf       	rjmp	.-126    	; 0x30f4 <vfprintf+0x84>
    3172:	9b eb       	ldi	r25, 0xBB	; 187
    3174:	98 0f       	add	r25, r24
    3176:	93 30       	cpi	r25, 0x03	; 3
    3178:	18 f4       	brcc	.+6      	; 0x3180 <vfprintf+0x110>
    317a:	20 61       	ori	r18, 0x10	; 16
    317c:	80 5e       	subi	r24, 0xE0	; 224
    317e:	06 c0       	rjmp	.+12     	; 0x318c <vfprintf+0x11c>
    3180:	9b e9       	ldi	r25, 0x9B	; 155
    3182:	98 0f       	add	r25, r24
    3184:	93 30       	cpi	r25, 0x03	; 3
    3186:	08 f0       	brcs	.+2      	; 0x318a <vfprintf+0x11a>
    3188:	71 c1       	rjmp	.+738    	; 0x346c <vfprintf+0x3fc>
    318a:	2f 7e       	andi	r18, 0xEF	; 239
    318c:	26 ff       	sbrs	r18, 6
    318e:	16 e0       	ldi	r17, 0x06	; 6
    3190:	2f 73       	andi	r18, 0x3F	; 63
    3192:	32 2e       	mov	r3, r18
    3194:	85 36       	cpi	r24, 0x65	; 101
    3196:	19 f4       	brne	.+6      	; 0x319e <vfprintf+0x12e>
    3198:	20 64       	ori	r18, 0x40	; 64
    319a:	32 2e       	mov	r3, r18
    319c:	08 c0       	rjmp	.+16     	; 0x31ae <vfprintf+0x13e>
    319e:	86 36       	cpi	r24, 0x66	; 102
    31a0:	21 f4       	brne	.+8      	; 0x31aa <vfprintf+0x13a>
    31a2:	f2 2f       	mov	r31, r18
    31a4:	f0 68       	ori	r31, 0x80	; 128
    31a6:	3f 2e       	mov	r3, r31
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <vfprintf+0x13e>
    31aa:	11 11       	cpse	r17, r1
    31ac:	11 50       	subi	r17, 0x01	; 1
    31ae:	37 fe       	sbrs	r3, 7
    31b0:	07 c0       	rjmp	.+14     	; 0x31c0 <vfprintf+0x150>
    31b2:	1c 33       	cpi	r17, 0x3C	; 60
    31b4:	50 f4       	brcc	.+20     	; 0x31ca <vfprintf+0x15a>
    31b6:	ee 24       	eor	r14, r14
    31b8:	e3 94       	inc	r14
    31ba:	e1 0e       	add	r14, r17
    31bc:	27 e0       	ldi	r18, 0x07	; 7
    31be:	0b c0       	rjmp	.+22     	; 0x31d6 <vfprintf+0x166>
    31c0:	18 30       	cpi	r17, 0x08	; 8
    31c2:	38 f0       	brcs	.+14     	; 0x31d2 <vfprintf+0x162>
    31c4:	27 e0       	ldi	r18, 0x07	; 7
    31c6:	17 e0       	ldi	r17, 0x07	; 7
    31c8:	05 c0       	rjmp	.+10     	; 0x31d4 <vfprintf+0x164>
    31ca:	27 e0       	ldi	r18, 0x07	; 7
    31cc:	4c e3       	ldi	r20, 0x3C	; 60
    31ce:	e4 2e       	mov	r14, r20
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <vfprintf+0x166>
    31d2:	21 2f       	mov	r18, r17
    31d4:	e1 2c       	mov	r14, r1
    31d6:	52 01       	movw	r10, r4
    31d8:	44 e0       	ldi	r20, 0x04	; 4
    31da:	a4 0e       	add	r10, r20
    31dc:	b1 1c       	adc	r11, r1
    31de:	f2 01       	movw	r30, r4
    31e0:	60 81       	ld	r22, Z
    31e2:	71 81       	ldd	r23, Z+1	; 0x01
    31e4:	82 81       	ldd	r24, Z+2	; 0x02
    31e6:	93 81       	ldd	r25, Z+3	; 0x03
    31e8:	0e 2d       	mov	r16, r14
    31ea:	a3 01       	movw	r20, r6
    31ec:	0e 94 43 1c 	call	0x3886	; 0x3886 <__ftoa_engine>
    31f0:	2c 01       	movw	r4, r24
    31f2:	09 81       	ldd	r16, Y+1	; 0x01
    31f4:	00 ff       	sbrs	r16, 0
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <vfprintf+0x18c>
    31f8:	03 ff       	sbrs	r16, 3
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <vfprintf+0x19a>
    31fc:	31 fc       	sbrc	r3, 1
    31fe:	08 c0       	rjmp	.+16     	; 0x3210 <vfprintf+0x1a0>
    3200:	32 fe       	sbrs	r3, 2
    3202:	09 c0       	rjmp	.+18     	; 0x3216 <vfprintf+0x1a6>
    3204:	30 e2       	ldi	r19, 0x20	; 32
    3206:	23 2e       	mov	r2, r19
    3208:	07 c0       	rjmp	.+14     	; 0x3218 <vfprintf+0x1a8>
    320a:	2d e2       	ldi	r18, 0x2D	; 45
    320c:	22 2e       	mov	r2, r18
    320e:	04 c0       	rjmp	.+8      	; 0x3218 <vfprintf+0x1a8>
    3210:	9b e2       	ldi	r25, 0x2B	; 43
    3212:	29 2e       	mov	r2, r25
    3214:	01 c0       	rjmp	.+2      	; 0x3218 <vfprintf+0x1a8>
    3216:	21 2c       	mov	r2, r1
    3218:	80 2f       	mov	r24, r16
    321a:	8c 70       	andi	r24, 0x0C	; 12
    321c:	19 f0       	breq	.+6      	; 0x3224 <vfprintf+0x1b4>
    321e:	21 10       	cpse	r2, r1
    3220:	68 c2       	rjmp	.+1232   	; 0x36f2 <vfprintf+0x682>
    3222:	a8 c2       	rjmp	.+1360   	; 0x3774 <vfprintf+0x704>
    3224:	37 fe       	sbrs	r3, 7
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <vfprintf+0x1d6>
    3228:	e4 0c       	add	r14, r4
    322a:	04 ff       	sbrs	r16, 4
    322c:	04 c0       	rjmp	.+8      	; 0x3236 <vfprintf+0x1c6>
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	81 33       	cpi	r24, 0x31	; 49
    3232:	09 f4       	brne	.+2      	; 0x3236 <vfprintf+0x1c6>
    3234:	ea 94       	dec	r14
    3236:	1e 14       	cp	r1, r14
    3238:	74 f5       	brge	.+92     	; 0x3296 <vfprintf+0x226>
    323a:	f8 e0       	ldi	r31, 0x08	; 8
    323c:	fe 15       	cp	r31, r14
    323e:	78 f5       	brcc	.+94     	; 0x329e <vfprintf+0x22e>
    3240:	88 e0       	ldi	r24, 0x08	; 8
    3242:	e8 2e       	mov	r14, r24
    3244:	2c c0       	rjmp	.+88     	; 0x329e <vfprintf+0x22e>
    3246:	36 fc       	sbrc	r3, 6
    3248:	2a c0       	rjmp	.+84     	; 0x329e <vfprintf+0x22e>
    324a:	81 2f       	mov	r24, r17
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	84 15       	cp	r24, r4
    3250:	95 05       	cpc	r25, r5
    3252:	9c f0       	brlt	.+38     	; 0x327a <vfprintf+0x20a>
    3254:	2c ef       	ldi	r18, 0xFC	; 252
    3256:	42 16       	cp	r4, r18
    3258:	2f ef       	ldi	r18, 0xFF	; 255
    325a:	52 06       	cpc	r5, r18
    325c:	74 f0       	brlt	.+28     	; 0x327a <vfprintf+0x20a>
    325e:	43 2d       	mov	r20, r3
    3260:	40 68       	ori	r20, 0x80	; 128
    3262:	34 2e       	mov	r3, r20
    3264:	0a c0       	rjmp	.+20     	; 0x327a <vfprintf+0x20a>
    3266:	e2 e0       	ldi	r30, 0x02	; 2
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	ec 0f       	add	r30, r28
    326c:	fd 1f       	adc	r31, r29
    326e:	e1 0f       	add	r30, r17
    3270:	f1 1d       	adc	r31, r1
    3272:	80 81       	ld	r24, Z
    3274:	80 33       	cpi	r24, 0x30	; 48
    3276:	19 f4       	brne	.+6      	; 0x327e <vfprintf+0x20e>
    3278:	11 50       	subi	r17, 0x01	; 1
    327a:	11 11       	cpse	r17, r1
    327c:	f4 cf       	rjmp	.-24     	; 0x3266 <vfprintf+0x1f6>
    327e:	37 fe       	sbrs	r3, 7
    3280:	0e c0       	rjmp	.+28     	; 0x329e <vfprintf+0x22e>
    3282:	ee 24       	eor	r14, r14
    3284:	e3 94       	inc	r14
    3286:	e1 0e       	add	r14, r17
    3288:	81 2f       	mov	r24, r17
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	48 16       	cp	r4, r24
    328e:	59 06       	cpc	r5, r25
    3290:	2c f4       	brge	.+10     	; 0x329c <vfprintf+0x22c>
    3292:	14 19       	sub	r17, r4
    3294:	04 c0       	rjmp	.+8      	; 0x329e <vfprintf+0x22e>
    3296:	ee 24       	eor	r14, r14
    3298:	e3 94       	inc	r14
    329a:	01 c0       	rjmp	.+2      	; 0x329e <vfprintf+0x22e>
    329c:	10 e0       	ldi	r17, 0x00	; 0
    329e:	37 fe       	sbrs	r3, 7
    32a0:	06 c0       	rjmp	.+12     	; 0x32ae <vfprintf+0x23e>
    32a2:	14 14       	cp	r1, r4
    32a4:	15 04       	cpc	r1, r5
    32a6:	34 f4       	brge	.+12     	; 0x32b4 <vfprintf+0x244>
    32a8:	c2 01       	movw	r24, r4
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	05 c0       	rjmp	.+10     	; 0x32b8 <vfprintf+0x248>
    32ae:	85 e0       	ldi	r24, 0x05	; 5
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <vfprintf+0x248>
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	21 10       	cpse	r2, r1
    32ba:	01 96       	adiw	r24, 0x01	; 1
    32bc:	11 23       	and	r17, r17
    32be:	31 f0       	breq	.+12     	; 0x32cc <vfprintf+0x25c>
    32c0:	21 2f       	mov	r18, r17
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	2f 5f       	subi	r18, 0xFF	; 255
    32c6:	3f 4f       	sbci	r19, 0xFF	; 255
    32c8:	82 0f       	add	r24, r18
    32ca:	93 1f       	adc	r25, r19
    32cc:	2f 2d       	mov	r18, r15
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	82 17       	cp	r24, r18
    32d2:	93 07       	cpc	r25, r19
    32d4:	14 f4       	brge	.+4      	; 0x32da <vfprintf+0x26a>
    32d6:	f8 1a       	sub	r15, r24
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <vfprintf+0x26c>
    32da:	f1 2c       	mov	r15, r1
    32dc:	83 2d       	mov	r24, r3
    32de:	89 70       	andi	r24, 0x09	; 9
    32e0:	49 f4       	brne	.+18     	; 0x32f4 <vfprintf+0x284>
    32e2:	ff 20       	and	r15, r15
    32e4:	39 f0       	breq	.+14     	; 0x32f4 <vfprintf+0x284>
    32e6:	b6 01       	movw	r22, r12
    32e8:	80 e2       	ldi	r24, 0x20	; 32
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    32f0:	fa 94       	dec	r15
    32f2:	f7 cf       	rjmp	.-18     	; 0x32e2 <vfprintf+0x272>
    32f4:	22 20       	and	r2, r2
    32f6:	29 f0       	breq	.+10     	; 0x3302 <vfprintf+0x292>
    32f8:	b6 01       	movw	r22, r12
    32fa:	82 2d       	mov	r24, r2
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3302:	33 fc       	sbrc	r3, 3
    3304:	09 c0       	rjmp	.+18     	; 0x3318 <vfprintf+0x2a8>
    3306:	ff 20       	and	r15, r15
    3308:	39 f0       	breq	.+14     	; 0x3318 <vfprintf+0x2a8>
    330a:	b6 01       	movw	r22, r12
    330c:	80 e3       	ldi	r24, 0x30	; 48
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3314:	fa 94       	dec	r15
    3316:	f7 cf       	rjmp	.-18     	; 0x3306 <vfprintf+0x296>
    3318:	37 fe       	sbrs	r3, 7
    331a:	5a c0       	rjmp	.+180    	; 0x33d0 <vfprintf+0x360>
    331c:	94 2d       	mov	r25, r4
    331e:	85 2d       	mov	r24, r5
    3320:	57 fe       	sbrs	r5, 7
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <vfprintf+0x2b8>
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	29 2e       	mov	r2, r25
    332a:	38 2e       	mov	r3, r24
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	a2 01       	movw	r20, r4
    3332:	4e 19       	sub	r20, r14
    3334:	51 09       	sbc	r21, r1
    3336:	4c 87       	std	Y+12, r20	; 0x0c
    3338:	5d 87       	std	Y+13, r21	; 0x0d
    333a:	a2 01       	movw	r20, r4
    333c:	42 19       	sub	r20, r2
    333e:	53 09       	sbc	r21, r3
    3340:	4e 87       	std	Y+14, r20	; 0x0e
    3342:	5f 87       	std	Y+15, r21	; 0x0f
    3344:	61 2f       	mov	r22, r17
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	44 27       	eor	r20, r20
    334a:	55 27       	eor	r21, r21
    334c:	46 1b       	sub	r20, r22
    334e:	57 0b       	sbc	r21, r23
    3350:	48 8b       	std	Y+16, r20	; 0x10
    3352:	59 8b       	std	Y+17, r21	; 0x11
    3354:	5f ef       	ldi	r21, 0xFF	; 255
    3356:	25 16       	cp	r2, r21
    3358:	35 06       	cpc	r3, r21
    335a:	49 f4       	brne	.+18     	; 0x336e <vfprintf+0x2fe>
    335c:	b6 01       	movw	r22, r12
    335e:	8e e2       	ldi	r24, 0x2E	; 46
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	2a 8b       	std	Y+18, r18	; 0x12
    3364:	3b 8b       	std	Y+19, r19	; 0x13
    3366:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    336a:	3b 89       	ldd	r19, Y+19	; 0x13
    336c:	2a 89       	ldd	r18, Y+18	; 0x12
    336e:	42 14       	cp	r4, r2
    3370:	53 04       	cpc	r5, r3
    3372:	6c f0       	brlt	.+26     	; 0x338e <vfprintf+0x31e>
    3374:	4c 85       	ldd	r20, Y+12	; 0x0c
    3376:	5d 85       	ldd	r21, Y+13	; 0x0d
    3378:	42 15       	cp	r20, r2
    337a:	53 05       	cpc	r21, r3
    337c:	44 f4       	brge	.+16     	; 0x338e <vfprintf+0x31e>
    337e:	ee 85       	ldd	r30, Y+14	; 0x0e
    3380:	ff 85       	ldd	r31, Y+15	; 0x0f
    3382:	e2 0f       	add	r30, r18
    3384:	f3 1f       	adc	r31, r19
    3386:	e6 0d       	add	r30, r6
    3388:	f7 1d       	adc	r31, r7
    338a:	81 81       	ldd	r24, Z+1	; 0x01
    338c:	01 c0       	rjmp	.+2      	; 0x3390 <vfprintf+0x320>
    338e:	80 e3       	ldi	r24, 0x30	; 48
    3390:	51 e0       	ldi	r21, 0x01	; 1
    3392:	25 1a       	sub	r2, r21
    3394:	31 08       	sbc	r3, r1
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	48 89       	ldd	r20, Y+16	; 0x10
    339c:	59 89       	ldd	r21, Y+17	; 0x11
    339e:	24 16       	cp	r2, r20
    33a0:	35 06       	cpc	r3, r21
    33a2:	4c f0       	brlt	.+18     	; 0x33b6 <vfprintf+0x346>
    33a4:	b6 01       	movw	r22, r12
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	2a 8b       	std	Y+18, r18	; 0x12
    33aa:	3b 8b       	std	Y+19, r19	; 0x13
    33ac:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    33b0:	2a 89       	ldd	r18, Y+18	; 0x12
    33b2:	3b 89       	ldd	r19, Y+19	; 0x13
    33b4:	cf cf       	rjmp	.-98     	; 0x3354 <vfprintf+0x2e4>
    33b6:	24 14       	cp	r2, r4
    33b8:	35 04       	cpc	r3, r5
    33ba:	39 f4       	brne	.+14     	; 0x33ca <vfprintf+0x35a>
    33bc:	9a 81       	ldd	r25, Y+2	; 0x02
    33be:	96 33       	cpi	r25, 0x36	; 54
    33c0:	18 f4       	brcc	.+6      	; 0x33c8 <vfprintf+0x358>
    33c2:	95 33       	cpi	r25, 0x35	; 53
    33c4:	11 f4       	brne	.+4      	; 0x33ca <vfprintf+0x35a>
    33c6:	04 ff       	sbrs	r16, 4
    33c8:	81 e3       	ldi	r24, 0x31	; 49
    33ca:	b6 01       	movw	r22, r12
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	4b c0       	rjmp	.+150    	; 0x3466 <vfprintf+0x3f6>
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	81 33       	cpi	r24, 0x31	; 49
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <vfprintf+0x368>
    33d6:	0f 7e       	andi	r16, 0xEF	; 239
    33d8:	b6 01       	movw	r22, r12
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    33e0:	11 11       	cpse	r17, r1
    33e2:	05 c0       	rjmp	.+10     	; 0x33ee <vfprintf+0x37e>
    33e4:	34 fc       	sbrc	r3, 4
    33e6:	18 c0       	rjmp	.+48     	; 0x3418 <vfprintf+0x3a8>
    33e8:	85 e6       	ldi	r24, 0x65	; 101
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	17 c0       	rjmp	.+46     	; 0x341c <vfprintf+0x3ac>
    33ee:	b6 01       	movw	r22, r12
    33f0:	8e e2       	ldi	r24, 0x2E	; 46
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	ee 24       	eor	r14, r14
    33fc:	e3 94       	inc	r14
    33fe:	e8 0e       	add	r14, r24
    3400:	f3 01       	movw	r30, r6
    3402:	e8 0f       	add	r30, r24
    3404:	f1 1d       	adc	r31, r1
    3406:	80 81       	ld	r24, Z
    3408:	b6 01       	movw	r22, r12
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3410:	11 50       	subi	r17, 0x01	; 1
    3412:	8e 2d       	mov	r24, r14
    3414:	91 f7       	brne	.-28     	; 0x33fa <vfprintf+0x38a>
    3416:	e6 cf       	rjmp	.-52     	; 0x33e4 <vfprintf+0x374>
    3418:	85 e4       	ldi	r24, 0x45	; 69
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	b6 01       	movw	r22, r12
    341e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3422:	57 fc       	sbrc	r5, 7
    3424:	05 c0       	rjmp	.+10     	; 0x3430 <vfprintf+0x3c0>
    3426:	41 14       	cp	r4, r1
    3428:	51 04       	cpc	r5, r1
    342a:	39 f4       	brne	.+14     	; 0x343a <vfprintf+0x3ca>
    342c:	04 ff       	sbrs	r16, 4
    342e:	05 c0       	rjmp	.+10     	; 0x343a <vfprintf+0x3ca>
    3430:	51 94       	neg	r5
    3432:	41 94       	neg	r4
    3434:	51 08       	sbc	r5, r1
    3436:	8d e2       	ldi	r24, 0x2D	; 45
    3438:	01 c0       	rjmp	.+2      	; 0x343c <vfprintf+0x3cc>
    343a:	8b e2       	ldi	r24, 0x2B	; 43
    343c:	b6 01       	movw	r22, r12
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3444:	80 e3       	ldi	r24, 0x30	; 48
    3446:	9a e0       	ldi	r25, 0x0A	; 10
    3448:	49 16       	cp	r4, r25
    344a:	51 04       	cpc	r5, r1
    344c:	2c f0       	brlt	.+10     	; 0x3458 <vfprintf+0x3e8>
    344e:	8f 5f       	subi	r24, 0xFF	; 255
    3450:	5a e0       	ldi	r21, 0x0A	; 10
    3452:	45 1a       	sub	r4, r21
    3454:	51 08       	sbc	r5, r1
    3456:	f7 cf       	rjmp	.-18     	; 0x3446 <vfprintf+0x3d6>
    3458:	b6 01       	movw	r22, r12
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3460:	b6 01       	movw	r22, r12
    3462:	c2 01       	movw	r24, r4
    3464:	c0 96       	adiw	r24, 0x30	; 48
    3466:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    346a:	57 c1       	rjmp	.+686    	; 0x371a <vfprintf+0x6aa>
    346c:	83 36       	cpi	r24, 0x63	; 99
    346e:	31 f0       	breq	.+12     	; 0x347c <vfprintf+0x40c>
    3470:	83 37       	cpi	r24, 0x73	; 115
    3472:	79 f0       	breq	.+30     	; 0x3492 <vfprintf+0x422>
    3474:	83 35       	cpi	r24, 0x53	; 83
    3476:	09 f0       	breq	.+2      	; 0x347a <vfprintf+0x40a>
    3478:	58 c0       	rjmp	.+176    	; 0x352a <vfprintf+0x4ba>
    347a:	21 c0       	rjmp	.+66     	; 0x34be <vfprintf+0x44e>
    347c:	52 01       	movw	r10, r4
    347e:	e2 e0       	ldi	r30, 0x02	; 2
    3480:	ae 0e       	add	r10, r30
    3482:	b1 1c       	adc	r11, r1
    3484:	f2 01       	movw	r30, r4
    3486:	80 81       	ld	r24, Z
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	01 e0       	ldi	r16, 0x01	; 1
    348c:	10 e0       	ldi	r17, 0x00	; 0
    348e:	23 01       	movw	r4, r6
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <vfprintf+0x44a>
    3492:	52 01       	movw	r10, r4
    3494:	f2 e0       	ldi	r31, 0x02	; 2
    3496:	af 0e       	add	r10, r31
    3498:	b1 1c       	adc	r11, r1
    349a:	f2 01       	movw	r30, r4
    349c:	40 80       	ld	r4, Z
    349e:	51 80       	ldd	r5, Z+1	; 0x01
    34a0:	26 ff       	sbrs	r18, 6
    34a2:	03 c0       	rjmp	.+6      	; 0x34aa <vfprintf+0x43a>
    34a4:	61 2f       	mov	r22, r17
    34a6:	70 e0       	ldi	r23, 0x00	; 0
    34a8:	02 c0       	rjmp	.+4      	; 0x34ae <vfprintf+0x43e>
    34aa:	6f ef       	ldi	r22, 0xFF	; 255
    34ac:	7f ef       	ldi	r23, 0xFF	; 255
    34ae:	c2 01       	movw	r24, r4
    34b0:	2a 8b       	std	Y+18, r18	; 0x12
    34b2:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <strnlen>
    34b6:	8c 01       	movw	r16, r24
    34b8:	2a 89       	ldd	r18, Y+18	; 0x12
    34ba:	2f 77       	andi	r18, 0x7F	; 127
    34bc:	15 c0       	rjmp	.+42     	; 0x34e8 <vfprintf+0x478>
    34be:	52 01       	movw	r10, r4
    34c0:	f2 e0       	ldi	r31, 0x02	; 2
    34c2:	af 0e       	add	r10, r31
    34c4:	b1 1c       	adc	r11, r1
    34c6:	f2 01       	movw	r30, r4
    34c8:	40 80       	ld	r4, Z
    34ca:	51 80       	ldd	r5, Z+1	; 0x01
    34cc:	26 ff       	sbrs	r18, 6
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <vfprintf+0x466>
    34d0:	61 2f       	mov	r22, r17
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <vfprintf+0x46a>
    34d6:	6f ef       	ldi	r22, 0xFF	; 255
    34d8:	7f ef       	ldi	r23, 0xFF	; 255
    34da:	c2 01       	movw	r24, r4
    34dc:	2a 8b       	std	Y+18, r18	; 0x12
    34de:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <strnlen_P>
    34e2:	8c 01       	movw	r16, r24
    34e4:	2a 89       	ldd	r18, Y+18	; 0x12
    34e6:	20 68       	ori	r18, 0x80	; 128
    34e8:	32 2e       	mov	r3, r18
    34ea:	23 fd       	sbrc	r18, 3
    34ec:	1a c0       	rjmp	.+52     	; 0x3522 <vfprintf+0x4b2>
    34ee:	8f 2d       	mov	r24, r15
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	08 17       	cp	r16, r24
    34f4:	19 07       	cpc	r17, r25
    34f6:	a8 f4       	brcc	.+42     	; 0x3522 <vfprintf+0x4b2>
    34f8:	b6 01       	movw	r22, r12
    34fa:	80 e2       	ldi	r24, 0x20	; 32
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3502:	fa 94       	dec	r15
    3504:	f4 cf       	rjmp	.-24     	; 0x34ee <vfprintf+0x47e>
    3506:	f2 01       	movw	r30, r4
    3508:	37 fc       	sbrc	r3, 7
    350a:	85 91       	lpm	r24, Z+
    350c:	37 fe       	sbrs	r3, 7
    350e:	81 91       	ld	r24, Z+
    3510:	2f 01       	movw	r4, r30
    3512:	b6 01       	movw	r22, r12
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    351a:	f1 10       	cpse	r15, r1
    351c:	fa 94       	dec	r15
    351e:	01 50       	subi	r16, 0x01	; 1
    3520:	11 09       	sbc	r17, r1
    3522:	01 15       	cp	r16, r1
    3524:	11 05       	cpc	r17, r1
    3526:	79 f7       	brne	.-34     	; 0x3506 <vfprintf+0x496>
    3528:	f8 c0       	rjmp	.+496    	; 0x371a <vfprintf+0x6aa>
    352a:	84 36       	cpi	r24, 0x64	; 100
    352c:	11 f0       	breq	.+4      	; 0x3532 <vfprintf+0x4c2>
    352e:	89 36       	cpi	r24, 0x69	; 105
    3530:	59 f5       	brne	.+86     	; 0x3588 <vfprintf+0x518>
    3532:	52 01       	movw	r10, r4
    3534:	27 ff       	sbrs	r18, 7
    3536:	09 c0       	rjmp	.+18     	; 0x354a <vfprintf+0x4da>
    3538:	f4 e0       	ldi	r31, 0x04	; 4
    353a:	af 0e       	add	r10, r31
    353c:	b1 1c       	adc	r11, r1
    353e:	f2 01       	movw	r30, r4
    3540:	60 81       	ld	r22, Z
    3542:	71 81       	ldd	r23, Z+1	; 0x01
    3544:	82 81       	ldd	r24, Z+2	; 0x02
    3546:	93 81       	ldd	r25, Z+3	; 0x03
    3548:	0a c0       	rjmp	.+20     	; 0x355e <vfprintf+0x4ee>
    354a:	f2 e0       	ldi	r31, 0x02	; 2
    354c:	af 0e       	add	r10, r31
    354e:	b1 1c       	adc	r11, r1
    3550:	f2 01       	movw	r30, r4
    3552:	60 81       	ld	r22, Z
    3554:	71 81       	ldd	r23, Z+1	; 0x01
    3556:	07 2e       	mov	r0, r23
    3558:	00 0c       	add	r0, r0
    355a:	88 0b       	sbc	r24, r24
    355c:	99 0b       	sbc	r25, r25
    355e:	2f 76       	andi	r18, 0x6F	; 111
    3560:	32 2e       	mov	r3, r18
    3562:	97 ff       	sbrs	r25, 7
    3564:	09 c0       	rjmp	.+18     	; 0x3578 <vfprintf+0x508>
    3566:	90 95       	com	r25
    3568:	80 95       	com	r24
    356a:	70 95       	com	r23
    356c:	61 95       	neg	r22
    356e:	7f 4f       	sbci	r23, 0xFF	; 255
    3570:	8f 4f       	sbci	r24, 0xFF	; 255
    3572:	9f 4f       	sbci	r25, 0xFF	; 255
    3574:	20 68       	ori	r18, 0x80	; 128
    3576:	32 2e       	mov	r3, r18
    3578:	2a e0       	ldi	r18, 0x0A	; 10
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	a3 01       	movw	r20, r6
    357e:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__ultoa_invert>
    3582:	e8 2e       	mov	r14, r24
    3584:	e6 18       	sub	r14, r6
    3586:	3f c0       	rjmp	.+126    	; 0x3606 <vfprintf+0x596>
    3588:	02 2f       	mov	r16, r18
    358a:	85 37       	cpi	r24, 0x75	; 117
    358c:	21 f4       	brne	.+8      	; 0x3596 <vfprintf+0x526>
    358e:	0f 7e       	andi	r16, 0xEF	; 239
    3590:	2a e0       	ldi	r18, 0x0A	; 10
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	1d c0       	rjmp	.+58     	; 0x35d0 <vfprintf+0x560>
    3596:	09 7f       	andi	r16, 0xF9	; 249
    3598:	8f 36       	cpi	r24, 0x6F	; 111
    359a:	91 f0       	breq	.+36     	; 0x35c0 <vfprintf+0x550>
    359c:	18 f4       	brcc	.+6      	; 0x35a4 <vfprintf+0x534>
    359e:	88 35       	cpi	r24, 0x58	; 88
    35a0:	59 f0       	breq	.+22     	; 0x35b8 <vfprintf+0x548>
    35a2:	c5 c0       	rjmp	.+394    	; 0x372e <vfprintf+0x6be>
    35a4:	80 37       	cpi	r24, 0x70	; 112
    35a6:	19 f0       	breq	.+6      	; 0x35ae <vfprintf+0x53e>
    35a8:	88 37       	cpi	r24, 0x78	; 120
    35aa:	11 f0       	breq	.+4      	; 0x35b0 <vfprintf+0x540>
    35ac:	c0 c0       	rjmp	.+384    	; 0x372e <vfprintf+0x6be>
    35ae:	00 61       	ori	r16, 0x10	; 16
    35b0:	04 ff       	sbrs	r16, 4
    35b2:	09 c0       	rjmp	.+18     	; 0x35c6 <vfprintf+0x556>
    35b4:	04 60       	ori	r16, 0x04	; 4
    35b6:	07 c0       	rjmp	.+14     	; 0x35c6 <vfprintf+0x556>
    35b8:	24 ff       	sbrs	r18, 4
    35ba:	08 c0       	rjmp	.+16     	; 0x35cc <vfprintf+0x55c>
    35bc:	06 60       	ori	r16, 0x06	; 6
    35be:	06 c0       	rjmp	.+12     	; 0x35cc <vfprintf+0x55c>
    35c0:	28 e0       	ldi	r18, 0x08	; 8
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <vfprintf+0x560>
    35c6:	20 e1       	ldi	r18, 0x10	; 16
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	02 c0       	rjmp	.+4      	; 0x35d0 <vfprintf+0x560>
    35cc:	20 e1       	ldi	r18, 0x10	; 16
    35ce:	32 e0       	ldi	r19, 0x02	; 2
    35d0:	52 01       	movw	r10, r4
    35d2:	07 ff       	sbrs	r16, 7
    35d4:	09 c0       	rjmp	.+18     	; 0x35e8 <vfprintf+0x578>
    35d6:	f4 e0       	ldi	r31, 0x04	; 4
    35d8:	af 0e       	add	r10, r31
    35da:	b1 1c       	adc	r11, r1
    35dc:	f2 01       	movw	r30, r4
    35de:	60 81       	ld	r22, Z
    35e0:	71 81       	ldd	r23, Z+1	; 0x01
    35e2:	82 81       	ldd	r24, Z+2	; 0x02
    35e4:	93 81       	ldd	r25, Z+3	; 0x03
    35e6:	08 c0       	rjmp	.+16     	; 0x35f8 <vfprintf+0x588>
    35e8:	f2 e0       	ldi	r31, 0x02	; 2
    35ea:	af 0e       	add	r10, r31
    35ec:	b1 1c       	adc	r11, r1
    35ee:	f2 01       	movw	r30, r4
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	a3 01       	movw	r20, r6
    35fa:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <__ultoa_invert>
    35fe:	e8 2e       	mov	r14, r24
    3600:	e6 18       	sub	r14, r6
    3602:	0f 77       	andi	r16, 0x7F	; 127
    3604:	30 2e       	mov	r3, r16
    3606:	36 fe       	sbrs	r3, 6
    3608:	0b c0       	rjmp	.+22     	; 0x3620 <vfprintf+0x5b0>
    360a:	33 2d       	mov	r19, r3
    360c:	3e 7f       	andi	r19, 0xFE	; 254
    360e:	e1 16       	cp	r14, r17
    3610:	50 f4       	brcc	.+20     	; 0x3626 <vfprintf+0x5b6>
    3612:	34 fe       	sbrs	r3, 4
    3614:	0a c0       	rjmp	.+20     	; 0x362a <vfprintf+0x5ba>
    3616:	32 fc       	sbrc	r3, 2
    3618:	08 c0       	rjmp	.+16     	; 0x362a <vfprintf+0x5ba>
    361a:	33 2d       	mov	r19, r3
    361c:	3e 7e       	andi	r19, 0xEE	; 238
    361e:	05 c0       	rjmp	.+10     	; 0x362a <vfprintf+0x5ba>
    3620:	0e 2d       	mov	r16, r14
    3622:	33 2d       	mov	r19, r3
    3624:	03 c0       	rjmp	.+6      	; 0x362c <vfprintf+0x5bc>
    3626:	0e 2d       	mov	r16, r14
    3628:	01 c0       	rjmp	.+2      	; 0x362c <vfprintf+0x5bc>
    362a:	01 2f       	mov	r16, r17
    362c:	34 ff       	sbrs	r19, 4
    362e:	0c c0       	rjmp	.+24     	; 0x3648 <vfprintf+0x5d8>
    3630:	fe 01       	movw	r30, r28
    3632:	ee 0d       	add	r30, r14
    3634:	f1 1d       	adc	r31, r1
    3636:	80 81       	ld	r24, Z
    3638:	80 33       	cpi	r24, 0x30	; 48
    363a:	11 f4       	brne	.+4      	; 0x3640 <vfprintf+0x5d0>
    363c:	39 7e       	andi	r19, 0xE9	; 233
    363e:	08 c0       	rjmp	.+16     	; 0x3650 <vfprintf+0x5e0>
    3640:	32 ff       	sbrs	r19, 2
    3642:	05 c0       	rjmp	.+10     	; 0x364e <vfprintf+0x5de>
    3644:	0e 5f       	subi	r16, 0xFE	; 254
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <vfprintf+0x5e0>
    3648:	83 2f       	mov	r24, r19
    364a:	86 78       	andi	r24, 0x86	; 134
    364c:	09 f0       	breq	.+2      	; 0x3650 <vfprintf+0x5e0>
    364e:	0f 5f       	subi	r16, 0xFF	; 255
    3650:	33 fd       	sbrc	r19, 3
    3652:	13 c0       	rjmp	.+38     	; 0x367a <vfprintf+0x60a>
    3654:	30 ff       	sbrs	r19, 0
    3656:	06 c0       	rjmp	.+12     	; 0x3664 <vfprintf+0x5f4>
    3658:	1e 2d       	mov	r17, r14
    365a:	0f 15       	cp	r16, r15
    365c:	18 f4       	brcc	.+6      	; 0x3664 <vfprintf+0x5f4>
    365e:	1f 0d       	add	r17, r15
    3660:	10 1b       	sub	r17, r16
    3662:	0f 2d       	mov	r16, r15
    3664:	0f 15       	cp	r16, r15
    3666:	68 f4       	brcc	.+26     	; 0x3682 <vfprintf+0x612>
    3668:	b6 01       	movw	r22, r12
    366a:	80 e2       	ldi	r24, 0x20	; 32
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	3b 8b       	std	Y+19, r19	; 0x13
    3670:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3674:	0f 5f       	subi	r16, 0xFF	; 255
    3676:	3b 89       	ldd	r19, Y+19	; 0x13
    3678:	f5 cf       	rjmp	.-22     	; 0x3664 <vfprintf+0x5f4>
    367a:	0f 15       	cp	r16, r15
    367c:	10 f4       	brcc	.+4      	; 0x3682 <vfprintf+0x612>
    367e:	f0 1a       	sub	r15, r16
    3680:	01 c0       	rjmp	.+2      	; 0x3684 <vfprintf+0x614>
    3682:	f1 2c       	mov	r15, r1
    3684:	34 ff       	sbrs	r19, 4
    3686:	12 c0       	rjmp	.+36     	; 0x36ac <vfprintf+0x63c>
    3688:	b6 01       	movw	r22, r12
    368a:	80 e3       	ldi	r24, 0x30	; 48
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	3b 8b       	std	Y+19, r19	; 0x13
    3690:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3694:	3b 89       	ldd	r19, Y+19	; 0x13
    3696:	32 ff       	sbrs	r19, 2
    3698:	17 c0       	rjmp	.+46     	; 0x36c8 <vfprintf+0x658>
    369a:	31 fd       	sbrc	r19, 1
    369c:	03 c0       	rjmp	.+6      	; 0x36a4 <vfprintf+0x634>
    369e:	88 e7       	ldi	r24, 0x78	; 120
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	02 c0       	rjmp	.+4      	; 0x36a8 <vfprintf+0x638>
    36a4:	88 e5       	ldi	r24, 0x58	; 88
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	b6 01       	movw	r22, r12
    36aa:	0c c0       	rjmp	.+24     	; 0x36c4 <vfprintf+0x654>
    36ac:	83 2f       	mov	r24, r19
    36ae:	86 78       	andi	r24, 0x86	; 134
    36b0:	59 f0       	breq	.+22     	; 0x36c8 <vfprintf+0x658>
    36b2:	31 ff       	sbrs	r19, 1
    36b4:	02 c0       	rjmp	.+4      	; 0x36ba <vfprintf+0x64a>
    36b6:	8b e2       	ldi	r24, 0x2B	; 43
    36b8:	01 c0       	rjmp	.+2      	; 0x36bc <vfprintf+0x64c>
    36ba:	80 e2       	ldi	r24, 0x20	; 32
    36bc:	37 fd       	sbrc	r19, 7
    36be:	8d e2       	ldi	r24, 0x2D	; 45
    36c0:	b6 01       	movw	r22, r12
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    36c8:	e1 16       	cp	r14, r17
    36ca:	38 f4       	brcc	.+14     	; 0x36da <vfprintf+0x66a>
    36cc:	b6 01       	movw	r22, r12
    36ce:	80 e3       	ldi	r24, 0x30	; 48
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    36d6:	11 50       	subi	r17, 0x01	; 1
    36d8:	f7 cf       	rjmp	.-18     	; 0x36c8 <vfprintf+0x658>
    36da:	ea 94       	dec	r14
    36dc:	f3 01       	movw	r30, r6
    36de:	ee 0d       	add	r30, r14
    36e0:	f1 1d       	adc	r31, r1
    36e2:	80 81       	ld	r24, Z
    36e4:	b6 01       	movw	r22, r12
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    36ec:	e1 10       	cpse	r14, r1
    36ee:	f5 cf       	rjmp	.-22     	; 0x36da <vfprintf+0x66a>
    36f0:	14 c0       	rjmp	.+40     	; 0x371a <vfprintf+0x6aa>
    36f2:	f4 e0       	ldi	r31, 0x04	; 4
    36f4:	ff 15       	cp	r31, r15
    36f6:	58 f5       	brcc	.+86     	; 0x374e <vfprintf+0x6de>
    36f8:	84 e0       	ldi	r24, 0x04	; 4
    36fa:	f8 1a       	sub	r15, r24
    36fc:	33 fe       	sbrs	r3, 3
    36fe:	1e c0       	rjmp	.+60     	; 0x373c <vfprintf+0x6cc>
    3700:	21 10       	cpse	r2, r1
    3702:	26 c0       	rjmp	.+76     	; 0x3750 <vfprintf+0x6e0>
    3704:	03 ff       	sbrs	r16, 3
    3706:	2a c0       	rjmp	.+84     	; 0x375c <vfprintf+0x6ec>
    3708:	00 ed       	ldi	r16, 0xD0	; 208
    370a:	12 e0       	ldi	r17, 0x02	; 2
    370c:	f3 2d       	mov	r31, r3
    370e:	f0 71       	andi	r31, 0x10	; 16
    3710:	3f 2e       	mov	r3, r31
    3712:	f8 01       	movw	r30, r16
    3714:	84 91       	lpm	r24, Z
    3716:	81 11       	cpse	r24, r1
    3718:	24 c0       	rjmp	.+72     	; 0x3762 <vfprintf+0x6f2>
    371a:	ff 20       	and	r15, r15
    371c:	09 f4       	brne	.+2      	; 0x3720 <vfprintf+0x6b0>
    371e:	e5 cc       	rjmp	.-1590   	; 0x30ea <vfprintf+0x7a>
    3720:	b6 01       	movw	r22, r12
    3722:	80 e2       	ldi	r24, 0x20	; 32
    3724:	90 e0       	ldi	r25, 0x00	; 0
    3726:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    372a:	fa 94       	dec	r15
    372c:	f6 cf       	rjmp	.-20     	; 0x371a <vfprintf+0x6aa>
    372e:	f6 01       	movw	r30, r12
    3730:	86 81       	ldd	r24, Z+6	; 0x06
    3732:	97 81       	ldd	r25, Z+7	; 0x07
    3734:	26 c0       	rjmp	.+76     	; 0x3782 <vfprintf+0x712>
    3736:	8f ef       	ldi	r24, 0xFF	; 255
    3738:	9f ef       	ldi	r25, 0xFF	; 255
    373a:	23 c0       	rjmp	.+70     	; 0x3782 <vfprintf+0x712>
    373c:	b6 01       	movw	r22, r12
    373e:	80 e2       	ldi	r24, 0x20	; 32
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    3746:	fa 94       	dec	r15
    3748:	f1 10       	cpse	r15, r1
    374a:	f8 cf       	rjmp	.-16     	; 0x373c <vfprintf+0x6cc>
    374c:	d9 cf       	rjmp	.-78     	; 0x3700 <vfprintf+0x690>
    374e:	f1 2c       	mov	r15, r1
    3750:	b6 01       	movw	r22, r12
    3752:	82 2d       	mov	r24, r2
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    375a:	d4 cf       	rjmp	.-88     	; 0x3704 <vfprintf+0x694>
    375c:	04 ed       	ldi	r16, 0xD4	; 212
    375e:	12 e0       	ldi	r17, 0x02	; 2
    3760:	d5 cf       	rjmp	.-86     	; 0x370c <vfprintf+0x69c>
    3762:	31 10       	cpse	r3, r1
    3764:	80 52       	subi	r24, 0x20	; 32
    3766:	b6 01       	movw	r22, r12
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <fputc>
    376e:	0f 5f       	subi	r16, 0xFF	; 255
    3770:	1f 4f       	sbci	r17, 0xFF	; 255
    3772:	cf cf       	rjmp	.-98     	; 0x3712 <vfprintf+0x6a2>
    3774:	23 e0       	ldi	r18, 0x03	; 3
    3776:	2f 15       	cp	r18, r15
    3778:	10 f4       	brcc	.+4      	; 0x377e <vfprintf+0x70e>
    377a:	83 e0       	ldi	r24, 0x03	; 3
    377c:	be cf       	rjmp	.-132    	; 0x36fa <vfprintf+0x68a>
    377e:	f1 2c       	mov	r15, r1
    3780:	c1 cf       	rjmp	.-126    	; 0x3704 <vfprintf+0x694>
    3782:	63 96       	adiw	r28, 0x13	; 19
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	df 91       	pop	r29
    378a:	cf 91       	pop	r28
    378c:	1f 91       	pop	r17
    378e:	0f 91       	pop	r16
    3790:	ff 90       	pop	r15
    3792:	ef 90       	pop	r14
    3794:	df 90       	pop	r13
    3796:	cf 90       	pop	r12
    3798:	bf 90       	pop	r11
    379a:	af 90       	pop	r10
    379c:	9f 90       	pop	r9
    379e:	8f 90       	pop	r8
    37a0:	7f 90       	pop	r7
    37a2:	6f 90       	pop	r6
    37a4:	5f 90       	pop	r5
    37a6:	4f 90       	pop	r4
    37a8:	3f 90       	pop	r3
    37aa:	2f 90       	pop	r2
    37ac:	08 95       	ret

000037ae <__divmodhi4>:
    37ae:	97 fb       	bst	r25, 7
    37b0:	07 2e       	mov	r0, r23
    37b2:	16 f4       	brtc	.+4      	; 0x37b8 <__divmodhi4+0xa>
    37b4:	00 94       	com	r0
    37b6:	07 d0       	rcall	.+14     	; 0x37c6 <__divmodhi4_neg1>
    37b8:	77 fd       	sbrc	r23, 7
    37ba:	09 d0       	rcall	.+18     	; 0x37ce <__divmodhi4_neg2>
    37bc:	0e 94 15 1c 	call	0x382a	; 0x382a <__udivmodhi4>
    37c0:	07 fc       	sbrc	r0, 7
    37c2:	05 d0       	rcall	.+10     	; 0x37ce <__divmodhi4_neg2>
    37c4:	3e f4       	brtc	.+14     	; 0x37d4 <__divmodhi4_exit>

000037c6 <__divmodhi4_neg1>:
    37c6:	90 95       	com	r25
    37c8:	81 95       	neg	r24
    37ca:	9f 4f       	sbci	r25, 0xFF	; 255
    37cc:	08 95       	ret

000037ce <__divmodhi4_neg2>:
    37ce:	70 95       	com	r23
    37d0:	61 95       	neg	r22
    37d2:	7f 4f       	sbci	r23, 0xFF	; 255

000037d4 <__divmodhi4_exit>:
    37d4:	08 95       	ret

000037d6 <__udivmodsi4>:
    37d6:	a1 e2       	ldi	r26, 0x21	; 33
    37d8:	1a 2e       	mov	r1, r26
    37da:	aa 1b       	sub	r26, r26
    37dc:	bb 1b       	sub	r27, r27
    37de:	fd 01       	movw	r30, r26
    37e0:	0d c0       	rjmp	.+26     	; 0x37fc <__udivmodsi4_ep>

000037e2 <__udivmodsi4_loop>:
    37e2:	aa 1f       	adc	r26, r26
    37e4:	bb 1f       	adc	r27, r27
    37e6:	ee 1f       	adc	r30, r30
    37e8:	ff 1f       	adc	r31, r31
    37ea:	a2 17       	cp	r26, r18
    37ec:	b3 07       	cpc	r27, r19
    37ee:	e4 07       	cpc	r30, r20
    37f0:	f5 07       	cpc	r31, r21
    37f2:	20 f0       	brcs	.+8      	; 0x37fc <__udivmodsi4_ep>
    37f4:	a2 1b       	sub	r26, r18
    37f6:	b3 0b       	sbc	r27, r19
    37f8:	e4 0b       	sbc	r30, r20
    37fa:	f5 0b       	sbc	r31, r21

000037fc <__udivmodsi4_ep>:
    37fc:	66 1f       	adc	r22, r22
    37fe:	77 1f       	adc	r23, r23
    3800:	88 1f       	adc	r24, r24
    3802:	99 1f       	adc	r25, r25
    3804:	1a 94       	dec	r1
    3806:	69 f7       	brne	.-38     	; 0x37e2 <__udivmodsi4_loop>
    3808:	60 95       	com	r22
    380a:	70 95       	com	r23
    380c:	80 95       	com	r24
    380e:	90 95       	com	r25
    3810:	9b 01       	movw	r18, r22
    3812:	ac 01       	movw	r20, r24
    3814:	bd 01       	movw	r22, r26
    3816:	cf 01       	movw	r24, r30
    3818:	08 95       	ret

0000381a <__tablejump2__>:
    381a:	ee 0f       	add	r30, r30
    381c:	ff 1f       	adc	r31, r31
    381e:	88 1f       	adc	r24, r24
    3820:	8b bf       	out	0x3b, r24	; 59
    3822:	07 90       	elpm	r0, Z+
    3824:	f6 91       	elpm	r31, Z
    3826:	e0 2d       	mov	r30, r0
    3828:	19 94       	eijmp

0000382a <__udivmodhi4>:
    382a:	aa 1b       	sub	r26, r26
    382c:	bb 1b       	sub	r27, r27
    382e:	51 e1       	ldi	r21, 0x11	; 17
    3830:	07 c0       	rjmp	.+14     	; 0x3840 <__udivmodhi4_ep>

00003832 <__udivmodhi4_loop>:
    3832:	aa 1f       	adc	r26, r26
    3834:	bb 1f       	adc	r27, r27
    3836:	a6 17       	cp	r26, r22
    3838:	b7 07       	cpc	r27, r23
    383a:	10 f0       	brcs	.+4      	; 0x3840 <__udivmodhi4_ep>
    383c:	a6 1b       	sub	r26, r22
    383e:	b7 0b       	sbc	r27, r23

00003840 <__udivmodhi4_ep>:
    3840:	88 1f       	adc	r24, r24
    3842:	99 1f       	adc	r25, r25
    3844:	5a 95       	dec	r21
    3846:	a9 f7       	brne	.-22     	; 0x3832 <__udivmodhi4_loop>
    3848:	80 95       	com	r24
    384a:	90 95       	com	r25
    384c:	bc 01       	movw	r22, r24
    384e:	cd 01       	movw	r24, r26
    3850:	08 95       	ret

00003852 <__muluhisi3>:
    3852:	0e 94 34 1c 	call	0x3868	; 0x3868 <__umulhisi3>
    3856:	a5 9f       	mul	r26, r21
    3858:	90 0d       	add	r25, r0
    385a:	b4 9f       	mul	r27, r20
    385c:	90 0d       	add	r25, r0
    385e:	a4 9f       	mul	r26, r20
    3860:	80 0d       	add	r24, r0
    3862:	91 1d       	adc	r25, r1
    3864:	11 24       	eor	r1, r1
    3866:	08 95       	ret

00003868 <__umulhisi3>:
    3868:	a2 9f       	mul	r26, r18
    386a:	b0 01       	movw	r22, r0
    386c:	b3 9f       	mul	r27, r19
    386e:	c0 01       	movw	r24, r0
    3870:	a3 9f       	mul	r26, r19
    3872:	70 0d       	add	r23, r0
    3874:	81 1d       	adc	r24, r1
    3876:	11 24       	eor	r1, r1
    3878:	91 1d       	adc	r25, r1
    387a:	b2 9f       	mul	r27, r18
    387c:	70 0d       	add	r23, r0
    387e:	81 1d       	adc	r24, r1
    3880:	11 24       	eor	r1, r1
    3882:	91 1d       	adc	r25, r1
    3884:	08 95       	ret

00003886 <__ftoa_engine>:
    3886:	28 30       	cpi	r18, 0x08	; 8
    3888:	08 f0       	brcs	.+2      	; 0x388c <__ftoa_engine+0x6>
    388a:	27 e0       	ldi	r18, 0x07	; 7
    388c:	33 27       	eor	r19, r19
    388e:	da 01       	movw	r26, r20
    3890:	99 0f       	add	r25, r25
    3892:	31 1d       	adc	r19, r1
    3894:	87 fd       	sbrc	r24, 7
    3896:	91 60       	ori	r25, 0x01	; 1
    3898:	00 96       	adiw	r24, 0x00	; 0
    389a:	61 05       	cpc	r22, r1
    389c:	71 05       	cpc	r23, r1
    389e:	39 f4       	brne	.+14     	; 0x38ae <__ftoa_engine+0x28>
    38a0:	32 60       	ori	r19, 0x02	; 2
    38a2:	2e 5f       	subi	r18, 0xFE	; 254
    38a4:	3d 93       	st	X+, r19
    38a6:	30 e3       	ldi	r19, 0x30	; 48
    38a8:	2a 95       	dec	r18
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <__ftoa_engine+0x1e>
    38ac:	08 95       	ret
    38ae:	9f 3f       	cpi	r25, 0xFF	; 255
    38b0:	30 f0       	brcs	.+12     	; 0x38be <__ftoa_engine+0x38>
    38b2:	80 38       	cpi	r24, 0x80	; 128
    38b4:	71 05       	cpc	r23, r1
    38b6:	61 05       	cpc	r22, r1
    38b8:	09 f0       	breq	.+2      	; 0x38bc <__ftoa_engine+0x36>
    38ba:	3c 5f       	subi	r19, 0xFC	; 252
    38bc:	3c 5f       	subi	r19, 0xFC	; 252
    38be:	3d 93       	st	X+, r19
    38c0:	91 30       	cpi	r25, 0x01	; 1
    38c2:	08 f0       	brcs	.+2      	; 0x38c6 <__ftoa_engine+0x40>
    38c4:	80 68       	ori	r24, 0x80	; 128
    38c6:	91 1d       	adc	r25, r1
    38c8:	df 93       	push	r29
    38ca:	cf 93       	push	r28
    38cc:	1f 93       	push	r17
    38ce:	0f 93       	push	r16
    38d0:	ff 92       	push	r15
    38d2:	ef 92       	push	r14
    38d4:	19 2f       	mov	r17, r25
    38d6:	98 7f       	andi	r25, 0xF8	; 248
    38d8:	96 95       	lsr	r25
    38da:	e9 2f       	mov	r30, r25
    38dc:	96 95       	lsr	r25
    38de:	96 95       	lsr	r25
    38e0:	e9 0f       	add	r30, r25
    38e2:	ff 27       	eor	r31, r31
    38e4:	ee 5c       	subi	r30, 0xCE	; 206
    38e6:	fc 4f       	sbci	r31, 0xFC	; 252
    38e8:	99 27       	eor	r25, r25
    38ea:	33 27       	eor	r19, r19
    38ec:	ee 24       	eor	r14, r14
    38ee:	ff 24       	eor	r15, r15
    38f0:	a7 01       	movw	r20, r14
    38f2:	e7 01       	movw	r28, r14
    38f4:	05 90       	lpm	r0, Z+
    38f6:	08 94       	sec
    38f8:	07 94       	ror	r0
    38fa:	28 f4       	brcc	.+10     	; 0x3906 <__ftoa_engine+0x80>
    38fc:	36 0f       	add	r19, r22
    38fe:	e7 1e       	adc	r14, r23
    3900:	f8 1e       	adc	r15, r24
    3902:	49 1f       	adc	r20, r25
    3904:	51 1d       	adc	r21, r1
    3906:	66 0f       	add	r22, r22
    3908:	77 1f       	adc	r23, r23
    390a:	88 1f       	adc	r24, r24
    390c:	99 1f       	adc	r25, r25
    390e:	06 94       	lsr	r0
    3910:	a1 f7       	brne	.-24     	; 0x38fa <__ftoa_engine+0x74>
    3912:	05 90       	lpm	r0, Z+
    3914:	07 94       	ror	r0
    3916:	28 f4       	brcc	.+10     	; 0x3922 <__ftoa_engine+0x9c>
    3918:	e7 0e       	add	r14, r23
    391a:	f8 1e       	adc	r15, r24
    391c:	49 1f       	adc	r20, r25
    391e:	56 1f       	adc	r21, r22
    3920:	c1 1d       	adc	r28, r1
    3922:	77 0f       	add	r23, r23
    3924:	88 1f       	adc	r24, r24
    3926:	99 1f       	adc	r25, r25
    3928:	66 1f       	adc	r22, r22
    392a:	06 94       	lsr	r0
    392c:	a1 f7       	brne	.-24     	; 0x3916 <__ftoa_engine+0x90>
    392e:	05 90       	lpm	r0, Z+
    3930:	07 94       	ror	r0
    3932:	28 f4       	brcc	.+10     	; 0x393e <__ftoa_engine+0xb8>
    3934:	f8 0e       	add	r15, r24
    3936:	49 1f       	adc	r20, r25
    3938:	56 1f       	adc	r21, r22
    393a:	c7 1f       	adc	r28, r23
    393c:	d1 1d       	adc	r29, r1
    393e:	88 0f       	add	r24, r24
    3940:	99 1f       	adc	r25, r25
    3942:	66 1f       	adc	r22, r22
    3944:	77 1f       	adc	r23, r23
    3946:	06 94       	lsr	r0
    3948:	a1 f7       	brne	.-24     	; 0x3932 <__ftoa_engine+0xac>
    394a:	05 90       	lpm	r0, Z+
    394c:	07 94       	ror	r0
    394e:	20 f4       	brcc	.+8      	; 0x3958 <__ftoa_engine+0xd2>
    3950:	49 0f       	add	r20, r25
    3952:	56 1f       	adc	r21, r22
    3954:	c7 1f       	adc	r28, r23
    3956:	d8 1f       	adc	r29, r24
    3958:	99 0f       	add	r25, r25
    395a:	66 1f       	adc	r22, r22
    395c:	77 1f       	adc	r23, r23
    395e:	88 1f       	adc	r24, r24
    3960:	06 94       	lsr	r0
    3962:	a9 f7       	brne	.-22     	; 0x394e <__ftoa_engine+0xc8>
    3964:	84 91       	lpm	r24, Z
    3966:	10 95       	com	r17
    3968:	17 70       	andi	r17, 0x07	; 7
    396a:	41 f0       	breq	.+16     	; 0x397c <__ftoa_engine+0xf6>
    396c:	d6 95       	lsr	r29
    396e:	c7 95       	ror	r28
    3970:	57 95       	ror	r21
    3972:	47 95       	ror	r20
    3974:	f7 94       	ror	r15
    3976:	e7 94       	ror	r14
    3978:	1a 95       	dec	r17
    397a:	c1 f7       	brne	.-16     	; 0x396c <__ftoa_engine+0xe6>
    397c:	e8 ed       	ldi	r30, 0xD8	; 216
    397e:	f2 e0       	ldi	r31, 0x02	; 2
    3980:	68 94       	set
    3982:	15 90       	lpm	r1, Z+
    3984:	15 91       	lpm	r17, Z+
    3986:	35 91       	lpm	r19, Z+
    3988:	65 91       	lpm	r22, Z+
    398a:	95 91       	lpm	r25, Z+
    398c:	05 90       	lpm	r0, Z+
    398e:	7f e2       	ldi	r23, 0x2F	; 47
    3990:	73 95       	inc	r23
    3992:	e1 18       	sub	r14, r1
    3994:	f1 0a       	sbc	r15, r17
    3996:	43 0b       	sbc	r20, r19
    3998:	56 0b       	sbc	r21, r22
    399a:	c9 0b       	sbc	r28, r25
    399c:	d0 09       	sbc	r29, r0
    399e:	c0 f7       	brcc	.-16     	; 0x3990 <__ftoa_engine+0x10a>
    39a0:	e1 0c       	add	r14, r1
    39a2:	f1 1e       	adc	r15, r17
    39a4:	43 1f       	adc	r20, r19
    39a6:	56 1f       	adc	r21, r22
    39a8:	c9 1f       	adc	r28, r25
    39aa:	d0 1d       	adc	r29, r0
    39ac:	7e f4       	brtc	.+30     	; 0x39cc <__ftoa_engine+0x146>
    39ae:	70 33       	cpi	r23, 0x30	; 48
    39b0:	11 f4       	brne	.+4      	; 0x39b6 <__ftoa_engine+0x130>
    39b2:	8a 95       	dec	r24
    39b4:	e6 cf       	rjmp	.-52     	; 0x3982 <__ftoa_engine+0xfc>
    39b6:	e8 94       	clt
    39b8:	01 50       	subi	r16, 0x01	; 1
    39ba:	30 f0       	brcs	.+12     	; 0x39c8 <__ftoa_engine+0x142>
    39bc:	08 0f       	add	r16, r24
    39be:	0a f4       	brpl	.+2      	; 0x39c2 <__ftoa_engine+0x13c>
    39c0:	00 27       	eor	r16, r16
    39c2:	02 17       	cp	r16, r18
    39c4:	08 f4       	brcc	.+2      	; 0x39c8 <__ftoa_engine+0x142>
    39c6:	20 2f       	mov	r18, r16
    39c8:	23 95       	inc	r18
    39ca:	02 2f       	mov	r16, r18
    39cc:	7a 33       	cpi	r23, 0x3A	; 58
    39ce:	28 f0       	brcs	.+10     	; 0x39da <__ftoa_engine+0x154>
    39d0:	79 e3       	ldi	r23, 0x39	; 57
    39d2:	7d 93       	st	X+, r23
    39d4:	2a 95       	dec	r18
    39d6:	e9 f7       	brne	.-6      	; 0x39d2 <__ftoa_engine+0x14c>
    39d8:	10 c0       	rjmp	.+32     	; 0x39fa <__ftoa_engine+0x174>
    39da:	7d 93       	st	X+, r23
    39dc:	2a 95       	dec	r18
    39de:	89 f6       	brne	.-94     	; 0x3982 <__ftoa_engine+0xfc>
    39e0:	06 94       	lsr	r0
    39e2:	97 95       	ror	r25
    39e4:	67 95       	ror	r22
    39e6:	37 95       	ror	r19
    39e8:	17 95       	ror	r17
    39ea:	17 94       	ror	r1
    39ec:	e1 18       	sub	r14, r1
    39ee:	f1 0a       	sbc	r15, r17
    39f0:	43 0b       	sbc	r20, r19
    39f2:	56 0b       	sbc	r21, r22
    39f4:	c9 0b       	sbc	r28, r25
    39f6:	d0 09       	sbc	r29, r0
    39f8:	98 f0       	brcs	.+38     	; 0x3a20 <__ftoa_engine+0x19a>
    39fa:	23 95       	inc	r18
    39fc:	7e 91       	ld	r23, -X
    39fe:	73 95       	inc	r23
    3a00:	7a 33       	cpi	r23, 0x3A	; 58
    3a02:	08 f0       	brcs	.+2      	; 0x3a06 <__ftoa_engine+0x180>
    3a04:	70 e3       	ldi	r23, 0x30	; 48
    3a06:	7c 93       	st	X, r23
    3a08:	20 13       	cpse	r18, r16
    3a0a:	b8 f7       	brcc	.-18     	; 0x39fa <__ftoa_engine+0x174>
    3a0c:	7e 91       	ld	r23, -X
    3a0e:	70 61       	ori	r23, 0x10	; 16
    3a10:	7d 93       	st	X+, r23
    3a12:	30 f0       	brcs	.+12     	; 0x3a20 <__ftoa_engine+0x19a>
    3a14:	83 95       	inc	r24
    3a16:	71 e3       	ldi	r23, 0x31	; 49
    3a18:	7d 93       	st	X+, r23
    3a1a:	70 e3       	ldi	r23, 0x30	; 48
    3a1c:	2a 95       	dec	r18
    3a1e:	e1 f7       	brne	.-8      	; 0x3a18 <__ftoa_engine+0x192>
    3a20:	11 24       	eor	r1, r1
    3a22:	ef 90       	pop	r14
    3a24:	ff 90       	pop	r15
    3a26:	0f 91       	pop	r16
    3a28:	1f 91       	pop	r17
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	99 27       	eor	r25, r25
    3a30:	87 fd       	sbrc	r24, 7
    3a32:	90 95       	com	r25
    3a34:	08 95       	ret

00003a36 <strnlen_P>:
    3a36:	fc 01       	movw	r30, r24
    3a38:	05 90       	lpm	r0, Z+
    3a3a:	61 50       	subi	r22, 0x01	; 1
    3a3c:	70 40       	sbci	r23, 0x00	; 0
    3a3e:	01 10       	cpse	r0, r1
    3a40:	d8 f7       	brcc	.-10     	; 0x3a38 <strnlen_P+0x2>
    3a42:	80 95       	com	r24
    3a44:	90 95       	com	r25
    3a46:	8e 0f       	add	r24, r30
    3a48:	9f 1f       	adc	r25, r31
    3a4a:	08 95       	ret

00003a4c <strnlen>:
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	61 50       	subi	r22, 0x01	; 1
    3a50:	70 40       	sbci	r23, 0x00	; 0
    3a52:	01 90       	ld	r0, Z+
    3a54:	01 10       	cpse	r0, r1
    3a56:	d8 f7       	brcc	.-10     	; 0x3a4e <strnlen+0x2>
    3a58:	80 95       	com	r24
    3a5a:	90 95       	com	r25
    3a5c:	8e 0f       	add	r24, r30
    3a5e:	9f 1f       	adc	r25, r31
    3a60:	08 95       	ret

00003a62 <fprintf>:
    3a62:	cf 93       	push	r28
    3a64:	df 93       	push	r29
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	ae 01       	movw	r20, r28
    3a6c:	46 5f       	subi	r20, 0xF6	; 246
    3a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    3a70:	68 85       	ldd	r22, Y+8	; 0x08
    3a72:	79 85       	ldd	r23, Y+9	; 0x09
    3a74:	8e 81       	ldd	r24, Y+6	; 0x06
    3a76:	9f 81       	ldd	r25, Y+7	; 0x07
    3a78:	0e 94 38 18 	call	0x3070	; 0x3070 <vfprintf>
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	08 95       	ret

00003a82 <fputc>:
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	fb 01       	movw	r30, r22
    3a8c:	23 81       	ldd	r18, Z+3	; 0x03
    3a8e:	21 fd       	sbrc	r18, 1
    3a90:	03 c0       	rjmp	.+6      	; 0x3a98 <fputc+0x16>
    3a92:	8f ef       	ldi	r24, 0xFF	; 255
    3a94:	9f ef       	ldi	r25, 0xFF	; 255
    3a96:	28 c0       	rjmp	.+80     	; 0x3ae8 <fputc+0x66>
    3a98:	22 ff       	sbrs	r18, 2
    3a9a:	16 c0       	rjmp	.+44     	; 0x3ac8 <fputc+0x46>
    3a9c:	46 81       	ldd	r20, Z+6	; 0x06
    3a9e:	57 81       	ldd	r21, Z+7	; 0x07
    3aa0:	24 81       	ldd	r18, Z+4	; 0x04
    3aa2:	35 81       	ldd	r19, Z+5	; 0x05
    3aa4:	42 17       	cp	r20, r18
    3aa6:	53 07       	cpc	r21, r19
    3aa8:	44 f4       	brge	.+16     	; 0x3aba <fputc+0x38>
    3aaa:	a0 81       	ld	r26, Z
    3aac:	b1 81       	ldd	r27, Z+1	; 0x01
    3aae:	9d 01       	movw	r18, r26
    3ab0:	2f 5f       	subi	r18, 0xFF	; 255
    3ab2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ab4:	20 83       	st	Z, r18
    3ab6:	31 83       	std	Z+1, r19	; 0x01
    3ab8:	8c 93       	st	X, r24
    3aba:	26 81       	ldd	r18, Z+6	; 0x06
    3abc:	37 81       	ldd	r19, Z+7	; 0x07
    3abe:	2f 5f       	subi	r18, 0xFF	; 255
    3ac0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ac2:	26 83       	std	Z+6, r18	; 0x06
    3ac4:	37 83       	std	Z+7, r19	; 0x07
    3ac6:	10 c0       	rjmp	.+32     	; 0x3ae8 <fputc+0x66>
    3ac8:	eb 01       	movw	r28, r22
    3aca:	09 2f       	mov	r16, r25
    3acc:	18 2f       	mov	r17, r24
    3ace:	00 84       	ldd	r0, Z+8	; 0x08
    3ad0:	f1 85       	ldd	r31, Z+9	; 0x09
    3ad2:	e0 2d       	mov	r30, r0
    3ad4:	19 95       	eicall
    3ad6:	89 2b       	or	r24, r25
    3ad8:	e1 f6       	brne	.-72     	; 0x3a92 <fputc+0x10>
    3ada:	8e 81       	ldd	r24, Y+6	; 0x06
    3adc:	9f 81       	ldd	r25, Y+7	; 0x07
    3ade:	01 96       	adiw	r24, 0x01	; 1
    3ae0:	8e 83       	std	Y+6, r24	; 0x06
    3ae2:	9f 83       	std	Y+7, r25	; 0x07
    3ae4:	81 2f       	mov	r24, r17
    3ae6:	90 2f       	mov	r25, r16
    3ae8:	df 91       	pop	r29
    3aea:	cf 91       	pop	r28
    3aec:	1f 91       	pop	r17
    3aee:	0f 91       	pop	r16
    3af0:	08 95       	ret

00003af2 <__ultoa_invert>:
    3af2:	fa 01       	movw	r30, r20
    3af4:	aa 27       	eor	r26, r26
    3af6:	28 30       	cpi	r18, 0x08	; 8
    3af8:	51 f1       	breq	.+84     	; 0x3b4e <__ultoa_invert+0x5c>
    3afa:	20 31       	cpi	r18, 0x10	; 16
    3afc:	81 f1       	breq	.+96     	; 0x3b5e <__ultoa_invert+0x6c>
    3afe:	e8 94       	clt
    3b00:	6f 93       	push	r22
    3b02:	6e 7f       	andi	r22, 0xFE	; 254
    3b04:	6e 5f       	subi	r22, 0xFE	; 254
    3b06:	7f 4f       	sbci	r23, 0xFF	; 255
    3b08:	8f 4f       	sbci	r24, 0xFF	; 255
    3b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b0c:	af 4f       	sbci	r26, 0xFF	; 255
    3b0e:	b1 e0       	ldi	r27, 0x01	; 1
    3b10:	3e d0       	rcall	.+124    	; 0x3b8e <__ultoa_invert+0x9c>
    3b12:	b4 e0       	ldi	r27, 0x04	; 4
    3b14:	3c d0       	rcall	.+120    	; 0x3b8e <__ultoa_invert+0x9c>
    3b16:	67 0f       	add	r22, r23
    3b18:	78 1f       	adc	r23, r24
    3b1a:	89 1f       	adc	r24, r25
    3b1c:	9a 1f       	adc	r25, r26
    3b1e:	a1 1d       	adc	r26, r1
    3b20:	68 0f       	add	r22, r24
    3b22:	79 1f       	adc	r23, r25
    3b24:	8a 1f       	adc	r24, r26
    3b26:	91 1d       	adc	r25, r1
    3b28:	a1 1d       	adc	r26, r1
    3b2a:	6a 0f       	add	r22, r26
    3b2c:	71 1d       	adc	r23, r1
    3b2e:	81 1d       	adc	r24, r1
    3b30:	91 1d       	adc	r25, r1
    3b32:	a1 1d       	adc	r26, r1
    3b34:	20 d0       	rcall	.+64     	; 0x3b76 <__ultoa_invert+0x84>
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <__ultoa_invert+0x48>
    3b38:	68 94       	set
    3b3a:	3f 91       	pop	r19
    3b3c:	2a e0       	ldi	r18, 0x0A	; 10
    3b3e:	26 9f       	mul	r18, r22
    3b40:	11 24       	eor	r1, r1
    3b42:	30 19       	sub	r19, r0
    3b44:	30 5d       	subi	r19, 0xD0	; 208
    3b46:	31 93       	st	Z+, r19
    3b48:	de f6       	brtc	.-74     	; 0x3b00 <__ultoa_invert+0xe>
    3b4a:	cf 01       	movw	r24, r30
    3b4c:	08 95       	ret
    3b4e:	46 2f       	mov	r20, r22
    3b50:	47 70       	andi	r20, 0x07	; 7
    3b52:	40 5d       	subi	r20, 0xD0	; 208
    3b54:	41 93       	st	Z+, r20
    3b56:	b3 e0       	ldi	r27, 0x03	; 3
    3b58:	0f d0       	rcall	.+30     	; 0x3b78 <__ultoa_invert+0x86>
    3b5a:	c9 f7       	brne	.-14     	; 0x3b4e <__ultoa_invert+0x5c>
    3b5c:	f6 cf       	rjmp	.-20     	; 0x3b4a <__ultoa_invert+0x58>
    3b5e:	46 2f       	mov	r20, r22
    3b60:	4f 70       	andi	r20, 0x0F	; 15
    3b62:	40 5d       	subi	r20, 0xD0	; 208
    3b64:	4a 33       	cpi	r20, 0x3A	; 58
    3b66:	18 f0       	brcs	.+6      	; 0x3b6e <__ultoa_invert+0x7c>
    3b68:	49 5d       	subi	r20, 0xD9	; 217
    3b6a:	31 fd       	sbrc	r19, 1
    3b6c:	40 52       	subi	r20, 0x20	; 32
    3b6e:	41 93       	st	Z+, r20
    3b70:	02 d0       	rcall	.+4      	; 0x3b76 <__ultoa_invert+0x84>
    3b72:	a9 f7       	brne	.-22     	; 0x3b5e <__ultoa_invert+0x6c>
    3b74:	ea cf       	rjmp	.-44     	; 0x3b4a <__ultoa_invert+0x58>
    3b76:	b4 e0       	ldi	r27, 0x04	; 4
    3b78:	a6 95       	lsr	r26
    3b7a:	97 95       	ror	r25
    3b7c:	87 95       	ror	r24
    3b7e:	77 95       	ror	r23
    3b80:	67 95       	ror	r22
    3b82:	ba 95       	dec	r27
    3b84:	c9 f7       	brne	.-14     	; 0x3b78 <__ultoa_invert+0x86>
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	61 05       	cpc	r22, r1
    3b8a:	71 05       	cpc	r23, r1
    3b8c:	08 95       	ret
    3b8e:	9b 01       	movw	r18, r22
    3b90:	ac 01       	movw	r20, r24
    3b92:	0a 2e       	mov	r0, r26
    3b94:	06 94       	lsr	r0
    3b96:	57 95       	ror	r21
    3b98:	47 95       	ror	r20
    3b9a:	37 95       	ror	r19
    3b9c:	27 95       	ror	r18
    3b9e:	ba 95       	dec	r27
    3ba0:	c9 f7       	brne	.-14     	; 0x3b94 <__ultoa_invert+0xa2>
    3ba2:	62 0f       	add	r22, r18
    3ba4:	73 1f       	adc	r23, r19
    3ba6:	84 1f       	adc	r24, r20
    3ba8:	95 1f       	adc	r25, r21
    3baa:	a0 1d       	adc	r26, r0
    3bac:	08 95       	ret

00003bae <__mulsi3>:
    3bae:	db 01       	movw	r26, r22
    3bb0:	8f 93       	push	r24
    3bb2:	9f 93       	push	r25
    3bb4:	0e 94 29 1c 	call	0x3852	; 0x3852 <__muluhisi3>
    3bb8:	bf 91       	pop	r27
    3bba:	af 91       	pop	r26
    3bbc:	a2 9f       	mul	r26, r18
    3bbe:	80 0d       	add	r24, r0
    3bc0:	91 1d       	adc	r25, r1
    3bc2:	a3 9f       	mul	r26, r19
    3bc4:	90 0d       	add	r25, r0
    3bc6:	b2 9f       	mul	r27, r18
    3bc8:	90 0d       	add	r25, r0
    3bca:	11 24       	eor	r1, r1
    3bcc:	08 95       	ret

00003bce <__divmodsi4>:
    3bce:	05 2e       	mov	r0, r21
    3bd0:	97 fb       	bst	r25, 7
    3bd2:	1e f4       	brtc	.+6      	; 0x3bda <__divmodsi4+0xc>
    3bd4:	00 94       	com	r0
    3bd6:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__negsi2>
    3bda:	57 fd       	sbrc	r21, 7
    3bdc:	07 d0       	rcall	.+14     	; 0x3bec <__divmodsi4_neg2>
    3bde:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__udivmodsi4>
    3be2:	07 fc       	sbrc	r0, 7
    3be4:	03 d0       	rcall	.+6      	; 0x3bec <__divmodsi4_neg2>
    3be6:	4e f4       	brtc	.+18     	; 0x3bfa <__divmodsi4_exit>
    3be8:	0c 94 fe 1d 	jmp	0x3bfc	; 0x3bfc <__negsi2>

00003bec <__divmodsi4_neg2>:
    3bec:	50 95       	com	r21
    3bee:	40 95       	com	r20
    3bf0:	30 95       	com	r19
    3bf2:	21 95       	neg	r18
    3bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf6:	4f 4f       	sbci	r20, 0xFF	; 255
    3bf8:	5f 4f       	sbci	r21, 0xFF	; 255

00003bfa <__divmodsi4_exit>:
    3bfa:	08 95       	ret

00003bfc <__negsi2>:
    3bfc:	90 95       	com	r25
    3bfe:	80 95       	com	r24
    3c00:	70 95       	com	r23
    3c02:	61 95       	neg	r22
    3c04:	7f 4f       	sbci	r23, 0xFF	; 255
    3c06:	8f 4f       	sbci	r24, 0xFF	; 255
    3c08:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0a:	08 95       	ret

00003c0c <__usmulhisi3>:
    3c0c:	0e 94 34 1c 	call	0x3868	; 0x3868 <__umulhisi3>

00003c10 <__usmulhisi3_tail>:
    3c10:	b7 ff       	sbrs	r27, 7
    3c12:	08 95       	ret
    3c14:	82 1b       	sub	r24, r18
    3c16:	93 0b       	sbc	r25, r19
    3c18:	08 95       	ret

00003c1a <_exit>:
    3c1a:	f8 94       	cli

00003c1c <__stop_program>:
    3c1c:	ff cf       	rjmp	.-2      	; 0x3c1c <__stop_program>
