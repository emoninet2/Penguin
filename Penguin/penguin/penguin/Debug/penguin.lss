
penguin.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e4  00802000  00003f5e  00003ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00007586  008022e4  008022e4  000042d6  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  000042d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000cb0  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00013a75  00000000  00000000  00005008  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033fd  00000000  00000000  00018a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008084  00000000  00000000  0001be7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000026a8  00000000  00000000  00023f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000776f  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000ad75  00000000  00000000  0002dd17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f48  00000000  00000000  00038a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__ctors_end>
       4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
       8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
       c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      10:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      14:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      18:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      1c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      20:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      24:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      28:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      2c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      30:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      34:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      38:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__vector_14>
      3c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      40:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      44:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      48:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      4c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      50:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      54:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      58:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      5c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      60:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      64:	0c 94 3f 18 	jmp	0x307e	; 0x307e <__vector_25>
      68:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_26>
      6c:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__vector_27>
      70:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__vector_28>
      74:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__vector_29>
      78:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__vector_30>
      7c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      80:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      84:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      88:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      8c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      90:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      94:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      98:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      9c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      a8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      ac:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      b8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      bc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      c8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      cc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      d8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      dc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      e8:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__vector_58>
      ec:	0c 94 ad 18 	jmp	0x315a	; 0x315a <__vector_59>
      f0:	0c 94 a3 18 	jmp	0x3146	; 0x3146 <__vector_60>
      f4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      f8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
      fc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     100:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     104:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     108:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     10c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     110:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     114:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     118:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     11c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     120:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     124:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     128:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     12c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     130:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     134:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     138:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     13c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     140:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     144:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     148:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     14c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     150:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     154:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     158:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     15c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     160:	0c 94 7b 18 	jmp	0x30f6	; 0x30f6 <__vector_88>
     164:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__vector_89>
     168:	0c 94 85 18 	jmp	0x310a	; 0x310a <__vector_90>
     16c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     170:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     174:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     178:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     17c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     180:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     184:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     188:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     18c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     190:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     194:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     198:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     19c:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1a8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1ac:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1b0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1b4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1b8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1bc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1c8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1cc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1d8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1dc:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1e8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1ec:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1f0:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1f4:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_125>
     1f8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__bad_interrupt>
     1fc:	ee 0e       	add	r14, r30
     1fe:	19 0f       	add	r17, r25
     200:	f0 0f       	add	r31, r16
     202:	19 0f       	add	r17, r25
     204:	f0 0f       	add	r31, r16
     206:	54 0f       	add	r21, r20
     208:	6b 0f       	add	r22, r27
     20a:	f0 0f       	add	r31, r16
     20c:	c2 0f       	add	r28, r18
     20e:	cf 0f       	add	r28, r31

00000210 <__trampolines_start>:
     210:	0c 94 99 14 	jmp	0x2932	; 0x2932 <thread_1>
     214:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <USB_Device_ProcessControlRequest+0x132>
     218:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
     21c:	0c 94 17 0c 	jmp	0x182e	; 0x182e <prvIdleTask>
     220:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <USB_Device_ProcessControlRequest+0xbc>
     224:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <USB_Device_ProcessControlRequest+0x66>
     228:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <thread_3>
     22c:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <USBThread>
     230:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <USB_Device_ProcessControlRequest+0x228>
     234:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <thread_2>
     238:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <USB_Device_ProcessControlRequest+0x160>
     23c:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <USB_Device_ProcessControlRequest+0x20e>
     240:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <CDC_Device_getchar>
     244:	0c 94 08 0d 	jmp	0x1a10	; 0x1a10 <CDC_Device_putchar>

00000248 <ProductString>:
     248:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
     258:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

00000266 <ManufacturerString>:
     266:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     276:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000280 <LanguageString>:
     280:	04 03 09 04                                         ....

00000284 <ConfigurationDescriptor>:
     284:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     294:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     2a4:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     2b4:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000002c2 <DeviceDescriptor>:
     2c2:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     2d2:	dc 01                                               ..

000002d4 <__c.2242>:
     2d4:	6e 61 6e 00                                         nan.

000002d8 <__c.2240>:
     2d8:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2e8:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2f8:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     308:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     318:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     328:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     338:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     348:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     358:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     368:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     378:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     388:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     398:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3a8:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3b8:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3c8:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003d6 <__ctors_end>:
     3d6:	11 24       	eor	r1, r1
     3d8:	1f be       	out	0x3f, r1	; 63
     3da:	cf ef       	ldi	r28, 0xFF	; 255
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	df e9       	ldi	r29, 0x9F	; 159
     3e0:	de bf       	out	0x3e, r29	; 62
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	0c bf       	out	0x3c, r16	; 60

000003e6 <__do_copy_data>:
     3e6:	12 e2       	ldi	r17, 0x22	; 34
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e2       	ldi	r27, 0x20	; 32
     3ec:	ee e5       	ldi	r30, 0x5E	; 94
     3ee:	ff e3       	ldi	r31, 0x3F	; 63
     3f0:	00 e0       	ldi	r16, 0x00	; 0
     3f2:	0b bf       	out	0x3b, r16	; 59
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <__do_copy_data+0x14>
     3f6:	07 90       	elpm	r0, Z+
     3f8:	0d 92       	st	X+, r0
     3fa:	a4 3e       	cpi	r26, 0xE4	; 228
     3fc:	b1 07       	cpc	r27, r17
     3fe:	d9 f7       	brne	.-10     	; 0x3f6 <__do_copy_data+0x10>

00000400 <__do_clear_bss>:
     400:	28 e9       	ldi	r18, 0x98	; 152
     402:	a4 ee       	ldi	r26, 0xE4	; 228
     404:	b2 e2       	ldi	r27, 0x22	; 34
     406:	01 c0       	rjmp	.+2      	; 0x40a <.do_clear_bss_start>

00000408 <.do_clear_bss_loop>:
     408:	1d 92       	st	X+, r1

0000040a <.do_clear_bss_start>:
     40a:	aa 36       	cpi	r26, 0x6A	; 106
     40c:	b2 07       	cpc	r27, r18
     40e:	e1 f7       	brne	.-8      	; 0x408 <.do_clear_bss_loop>
     410:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <main>
     414:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <_exit>

00000418 <__bad_interrupt>:
     418:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000041c <arch_spi_master_transmit_byte_val>:
int _nrf24l01p_send_to_address(uint64_t address, uint8_t *data, int datalen){
	//_nrf24l01p_disable_payload_with_ack();
	_nrf24l01p_set_TX_pipe_address(address);
	return _nrf24l01p_send(data,datalen);
	
}
     41c:	80 93 c3 08 	sts	0x08C3, r24
     420:	e0 ec       	ldi	r30, 0xC0	; 192
     422:	f8 e0       	ldi	r31, 0x08	; 8
     424:	82 81       	ldd	r24, Z+2	; 0x02
     426:	88 23       	and	r24, r24
     428:	ec f7       	brge	.-6      	; 0x424 <arch_spi_master_transmit_byte_val+0x8>
     42a:	80 91 c3 08 	lds	r24, 0x08C3
     42e:	08 95       	ret

00000430 <arch_spi_master_transmit_byte_ref>:
     430:	fc 01       	movw	r30, r24
     432:	80 81       	ld	r24, Z
     434:	80 93 c3 08 	sts	0x08C3, r24
     438:	e0 ec       	ldi	r30, 0xC0	; 192
     43a:	f8 e0       	ldi	r31, 0x08	; 8
     43c:	82 81       	ldd	r24, Z+2	; 0x02
     43e:	88 23       	and	r24, r24
     440:	ec f7       	brge	.-6      	; 0x43c <arch_spi_master_transmit_byte_ref+0xc>
     442:	80 91 c3 08 	lds	r24, 0x08C3
     446:	08 95       	ret

00000448 <_nrf24l01p_ce_pin>:
     448:	cf 93       	push	r28
     44a:	c8 2f       	mov	r28, r24
     44c:	88 23       	and	r24, r24
     44e:	29 f0       	breq	.+10     	; 0x45a <_nrf24l01p_ce_pin+0x12>
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e2       	ldi	r25, 0x20	; 32
     454:	0e 94 0f 18 	call	0x301e	; 0x301e <DigitalPin_SetValue>
     458:	04 c0       	rjmp	.+8      	; 0x462 <_nrf24l01p_ce_pin+0x1a>
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	90 e2       	ldi	r25, 0x20	; 32
     45e:	0e 94 1f 18 	call	0x303e	; 0x303e <DigitalPin_ClearValue>
     462:	c0 93 6d 95 	sts	0x956D, r28
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <_nrf24l01p_csn_pin>:
     46a:	cf 93       	push	r28
     46c:	c8 2f       	mov	r28, r24
     46e:	88 23       	and	r24, r24
     470:	29 f0       	breq	.+10     	; 0x47c <_nrf24l01p_csn_pin+0x12>
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e2       	ldi	r25, 0x20	; 32
     476:	0e 94 0f 18 	call	0x301e	; 0x301e <DigitalPin_SetValue>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <_nrf24l01p_csn_pin+0x1a>
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	90 e2       	ldi	r25, 0x20	; 32
     480:	0e 94 1f 18 	call	0x303e	; 0x303e <DigitalPin_ClearValue>
     484:	c0 93 6c 95 	sts	0x956C, r28
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <_nrf24l01p_read_register>:
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	c8 2f       	mov	r28, r24
     49a:	7b 01       	movw	r14, r22
     49c:	8a 01       	movw	r16, r20
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     4a4:	8c 2f       	mov	r24, r28
     4a6:	8f 71       	andi	r24, 0x1F	; 31
     4a8:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     4ac:	10 16       	cp	r1, r16
     4ae:	11 06       	cpc	r1, r17
     4b0:	94 f4       	brge	.+36     	; 0x4d6 <_nrf24l01p_read_register+0x4a>
     4b2:	e7 01       	movw	r28, r14
     4b4:	0e 0d       	add	r16, r14
     4b6:	1f 1d       	adc	r17, r15
     4b8:	0f 2e       	mov	r0, r31
     4ba:	f0 ec       	ldi	r31, 0xC0	; 192
     4bc:	ef 2e       	mov	r14, r31
     4be:	f8 e0       	ldi	r31, 0x08	; 8
     4c0:	ff 2e       	mov	r15, r31
     4c2:	f0 2d       	mov	r31, r0
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     4ca:	f7 01       	movw	r30, r14
     4cc:	83 81       	ldd	r24, Z+3	; 0x03
     4ce:	89 93       	st	Y+, r24
     4d0:	c0 17       	cp	r28, r16
     4d2:	d1 07       	cpc	r29, r17
     4d4:	b9 f7       	brne	.-18     	; 0x4c4 <_nrf24l01p_read_register+0x38>
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     4dc:	df 91       	pop	r29
     4de:	cf 91       	pop	r28
     4e0:	1f 91       	pop	r17
     4e2:	0f 91       	pop	r16
     4e4:	ff 90       	pop	r15
     4e6:	ef 90       	pop	r14
     4e8:	08 95       	ret

000004ea <_nrf24l01p_write_register>:
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	c8 2f       	mov	r28, r24
     4f8:	7b 01       	movw	r14, r22
     4fa:	8a 01       	movw	r16, r20
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     502:	8c 2f       	mov	r24, r28
     504:	8f 71       	andi	r24, 0x1F	; 31
     506:	80 62       	ori	r24, 0x20	; 32
     508:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     50c:	10 16       	cp	r1, r16
     50e:	11 06       	cpc	r1, r17
     510:	54 f4       	brge	.+20     	; 0x526 <_nrf24l01p_write_register+0x3c>
     512:	e7 01       	movw	r28, r14
     514:	0e 0d       	add	r16, r14
     516:	1f 1d       	adc	r17, r15
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 18 02 	call	0x430	; 0x430 <arch_spi_master_transmit_byte_ref>
     51e:	21 96       	adiw	r28, 0x01	; 1
     520:	c0 17       	cp	r28, r16
     522:	d1 07       	cpc	r29, r17
     524:	c9 f7       	brne	.-14     	; 0x518 <_nrf24l01p_write_register+0x2e>
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	1f 91       	pop	r17
     532:	0f 91       	pop	r16
     534:	ff 90       	pop	r15
     536:	ef 90       	pop	r14
     538:	08 95       	ret

0000053a <_nrf24l01p_write_tx_payload>:
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	7c 01       	movw	r14, r24
     548:	8b 01       	movw	r16, r22
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     550:	80 ea       	ldi	r24, 0xA0	; 160
     552:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     556:	10 16       	cp	r1, r16
     558:	11 06       	cpc	r1, r17
     55a:	54 f4       	brge	.+20     	; 0x570 <_nrf24l01p_write_tx_payload+0x36>
     55c:	e7 01       	movw	r28, r14
     55e:	0e 0d       	add	r16, r14
     560:	1f 1d       	adc	r17, r15
     562:	ce 01       	movw	r24, r28
     564:	0e 94 18 02 	call	0x430	; 0x430 <arch_spi_master_transmit_byte_ref>
     568:	21 96       	adiw	r28, 0x01	; 1
     56a:	c0 17       	cp	r28, r16
     56c:	d1 07       	cpc	r29, r17
     56e:	c9 f7       	brne	.-14     	; 0x562 <_nrf24l01p_write_tx_payload+0x28>
     570:	81 e0       	ldi	r24, 0x01	; 1
     572:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	0f 91       	pop	r16
     57e:	ff 90       	pop	r15
     580:	ef 90       	pop	r14
     582:	08 95       	ret

00000584 <_nrf24l01p_flush_rx>:
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     58a:	82 ee       	ldi	r24, 0xE2	; 226
     58c:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     596:	08 95       	ret

00000598 <_nrf24l01p_get_status>:
     598:	cf 93       	push	r28
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     5a0:	8f ef       	ldi	r24, 0xFF	; 255
     5a2:	0e 94 0e 02 	call	0x41c	; 0x41c <arch_spi_master_transmit_byte_val>
     5a6:	c8 2f       	mov	r28, r24
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     5ae:	8c 2f       	mov	r24, r28
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <_nrf24l01p_power_up>:
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	be 01       	movw	r22, r28
     5c6:	6f 5f       	subi	r22, 0xFF	; 255
     5c8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	82 60       	ori	r24, 0x02	; 2
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	41 e0       	ldi	r20, 0x01	; 1
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 e0       	ldi	r24, 0x00	; 0
     5e2:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     5e6:	8f e9       	ldi	r24, 0x9F	; 159
     5e8:	9c e8       	ldi	r25, 0x8C	; 140
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	f1 f7       	brne	.-4      	; 0x5ea <_nrf24l01p_power_up+0x34>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <_nrf24l01p_power_up+0x3a>
     5f0:	00 00       	nop
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	80 93 6e 95 	sts	0x956E, r24
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	08 95       	ret

00000600 <_nrf24l01p_power_down>:
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	1f 92       	push	r1
     606:	cd b7       	in	r28, 0x3d	; 61
     608:	de b7       	in	r29, 0x3e	; 62
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	be 01       	movw	r22, r28
     610:	6f 5f       	subi	r22, 0xFF	; 255
     612:	7f 4f       	sbci	r23, 0xFF	; 255
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	8d 7f       	andi	r24, 0xFD	; 253
     61e:	89 83       	std	Y+1, r24	; 0x01
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	be 01       	movw	r22, r28
     626:	6f 5f       	subi	r22, 0xFF	; 255
     628:	7f 4f       	sbci	r23, 0xFF	; 255
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 6e 95 	sts	0x956E, r24
     636:	0f 90       	pop	r0
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	08 95       	ret

0000063e <_nrf24l01p_rx_mode>:
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	1f 92       	push	r1
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	41 e0       	ldi	r20, 0x01	; 1
     64a:	50 e0       	ldi	r21, 0x00	; 0
     64c:	be 01       	movw	r22, r28
     64e:	6f 5f       	subi	r22, 0xFF	; 255
     650:	7f 4f       	sbci	r23, 0xFF	; 255
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	81 60       	ori	r24, 0x01	; 1
     65c:	89 83       	std	Y+1, r24	; 0x01
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	be 01       	movw	r22, r28
     664:	6f 5f       	subi	r22, 0xFF	; 255
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	80 93 6e 95 	sts	0x956E, r24
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <_nrf24l01p_tx_mode>:
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	1f 92       	push	r1
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	50 e0       	ldi	r21, 0x00	; 0
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	8e 7f       	andi	r24, 0xFE	; 254
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	41 e0       	ldi	r20, 0x01	; 1
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	be 01       	movw	r22, r28
     6a2:	6f 5f       	subi	r22, 0xFF	; 255
     6a4:	7f 4f       	sbci	r23, 0xFF	; 255
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     6ac:	84 e0       	ldi	r24, 0x04	; 4
     6ae:	80 93 6e 95 	sts	0x956E, r24
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <_nrf24l01p_enable_auto_ack>:
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	1f 92       	push	r1
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	18 2f       	mov	r17, r24
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	be 01       	movw	r22, r28
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     6d8:	21 e0       	ldi	r18, 0x01	; 1
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	c9 01       	movw	r24, r18
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_nrf24l01p_enable_auto_ack+0x2a>
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	1a 95       	dec	r17
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <_nrf24l01p_enable_auto_ack+0x26>
     6e8:	99 81       	ldd	r25, Y+1	; 0x01
     6ea:	89 2b       	or	r24, r25
     6ec:	89 83       	std	Y+1, r24	; 0x01
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	50 e0       	ldi	r21, 0x00	; 0
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     6fe:	0f 90       	pop	r0
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	08 95       	ret

00000708 <_nrf24l01p_disable_auto_ack_all_pipes>:
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	19 82       	std	Y+1, r1	; 0x01
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	be 01       	movw	r22, r28
     71a:	6f 5f       	subi	r22, 0xFF	; 255
     71c:	7f 4f       	sbci	r23, 0xFF	; 255
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <_nrf24l01p_enable_rx_on_pipe>:
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	1f 92       	push	r1
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	18 2f       	mov	r17, r24
     73a:	41 e0       	ldi	r20, 0x01	; 1
     73c:	50 e0       	ldi	r21, 0x00	; 0
     73e:	be 01       	movw	r22, r28
     740:	6f 5f       	subi	r22, 0xFF	; 255
     742:	7f 4f       	sbci	r23, 0xFF	; 255
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     74a:	21 e0       	ldi	r18, 0x01	; 1
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	c9 01       	movw	r24, r18
     750:	02 c0       	rjmp	.+4      	; 0x756 <_nrf24l01p_enable_rx_on_pipe+0x2a>
     752:	88 0f       	add	r24, r24
     754:	99 1f       	adc	r25, r25
     756:	1a 95       	dec	r17
     758:	e2 f7       	brpl	.-8      	; 0x752 <_nrf24l01p_enable_rx_on_pipe+0x26>
     75a:	99 81       	ldd	r25, Y+1	; 0x01
     75c:	89 2b       	or	r24, r25
     75e:	89 83       	std	Y+1, r24	; 0x01
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	be 01       	movw	r22, r28
     766:	6f 5f       	subi	r22, 0xFF	; 255
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     770:	0f 90       	pop	r0
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	1f 91       	pop	r17
     778:	08 95       	ret

0000077a <_nrf24l01p_set_auto_retransmission_count>:
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	1f 92       	push	r1
     782:	cd b7       	in	r28, 0x3d	; 61
     784:	de b7       	in	r29, 0x3e	; 62
     786:	18 2f       	mov	r17, r24
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	50 e0       	ldi	r21, 0x00	; 0
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     798:	99 81       	ldd	r25, Y+1	; 0x01
     79a:	90 7f       	andi	r25, 0xF0	; 240
     79c:	81 2f       	mov	r24, r17
     79e:	89 2b       	or	r24, r25
     7a0:	89 83       	std	Y+1, r24	; 0x01
     7a2:	41 e0       	ldi	r20, 0x01	; 1
     7a4:	50 e0       	ldi	r21, 0x00	; 0
     7a6:	be 01       	movw	r22, r28
     7a8:	6f 5f       	subi	r22, 0xFF	; 255
     7aa:	7f 4f       	sbci	r23, 0xFF	; 255
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	1f 91       	pop	r17
     7ba:	08 95       	ret

000007bc <_nrf24l01p_set_auto_retransmission_delay>:
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	1f 92       	push	r1
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	18 2f       	mov	r17, r24
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	be 01       	movw	r22, r28
     7d0:	6f 5f       	subi	r22, 0xFF	; 255
     7d2:	7f 4f       	sbci	r23, 0xFF	; 255
     7d4:	84 e0       	ldi	r24, 0x04	; 4
     7d6:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     7da:	20 e1       	ldi	r18, 0x10	; 16
     7dc:	12 9f       	mul	r17, r18
     7de:	c0 01       	movw	r24, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	99 81       	ldd	r25, Y+1	; 0x01
     7e4:	9f 70       	andi	r25, 0x0F	; 15
     7e6:	89 2b       	or	r24, r25
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	be 01       	movw	r22, r28
     7f0:	6f 5f       	subi	r22, 0xFF	; 255
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	08 95       	ret

00000804 <_nrf24l01p_set_DataRate>:
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	1f 92       	push	r1
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	18 2f       	mov	r17, r24
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	50 e0       	ldi	r21, 0x00	; 0
     816:	be 01       	movw	r22, r28
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     822:	99 81       	ldd	r25, Y+1	; 0x01
     824:	97 7d       	andi	r25, 0xD7	; 215
     826:	81 2f       	mov	r24, r17
     828:	89 2b       	or	r24, r25
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	be 01       	movw	r22, r28
     832:	6f 5f       	subi	r22, 0xFF	; 255
     834:	7f 4f       	sbci	r23, 0xFF	; 255
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     83c:	0f 90       	pop	r0
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	08 95       	ret

00000846 <_nrf24l01p_get_max_retry_flag>:
     846:	0e 94 cc 02 	call	0x598	; 0x598 <_nrf24l01p_get_status>
     84a:	92 95       	swap	r25
     84c:	82 95       	swap	r24
     84e:	8f 70       	andi	r24, 0x0F	; 15
     850:	89 27       	eor	r24, r25
     852:	9f 70       	andi	r25, 0x0F	; 15
     854:	89 27       	eor	r24, r25
     856:	81 70       	andi	r24, 0x01	; 1
     858:	08 95       	ret

0000085a <_nrf24l01p_clear_max_retry_flag>:
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	1f 92       	push	r1
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
     864:	0e 94 cc 02 	call	0x598	; 0x598 <_nrf24l01p_get_status>
     868:	80 61       	ori	r24, 0x10	; 16
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	41 e0       	ldi	r20, 0x01	; 1
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	be 01       	movw	r22, r28
     872:	6f 5f       	subi	r22, 0xFF	; 255
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     87c:	0f 90       	pop	r0
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <_nrf24l01p_get_data_sent_flag>:
     884:	0e 94 cc 02 	call	0x598	; 0x598 <_nrf24l01p_get_status>
     888:	96 95       	lsr	r25
     88a:	87 95       	ror	r24
     88c:	92 95       	swap	r25
     88e:	82 95       	swap	r24
     890:	8f 70       	andi	r24, 0x0F	; 15
     892:	89 27       	eor	r24, r25
     894:	9f 70       	andi	r25, 0x0F	; 15
     896:	89 27       	eor	r24, r25
     898:	81 70       	andi	r24, 0x01	; 1
     89a:	08 95       	ret

0000089c <_nrf24l01p_clear_data_sent_flag>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	0e 94 cc 02 	call	0x598	; 0x598 <_nrf24l01p_get_status>
     8aa:	80 62       	ori	r24, 0x20	; 32
     8ac:	89 83       	std	Y+1, r24	; 0x01
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	be 01       	movw	r22, r28
     8b4:	6f 5f       	subi	r22, 0xFF	; 255
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	87 e0       	ldi	r24, 0x07	; 7
     8ba:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     8be:	0f 90       	pop	r0
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <_nrf24l01p_set_RX_pipe_address>:
     8c6:	2f 92       	push	r2
     8c8:	3f 92       	push	r3
     8ca:	4f 92       	push	r4
     8cc:	5f 92       	push	r5
     8ce:	6f 92       	push	r6
     8d0:	7f 92       	push	r7
     8d2:	8f 92       	push	r8
     8d4:	9f 92       	push	r9
     8d6:	af 92       	push	r10
     8d8:	bf 92       	push	r11
     8da:	cf 92       	push	r12
     8dc:	df 92       	push	r13
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	25 97       	sbiw	r28, 0x05	; 5
     8f0:	cd bf       	out	0x3d, r28	; 61
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	48 2e       	mov	r4, r24
     8f6:	b0 2e       	mov	r11, r16
     8f8:	a2 2e       	mov	r10, r18
     8fa:	93 2e       	mov	r9, r19
     8fc:	84 2e       	mov	r8, r20
     8fe:	75 2e       	mov	r7, r21
     900:	66 2e       	mov	r6, r22
     902:	57 2e       	mov	r5, r23
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	84 15       	cp	r24, r4
     908:	68 f4       	brcc	.+26     	; 0x924 <_nrf24l01p_set_RX_pipe_address+0x5e>
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	8e ef       	ldi	r24, 0xFE	; 254
     910:	84 0d       	add	r24, r4
     912:	84 30       	cpi	r24, 0x04	; 4
     914:	08 f0       	brcs	.+2      	; 0x918 <_nrf24l01p_set_RX_pipe_address+0x52>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	c2 2e       	mov	r12, r18
     91a:	d9 2e       	mov	r13, r25
     91c:	1c 14       	cp	r1, r12
     91e:	1d 04       	cpc	r1, r13
     920:	34 f0       	brlt	.+12     	; 0x92e <_nrf24l01p_set_RX_pipe_address+0x68>
     922:	21 c0       	rjmp	.+66     	; 0x966 <_nrf24l01p_set_RX_pipe_address+0xa0>
     924:	0f 2e       	mov	r0, r31
     926:	f5 e0       	ldi	r31, 0x05	; 5
     928:	cf 2e       	mov	r12, r31
     92a:	d1 2c       	mov	r13, r1
     92c:	f0 2d       	mov	r31, r0
     92e:	de 01       	movw	r26, r28
     930:	11 96       	adiw	r26, 0x01	; 1
     932:	7d 01       	movw	r14, r26
     934:	21 2c       	mov	r2, r1
     936:	31 2c       	mov	r3, r1
     938:	e0 e0       	ldi	r30, 0x00	; 0
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	2b 2d       	mov	r18, r11
     93e:	31 2f       	mov	r19, r17
     940:	4a 2d       	mov	r20, r10
     942:	59 2d       	mov	r21, r9
     944:	68 2d       	mov	r22, r8
     946:	77 2d       	mov	r23, r7
     948:	86 2d       	mov	r24, r6
     94a:	95 2d       	mov	r25, r5
     94c:	02 2d       	mov	r16, r2
     94e:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__lshrdi3>
     952:	d7 01       	movw	r26, r14
     954:	2d 93       	st	X+, r18
     956:	7d 01       	movw	r14, r26
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	b8 e0       	ldi	r27, 0x08	; 8
     95c:	2b 0e       	add	r2, r27
     95e:	31 1c       	adc	r3, r1
     960:	ec 15       	cp	r30, r12
     962:	fd 05       	cpc	r31, r13
     964:	5c f3       	brlt	.-42     	; 0x93c <_nrf24l01p_set_RX_pipe_address+0x76>
     966:	a6 01       	movw	r20, r12
     968:	be 01       	movw	r22, r28
     96a:	6f 5f       	subi	r22, 0xFF	; 255
     96c:	7f 4f       	sbci	r23, 0xFF	; 255
     96e:	8a e0       	ldi	r24, 0x0A	; 10
     970:	84 0d       	add	r24, r4
     972:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     976:	25 96       	adiw	r28, 0x05	; 5
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	de bf       	out	0x3e, r29	; 62
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	08 95       	ret

000009a2 <_nrf24l01p_set_TX_pipe_address>:
     9a2:	9f 92       	push	r9
     9a4:	af 92       	push	r10
     9a6:	bf 92       	push	r11
     9a8:	cf 92       	push	r12
     9aa:	df 92       	push	r13
     9ac:	ef 92       	push	r14
     9ae:	ff 92       	push	r15
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62
     9bc:	25 97       	sbiw	r28, 0x05	; 5
     9be:	cd bf       	out	0x3d, r28	; 61
     9c0:	de bf       	out	0x3e, r29	; 62
     9c2:	92 2e       	mov	r9, r18
     9c4:	a3 2e       	mov	r10, r19
     9c6:	b4 2e       	mov	r11, r20
     9c8:	c5 2e       	mov	r12, r21
     9ca:	d6 2e       	mov	r13, r22
     9cc:	e7 2e       	mov	r14, r23
     9ce:	f8 2e       	mov	r15, r24
     9d0:	19 2f       	mov	r17, r25
     9d2:	de 01       	movw	r26, r28
     9d4:	11 96       	adiw	r26, 0x01	; 1
     9d6:	e0 e0       	ldi	r30, 0x00	; 0
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	29 2d       	mov	r18, r9
     9dc:	3a 2d       	mov	r19, r10
     9de:	4b 2d       	mov	r20, r11
     9e0:	5c 2d       	mov	r21, r12
     9e2:	6d 2d       	mov	r22, r13
     9e4:	7e 2d       	mov	r23, r14
     9e6:	8f 2d       	mov	r24, r15
     9e8:	91 2f       	mov	r25, r17
     9ea:	0e 2f       	mov	r16, r30
     9ec:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__lshrdi3>
     9f0:	2d 93       	st	X+, r18
     9f2:	38 96       	adiw	r30, 0x08	; 8
     9f4:	e8 32       	cpi	r30, 0x28	; 40
     9f6:	f1 05       	cpc	r31, r1
     9f8:	81 f7       	brne	.-32     	; 0x9da <_nrf24l01p_set_TX_pipe_address+0x38>
     9fa:	45 e0       	ldi	r20, 0x05	; 5
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	be 01       	movw	r22, r28
     a00:	6f 5f       	subi	r22, 0xFF	; 255
     a02:	7f 4f       	sbci	r23, 0xFF	; 255
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     a0a:	25 96       	adiw	r28, 0x05	; 5
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	1f 91       	pop	r17
     a16:	0f 91       	pop	r16
     a18:	ff 90       	pop	r15
     a1a:	ef 90       	pop	r14
     a1c:	df 90       	pop	r13
     a1e:	cf 90       	pop	r12
     a20:	bf 90       	pop	r11
     a22:	af 90       	pop	r10
     a24:	9f 90       	pop	r9
     a26:	08 95       	ret

00000a28 <_nrf24l01p_enable_dynamic_payload_pipe>:
     a28:	1f 93       	push	r17
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	18 2f       	mov	r17, r24
     a36:	41 e0       	ldi	r20, 0x01	; 1
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	be 01       	movw	r22, r28
     a3c:	6f 5f       	subi	r22, 0xFF	; 255
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8c e1       	ldi	r24, 0x1C	; 28
     a42:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	c9 01       	movw	r24, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	1a 95       	dec	r17
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     a56:	99 81       	ldd	r25, Y+1	; 0x01
     a58:	89 2b       	or	r24, r25
     a5a:	89 83       	std	Y+1, r24	; 0x01
     a5c:	41 e0       	ldi	r20, 0x01	; 1
     a5e:	50 e0       	ldi	r21, 0x00	; 0
     a60:	be 01       	movw	r22, r28
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8c e1       	ldi	r24, 0x1C	; 28
     a68:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	08 95       	ret

00000a76 <_nrf24l01p_disable_dynamic_payload_all_pipe>:
     a76:	cf 93       	push	r28
     a78:	df 93       	push	r29
     a7a:	1f 92       	push	r1
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	19 82       	std	Y+1, r1	; 0x01
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	be 01       	movw	r22, r28
     a88:	6f 5f       	subi	r22, 0xFF	; 255
     a8a:	7f 4f       	sbci	r23, 0xFF	; 255
     a8c:	8c e1       	ldi	r24, 0x1C	; 28
     a8e:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     a92:	0f 90       	pop	r0
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	08 95       	ret

00000a9a <_nrf24l01p_enable_dynamic_payload>:
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	1f 92       	push	r1
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	be 01       	movw	r22, r28
     aaa:	6f 5f       	subi	r22, 0xFF	; 255
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	8d e1       	ldi	r24, 0x1D	; 29
     ab0:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	84 60       	ori	r24, 0x04	; 4
     ab8:	89 83       	std	Y+1, r24	; 0x01
     aba:	41 e0       	ldi	r20, 0x01	; 1
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	be 01       	movw	r22, r28
     ac0:	6f 5f       	subi	r22, 0xFF	; 255
     ac2:	7f 4f       	sbci	r23, 0xFF	; 255
     ac4:	8d e1       	ldi	r24, 0x1D	; 29
     ac6:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     aca:	0f 90       	pop	r0
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	08 95       	ret

00000ad2 <_nrf24l01p_enable_payload_with_ack>:
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	1f 92       	push	r1
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	be 01       	movw	r22, r28
     ae2:	6f 5f       	subi	r22, 0xFF	; 255
     ae4:	7f 4f       	sbci	r23, 0xFF	; 255
     ae6:	8d e1       	ldi	r24, 0x1D	; 29
     ae8:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_read_register>
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	82 60       	ori	r24, 0x02	; 2
     af0:	89 83       	std	Y+1, r24	; 0x01
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	be 01       	movw	r22, r28
     af8:	6f 5f       	subi	r22, 0xFF	; 255
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	8d e1       	ldi	r24, 0x1D	; 29
     afe:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     b02:	0f 90       	pop	r0
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <_nrf24l01p_startup>:
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	1f 92       	push	r1
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	89 83       	std	Y+1, r24	; 0x01
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	be 01       	movw	r22, r28
     b1e:	6f 5f       	subi	r22, 0xFF	; 255
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	86 e0       	ldi	r24, 0x06	; 6
     b24:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     b28:	19 82       	std	Y+1, r1	; 0x01
     b2a:	41 e0       	ldi	r20, 0x01	; 1
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	be 01       	movw	r22, r28
     b30:	6f 5f       	subi	r22, 0xFF	; 255
     b32:	7f 4f       	sbci	r23, 0xFF	; 255
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	89 83       	std	Y+1, r24	; 0x01
     b3e:	41 e0       	ldi	r20, 0x01	; 1
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	be 01       	movw	r22, r28
     b44:	6f 5f       	subi	r22, 0xFF	; 255
     b46:	7f 4f       	sbci	r23, 0xFF	; 255
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     b4e:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_nrf24l01p_power_up>
     b52:	8f e9       	ldi	r24, 0x9F	; 159
     b54:	9c e8       	ldi	r25, 0x8C	; 140
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <_nrf24l01p_startup+0x4c>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <_nrf24l01p_startup+0x52>
     b5c:	00 00       	nop
     b5e:	0e 94 1f 03 	call	0x63e	; 0x63e <_nrf24l01p_rx_mode>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     b68:	0f 90       	pop	r0
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <_nrf24l01p_init>:
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	1f 92       	push	r1
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f6 e0       	ldi	r31, 0x06	; 6
     b80:	80 eb       	ldi	r24, 0xB0	; 176
     b82:	81 83       	std	Z+1, r24	; 0x01
     b84:	80 e5       	ldi	r24, 0x50	; 80
     b86:	80 93 c0 08 	sts	0x08C0, r24
     b8a:	80 e1       	ldi	r24, 0x10	; 16
     b8c:	81 83       	std	Z+1, r24	; 0x01
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	81 83       	std	Z+1, r24	; 0x01
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 35 02 	call	0x46a	; 0x46a <_nrf24l01p_csn_pin>
     b9e:	0e 94 c2 02 	call	0x584	; 0x584 <_nrf24l01p_flush_rx>
     ba2:	0e 94 00 03 	call	0x600	; 0x600 <_nrf24l01p_power_down>
     ba6:	8e e0       	ldi	r24, 0x0E	; 14
     ba8:	89 83       	std	Y+1, r24	; 0x01
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	be 01       	movw	r22, r28
     bb0:	6f 5f       	subi	r22, 0xFF	; 255
     bb2:	7f 4f       	sbci	r23, 0xFF	; 255
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     bba:	8b e0       	ldi	r24, 0x0B	; 11
     bbc:	8a 83       	std	Y+2, r24	; 0x02
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	be 01       	movw	r22, r28
     bc4:	6e 5f       	subi	r22, 0xFE	; 254
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	0e 94 75 02 	call	0x4ea	; 0x4ea <_nrf24l01p_write_register>
     bce:	0e 94 84 03 	call	0x708	; 0x708 <_nrf24l01p_disable_auto_ack_all_pipes>
     bd2:	0e 94 3b 05 	call	0xa76	; 0xa76 <_nrf24l01p_disable_dynamic_payload_all_pipe>
     bd6:	0e 94 85 05 	call	0xb0a	; 0xb0a <_nrf24l01p_startup>
     bda:	0e 94 4d 05 	call	0xa9a	; 0xa9a <_nrf24l01p_enable_dynamic_payload>
     bde:	0e 94 69 05 	call	0xad2	; 0xad2 <_nrf24l01p_enable_payload_with_ack>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     bfa:	84 e0       	ldi	r24, 0x04	; 4
     bfc:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     c00:	85 e0       	ldi	r24, 0x05	; 5
     c02:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_nrf24l01p_enable_auto_ack>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c1e:	84 e0       	ldi	r24, 0x04	; 4
     c20:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c24:	85 e0       	ldi	r24, 0x05	; 5
     c26:	0e 94 14 05 	call	0xa28	; 0xa28 <_nrf24l01p_enable_dynamic_payload_pipe>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c48:	85 e0       	ldi	r24, 0x05	; 5
     c4a:	0e 94 96 03 	call	0x72c	; 0x72c <_nrf24l01p_enable_rx_on_pipe>
     c4e:	8f e0       	ldi	r24, 0x0F	; 15
     c50:	0e 94 bd 03 	call	0x77a	; 0x77a <_nrf24l01p_set_auto_retransmission_count>
     c54:	8f e0       	ldi	r24, 0x0F	; 15
     c56:	0e 94 de 03 	call	0x7bc	; 0x7bc <_nrf24l01p_set_auto_retransmission_delay>
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	0e 94 02 04 	call	0x804	; 0x804 <_nrf24l01p_set_DataRate>
     c60:	0e 94 c2 02 	call	0x584	; 0x584 <_nrf24l01p_flush_rx>
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	08 95       	ret

00000c6e <_nrf24l01p_send>:
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	16 16       	cp	r1, r22
     c78:	17 06       	cpc	r1, r23
     c7a:	0c f0       	brlt	.+2      	; 0xc7e <_nrf24l01p_send+0x10>
     c7c:	3f c0       	rjmp	.+126    	; 0xcfc <_nrf24l01p_send+0x8e>
     c7e:	eb 01       	movw	r28, r22
     c80:	8c 01       	movw	r16, r24
     c82:	0e 94 4e 04 	call	0x89c	; 0x89c <_nrf24l01p_clear_data_sent_flag>
     c86:	be 01       	movw	r22, r28
     c88:	a1 97       	sbiw	r28, 0x21	; 33
     c8a:	14 f0       	brlt	.+4      	; 0xc90 <_nrf24l01p_send+0x22>
     c8c:	60 e2       	ldi	r22, 0x20	; 32
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 9d 02 	call	0x53a	; 0x53a <_nrf24l01p_write_tx_payload>
     c96:	10 91 6d 95 	lds	r17, 0x956D
     c9a:	00 91 6e 95 	lds	r16, 0x956E
     c9e:	0e 94 3e 03 	call	0x67c	; 0x67c <_nrf24l01p_tx_mode>
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     cae:	8a e6       	ldi	r24, 0x6A	; 106
     cb0:	8a 95       	dec	r24
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <_nrf24l01p_send+0x42>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <_nrf24l01p_send+0x48>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <_nrf24l01p_send+0x58>
     cbe:	0e 94 23 04 	call	0x846	; 0x846 <_nrf24l01p_get_max_retry_flag>
     cc2:	81 11       	cpse	r24, r1
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <_nrf24l01p_send+0x66>
     cc6:	0e 94 42 04 	call	0x884	; 0x884 <_nrf24l01p_get_data_sent_flag>
     cca:	88 23       	and	r24, r24
     ccc:	c1 f3       	breq	.-16     	; 0xcbe <_nrf24l01p_send+0x50>
     cce:	d0 e0       	ldi	r29, 0x00	; 0
     cd0:	c0 e0       	ldi	r28, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <_nrf24l01p_send+0x6a>
     cd4:	df ef       	ldi	r29, 0xFF	; 255
     cd6:	cf ef       	ldi	r28, 0xFF	; 255
     cd8:	0e 94 2d 04 	call	0x85a	; 0x85a <_nrf24l01p_clear_max_retry_flag>
     cdc:	0e 94 4e 04 	call	0x89c	; 0x89c <_nrf24l01p_clear_data_sent_flag>
     ce0:	03 30       	cpi	r16, 0x03	; 3
     ce2:	11 f4       	brne	.+4      	; 0xce8 <_nrf24l01p_send+0x7a>
     ce4:	0e 94 1f 03 	call	0x63e	; 0x63e <_nrf24l01p_rx_mode>
     ce8:	81 2f       	mov	r24, r17
     cea:	0e 94 24 02 	call	0x448	; 0x448 <_nrf24l01p_ce_pin>
     cee:	8a e2       	ldi	r24, 0x2A	; 42
     cf0:	8a 95       	dec	r24
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <_nrf24l01p_send+0x82>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <_nrf24l01p_send+0x88>
     cf6:	8d 2f       	mov	r24, r29
     cf8:	9c 2f       	mov	r25, r28
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <_nrf24l01p_send+0x92>
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	df 91       	pop	r29
     d02:	cf 91       	pop	r28
     d04:	1f 91       	pop	r17
     d06:	0f 91       	pop	r16
     d08:	08 95       	ret

00000d0a <_nrf24l01p_send_to_address_ack>:
int _nrf24l01p_send_to_address_ack(uint64_t address, uint8_t *data, int datalen){
     d0a:	6f 92       	push	r6
     d0c:	7f 92       	push	r7
     d0e:	8f 92       	push	r8
     d10:	9f 92       	push	r9
     d12:	af 92       	push	r10
     d14:	bf 92       	push	r11
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	62 2e       	mov	r6, r18
     d28:	73 2e       	mov	r7, r19
     d2a:	a4 2e       	mov	r10, r20
     d2c:	b5 2e       	mov	r11, r21
     d2e:	c6 2e       	mov	r12, r22
     d30:	d7 2e       	mov	r13, r23
     d32:	d8 2f       	mov	r29, r24
     d34:	c9 2f       	mov	r28, r25
     d36:	48 01       	movw	r8, r16
	//_nrf24l01p_enable_payload_with_ack();
	_nrf24l01p_set_TX_pipe_address(address);
     d38:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <_nrf24l01p_set_TX_pipe_address>
	_nrf24l01p_set_RX_pipe_address(_NRF24L01P_PIPE_P0, address);
     d3c:	06 2d       	mov	r16, r6
     d3e:	17 2d       	mov	r17, r7
     d40:	2a 2d       	mov	r18, r10
     d42:	3b 2d       	mov	r19, r11
     d44:	4c 2d       	mov	r20, r12
     d46:	5d 2d       	mov	r21, r13
     d48:	6d 2f       	mov	r22, r29
     d4a:	7c 2f       	mov	r23, r28
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <_nrf24l01p_set_RX_pipe_address>
	return _nrf24l01p_send(data,datalen);
     d52:	b7 01       	movw	r22, r14
     d54:	c4 01       	movw	r24, r8
     d56:	0e 94 37 06 	call	0xc6e	; 0xc6e <_nrf24l01p_send>
}
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	ff 90       	pop	r15
     d64:	ef 90       	pop	r14
     d66:	df 90       	pop	r13
     d68:	cf 90       	pop	r12
     d6a:	bf 90       	pop	r11
     d6c:	af 90       	pop	r10
     d6e:	9f 90       	pop	r9
     d70:	8f 90       	pop	r8
     d72:	7f 90       	pop	r7
     d74:	6f 90       	pop	r6
     d76:	08 95       	ret

00000d78 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     d78:	29 2f       	mov	r18, r25
     d7a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	59 f0       	breq	.+22     	; 0xd98 <CALLBACK_USB_GetDescriptor+0x20>
     d82:	23 30       	cpi	r18, 0x03	; 3
     d84:	31 05       	cpc	r19, r1
     d86:	69 f0       	breq	.+26     	; 0xda2 <CALLBACK_USB_GetDescriptor+0x2a>
     d88:	21 30       	cpi	r18, 0x01	; 1
     d8a:	31 05       	cpc	r19, r1
     d8c:	29 f5       	brne	.+74     	; 0xdd8 <CALLBACK_USB_GetDescriptor+0x60>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     d8e:	82 e1       	ldi	r24, 0x12	; 18
     d90:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     d92:	22 ec       	ldi	r18, 0xC2	; 194
     d94:	32 e0       	ldi	r19, 0x02	; 2
     d96:	29 c0       	rjmp	.+82     	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     d98:	8e e3       	ldi	r24, 0x3E	; 62
     d9a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     d9c:	24 e8       	ldi	r18, 0x84	; 132
     d9e:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     da0:	24 c0       	rjmp	.+72     	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
     da2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	59 f0       	breq	.+22     	; 0xdc0 <CALLBACK_USB_GetDescriptor+0x48>
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	91 05       	cpc	r25, r1
     dae:	71 f0       	breq	.+28     	; 0xdcc <CALLBACK_USB_GetDescriptor+0x54>
     db0:	89 2b       	or	r24, r25
     db2:	b9 f4       	brne	.+46     	; 0xde2 <CALLBACK_USB_GetDescriptor+0x6a>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     db4:	e0 e8       	ldi	r30, 0x80	; 128
     db6:	f2 e0       	ldi	r31, 0x02	; 2
     db8:	84 91       	lpm	r24, Z
     dba:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     dbc:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     dbe:	15 c0       	rjmp	.+42     	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     dc0:	e6 e6       	ldi	r30, 0x66	; 102
     dc2:	f2 e0       	ldi	r31, 0x02	; 2
     dc4:	84 91       	lpm	r24, Z
     dc6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     dc8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     dca:	0f c0       	rjmp	.+30     	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     dcc:	e8 e4       	ldi	r30, 0x48	; 72
     dce:	f2 e0       	ldi	r31, 0x02	; 2
     dd0:	84 91       	lpm	r24, Z
     dd2:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     dd4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     dd6:	09 c0       	rjmp	.+18     	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	04 c0       	rjmp	.+8      	; 0xdea <CALLBACK_USB_GetDescriptor+0x72>
	uint16_t    Size    = NO_DESCRIPTOR;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     dea:	fa 01       	movw	r30, r20
     dec:	20 83       	st	Z, r18
     dee:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     df0:	08 95       	ret

00000df2 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     df2:	31 e1       	ldi	r19, 0x11	; 17
     df4:	fc 01       	movw	r30, r24
     df6:	30 83       	st	Z, r19
     df8:	31 97       	sbiw	r30, 0x01	; 1
     dfa:	22 e2       	ldi	r18, 0x22	; 34
     dfc:	20 83       	st	Z, r18
     dfe:	31 97       	sbiw	r30, 0x01	; 1
     e00:	a3 e3       	ldi	r26, 0x33	; 51
     e02:	a0 83       	st	Z, r26
     e04:	31 97       	sbiw	r30, 0x01	; 1
     e06:	60 83       	st	Z, r22
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	70 83       	st	Z, r23
     e0c:	31 97       	sbiw	r30, 0x01	; 1
     e0e:	10 82       	st	Z, r1
     e10:	31 97       	sbiw	r30, 0x01	; 1
     e12:	10 82       	st	Z, r1
     e14:	31 97       	sbiw	r30, 0x01	; 1
     e16:	60 e8       	ldi	r22, 0x80	; 128
     e18:	60 83       	st	Z, r22
     e1a:	31 97       	sbiw	r30, 0x01	; 1
     e1c:	10 82       	st	Z, r1
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	62 e0       	ldi	r22, 0x02	; 2
     e22:	60 83       	st	Z, r22
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	63 e0       	ldi	r22, 0x03	; 3
     e28:	60 83       	st	Z, r22
     e2a:	31 97       	sbiw	r30, 0x01	; 1
     e2c:	64 e0       	ldi	r22, 0x04	; 4
     e2e:	60 83       	st	Z, r22
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	60 83       	st	Z, r22
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	66 e0       	ldi	r22, 0x06	; 6
     e3a:	60 83       	st	Z, r22
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	67 e0       	ldi	r22, 0x07	; 7
     e40:	60 83       	st	Z, r22
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	68 e0       	ldi	r22, 0x08	; 8
     e46:	60 83       	st	Z, r22
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	69 e0       	ldi	r22, 0x09	; 9
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	60 e1       	ldi	r22, 0x10	; 16
     e52:	60 83       	st	Z, r22
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	30 83       	st	Z, r19
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	32 e1       	ldi	r19, 0x12	; 18
     e5c:	30 83       	st	Z, r19
     e5e:	31 97       	sbiw	r30, 0x01	; 1
     e60:	33 e1       	ldi	r19, 0x13	; 19
     e62:	30 83       	st	Z, r19
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	34 e1       	ldi	r19, 0x14	; 20
     e68:	30 83       	st	Z, r19
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	35 e1       	ldi	r19, 0x15	; 21
     e6e:	30 83       	st	Z, r19
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	36 e1       	ldi	r19, 0x16	; 22
     e74:	30 83       	st	Z, r19
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	37 e1       	ldi	r19, 0x17	; 23
     e7a:	30 83       	st	Z, r19
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	38 e1       	ldi	r19, 0x18	; 24
     e80:	30 83       	st	Z, r19
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	39 e1       	ldi	r19, 0x19	; 25
     e86:	30 83       	st	Z, r19
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	30 e2       	ldi	r19, 0x20	; 32
     e8c:	30 83       	st	Z, r19
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	31 e2       	ldi	r19, 0x21	; 33
     e92:	30 83       	st	Z, r19
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	20 83       	st	Z, r18
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	23 e2       	ldi	r18, 0x23	; 35
     e9c:	20 83       	st	Z, r18
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	40 83       	st	Z, r20
     ea2:	31 97       	sbiw	r30, 0x01	; 1
     ea4:	50 83       	st	Z, r21
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	26 e2       	ldi	r18, 0x26	; 38
     eaa:	20 83       	st	Z, r18
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	27 e2       	ldi	r18, 0x27	; 39
     eb0:	20 83       	st	Z, r18
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	28 e2       	ldi	r18, 0x28	; 40
     eb6:	20 83       	st	Z, r18
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	29 e2       	ldi	r18, 0x29	; 41
     ebc:	20 83       	st	Z, r18
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	20 e3       	ldi	r18, 0x30	; 48
     ec2:	20 83       	st	Z, r18
     ec4:	31 97       	sbiw	r30, 0x01	; 1
     ec6:	21 e3       	ldi	r18, 0x31	; 49
     ec8:	20 83       	st	Z, r18
     eca:	87 97       	sbiw	r24, 0x27	; 39
     ecc:	08 95       	ret

00000ece <xPortStartScheduler>:
     ece:	65 e0       	ldi	r22, 0x05	; 5
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	98 e0       	ldi	r25, 0x08	; 8
     ed4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TC0_ConfigClockSource>
     ed8:	83 ef       	ldi	r24, 0xF3	; 243
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	80 93 26 08 	sts	0x0826, r24
     ee0:	90 93 27 08 	sts	0x0827, r25
     ee4:	61 e0       	ldi	r22, 0x01	; 1
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	98 e0       	ldi	r25, 0x08	; 8
     eea:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <TC0_SetOverflowIntLevel>
     eee:	e0 ea       	ldi	r30, 0xA0	; 160
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	82 83       	std	Z+2, r24	; 0x02
     ef8:	a0 91 3f 93 	lds	r26, 0x933F
     efc:	b0 91 40 93 	lds	r27, 0x9340
     f00:	cd 91       	ld	r28, X+
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	dd 91       	ld	r29, X+
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	5f 90       	pop	r5
     f3e:	4f 90       	pop	r4
     f40:	3f 90       	pop	r3
     f42:	2f 90       	pop	r2
     f44:	1f 90       	pop	r1
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0
     f4c:	08 95       	ret
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	08 95       	ret

00000f52 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	0f 92       	push	r0
     f5a:	1f 92       	push	r1
     f5c:	11 24       	eor	r1, r1
     f5e:	2f 92       	push	r2
     f60:	3f 92       	push	r3
     f62:	4f 92       	push	r4
     f64:	5f 92       	push	r5
     f66:	6f 92       	push	r6
     f68:	7f 92       	push	r7
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ef 93       	push	r30
     f98:	ff 93       	push	r31
     f9a:	a0 91 3f 93 	lds	r26, 0x933F
     f9e:	b0 91 40 93 	lds	r27, 0x9340
     fa2:	0d b6       	in	r0, 0x3d	; 61
     fa4:	0d 92       	st	X+, r0
     fa6:	0e b6       	in	r0, 0x3e	; 62
     fa8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     faa:	0e 94 48 0c 	call	0x1890	; 0x1890 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fae:	a0 91 3f 93 	lds	r26, 0x933F
     fb2:	b0 91 40 93 	lds	r27, 0x9340
     fb6:	cd 91       	ld	r28, X+
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	dd 91       	ld	r29, X+
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	bf 91       	pop	r27
     fc8:	af 91       	pop	r26
     fca:	9f 91       	pop	r25
     fcc:	8f 91       	pop	r24
     fce:	7f 91       	pop	r23
     fd0:	6f 91       	pop	r22
     fd2:	5f 91       	pop	r21
     fd4:	4f 91       	pop	r20
     fd6:	3f 91       	pop	r19
     fd8:	2f 91       	pop	r18
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	5f 90       	pop	r5
     ff4:	4f 90       	pop	r4
     ff6:	3f 90       	pop	r3
     ff8:	2f 90       	pop	r2
     ffa:	1f 90       	pop	r1
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1002:	08 95       	ret

00001004 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1004:	0f 92       	push	r0
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	0f 92       	push	r0
    100c:	1f 92       	push	r1
    100e:	11 24       	eor	r1, r1
    1010:	2f 92       	push	r2
    1012:	3f 92       	push	r3
    1014:	4f 92       	push	r4
    1016:	5f 92       	push	r5
    1018:	6f 92       	push	r6
    101a:	7f 92       	push	r7
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	2f 93       	push	r18
    1032:	3f 93       	push	r19
    1034:	4f 93       	push	r20
    1036:	5f 93       	push	r21
    1038:	6f 93       	push	r22
    103a:	7f 93       	push	r23
    103c:	8f 93       	push	r24
    103e:	9f 93       	push	r25
    1040:	af 93       	push	r26
    1042:	bf 93       	push	r27
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ef 93       	push	r30
    104a:	ff 93       	push	r31
    104c:	a0 91 3f 93 	lds	r26, 0x933F
    1050:	b0 91 40 93 	lds	r27, 0x9340
    1054:	0d b6       	in	r0, 0x3d	; 61
    1056:	0d 92       	st	X+, r0
    1058:	0e b6       	in	r0, 0x3e	; 62
    105a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    105c:	0e 94 bb 0a 	call	0x1576	; 0x1576 <xTaskIncrementTick>
    1060:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1062:	0e 94 48 0c 	call	0x1890	; 0x1890 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1066:	a0 91 3f 93 	lds	r26, 0x933F
    106a:	b0 91 40 93 	lds	r27, 0x9340
    106e:	cd 91       	ld	r28, X+
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	dd 91       	ld	r29, X+
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	8f 90       	pop	r8
    10a6:	7f 90       	pop	r7
    10a8:	6f 90       	pop	r6
    10aa:	5f 90       	pop	r5
    10ac:	4f 90       	pop	r4
    10ae:	3f 90       	pop	r3
    10b0:	2f 90       	pop	r2
    10b2:	1f 90       	pop	r1
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0

	asm volatile ( "ret" );
    10ba:	08 95       	ret

000010bc <__vector_14>:
	 */
	
	void TCC0_OVF_vect( void ) __attribute__ ( ( signal, naked ) );
	void TCC0_OVF_vect( void )
	{
		vPortYieldFromTick();
    10bc:	0e 94 02 08 	call	0x1004	; 0x1004 <vPortYieldFromTick>
		asm volatile ( "reti" );
    10c0:	18 95       	reti

000010c2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    10c8:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    10cc:	80 91 e4 22 	lds	r24, 0x22E4
    10d0:	90 91 e5 22 	lds	r25, 0x22E5
    10d4:	89 2b       	or	r24, r25
    10d6:	31 f4       	brne	.+12     	; 0x10e4 <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
    10d8:	89 ee       	ldi	r24, 0xE9	; 233
    10da:	92 e2       	ldi	r25, 0x22	; 34
    10dc:	80 93 e4 22 	sts	0x22E4, r24
    10e0:	90 93 e5 22 	sts	0x22E5, r25
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    10e4:	20 91 e6 22 	lds	r18, 0x22E6
    10e8:	30 91 e7 22 	lds	r19, 0x22E7
    10ec:	ce 01       	movw	r24, r28
    10ee:	82 0f       	add	r24, r18
    10f0:	93 1f       	adc	r25, r19
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	4f e6       	ldi	r20, 0x6F	; 111
    10f6:	94 07       	cpc	r25, r20
    10f8:	70 f4       	brcc	.+28     	; 0x1116 <pvPortMalloc+0x54>
    10fa:	28 17       	cp	r18, r24
    10fc:	39 07       	cpc	r19, r25
    10fe:	70 f4       	brcc	.+28     	; 0x111c <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1100:	c0 91 e4 22 	lds	r28, 0x22E4
    1104:	d0 91 e5 22 	lds	r29, 0x22E5
    1108:	c2 0f       	add	r28, r18
    110a:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
    110c:	80 93 e6 22 	sts	0x22E6, r24
    1110:	90 93 e7 22 	sts	0x22E7, r25
    1114:	05 c0       	rjmp	.+10     	; 0x1120 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
    1116:	c0 e0       	ldi	r28, 0x00	; 0
    1118:	d0 e0       	ldi	r29, 0x00	; 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <pvPortMalloc+0x5e>
    111c:	c0 e0       	ldi	r28, 0x00	; 0
    111e:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1120:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
    1124:	ce 01       	movw	r24, r28
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	08 95       	ret

0000112c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    112c:	08 95       	ret

0000112e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    112e:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1130:	03 96       	adiw	r24, 0x03	; 3
    1132:	81 83       	std	Z+1, r24	; 0x01
    1134:	92 83       	std	Z+2, r25	; 0x02

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1136:	2f ef       	ldi	r18, 0xFF	; 255
    1138:	3f ef       	ldi	r19, 0xFF	; 255
    113a:	23 83       	std	Z+3, r18	; 0x03
    113c:	34 83       	std	Z+4, r19	; 0x04

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    113e:	85 83       	std	Z+5, r24	; 0x05
    1140:	96 83       	std	Z+6, r25	; 0x06
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1142:	87 83       	std	Z+7, r24	; 0x07
    1144:	90 87       	std	Z+8, r25	; 0x08

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1146:	10 82       	st	Z, r1
    1148:	08 95       	ret

0000114a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    114a:	fc 01       	movw	r30, r24
    114c:	10 86       	std	Z+8, r1	; 0x08
    114e:	11 86       	std	Z+9, r1	; 0x09
    1150:	08 95       	ret

00001152 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	9c 01       	movw	r18, r24
    1158:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    115a:	dc 01       	movw	r26, r24
    115c:	11 96       	adiw	r26, 0x01	; 1
    115e:	cd 91       	ld	r28, X+
    1160:	dc 91       	ld	r29, X
    1162:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1164:	c2 83       	std	Z+2, r28	; 0x02
    1166:	d3 83       	std	Z+3, r29	; 0x03
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1168:	8c 81       	ldd	r24, Y+4	; 0x04
    116a:	9d 81       	ldd	r25, Y+5	; 0x05
    116c:	84 83       	std	Z+4, r24	; 0x04
    116e:	95 83       	std	Z+5, r25	; 0x05
	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1170:	8c 81       	ldd	r24, Y+4	; 0x04
    1172:	9d 81       	ldd	r25, Y+5	; 0x05
    1174:	dc 01       	movw	r26, r24
    1176:	12 96       	adiw	r26, 0x02	; 2
    1178:	6d 93       	st	X+, r22
    117a:	7c 93       	st	X, r23
    117c:	13 97       	sbiw	r26, 0x03	; 3
	pxIndex->pxPrevious = pxNewListItem;
    117e:	6c 83       	std	Y+4, r22	; 0x04
    1180:	7d 83       	std	Y+5, r23	; 0x05

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1182:	20 87       	std	Z+8, r18	; 0x08
    1184:	31 87       	std	Z+9, r19	; 0x09

	( pxList->uxNumberOfItems )++;
    1186:	f9 01       	movw	r30, r18
    1188:	80 81       	ld	r24, Z
    118a:	8f 5f       	subi	r24, 0xFF	; 255
    118c:	80 83       	st	Z, r24
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	08 95       	ret

00001194 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    119a:	48 81       	ld	r20, Y
    119c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    119e:	4f 3f       	cpi	r20, 0xFF	; 255
    11a0:	2f ef       	ldi	r18, 0xFF	; 255
    11a2:	52 07       	cpc	r21, r18
    11a4:	21 f4       	brne	.+8      	; 0x11ae <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    11a6:	fc 01       	movw	r30, r24
    11a8:	a7 81       	ldd	r26, Z+7	; 0x07
    11aa:	b0 85       	ldd	r27, Z+8	; 0x08
    11ac:	0d c0       	rjmp	.+26     	; 0x11c8 <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11ae:	dc 01       	movw	r26, r24
    11b0:	13 96       	adiw	r26, 0x03	; 3
    11b2:	01 c0       	rjmp	.+2      	; 0x11b6 <vListInsert+0x22>
    11b4:	df 01       	movw	r26, r30
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	ed 91       	ld	r30, X+
    11ba:	fc 91       	ld	r31, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	20 81       	ld	r18, Z
    11c0:	31 81       	ldd	r19, Z+1	; 0x01
    11c2:	42 17       	cp	r20, r18
    11c4:	53 07       	cpc	r21, r19
    11c6:	b0 f7       	brcc	.-20     	; 0x11b4 <vListInsert+0x20>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    11c8:	12 96       	adiw	r26, 0x02	; 2
    11ca:	ed 91       	ld	r30, X+
    11cc:	fc 91       	ld	r31, X
    11ce:	13 97       	sbiw	r26, 0x03	; 3
    11d0:	ea 83       	std	Y+2, r30	; 0x02
    11d2:	fb 83       	std	Y+3, r31	; 0x03
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    11d4:	c4 83       	std	Z+4, r28	; 0x04
    11d6:	d5 83       	std	Z+5, r29	; 0x05
	pxNewListItem->pxPrevious = pxIterator;
    11d8:	ac 83       	std	Y+4, r26	; 0x04
    11da:	bd 83       	std	Y+5, r27	; 0x05
	pxIterator->pxNext = pxNewListItem;
    11dc:	12 96       	adiw	r26, 0x02	; 2
    11de:	cd 93       	st	X+, r28
    11e0:	dc 93       	st	X, r29
    11e2:	13 97       	sbiw	r26, 0x03	; 3

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    11e4:	88 87       	std	Y+8, r24	; 0x08
    11e6:	99 87       	std	Y+9, r25	; 0x09

	( pxList->uxNumberOfItems )++;
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 81       	ld	r18, Z
    11ec:	2f 5f       	subi	r18, 0xFF	; 255
    11ee:	20 83       	st	Z, r18
}
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	08 95       	ret

000011f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    11fc:	a0 85       	ldd	r26, Z+8	; 0x08
    11fe:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1200:	c2 81       	ldd	r28, Z+2	; 0x02
    1202:	d3 81       	ldd	r29, Z+3	; 0x03
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	95 81       	ldd	r25, Z+5	; 0x05
    1208:	8c 83       	std	Y+4, r24	; 0x04
    120a:	9d 83       	std	Y+5, r25	; 0x05
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    120c:	c4 81       	ldd	r28, Z+4	; 0x04
    120e:	d5 81       	ldd	r29, Z+5	; 0x05
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	9b 83       	std	Y+3, r25	; 0x03

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	cd 91       	ld	r28, X+
    121c:	dc 91       	ld	r29, X
    121e:	12 97       	sbiw	r26, 0x02	; 2
    1220:	ce 17       	cp	r28, r30
    1222:	df 07       	cpc	r29, r31
    1224:	31 f4       	brne	.+12     	; 0x1232 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1226:	8c 81       	ldd	r24, Y+4	; 0x04
    1228:	9d 81       	ldd	r25, Y+5	; 0x05
    122a:	11 96       	adiw	r26, 0x01	; 1
    122c:	8d 93       	st	X+, r24
    122e:	9c 93       	st	X, r25
    1230:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1232:	10 86       	std	Z+8, r1	; 0x08
    1234:	11 86       	std	Z+9, r1	; 0x09
	( pxList->uxNumberOfItems )--;
    1236:	8c 91       	ld	r24, X
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <prvResetNextTaskUnblockTime>:
			}
		}
		( void ) xTaskResumeAll();

		return uxTask;
	}
    1242:	e0 91 07 93 	lds	r30, 0x9307
    1246:	f0 91 08 93 	lds	r31, 0x9308
    124a:	80 81       	ld	r24, Z
    124c:	81 11       	cpse	r24, r1
    124e:	07 c0       	rjmp	.+14     	; 0x125e <prvResetNextTaskUnblockTime+0x1c>
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	9f ef       	ldi	r25, 0xFF	; 255
    1254:	80 93 8f 22 	sts	0x228F, r24
    1258:	90 93 90 22 	sts	0x2290, r25
    125c:	08 95       	ret
    125e:	e0 91 07 93 	lds	r30, 0x9307
    1262:	f0 91 08 93 	lds	r31, 0x9308
    1266:	05 80       	ldd	r0, Z+5	; 0x05
    1268:	f6 81       	ldd	r31, Z+6	; 0x06
    126a:	e0 2d       	mov	r30, r0
    126c:	06 80       	ldd	r0, Z+6	; 0x06
    126e:	f7 81       	ldd	r31, Z+7	; 0x07
    1270:	e0 2d       	mov	r30, r0
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	93 81       	ldd	r25, Z+3	; 0x03
    1276:	80 93 8f 22 	sts	0x228F, r24
    127a:	90 93 90 22 	sts	0x2290, r25
    127e:	08 95       	ret

00001280 <prvAddCurrentTaskToDelayedList>:
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	e0 91 3f 93 	lds	r30, 0x933F
    128a:	f0 91 40 93 	lds	r31, 0x9340
    128e:	82 83       	std	Z+2, r24	; 0x02
    1290:	93 83       	std	Z+3, r25	; 0x03
    1292:	80 91 ef 92 	lds	r24, 0x92EF
    1296:	90 91 f0 92 	lds	r25, 0x92F0
    129a:	c8 17       	cp	r28, r24
    129c:	d9 07       	cpc	r29, r25
    129e:	68 f4       	brcc	.+26     	; 0x12ba <prvAddCurrentTaskToDelayedList+0x3a>
    12a0:	60 91 3f 93 	lds	r22, 0x933F
    12a4:	70 91 40 93 	lds	r23, 0x9340
    12a8:	80 91 05 93 	lds	r24, 0x9305
    12ac:	90 91 06 93 	lds	r25, 0x9306
    12b0:	6e 5f       	subi	r22, 0xFE	; 254
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	0e 94 ca 08 	call	0x1194	; 0x1194 <vListInsert>
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <prvAddCurrentTaskToDelayedList+0x68>
    12ba:	60 91 3f 93 	lds	r22, 0x933F
    12be:	70 91 40 93 	lds	r23, 0x9340
    12c2:	80 91 07 93 	lds	r24, 0x9307
    12c6:	90 91 08 93 	lds	r25, 0x9308
    12ca:	6e 5f       	subi	r22, 0xFE	; 254
    12cc:	7f 4f       	sbci	r23, 0xFF	; 255
    12ce:	0e 94 ca 08 	call	0x1194	; 0x1194 <vListInsert>
    12d2:	80 91 8f 22 	lds	r24, 0x228F
    12d6:	90 91 90 22 	lds	r25, 0x2290
    12da:	c8 17       	cp	r28, r24
    12dc:	d9 07       	cpc	r29, r25
    12de:	20 f4       	brcc	.+8      	; 0x12e8 <prvAddCurrentTaskToDelayedList+0x68>
    12e0:	c0 93 8f 22 	sts	0x228F, r28
    12e4:	d0 93 90 22 	sts	0x2290, r29
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

000012ee <xTaskGenericCreate>:
    12ee:	4f 92       	push	r4
    12f0:	5f 92       	push	r5
    12f2:	6f 92       	push	r6
    12f4:	7f 92       	push	r7
    12f6:	8f 92       	push	r8
    12f8:	9f 92       	push	r9
    12fa:	af 92       	push	r10
    12fc:	bf 92       	push	r11
    12fe:	cf 92       	push	r12
    1300:	df 92       	push	r13
    1302:	ef 92       	push	r14
    1304:	ff 92       	push	r15
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	4c 01       	movw	r8, r24
    1310:	eb 01       	movw	r28, r22
    1312:	5a 01       	movw	r10, r20
    1314:	29 01       	movw	r4, r18
    1316:	83 e2       	ldi	r24, 0x23	; 35
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pvPortMalloc>
    131e:	3c 01       	movw	r6, r24
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	09 f4       	brne	.+2      	; 0x1326 <xTaskGenericCreate+0x38>
    1324:	e5 c0       	rjmp	.+458    	; 0x14f0 <xTaskGenericCreate+0x202>
    1326:	c1 14       	cp	r12, r1
    1328:	d1 04       	cpc	r13, r1
    132a:	09 f0       	breq	.+2      	; 0x132e <xTaskGenericCreate+0x40>
    132c:	dc c0       	rjmp	.+440    	; 0x14e6 <xTaskGenericCreate+0x1f8>
    132e:	c5 01       	movw	r24, r10
    1330:	0e 94 61 08 	call	0x10c2	; 0x10c2 <pvPortMalloc>
    1334:	f3 01       	movw	r30, r6
    1336:	87 8b       	std	Z+23, r24	; 0x17
    1338:	90 8f       	std	Z+24, r25	; 0x18
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	21 f4       	brne	.+8      	; 0x1346 <xTaskGenericCreate+0x58>
    133e:	c3 01       	movw	r24, r6
    1340:	0e 94 96 08 	call	0x112c	; 0x112c <vPortFree>
    1344:	d5 c0       	rjmp	.+426    	; 0x14f0 <xTaskGenericCreate+0x202>
    1346:	a5 01       	movw	r20, r10
    1348:	65 ea       	ldi	r22, 0xA5	; 165
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	0e 94 f5 1e 	call	0x3dea	; 0x3dea <memset>
    1350:	f1 e0       	ldi	r31, 0x01	; 1
    1352:	af 1a       	sub	r10, r31
    1354:	b1 08       	sbc	r11, r1
    1356:	f3 01       	movw	r30, r6
    1358:	87 89       	ldd	r24, Z+23	; 0x17
    135a:	90 8d       	ldd	r25, Z+24	; 0x18
    135c:	a8 0e       	add	r10, r24
    135e:	b9 1e       	adc	r11, r25
    1360:	88 81       	ld	r24, Y
    1362:	81 8f       	std	Z+25, r24	; 0x19
    1364:	88 81       	ld	r24, Y
    1366:	88 23       	and	r24, r24
    1368:	81 f0       	breq	.+32     	; 0x138a <xTaskGenericCreate+0x9c>
    136a:	d3 01       	movw	r26, r6
    136c:	5a 96       	adiw	r26, 0x1a	; 26
    136e:	fe 01       	movw	r30, r28
    1370:	31 96       	adiw	r30, 0x01	; 1
    1372:	9e 01       	movw	r18, r28
    1374:	28 5f       	subi	r18, 0xF8	; 248
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	ef 01       	movw	r28, r30
    137a:	81 91       	ld	r24, Z+
    137c:	8d 93       	st	X+, r24
    137e:	88 81       	ld	r24, Y
    1380:	88 23       	and	r24, r24
    1382:	19 f0       	breq	.+6      	; 0x138a <xTaskGenericCreate+0x9c>
    1384:	e2 17       	cp	r30, r18
    1386:	f3 07       	cpc	r31, r19
    1388:	b9 f7       	brne	.-18     	; 0x1378 <xTaskGenericCreate+0x8a>
    138a:	f3 01       	movw	r30, r6
    138c:	10 a2       	std	Z+32, r1	; 0x20
    138e:	10 2f       	mov	r17, r16
    1390:	04 30       	cpi	r16, 0x04	; 4
    1392:	08 f0       	brcs	.+2      	; 0x1396 <xTaskGenericCreate+0xa8>
    1394:	13 e0       	ldi	r17, 0x03	; 3
    1396:	f3 01       	movw	r30, r6
    1398:	16 8b       	std	Z+22, r17	; 0x16
    139a:	e3 01       	movw	r28, r6
    139c:	22 96       	adiw	r28, 0x02	; 2
    139e:	ce 01       	movw	r24, r28
    13a0:	0e 94 a5 08 	call	0x114a	; 0x114a <vListInitialiseItem>
    13a4:	c3 01       	movw	r24, r6
    13a6:	0c 96       	adiw	r24, 0x0c	; 12
    13a8:	0e 94 a5 08 	call	0x114a	; 0x114a <vListInitialiseItem>
    13ac:	f3 01       	movw	r30, r6
    13ae:	60 86       	std	Z+8, r6	; 0x08
    13b0:	71 86       	std	Z+9, r7	; 0x09
    13b2:	84 e0       	ldi	r24, 0x04	; 4
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	81 1b       	sub	r24, r17
    13b8:	91 09       	sbc	r25, r1
    13ba:	84 87       	std	Z+12, r24	; 0x0c
    13bc:	95 87       	std	Z+13, r25	; 0x0d
    13be:	62 8a       	std	Z+18, r6	; 0x12
    13c0:	73 8a       	std	Z+19, r7	; 0x13
    13c2:	a2 01       	movw	r20, r4
    13c4:	b4 01       	movw	r22, r8
    13c6:	c5 01       	movw	r24, r10
    13c8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <pxPortInitialiseStack>
    13cc:	f3 01       	movw	r30, r6
    13ce:	80 83       	st	Z, r24
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	e1 14       	cp	r14, r1
    13d4:	f1 04       	cpc	r15, r1
    13d6:	19 f0       	breq	.+6      	; 0x13de <xTaskGenericCreate+0xf0>
    13d8:	f7 01       	movw	r30, r14
    13da:	60 82       	st	Z, r6
    13dc:	71 82       	std	Z+1, r7	; 0x01
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	0f 92       	push	r0
    13e4:	80 91 f1 92 	lds	r24, 0x92F1
    13e8:	8f 5f       	subi	r24, 0xFF	; 255
    13ea:	80 93 f1 92 	sts	0x92F1, r24
    13ee:	80 91 3f 93 	lds	r24, 0x933F
    13f2:	90 91 40 93 	lds	r25, 0x9340
    13f6:	89 2b       	or	r24, r25
    13f8:	a9 f5       	brne	.+106    	; 0x1464 <xTaskGenericCreate+0x176>
    13fa:	60 92 3f 93 	sts	0x933F, r6
    13fe:	70 92 40 93 	sts	0x9340, r7
    1402:	80 91 f1 92 	lds	r24, 0x92F1
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	e1 f5       	brne	.+120    	; 0x1482 <xTaskGenericCreate+0x194>
    140a:	8b e1       	ldi	r24, 0x1B	; 27
    140c:	93 e9       	ldi	r25, 0x93	; 147
    140e:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    1412:	84 e2       	ldi	r24, 0x24	; 36
    1414:	93 e9       	ldi	r25, 0x93	; 147
    1416:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    141a:	8d e2       	ldi	r24, 0x2D	; 45
    141c:	93 e9       	ldi	r25, 0x93	; 147
    141e:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    1422:	86 e3       	ldi	r24, 0x36	; 54
    1424:	93 e9       	ldi	r25, 0x93	; 147
    1426:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    142a:	82 e1       	ldi	r24, 0x12	; 18
    142c:	93 e9       	ldi	r25, 0x93	; 147
    142e:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    1432:	89 e0       	ldi	r24, 0x09	; 9
    1434:	93 e9       	ldi	r25, 0x93	; 147
    1436:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    143a:	8c ef       	ldi	r24, 0xFC	; 252
    143c:	92 e9       	ldi	r25, 0x92	; 146
    143e:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    1442:	83 ef       	ldi	r24, 0xF3	; 243
    1444:	92 e9       	ldi	r25, 0x92	; 146
    1446:	0e 94 97 08 	call	0x112e	; 0x112e <vListInitialise>
    144a:	82 e1       	ldi	r24, 0x12	; 18
    144c:	93 e9       	ldi	r25, 0x93	; 147
    144e:	80 93 07 93 	sts	0x9307, r24
    1452:	90 93 08 93 	sts	0x9308, r25
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	93 e9       	ldi	r25, 0x93	; 147
    145a:	80 93 05 93 	sts	0x9305, r24
    145e:	90 93 06 93 	sts	0x9306, r25
    1462:	0f c0       	rjmp	.+30     	; 0x1482 <xTaskGenericCreate+0x194>
    1464:	80 91 ed 92 	lds	r24, 0x92ED
    1468:	81 11       	cpse	r24, r1
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <xTaskGenericCreate+0x194>
    146c:	e0 91 3f 93 	lds	r30, 0x933F
    1470:	f0 91 40 93 	lds	r31, 0x9340
    1474:	86 89       	ldd	r24, Z+22	; 0x16
    1476:	08 17       	cp	r16, r24
    1478:	20 f0       	brcs	.+8      	; 0x1482 <xTaskGenericCreate+0x194>
    147a:	60 92 3f 93 	sts	0x933F, r6
    147e:	70 92 40 93 	sts	0x9340, r7
    1482:	80 91 e9 92 	lds	r24, 0x92E9
    1486:	8f 5f       	subi	r24, 0xFF	; 255
    1488:	80 93 e9 92 	sts	0x92E9, r24
    148c:	f3 01       	movw	r30, r6
    148e:	81 a3       	std	Z+33, r24	; 0x21
    1490:	86 89       	ldd	r24, Z+22	; 0x16
    1492:	90 91 ee 92 	lds	r25, 0x92EE
    1496:	98 17       	cp	r25, r24
    1498:	10 f4       	brcc	.+4      	; 0x149e <xTaskGenericCreate+0x1b0>
    149a:	80 93 ee 92 	sts	0x92EE, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9c 01       	movw	r18, r24
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	22 0f       	add	r18, r18
    14ac:	33 1f       	adc	r19, r19
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	be 01       	movw	r22, r28
    14b4:	85 5e       	subi	r24, 0xE5	; 229
    14b6:	9c 46       	sbci	r25, 0x6C	; 108
    14b8:	0e 94 a9 08 	call	0x1152	; 0x1152 <vListInsertEnd>
    14bc:	0f 90       	pop	r0
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	80 91 ed 92 	lds	r24, 0x92ED
    14c4:	88 23       	and	r24, r24
    14c6:	59 f0       	breq	.+22     	; 0x14de <xTaskGenericCreate+0x1f0>
    14c8:	e0 91 3f 93 	lds	r30, 0x933F
    14cc:	f0 91 40 93 	lds	r31, 0x9340
    14d0:	86 89       	ldd	r24, Z+22	; 0x16
    14d2:	80 17       	cp	r24, r16
    14d4:	30 f4       	brcc	.+12     	; 0x14e2 <xTaskGenericCreate+0x1f4>
    14d6:	0e 94 a9 07 	call	0xf52	; 0xf52 <vPortYield>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <xTaskGenericCreate+0x204>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <xTaskGenericCreate+0x204>
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <xTaskGenericCreate+0x204>
    14e6:	fc 01       	movw	r30, r24
    14e8:	c7 8a       	std	Z+23, r12	; 0x17
    14ea:	d0 8e       	std	Z+24, r13	; 0x18
    14ec:	c6 01       	movw	r24, r12
    14ee:	2b cf       	rjmp	.-426    	; 0x1346 <xTaskGenericCreate+0x58>
    14f0:	8f ef       	ldi	r24, 0xFF	; 255
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	5f 90       	pop	r5
    1510:	4f 90       	pop	r4
    1512:	08 95       	ret

00001514 <vTaskStartScheduler>:
    1514:	af 92       	push	r10
    1516:	bf 92       	push	r11
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	a1 2c       	mov	r10, r1
    1524:	b1 2c       	mov	r11, r1
    1526:	c1 2c       	mov	r12, r1
    1528:	d1 2c       	mov	r13, r1
    152a:	e1 2c       	mov	r14, r1
    152c:	f1 2c       	mov	r15, r1
    152e:	00 e0       	ldi	r16, 0x00	; 0
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	45 e5       	ldi	r20, 0x55	; 85
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	62 eb       	ldi	r22, 0xB2	; 178
    153a:	72 e2       	ldi	r23, 0x22	; 34
    153c:	87 e1       	ldi	r24, 0x17	; 23
    153e:	9c e0       	ldi	r25, 0x0C	; 12
    1540:	0e 94 77 09 	call	0x12ee	; 0x12ee <xTaskGenericCreate>
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	49 f4       	brne	.+18     	; 0x155a <vTaskStartScheduler+0x46>
    1548:	f8 94       	cli
    154a:	80 93 ed 92 	sts	0x92ED, r24
    154e:	10 92 ef 92 	sts	0x92EF, r1
    1552:	10 92 f0 92 	sts	0x92F0, r1
    1556:	0e 94 67 07 	call	0xece	; 0xece <xPortStartScheduler>
    155a:	0f 91       	pop	r16
    155c:	ff 90       	pop	r15
    155e:	ef 90       	pop	r14
    1560:	df 90       	pop	r13
    1562:	cf 90       	pop	r12
    1564:	bf 90       	pop	r11
    1566:	af 90       	pop	r10
    1568:	08 95       	ret

0000156a <vTaskSuspendAll>:
    156a:	80 91 e8 92 	lds	r24, 0x92E8
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	80 93 e8 92 	sts	0x92E8, r24
    1574:	08 95       	ret

00001576 <xTaskIncrementTick>:
    1576:	df 92       	push	r13
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	80 91 e8 92 	lds	r24, 0x92E8
    1588:	81 11       	cpse	r24, r1
    158a:	9a c0       	rjmp	.+308    	; 0x16c0 <xTaskIncrementTick+0x14a>
    158c:	80 91 ef 92 	lds	r24, 0x92EF
    1590:	90 91 f0 92 	lds	r25, 0x92F0
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	80 93 ef 92 	sts	0x92EF, r24
    159a:	90 93 f0 92 	sts	0x92F0, r25
    159e:	e0 90 ef 92 	lds	r14, 0x92EF
    15a2:	f0 90 f0 92 	lds	r15, 0x92F0
    15a6:	e1 14       	cp	r14, r1
    15a8:	f1 04       	cpc	r15, r1
    15aa:	b9 f4       	brne	.+46     	; 0x15da <xTaskIncrementTick+0x64>
    15ac:	80 91 07 93 	lds	r24, 0x9307
    15b0:	90 91 08 93 	lds	r25, 0x9308
    15b4:	20 91 05 93 	lds	r18, 0x9305
    15b8:	30 91 06 93 	lds	r19, 0x9306
    15bc:	20 93 07 93 	sts	0x9307, r18
    15c0:	30 93 08 93 	sts	0x9308, r19
    15c4:	80 93 05 93 	sts	0x9305, r24
    15c8:	90 93 06 93 	sts	0x9306, r25
    15cc:	80 91 ea 92 	lds	r24, 0x92EA
    15d0:	8f 5f       	subi	r24, 0xFF	; 255
    15d2:	80 93 ea 92 	sts	0x92EA, r24
    15d6:	0e 94 21 09 	call	0x1242	; 0x1242 <prvResetNextTaskUnblockTime>
    15da:	80 91 8f 22 	lds	r24, 0x228F
    15de:	90 91 90 22 	lds	r25, 0x2290
    15e2:	e8 16       	cp	r14, r24
    15e4:	f9 06       	cpc	r15, r25
    15e6:	10 f4       	brcc	.+4      	; 0x15ec <xTaskIncrementTick+0x76>
    15e8:	d1 2c       	mov	r13, r1
    15ea:	52 c0       	rjmp	.+164    	; 0x1690 <xTaskIncrementTick+0x11a>
    15ec:	d1 2c       	mov	r13, r1
    15ee:	e0 91 07 93 	lds	r30, 0x9307
    15f2:	f0 91 08 93 	lds	r31, 0x9308
    15f6:	90 81       	ld	r25, Z
    15f8:	91 11       	cpse	r25, r1
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <xTaskIncrementTick+0x94>
    15fc:	8f ef       	ldi	r24, 0xFF	; 255
    15fe:	9f ef       	ldi	r25, 0xFF	; 255
    1600:	80 93 8f 22 	sts	0x228F, r24
    1604:	90 93 90 22 	sts	0x2290, r25
    1608:	43 c0       	rjmp	.+134    	; 0x1690 <xTaskIncrementTick+0x11a>
    160a:	e0 91 07 93 	lds	r30, 0x9307
    160e:	f0 91 08 93 	lds	r31, 0x9308
    1612:	05 80       	ldd	r0, Z+5	; 0x05
    1614:	f6 81       	ldd	r31, Z+6	; 0x06
    1616:	e0 2d       	mov	r30, r0
    1618:	c6 81       	ldd	r28, Z+6	; 0x06
    161a:	d7 81       	ldd	r29, Z+7	; 0x07
    161c:	2a 81       	ldd	r18, Y+2	; 0x02
    161e:	3b 81       	ldd	r19, Y+3	; 0x03
    1620:	e2 16       	cp	r14, r18
    1622:	f3 06       	cpc	r15, r19
    1624:	28 f4       	brcc	.+10     	; 0x1630 <xTaskIncrementTick+0xba>
    1626:	20 93 8f 22 	sts	0x228F, r18
    162a:	30 93 90 22 	sts	0x2290, r19
    162e:	30 c0       	rjmp	.+96     	; 0x1690 <xTaskIncrementTick+0x11a>
    1630:	8e 01       	movw	r16, r28
    1632:	0e 5f       	subi	r16, 0xFE	; 254
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	c8 01       	movw	r24, r16
    1638:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    163c:	8c 89       	ldd	r24, Y+20	; 0x14
    163e:	9d 89       	ldd	r25, Y+21	; 0x15
    1640:	89 2b       	or	r24, r25
    1642:	21 f0       	breq	.+8      	; 0x164c <xTaskIncrementTick+0xd6>
    1644:	ce 01       	movw	r24, r28
    1646:	0c 96       	adiw	r24, 0x0c	; 12
    1648:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    164c:	2e 89       	ldd	r18, Y+22	; 0x16
    164e:	80 91 ee 92 	lds	r24, 0x92EE
    1652:	82 17       	cp	r24, r18
    1654:	10 f4       	brcc	.+4      	; 0x165a <xTaskIncrementTick+0xe4>
    1656:	20 93 ee 92 	sts	0x92EE, r18
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	c9 01       	movw	r24, r18
    165e:	88 0f       	add	r24, r24
    1660:	99 1f       	adc	r25, r25
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	82 0f       	add	r24, r18
    166c:	93 1f       	adc	r25, r19
    166e:	b8 01       	movw	r22, r16
    1670:	85 5e       	subi	r24, 0xE5	; 229
    1672:	9c 46       	sbci	r25, 0x6C	; 108
    1674:	0e 94 a9 08 	call	0x1152	; 0x1152 <vListInsertEnd>
    1678:	e0 91 3f 93 	lds	r30, 0x933F
    167c:	f0 91 40 93 	lds	r31, 0x9340
    1680:	9e 89       	ldd	r25, Y+22	; 0x16
    1682:	86 89       	ldd	r24, Z+22	; 0x16
    1684:	98 17       	cp	r25, r24
    1686:	08 f4       	brcc	.+2      	; 0x168a <xTaskIncrementTick+0x114>
    1688:	b2 cf       	rjmp	.-156    	; 0x15ee <xTaskIncrementTick+0x78>
    168a:	dd 24       	eor	r13, r13
    168c:	d3 94       	inc	r13
    168e:	af cf       	rjmp	.-162    	; 0x15ee <xTaskIncrementTick+0x78>
    1690:	e0 91 3f 93 	lds	r30, 0x933F
    1694:	f0 91 40 93 	lds	r31, 0x9340
    1698:	86 89       	ldd	r24, Z+22	; 0x16
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	fc 01       	movw	r30, r24
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	ee 0f       	add	r30, r30
    16a8:	ff 1f       	adc	r31, r31
    16aa:	8e 0f       	add	r24, r30
    16ac:	9f 1f       	adc	r25, r31
    16ae:	fc 01       	movw	r30, r24
    16b0:	e5 5e       	subi	r30, 0xE5	; 229
    16b2:	fc 46       	sbci	r31, 0x6C	; 108
    16b4:	80 81       	ld	r24, Z
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	48 f0       	brcs	.+18     	; 0x16cc <xTaskIncrementTick+0x156>
    16ba:	dd 24       	eor	r13, r13
    16bc:	d3 94       	inc	r13
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <xTaskIncrementTick+0x156>
    16c0:	80 91 ec 92 	lds	r24, 0x92EC
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	80 93 ec 92 	sts	0x92EC, r24
    16ca:	d1 2c       	mov	r13, r1
    16cc:	80 91 eb 92 	lds	r24, 0x92EB
    16d0:	88 23       	and	r24, r24
    16d2:	11 f0       	breq	.+4      	; 0x16d8 <xTaskIncrementTick+0x162>
    16d4:	dd 24       	eor	r13, r13
    16d6:	d3 94       	inc	r13
    16d8:	8d 2d       	mov	r24, r13
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	ff 90       	pop	r15
    16e4:	ef 90       	pop	r14
    16e6:	df 90       	pop	r13
    16e8:	08 95       	ret

000016ea <xTaskResumeAll>:
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	0f 92       	push	r0
    16fe:	80 91 e8 92 	lds	r24, 0x92E8
    1702:	81 50       	subi	r24, 0x01	; 1
    1704:	80 93 e8 92 	sts	0x92E8, r24
    1708:	80 91 e8 92 	lds	r24, 0x92E8
    170c:	81 11       	cpse	r24, r1
    170e:	62 c0       	rjmp	.+196    	; 0x17d4 <xTaskResumeAll+0xea>
    1710:	80 91 f1 92 	lds	r24, 0x92F1
    1714:	81 11       	cpse	r24, r1
    1716:	33 c0       	rjmp	.+102    	; 0x177e <xTaskResumeAll+0x94>
    1718:	60 c0       	rjmp	.+192    	; 0x17da <xTaskResumeAll+0xf0>
    171a:	d7 01       	movw	r26, r14
    171c:	15 96       	adiw	r26, 0x05	; 5
    171e:	ed 91       	ld	r30, X+
    1720:	fc 91       	ld	r31, X
    1722:	16 97       	sbiw	r26, 0x06	; 6
    1724:	c6 81       	ldd	r28, Z+6	; 0x06
    1726:	d7 81       	ldd	r29, Z+7	; 0x07
    1728:	ce 01       	movw	r24, r28
    172a:	0c 96       	adiw	r24, 0x0c	; 12
    172c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    1730:	8e 01       	movw	r16, r28
    1732:	0e 5f       	subi	r16, 0xFE	; 254
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	c8 01       	movw	r24, r16
    1738:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    173c:	2e 89       	ldd	r18, Y+22	; 0x16
    173e:	80 91 ee 92 	lds	r24, 0x92EE
    1742:	82 17       	cp	r24, r18
    1744:	10 f4       	brcc	.+4      	; 0x174a <xTaskResumeAll+0x60>
    1746:	20 93 ee 92 	sts	0x92EE, r18
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	c9 01       	movw	r24, r18
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	82 0f       	add	r24, r18
    175c:	93 1f       	adc	r25, r19
    175e:	b8 01       	movw	r22, r16
    1760:	85 5e       	subi	r24, 0xE5	; 229
    1762:	9c 46       	sbci	r25, 0x6C	; 108
    1764:	0e 94 a9 08 	call	0x1152	; 0x1152 <vListInsertEnd>
    1768:	e0 91 3f 93 	lds	r30, 0x933F
    176c:	f0 91 40 93 	lds	r31, 0x9340
    1770:	9e 89       	ldd	r25, Y+22	; 0x16
    1772:	86 89       	ldd	r24, Z+22	; 0x16
    1774:	98 17       	cp	r25, r24
    1776:	58 f0       	brcs	.+22     	; 0x178e <xTaskResumeAll+0xa4>
    1778:	d0 92 eb 92 	sts	0x92EB, r13
    177c:	08 c0       	rjmp	.+16     	; 0x178e <xTaskResumeAll+0xa4>
    177e:	0f 2e       	mov	r0, r31
    1780:	fc ef       	ldi	r31, 0xFC	; 252
    1782:	ef 2e       	mov	r14, r31
    1784:	f2 e9       	ldi	r31, 0x92	; 146
    1786:	ff 2e       	mov	r15, r31
    1788:	f0 2d       	mov	r31, r0
    178a:	dd 24       	eor	r13, r13
    178c:	d3 94       	inc	r13
    178e:	f7 01       	movw	r30, r14
    1790:	80 81       	ld	r24, Z
    1792:	81 11       	cpse	r24, r1
    1794:	c2 cf       	rjmp	.-124    	; 0x171a <xTaskResumeAll+0x30>
    1796:	80 91 ec 92 	lds	r24, 0x92EC
    179a:	88 23       	and	r24, r24
    179c:	99 f0       	breq	.+38     	; 0x17c4 <xTaskResumeAll+0xda>
    179e:	80 91 ec 92 	lds	r24, 0x92EC
    17a2:	88 23       	and	r24, r24
    17a4:	79 f0       	breq	.+30     	; 0x17c4 <xTaskResumeAll+0xda>
    17a6:	c1 e0       	ldi	r28, 0x01	; 1
    17a8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <xTaskIncrementTick>
    17ac:	81 11       	cpse	r24, r1
    17ae:	c0 93 eb 92 	sts	0x92EB, r28
    17b2:	80 91 ec 92 	lds	r24, 0x92EC
    17b6:	81 50       	subi	r24, 0x01	; 1
    17b8:	80 93 ec 92 	sts	0x92EC, r24
    17bc:	80 91 ec 92 	lds	r24, 0x92EC
    17c0:	81 11       	cpse	r24, r1
    17c2:	f2 cf       	rjmp	.-28     	; 0x17a8 <xTaskResumeAll+0xbe>
    17c4:	80 91 eb 92 	lds	r24, 0x92EB
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	31 f4       	brne	.+12     	; 0x17d8 <xTaskResumeAll+0xee>
    17cc:	0e 94 a9 07 	call	0xf52	; 0xf52 <vPortYield>
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <xTaskResumeAll+0xf0>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	01 c0       	rjmp	.+2      	; 0x17da <xTaskResumeAll+0xf0>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	ff 90       	pop	r15
    17e8:	ef 90       	pop	r14
    17ea:	df 90       	pop	r13
    17ec:	08 95       	ret

000017ee <vTaskDelay>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	ec 01       	movw	r28, r24
    17f4:	89 2b       	or	r24, r25
    17f6:	b1 f0       	breq	.+44     	; 0x1824 <vTaskDelay+0x36>
    17f8:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskSuspendAll>
    17fc:	80 91 ef 92 	lds	r24, 0x92EF
    1800:	90 91 f0 92 	lds	r25, 0x92F0
    1804:	c8 0f       	add	r28, r24
    1806:	d9 1f       	adc	r29, r25
    1808:	80 91 3f 93 	lds	r24, 0x933F
    180c:	90 91 40 93 	lds	r25, 0x9340
    1810:	02 96       	adiw	r24, 0x02	; 2
    1812:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    1816:	ce 01       	movw	r24, r28
    1818:	0e 94 40 09 	call	0x1280	; 0x1280 <prvAddCurrentTaskToDelayedList>
    181c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
    1820:	81 11       	cpse	r24, r1
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vTaskDelay+0x3a>
    1824:	0e 94 a9 07 	call	0xf52	; 0xf52 <vPortYield>
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <prvIdleTask>:
    182e:	03 ef       	ldi	r16, 0xF3	; 243
    1830:	12 e9       	ldi	r17, 0x92	; 146
    1832:	29 c0       	rjmp	.+82     	; 0x1886 <prvIdleTask+0x58>
    1834:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskSuspendAll>
    1838:	d8 01       	movw	r26, r16
    183a:	cc 91       	ld	r28, X
    183c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
    1840:	cc 23       	and	r28, r28
    1842:	09 f1       	breq	.+66     	; 0x1886 <prvIdleTask+0x58>
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	0f 92       	push	r0
    184a:	d8 01       	movw	r26, r16
    184c:	15 96       	adiw	r26, 0x05	; 5
    184e:	ed 91       	ld	r30, X+
    1850:	fc 91       	ld	r31, X
    1852:	16 97       	sbiw	r26, 0x06	; 6
    1854:	c6 81       	ldd	r28, Z+6	; 0x06
    1856:	d7 81       	ldd	r29, Z+7	; 0x07
    1858:	ce 01       	movw	r24, r28
    185a:	02 96       	adiw	r24, 0x02	; 2
    185c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <uxListRemove>
    1860:	80 91 f1 92 	lds	r24, 0x92F1
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	80 93 f1 92 	sts	0x92F1, r24
    186a:	80 91 f2 92 	lds	r24, 0x92F2
    186e:	81 50       	subi	r24, 0x01	; 1
    1870:	80 93 f2 92 	sts	0x92F2, r24
    1874:	0f 90       	pop	r0
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	8f 89       	ldd	r24, Y+23	; 0x17
    187a:	98 8d       	ldd	r25, Y+24	; 0x18
    187c:	0e 94 96 08 	call	0x112c	; 0x112c <vPortFree>
    1880:	ce 01       	movw	r24, r28
    1882:	0e 94 96 08 	call	0x112c	; 0x112c <vPortFree>
    1886:	80 91 f2 92 	lds	r24, 0x92F2
    188a:	81 11       	cpse	r24, r1
    188c:	d3 cf       	rjmp	.-90     	; 0x1834 <prvIdleTask+0x6>
    188e:	fb cf       	rjmp	.-10     	; 0x1886 <prvIdleTask+0x58>

00001890 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1890:	80 91 e8 92 	lds	r24, 0x92E8
    1894:	88 23       	and	r24, r24
    1896:	21 f0       	breq	.+8      	; 0x18a0 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	80 93 eb 92 	sts	0x92EB, r24
    189e:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    18a0:	10 92 eb 92 	sts	0x92EB, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    18a4:	80 91 ee 92 	lds	r24, 0x92EE
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	fc 01       	movw	r30, r24
    18ac:	ee 0f       	add	r30, r30
    18ae:	ff 1f       	adc	r31, r31
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	8e 0f       	add	r24, r30
    18ba:	9f 1f       	adc	r25, r31
    18bc:	fc 01       	movw	r30, r24
    18be:	e5 5e       	subi	r30, 0xE5	; 229
    18c0:	fc 46       	sbci	r31, 0x6C	; 108
    18c2:	80 81       	ld	r24, Z
    18c4:	81 11       	cpse	r24, r1
    18c6:	17 c0       	rjmp	.+46     	; 0x18f6 <vTaskSwitchContext+0x66>
    18c8:	80 91 ee 92 	lds	r24, 0x92EE
    18cc:	81 50       	subi	r24, 0x01	; 1
    18ce:	80 93 ee 92 	sts	0x92EE, r24
    18d2:	80 91 ee 92 	lds	r24, 0x92EE
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	ee 0f       	add	r30, r30
    18dc:	ff 1f       	adc	r31, r31
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	8e 0f       	add	r24, r30
    18e8:	9f 1f       	adc	r25, r31
    18ea:	fc 01       	movw	r30, r24
    18ec:	e5 5e       	subi	r30, 0xE5	; 229
    18ee:	fc 46       	sbci	r31, 0x6C	; 108
    18f0:	80 81       	ld	r24, Z
    18f2:	88 23       	and	r24, r24
    18f4:	49 f3       	breq	.-46     	; 0x18c8 <vTaskSwitchContext+0x38>
    18f6:	80 91 ee 92 	lds	r24, 0x92EE
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	9c 01       	movw	r18, r24
    18fe:	22 0f       	add	r18, r18
    1900:	33 1f       	adc	r19, r19
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	22 0f       	add	r18, r18
    1908:	33 1f       	adc	r19, r19
    190a:	28 0f       	add	r18, r24
    190c:	39 1f       	adc	r19, r25
    190e:	d9 01       	movw	r26, r18
    1910:	a5 5e       	subi	r26, 0xE5	; 229
    1912:	bc 46       	sbci	r27, 0x6C	; 108
    1914:	11 96       	adiw	r26, 0x01	; 1
    1916:	ed 91       	ld	r30, X+
    1918:	fc 91       	ld	r31, X
    191a:	12 97       	sbiw	r26, 0x02	; 2
    191c:	02 80       	ldd	r0, Z+2	; 0x02
    191e:	f3 81       	ldd	r31, Z+3	; 0x03
    1920:	e0 2d       	mov	r30, r0
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	ed 93       	st	X+, r30
    1926:	fc 93       	st	X, r31
    1928:	12 97       	sbiw	r26, 0x02	; 2
    192a:	22 5e       	subi	r18, 0xE2	; 226
    192c:	3c 46       	sbci	r19, 0x6C	; 108
    192e:	e2 17       	cp	r30, r18
    1930:	f3 07       	cpc	r31, r19
    1932:	29 f4       	brne	.+10     	; 0x193e <vTaskSwitchContext+0xae>
    1934:	22 81       	ldd	r18, Z+2	; 0x02
    1936:	33 81       	ldd	r19, Z+3	; 0x03
    1938:	fd 01       	movw	r30, r26
    193a:	21 83       	std	Z+1, r18	; 0x01
    193c:	32 83       	std	Z+2, r19	; 0x02
    193e:	fc 01       	movw	r30, r24
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	ee 0f       	add	r30, r30
    1946:	ff 1f       	adc	r31, r31
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	8e 0f       	add	r24, r30
    194e:	9f 1f       	adc	r25, r31
    1950:	fc 01       	movw	r30, r24
    1952:	e5 5e       	subi	r30, 0xE5	; 229
    1954:	fc 46       	sbci	r31, 0x6C	; 108
    1956:	01 80       	ldd	r0, Z+1	; 0x01
    1958:	f2 81       	ldd	r31, Z+2	; 0x02
    195a:	e0 2d       	mov	r30, r0
    195c:	86 81       	ldd	r24, Z+6	; 0x06
    195e:	97 81       	ldd	r25, Z+7	; 0x07
    1960:	80 93 3f 93 	sts	0x933F, r24
    1964:	90 93 40 93 	sts	0x9340, r25
    1968:	08 95       	ret

0000196a <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	ec 01       	movw	r28, r24
    1970:	fc 01       	movw	r30, r24
    1972:	70 96       	adiw	r30, 0x10	; 16
    1974:	8b e0       	ldi	r24, 0x0B	; 11
    1976:	df 01       	movw	r26, r30
    1978:	1d 92       	st	X+, r1
    197a:	8a 95       	dec	r24
    197c:	e9 f7       	brne	.-6      	; 0x1978 <CDC_Device_ConfigureEndpoints+0xe>
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	8c 83       	std	Y+4, r24	; 0x04
    1982:	89 87       	std	Y+9, r24	; 0x09
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	8e 87       	std	Y+14, r24	; 0x0e
    1988:	61 e0       	ldi	r22, 0x01	; 1
    198a:	ce 01       	movw	r24, r28
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	0e 94 ab 12 	call	0x2556	; 0x2556 <Endpoint_ConfigureEndpointTable>
    1992:	88 23       	and	r24, r24
    1994:	61 f0       	breq	.+24     	; 0x19ae <CDC_Device_ConfigureEndpoints+0x44>
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	ce 01       	movw	r24, r28
    199a:	06 96       	adiw	r24, 0x06	; 6
    199c:	0e 94 ab 12 	call	0x2556	; 0x2556 <Endpoint_ConfigureEndpointTable>
    19a0:	88 23       	and	r24, r24
    19a2:	29 f0       	breq	.+10     	; 0x19ae <CDC_Device_ConfigureEndpoints+0x44>
    19a4:	61 e0       	ldi	r22, 0x01	; 1
    19a6:	ce 01       	movw	r24, r28
    19a8:	0b 96       	adiw	r24, 0x0b	; 11
    19aa:	0e 94 ab 12 	call	0x2556	; 0x2556 <Endpoint_ConfigureEndpointTable>
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <CDC_Device_SendByte>:
    19b4:	cf 93       	push	r28
    19b6:	fc 01       	movw	r30, r24
    19b8:	90 91 75 95 	lds	r25, 0x9575
    19bc:	94 30       	cpi	r25, 0x04	; 4
    19be:	19 f5       	brne	.+70     	; 0x1a06 <CDC_Device_SendByte+0x52>
    19c0:	84 89       	ldd	r24, Z+20	; 0x14
    19c2:	95 89       	ldd	r25, Z+21	; 0x15
    19c4:	a6 89       	ldd	r26, Z+22	; 0x16
    19c6:	b7 89       	ldd	r27, Z+23	; 0x17
    19c8:	89 2b       	or	r24, r25
    19ca:	8a 2b       	or	r24, r26
    19cc:	8b 2b       	or	r24, r27
    19ce:	e9 f0       	breq	.+58     	; 0x1a0a <CDC_Device_SendByte+0x56>
    19d0:	c6 2f       	mov	r28, r22
    19d2:	81 81       	ldd	r24, Z+1	; 0x01
    19d4:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
    19d8:	80 91 7e 95 	lds	r24, 0x957E
    19dc:	90 91 7f 95 	lds	r25, 0x957F
    19e0:	fc 01       	movw	r30, r24
    19e2:	ef 5b       	subi	r30, 0xBF	; 191
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	20 81       	ld	r18, Z
    19e8:	31 97       	sbiw	r30, 0x01	; 1
    19ea:	80 81       	ld	r24, Z
    19ec:	28 17       	cp	r18, r24
    19ee:	30 f0       	brcs	.+12     	; 0x19fc <CDC_Device_SendByte+0x48>
    19f0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    19f4:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <Endpoint_WaitUntilReady>
    19f8:	81 11       	cpse	r24, r1
    19fa:	08 c0       	rjmp	.+16     	; 0x1a0c <CDC_Device_SendByte+0x58>
    19fc:	8c 2f       	mov	r24, r28
    19fe:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <CDC_Device_SendByte+0x58>
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <CDC_Device_SendByte+0x58>
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	cf 91       	pop	r28
    1a0e:	08 95       	ret

00001a10 <CDC_Device_putchar>:
    1a10:	fb 01       	movw	r30, r22
    1a12:	68 2f       	mov	r22, r24
    1a14:	84 85       	ldd	r24, Z+12	; 0x0c
    1a16:	95 85       	ldd	r25, Z+13	; 0x0d
    1a18:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <CDC_Device_SendByte>
    1a1c:	21 e0       	ldi	r18, 0x01	; 1
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 11       	cpse	r24, r1
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <CDC_Device_putchar+0x18>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	88 27       	eor	r24, r24
    1a2a:	99 27       	eor	r25, r25
    1a2c:	82 1b       	sub	r24, r18
    1a2e:	93 0b       	sbc	r25, r19
    1a30:	08 95       	ret

00001a32 <CDC_Device_Flush>:
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	fc 01       	movw	r30, r24
    1a38:	90 91 75 95 	lds	r25, 0x9575
    1a3c:	94 30       	cpi	r25, 0x04	; 4
    1a3e:	f1 f5       	brne	.+124    	; 0x1abc <CDC_Device_Flush+0x8a>
    1a40:	84 89       	ldd	r24, Z+20	; 0x14
    1a42:	95 89       	ldd	r25, Z+21	; 0x15
    1a44:	a6 89       	ldd	r26, Z+22	; 0x16
    1a46:	b7 89       	ldd	r27, Z+23	; 0x17
    1a48:	89 2b       	or	r24, r25
    1a4a:	8a 2b       	or	r24, r26
    1a4c:	8b 2b       	or	r24, r27
    1a4e:	c1 f1       	breq	.+112    	; 0x1ac0 <CDC_Device_Flush+0x8e>
    1a50:	81 81       	ldd	r24, Z+1	; 0x01
    1a52:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
    1a56:	80 91 82 95 	lds	r24, 0x9582
    1a5a:	88 23       	and	r24, r24
    1a5c:	4c f4       	brge	.+18     	; 0x1a70 <CDC_Device_Flush+0x3e>
    1a5e:	e0 91 7e 95 	lds	r30, 0x957E
    1a62:	f0 91 7f 95 	lds	r31, 0x957F
    1a66:	ef 5b       	subi	r30, 0xBF	; 191
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	80 81       	ld	r24, Z
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0d c0       	rjmp	.+26     	; 0x1a8a <CDC_Device_Flush+0x58>
    1a70:	20 91 7e 95 	lds	r18, 0x957E
    1a74:	30 91 7f 95 	lds	r19, 0x957F
    1a78:	f9 01       	movw	r30, r18
    1a7a:	e0 5c       	subi	r30, 0xC0	; 192
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	80 81       	ld	r24, Z
    1a80:	31 96       	adiw	r30, 0x01	; 1
    1a82:	20 81       	ld	r18, Z
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	82 1b       	sub	r24, r18
    1a88:	91 09       	sbc	r25, r1
    1a8a:	89 2b       	or	r24, r25
    1a8c:	d9 f0       	breq	.+54     	; 0x1ac4 <CDC_Device_Flush+0x92>
    1a8e:	80 91 7e 95 	lds	r24, 0x957E
    1a92:	90 91 7f 95 	lds	r25, 0x957F
    1a96:	fc 01       	movw	r30, r24
    1a98:	ef 5b       	subi	r30, 0xBF	; 191
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	d0 81       	ld	r29, Z
    1a9e:	31 97       	sbiw	r30, 0x01	; 1
    1aa0:	c0 81       	ld	r28, Z
    1aa2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    1aa6:	dc 17       	cp	r29, r28
    1aa8:	78 f0       	brcs	.+30     	; 0x1ac8 <CDC_Device_Flush+0x96>
    1aaa:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <Endpoint_WaitUntilReady>
    1aae:	c8 2f       	mov	r28, r24
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	0c c0       	rjmp	.+24     	; 0x1acc <CDC_Device_Flush+0x9a>
    1ab4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    1ab8:	8c 2f       	mov	r24, r28
    1aba:	08 c0       	rjmp	.+16     	; 0x1acc <CDC_Device_Flush+0x9a>
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <CDC_Device_Flush+0x9a>
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <CDC_Device_Flush+0x9a>
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <CDC_Device_Flush+0x9a>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	00 c0       	rjmp	.+0      	; 0x1acc <CDC_Device_Flush+0x9a>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <CDC_Device_USBTask>:
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	90 91 75 95 	lds	r25, 0x9575
    1adc:	94 30       	cpi	r25, 0x04	; 4
    1ade:	99 f4       	brne	.+38     	; 0x1b06 <CDC_Device_USBTask+0x34>
    1ae0:	84 89       	ldd	r24, Z+20	; 0x14
    1ae2:	95 89       	ldd	r25, Z+21	; 0x15
    1ae4:	a6 89       	ldd	r26, Z+22	; 0x16
    1ae6:	b7 89       	ldd	r27, Z+23	; 0x17
    1ae8:	89 2b       	or	r24, r25
    1aea:	8a 2b       	or	r24, r26
    1aec:	8b 2b       	or	r24, r27
    1aee:	59 f0       	breq	.+22     	; 0x1b06 <CDC_Device_USBTask+0x34>
    1af0:	ef 01       	movw	r28, r30
    1af2:	81 81       	ldd	r24, Z+1	; 0x01
    1af4:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
    1af8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    1afc:	88 23       	and	r24, r24
    1afe:	19 f0       	breq	.+6      	; 0x1b06 <CDC_Device_USBTask+0x34>
    1b00:	ce 01       	movw	r24, r28
    1b02:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <CDC_Device_Flush>
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	08 95       	ret

00001b0c <CDC_Device_ReceiveByte>:
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	20 91 75 95 	lds	r18, 0x9575
    1b14:	24 30       	cpi	r18, 0x04	; 4
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <CDC_Device_ReceiveByte+0xe>
    1b18:	56 c0       	rjmp	.+172    	; 0x1bc6 <CDC_Device_ReceiveByte+0xba>
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	44 89       	ldd	r20, Z+20	; 0x14
    1b1e:	55 89       	ldd	r21, Z+21	; 0x15
    1b20:	66 89       	ldd	r22, Z+22	; 0x16
    1b22:	77 89       	ldd	r23, Z+23	; 0x17
    1b24:	45 2b       	or	r20, r21
    1b26:	46 2b       	or	r20, r22
    1b28:	47 2b       	or	r20, r23
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <CDC_Device_ReceiveByte+0x22>
    1b2c:	4f c0       	rjmp	.+158    	; 0x1bcc <CDC_Device_ReceiveByte+0xc0>
    1b2e:	86 81       	ldd	r24, Z+6	; 0x06
    1b30:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
    1b34:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    1b38:	88 23       	and	r24, r24
    1b3a:	09 f4       	brne	.+2      	; 0x1b3e <CDC_Device_ReceiveByte+0x32>
    1b3c:	4a c0       	rjmp	.+148    	; 0x1bd2 <CDC_Device_ReceiveByte+0xc6>
    1b3e:	80 91 82 95 	lds	r24, 0x9582
    1b42:	88 23       	and	r24, r24
    1b44:	4c f4       	brge	.+18     	; 0x1b58 <CDC_Device_ReceiveByte+0x4c>
    1b46:	e0 91 7e 95 	lds	r30, 0x957E
    1b4a:	f0 91 7f 95 	lds	r31, 0x957F
    1b4e:	ef 5b       	subi	r30, 0xBF	; 191
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	0d c0       	rjmp	.+26     	; 0x1b72 <CDC_Device_ReceiveByte+0x66>
    1b58:	20 91 7e 95 	lds	r18, 0x957E
    1b5c:	30 91 7f 95 	lds	r19, 0x957F
    1b60:	f9 01       	movw	r30, r18
    1b62:	e0 5c       	subi	r30, 0xC0	; 192
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	31 96       	adiw	r30, 0x01	; 1
    1b6a:	20 81       	ld	r18, Z
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	82 1b       	sub	r24, r18
    1b70:	91 09       	sbc	r25, r1
    1b72:	89 2b       	or	r24, r25
    1b74:	29 f0       	breq	.+10     	; 0x1b80 <CDC_Device_ReceiveByte+0x74>
    1b76:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1b7a:	c8 2f       	mov	r28, r24
    1b7c:	d0 e0       	ldi	r29, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <CDC_Device_ReceiveByte+0x78>
    1b80:	cf ef       	ldi	r28, 0xFF	; 255
    1b82:	df ef       	ldi	r29, 0xFF	; 255
    1b84:	80 91 82 95 	lds	r24, 0x9582
    1b88:	88 23       	and	r24, r24
    1b8a:	4c f4       	brge	.+18     	; 0x1b9e <CDC_Device_ReceiveByte+0x92>
    1b8c:	e0 91 7e 95 	lds	r30, 0x957E
    1b90:	f0 91 7f 95 	lds	r31, 0x957F
    1b94:	ef 5b       	subi	r30, 0xBF	; 191
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	20 81       	ld	r18, Z
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	0d c0       	rjmp	.+26     	; 0x1bb8 <CDC_Device_ReceiveByte+0xac>
    1b9e:	40 91 7e 95 	lds	r20, 0x957E
    1ba2:	50 91 7f 95 	lds	r21, 0x957F
    1ba6:	fa 01       	movw	r30, r20
    1ba8:	e0 5c       	subi	r30, 0xC0	; 192
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	20 81       	ld	r18, Z
    1bae:	31 96       	adiw	r30, 0x01	; 1
    1bb0:	80 81       	ld	r24, Z
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	28 1b       	sub	r18, r24
    1bb6:	31 09       	sbc	r19, r1
    1bb8:	23 2b       	or	r18, r19
    1bba:	71 f4       	brne	.+28     	; 0x1bd8 <CDC_Device_ReceiveByte+0xcc>
    1bbc:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Endpoint_ClearOUT>
    1bc0:	8c 2f       	mov	r24, r28
    1bc2:	9d 2f       	mov	r25, r29
    1bc4:	0b c0       	rjmp	.+22     	; 0x1bdc <CDC_Device_ReceiveByte+0xd0>
    1bc6:	8f ef       	ldi	r24, 0xFF	; 255
    1bc8:	9f ef       	ldi	r25, 0xFF	; 255
    1bca:	08 c0       	rjmp	.+16     	; 0x1bdc <CDC_Device_ReceiveByte+0xd0>
    1bcc:	8f ef       	ldi	r24, 0xFF	; 255
    1bce:	9f ef       	ldi	r25, 0xFF	; 255
    1bd0:	05 c0       	rjmp	.+10     	; 0x1bdc <CDC_Device_ReceiveByte+0xd0>
    1bd2:	8f ef       	ldi	r24, 0xFF	; 255
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <CDC_Device_ReceiveByte+0xd0>
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	9d 2f       	mov	r25, r29
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <CDC_Device_getchar>:
    1be2:	fc 01       	movw	r30, r24
    1be4:	84 85       	ldd	r24, Z+12	; 0x0c
    1be6:	95 85       	ldd	r25, Z+13	; 0x0d
    1be8:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <CDC_Device_ReceiveByte>
    1bec:	99 23       	and	r25, r25
    1bee:	14 f4       	brge	.+4      	; 0x1bf4 <CDC_Device_getchar+0x12>
    1bf0:	8e ef       	ldi	r24, 0xFE	; 254
    1bf2:	9f ef       	ldi	r25, 0xFF	; 255
    1bf4:	08 95       	ret

00001bf6 <CDC_Device_CreateStream>:
    1bf6:	fb 01       	movw	r30, r22
    1bf8:	2e e0       	ldi	r18, 0x0E	; 14
    1bfa:	db 01       	movw	r26, r22
    1bfc:	1d 92       	st	X+, r1
    1bfe:	2a 95       	dec	r18
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <CDC_Device_CreateStream+0x6>
    1c02:	23 e0       	ldi	r18, 0x03	; 3
    1c04:	23 83       	std	Z+3, r18	; 0x03
    1c06:	28 e0       	ldi	r18, 0x08	; 8
    1c08:	3d e0       	ldi	r19, 0x0D	; 13
    1c0a:	20 87       	std	Z+8, r18	; 0x08
    1c0c:	31 87       	std	Z+9, r19	; 0x09
    1c0e:	21 ef       	ldi	r18, 0xF1	; 241
    1c10:	3d e0       	ldi	r19, 0x0D	; 13
    1c12:	22 87       	std	Z+10, r18	; 0x0a
    1c14:	33 87       	std	Z+11, r19	; 0x0b
    1c16:	84 87       	std	Z+12, r24	; 0x0c
    1c18:	95 87       	std	Z+13, r25	; 0x0d
    1c1a:	08 95       	ret

00001c1c <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
    1c1c:	08 95       	ret

00001c1e <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	ec 01       	movw	r28, r24
	if (!(Endpoint_IsSETUPReceived()))
    1c2a:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <CDC_Device_ProcessControlRequest+0x16>
    1c32:	9b c0       	rjmp	.+310    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1c34:	28 81       	ld	r18, Y
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	80 91 7a 95 	lds	r24, 0x957A
    1c3c:	90 91 7b 95 	lds	r25, 0x957B
    1c40:	82 17       	cp	r24, r18
    1c42:	93 07       	cpc	r25, r19
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <CDC_Device_ProcessControlRequest+0x2a>
    1c46:	91 c0       	rjmp	.+290    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
	  return;

	switch (USB_ControlRequest.bRequest)
    1c48:	80 91 77 95 	lds	r24, 0x9577
    1c4c:	81 32       	cpi	r24, 0x21	; 33
    1c4e:	59 f0       	breq	.+22     	; 0x1c66 <CDC_Device_ProcessControlRequest+0x48>
    1c50:	18 f4       	brcc	.+6      	; 0x1c58 <CDC_Device_ProcessControlRequest+0x3a>
    1c52:	80 32       	cpi	r24, 0x20	; 32
    1c54:	81 f1       	breq	.+96     	; 0x1cb6 <CDC_Device_ProcessControlRequest+0x98>
    1c56:	89 c0       	rjmp	.+274    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
    1c58:	82 32       	cpi	r24, 0x22	; 34
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <CDC_Device_ProcessControlRequest+0x40>
    1c5c:	67 c0       	rjmp	.+206    	; 0x1d2c <CDC_Device_ProcessControlRequest+0x10e>
    1c5e:	83 32       	cpi	r24, 0x23	; 35
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <CDC_Device_ProcessControlRequest+0x46>
    1c62:	76 c0       	rjmp	.+236    	; 0x1d50 <CDC_Device_ProcessControlRequest+0x132>
    1c64:	82 c0       	rjmp	.+260    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c66:	80 91 76 95 	lds	r24, 0x9576
    1c6a:	81 3a       	cpi	r24, 0xA1	; 161
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <CDC_Device_ProcessControlRequest+0x52>
    1c6e:	7d c0       	rjmp	.+250    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1c70:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsINReady()));
    1c74:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    1c78:	88 23       	and	r24, r24
    1c7a:	e1 f3       	breq	.-8      	; 0x1c74 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1c7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c7e:	fd 88       	ldd	r15, Y+21	; 0x15
    1c80:	0e 89       	ldd	r16, Y+22	; 0x16
    1c82:	1f 89       	ldd	r17, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1c84:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1c88:	8f 2d       	mov	r24, r15
    1c8a:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 16);
    1c8e:	80 2f       	mov	r24, r16
    1c90:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 24);
    1c94:	81 2f       	mov	r24, r17
    1c96:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1c9a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c9c:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1ca0:	89 8d       	ldd	r24, Y+25	; 0x19
    1ca2:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1ca6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1ca8:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>

				Endpoint_ClearIN();
    1cac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    1cb0:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>
    1cb4:	5a c0       	rjmp	.+180    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1cb6:	80 91 76 95 	lds	r24, 0x9576
    1cba:	81 32       	cpi	r24, 0x21	; 33
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <CDC_Device_ProcessControlRequest+0xa2>
    1cbe:	55 c0       	rjmp	.+170    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1cc0:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

				while (!(Endpoint_IsOUTReceived()))
    1cc4:	05 c0       	rjmp	.+10     	; 0x1cd0 <CDC_Device_ProcessControlRequest+0xb2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1cc6:	80 91 75 95 	lds	r24, 0x9575
    1cca:	88 23       	and	r24, r24
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <CDC_Device_ProcessControlRequest+0xb2>
    1cce:	4d c0       	rjmp	.+154    	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    1cd0:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    1cd4:	88 23       	and	r24, r24
    1cd6:	b9 f3       	breq	.-18     	; 0x1cc6 <CDC_Device_ProcessControlRequest+0xa8>
			 *  \return Next four bytes in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
    1cd8:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1cdc:	f8 2e       	mov	r15, r24
				uint32_t Byte1 = Endpoint_Read_8();
    1cde:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1ce2:	18 2f       	mov	r17, r24
				uint32_t Byte2 = Endpoint_Read_8();
    1ce4:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1ce8:	08 2f       	mov	r16, r24
				uint32_t Byte3 = Endpoint_Read_8();
    1cea:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
			static inline uint32_t Endpoint_Read_32_LE(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint32_t Endpoint_Read_32_LE(void)
			{
				uint32_t Byte0 = Endpoint_Read_8();
				uint32_t Byte1 = Endpoint_Read_8();
				uint32_t Byte2 = Endpoint_Read_8();
    1cee:	40 2f       	mov	r20, r16
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	70 e0       	ldi	r23, 0x00	; 0
				uint32_t Byte3 = Endpoint_Read_8();

				return ((Byte3 << 24) | (Byte2 << 16) | (Byte1 << 8) | Byte0);
    1cf6:	ba 01       	movw	r22, r20
    1cf8:	55 27       	eor	r21, r21
    1cfa:	44 27       	eor	r20, r20
    1cfc:	78 2b       	or	r23, r24
    1cfe:	4f 29       	or	r20, r15
    1d00:	51 2b       	or	r21, r17
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1d02:	4c 8b       	std	Y+20, r20	; 0x14
    1d04:	5d 8b       	std	Y+21, r21	; 0x15
    1d06:	6e 8b       	std	Y+22, r22	; 0x16
    1d08:	7f 8b       	std	Y+23, r23	; 0x17
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    1d0a:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1d0e:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1d10:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1d14:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1d16:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1d1a:	8a 8f       	std	Y+26, r24	; 0x1a

				Endpoint_ClearOUT();
    1d1c:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Endpoint_ClearOUT>
				Endpoint_ClearStatusStage();
    1d20:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1d24:	ce 01       	movw	r24, r28
    1d26:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <CDC_Device_Event_Stub>
    1d2a:	1f c0       	rjmp	.+62     	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d2c:	80 91 76 95 	lds	r24, 0x9576
    1d30:	81 32       	cpi	r24, 0x21	; 33
    1d32:	d9 f4       	brne	.+54     	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1d34:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    1d38:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    1d3c:	80 91 78 95 	lds	r24, 0x9578
    1d40:	90 91 79 95 	lds	r25, 0x9579
    1d44:	88 8b       	std	Y+16, r24	; 0x10
    1d46:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1d48:	ce 01       	movw	r24, r28
    1d4a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <EVENT_CDC_Device_ControLineStateChanged>
    1d4e:	0d c0       	rjmp	.+26     	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1d50:	80 91 76 95 	lds	r24, 0x9576
    1d54:	81 32       	cpi	r24, 0x21	; 33
    1d56:	49 f4       	brne	.+18     	; 0x1d6a <CDC_Device_ProcessControlRequest+0x14c>
			{
				Endpoint_ClearSETUP();
    1d58:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    1d5c:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1d60:	60 91 78 95 	lds	r22, 0x9578
    1d64:	ce 01       	movw	r24, r28
    1d66:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1d6a:	df 91       	pop	r29
    1d6c:	cf 91       	pop	r28
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	08 95       	ret

00001d76 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	ea 97       	sbiw	r28, 0x3a	; 58
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	06 e7       	ldi	r16, 0x76	; 118
    1d8e:	15 e9       	ldi	r17, 0x95	; 149
    1d90:	0f 2e       	mov	r0, r31
    1d92:	fe e7       	ldi	r31, 0x7E	; 126
    1d94:	ef 2e       	mov	r14, r31
    1d96:	f5 e9       	ldi	r31, 0x95	; 149
    1d98:	ff 2e       	mov	r15, r31
    1d9a:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1d9c:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <Endpoint_Read_8>
    1da0:	f8 01       	movw	r30, r16
    1da2:	81 93       	st	Z+, r24
    1da4:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1da6:	ee 15       	cp	r30, r14
    1da8:	ff 05       	cpc	r31, r15
    1daa:	c1 f7       	brne	.-16     	; 0x1d9c <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1dac:	0e 94 f7 17 	call	0x2fee	; 0x2fee <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1db0:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    1db4:	88 23       	and	r24, r24
    1db6:	09 f4       	brne	.+2      	; 0x1dba <USB_Device_ProcessControlRequest+0x44>
    1db8:	13 c1       	rjmp	.+550    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1dba:	e6 e7       	ldi	r30, 0x76	; 118
    1dbc:	f5 e9       	ldi	r31, 0x95	; 149
    1dbe:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    1dc0:	31 81       	ldd	r19, Z+1	; 0x01
    1dc2:	83 2f       	mov	r24, r19
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	8a 30       	cpi	r24, 0x0A	; 10
    1dc8:	91 05       	cpc	r25, r1
    1dca:	08 f0       	brcs	.+2      	; 0x1dce <USB_Device_ProcessControlRequest+0x58>
    1dcc:	09 c1       	rjmp	.+530    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
    1dce:	fc 01       	movw	r30, r24
    1dd0:	88 27       	eor	r24, r24
    1dd2:	e2 50       	subi	r30, 0x02	; 2
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd8:	0c 94 d8 1d 	jmp	0x3bb0	; 0x3bb0 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ddc:	20 38       	cpi	r18, 0x80	; 128
    1dde:	21 f0       	breq	.+8      	; 0x1de8 <USB_Device_ProcessControlRequest+0x72>
    1de0:	22 38       	cpi	r18, 0x82	; 130
    1de2:	09 f0       	breq	.+2      	; 0x1de6 <USB_Device_ProcessControlRequest+0x70>
    1de4:	fd c0       	rjmp	.+506    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1de8:	10 91 72 95 	lds	r17, 0x9572
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1dec:	80 91 73 95 	lds	r24, 0x9573
    1df0:	88 23       	and	r24, r24
    1df2:	91 f0       	breq	.+36     	; 0x1e18 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1df4:	12 60       	ori	r17, 0x02	; 2
    1df6:	10 c0       	rjmp	.+32     	; 0x1e18 <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1df8:	80 91 7a 95 	lds	r24, 0x957A
    1dfc:	8f 70       	andi	r24, 0x0F	; 15
    1dfe:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    1e02:	e0 91 80 95 	lds	r30, 0x9580
    1e06:	f0 91 81 95 	lds	r31, 0x9581
    1e0a:	11 81       	ldd	r17, Z+1	; 0x01
    1e0c:	12 fb       	bst	r17, 2
    1e0e:	11 27       	eor	r17, r17
    1e10:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    1e18:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    1e1c:	81 2f       	mov	r24, r17
    1e1e:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    1e28:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1e2c:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>
    1e30:	d7 c0       	rjmp	.+430    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e32:	22 23       	and	r18, r18
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <USB_Device_ProcessControlRequest+0xc2>
    1e36:	dd c0       	rjmp	.+442    	; 0x1ff2 <USB_Device_ProcessControlRequest+0x27c>
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	09 f0       	breq	.+2      	; 0x1e3e <USB_Device_ProcessControlRequest+0xc8>
    1e3c:	d1 c0       	rjmp	.+418    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
    1e3e:	de c0       	rjmp	.+444    	; 0x1ffc <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	33 30       	cpi	r19, 0x03	; 3
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <USB_Device_ProcessControlRequest+0xd2>
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	80 93 73 95 	sts	0x9573, r24
    1e4c:	25 c0       	rjmp	.+74     	; 0x1e98 <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1e4e:	e0 91 7a 95 	lds	r30, 0x957A
    1e52:	1e 2f       	mov	r17, r30
    1e54:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <USB_Device_ProcessControlRequest+0xe4>
    1e58:	c3 c0       	rjmp	.+390    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    1e5a:	81 2f       	mov	r24, r17
    1e5c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1e60:	80 91 77 95 	lds	r24, 0x9577
    1e64:	83 30       	cpi	r24, 0x03	; 3
    1e66:	19 f4       	brne	.+6      	; 0x1e6e <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    1e68:	0e 94 49 12 	call	0x2492	; 0x2492 <Endpoint_StallTransaction>
    1e6c:	15 c0       	rjmp	.+42     	; 0x1e98 <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1e6e:	e0 91 80 95 	lds	r30, 0x9580
    1e72:	f0 91 81 95 	lds	r31, 0x9581
    1e76:	81 81       	ldd	r24, Z+1	; 0x01
    1e78:	8b 7f       	andi	r24, 0xFB	; 251
    1e7a:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    1e7c:	24 e8       	ldi	r18, 0x84	; 132
    1e7e:	12 9f       	mul	r17, r18
    1e80:	f0 01       	movw	r30, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	ec 53       	subi	r30, 0x3C	; 60
    1e86:	fa 46       	sbci	r31, 0x6A	; 106
    1e88:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    1e8a:	e0 91 80 95 	lds	r30, 0x9580
    1e8e:	f0 91 81 95 	lds	r31, 0x9581
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 7f       	andi	r24, 0xFE	; 254
    1e96:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1e9e:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1ea2:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>
    1ea6:	9c c0       	rjmp	.+312    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1ea8:	21 11       	cpse	r18, r1
    1eaa:	9a c0       	rjmp	.+308    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1eac:	10 91 78 95 	lds	r17, 0x9578
    1eb0:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1eb2:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1eb6:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    1eba:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    1ebe:	88 23       	and	r24, r24
    1ec0:	e1 f3       	breq	.-8      	; 0x1eba <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1ec2:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1ec6:	11 11       	cpse	r17, r1
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <USB_Device_ProcessControlRequest+0x158>
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <USB_Device_ProcessControlRequest+0x15a>
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	80 93 75 95 	sts	0x9575, r24
    1ed4:	85 c0       	rjmp	.+266    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ed6:	20 58       	subi	r18, 0x80	; 128
    1ed8:	22 30       	cpi	r18, 0x02	; 2
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <USB_Device_ProcessControlRequest+0x168>
    1edc:	81 c0       	rjmp	.+258    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1ede:	80 91 78 95 	lds	r24, 0x9578
    1ee2:	90 91 79 95 	lds	r25, 0x9579
    1ee6:	8c 3d       	cpi	r24, 0xDC	; 220
    1ee8:	e3 e0       	ldi	r30, 0x03	; 3
    1eea:	9e 07       	cpc	r25, r30
    1eec:	b9 f5       	brne	.+110    	; 0x1f5c <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1eee:	83 e0       	ldi	r24, 0x03	; 3
    1ef0:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1ef2:	8a e3       	ldi	r24, 0x3A	; 58
    1ef4:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1ef6:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1ef8:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    1efa:	ae 01       	movw	r20, r28
    1efc:	4d 5f       	subi	r20, 0xFD	; 253
    1efe:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f00:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1f02:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    1f04:	a0 ec       	ldi	r26, 0xC0	; 192
    1f06:	b1 e0       	ldi	r27, 0x01	; 1
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	1a 96       	adiw	r26, 0x0a	; 10
    1f0c:	6c 93       	st	X, r22
    1f0e:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    1f10:	e3 2f       	mov	r30, r19
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    1f16:	1a 96       	adiw	r26, 0x0a	; 10
    1f18:	1c 92       	st	X, r1
    1f1a:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    1f1c:	20 ff       	sbrs	r18, 0
    1f1e:	03 c0       	rjmp	.+6      	; 0x1f26 <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    1f20:	82 95       	swap	r24
    1f22:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    1f24:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1f26:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1f28:	8a 30       	cpi	r24, 0x0A	; 10
    1f2a:	18 f0       	brcs	.+6      	; 0x1f32 <USB_Device_ProcessControlRequest+0x1bc>
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	c7 96       	adiw	r24, 0x37	; 55
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <USB_Device_ProcessControlRequest+0x1c0>
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	c0 96       	adiw	r24, 0x30	; 48
    1f36:	fa 01       	movw	r30, r20
    1f38:	81 93       	st	Z+, r24
    1f3a:	91 93       	st	Z+, r25
    1f3c:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1f3e:	2f 5f       	subi	r18, 0xFF	; 255
    1f40:	2c 31       	cpi	r18, 0x1C	; 28
    1f42:	19 f7       	brne	.-58     	; 0x1f0a <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1f44:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1f46:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1f4a:	6a e3       	ldi	r22, 0x3A	; 58
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 23 10 	call	0x2046	; 0x2046 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1f56:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Endpoint_ClearOUT>
    1f5a:	42 c0       	rjmp	.+132    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	4f 5f       	subi	r20, 0xFF	; 255
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	60 91 7a 95 	lds	r22, 0x957A
    1f66:	0e 94 bc 06 	call	0xd78	; 0xd78 <CALLBACK_USB_GetDescriptor>
    1f6a:	8c 01       	movw	r16, r24
    1f6c:	89 2b       	or	r24, r25
    1f6e:	c1 f1       	breq	.+112    	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1f70:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1f74:	b8 01       	movw	r22, r16
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	0e 94 b9 10 	call	0x2172	; 0x2172 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1f7e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Endpoint_ClearOUT>
    1f82:	2e c0       	rjmp	.+92     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1f84:	20 38       	cpi	r18, 0x80	; 128
    1f86:	61 f5       	brne	.+88     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    1f88:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1f8c:	80 91 71 95 	lds	r24, 0x9571
    1f90:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
	Endpoint_ClearIN();
    1f94:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    1f98:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>
    1f9c:	21 c0       	rjmp	.+66     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f9e:	21 11       	cpse	r18, r1
    1fa0:	1f c0       	rjmp	.+62     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1fa2:	80 91 78 95 	lds	r24, 0x9578
    1fa6:	82 30       	cpi	r24, 0x02	; 2
    1fa8:	d8 f4       	brcc	.+54     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    1faa:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1fae:	80 91 78 95 	lds	r24, 0x9578
    1fb2:	80 93 71 95 	sts	0x9571, r24

	Endpoint_ClearStatusStage();
    1fb6:	0e 94 3f 13 	call	0x267e	; 0x267e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1fba:	80 91 71 95 	lds	r24, 0x9571
    1fbe:	88 23       	and	r24, r24
    1fc0:	21 f0       	breq	.+8      	; 0x1fca <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1fc2:	84 e0       	ldi	r24, 0x04	; 4
    1fc4:	80 93 75 95 	sts	0x9575, r24
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1fca:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1fce:	81 11       	cpse	r24, r1
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <USB_Device_ProcessControlRequest+0x260>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	01 c0       	rjmp	.+2      	; 0x1fd8 <USB_Device_ProcessControlRequest+0x262>
    1fd6:	84 e0       	ldi	r24, 0x04	; 4
    1fd8:	80 93 75 95 	sts	0x9575, r24

	EVENT_USB_Device_ConfigurationChanged();
    1fdc:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1fe0:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    1fe4:	88 23       	and	r24, r24
    1fe6:	81 f0       	breq	.+32     	; 0x2008 <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    1fe8:	0e 94 1b 12 	call	0x2436	; 0x2436 <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    1fec:	0e 94 49 12 	call	0x2492	; 0x2492 <Endpoint_StallTransaction>
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1ff2:	80 91 78 95 	lds	r24, 0x9578
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	99 f7       	brne	.-26     	; 0x1fe0 <USB_Device_ProcessControlRequest+0x26a>
    1ffa:	22 cf       	rjmp	.-444    	; 0x1e40 <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ffc:	80 91 78 95 	lds	r24, 0x9578
    2000:	88 23       	and	r24, r24
    2002:	09 f4       	brne	.+2      	; 0x2006 <USB_Device_ProcessControlRequest+0x290>
    2004:	24 cf       	rjmp	.-440    	; 0x1e4e <USB_Device_ProcessControlRequest+0xd8>
    2006:	48 cf       	rjmp	.-368    	; 0x1e98 <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2008:	ea 96       	adiw	r28, 0x3a	; 58
    200a:	cd bf       	out	0x3d, r28	; 61
    200c:	de bf       	out	0x3e, r29	; 62
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	08 95       	ret

0000201c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    201c:	08 95       	ret

0000201e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    201e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2020:	80 91 75 95 	lds	r24, 0x9575
    2024:	88 23       	and	r24, r24
    2026:	69 f0       	breq	.+26     	; 0x2042 <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    2028:	c0 91 82 95 	lds	r28, 0x9582
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    2032:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    2036:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    2038:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    203c:	8c 2f       	mov	r24, r28
    203e:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2042:	cf 91       	pop	r28
    2044:	08 95       	ret

00002046 <Endpoint_Write_Control_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2046:	cf 92       	push	r12
    2048:	df 92       	push	r13
    204a:	ef 92       	push	r14
    204c:	ff 92       	push	r15
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	c8 2e       	mov	r12, r24
    2058:	d9 2e       	mov	r13, r25
    205a:	8b 01       	movw	r16, r22
    205c:	80 91 82 95 	lds	r24, 0x9582
    2060:	80 68       	ori	r24, 0x80	; 128
    2062:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
    2066:	c0 91 7c 95 	lds	r28, 0x957C
    206a:	d0 91 7d 95 	lds	r29, 0x957D
    206e:	c0 17       	cp	r28, r16
    2070:	d1 07       	cpc	r29, r17
    2072:	40 f0       	brcs	.+16     	; 0x2084 <Endpoint_Write_Control_Stream_LE+0x3e>
    2074:	01 15       	cp	r16, r1
    2076:	11 05       	cpc	r17, r1
    2078:	21 f4       	brne	.+8      	; 0x2082 <Endpoint_Write_Control_Stream_LE+0x3c>
    207a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    207e:	e8 01       	movw	r28, r16
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <Endpoint_Write_Control_Stream_LE+0x3e>
    2082:	e8 01       	movw	r28, r16
    2084:	ec 2c       	mov	r14, r12
    2086:	fd 2c       	mov	r15, r13
    2088:	d1 2c       	mov	r13, r1
    208a:	49 c0       	rjmp	.+146    	; 0x211e <Endpoint_Write_Control_Stream_LE+0xd8>
    208c:	80 91 75 95 	lds	r24, 0x9575
    2090:	88 23       	and	r24, r24
    2092:	09 f4       	brne	.+2      	; 0x2096 <Endpoint_Write_Control_Stream_LE+0x50>
    2094:	5a c0       	rjmp	.+180    	; 0x214a <Endpoint_Write_Control_Stream_LE+0x104>
    2096:	85 30       	cpi	r24, 0x05	; 5
    2098:	09 f4       	brne	.+2      	; 0x209c <Endpoint_Write_Control_Stream_LE+0x56>
    209a:	59 c0       	rjmp	.+178    	; 0x214e <Endpoint_Write_Control_Stream_LE+0x108>
    209c:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    20a0:	81 11       	cpse	r24, r1
    20a2:	57 c0       	rjmp	.+174    	; 0x2152 <Endpoint_Write_Control_Stream_LE+0x10c>
    20a4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    20a8:	81 11       	cpse	r24, r1
    20aa:	49 c0       	rjmp	.+146    	; 0x213e <Endpoint_Write_Control_Stream_LE+0xf8>
    20ac:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    20b0:	88 23       	and	r24, r24
    20b2:	a9 f1       	breq	.+106    	; 0x211e <Endpoint_Write_Control_Stream_LE+0xd8>
    20b4:	80 91 82 95 	lds	r24, 0x9582
    20b8:	88 23       	and	r24, r24
    20ba:	74 f4       	brge	.+28     	; 0x20d8 <Endpoint_Write_Control_Stream_LE+0x92>
    20bc:	e0 91 7e 95 	lds	r30, 0x957E
    20c0:	f0 91 7f 95 	lds	r31, 0x957F
    20c4:	ef 5b       	subi	r30, 0xBF	; 191
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	00 81       	ld	r16, Z
    20ca:	10 e0       	ldi	r17, 0x00	; 0
    20cc:	20 97       	sbiw	r28, 0x00	; 0
    20ce:	f9 f0       	breq	.+62     	; 0x210e <Endpoint_Write_Control_Stream_LE+0xc8>
    20d0:	08 30       	cpi	r16, 0x08	; 8
    20d2:	11 05       	cpc	r17, r1
    20d4:	78 f0       	brcs	.+30     	; 0x20f4 <Endpoint_Write_Control_Stream_LE+0xae>
    20d6:	1b c0       	rjmp	.+54     	; 0x210e <Endpoint_Write_Control_Stream_LE+0xc8>
    20d8:	80 91 7e 95 	lds	r24, 0x957E
    20dc:	90 91 7f 95 	lds	r25, 0x957F
    20e0:	fc 01       	movw	r30, r24
    20e2:	e0 5c       	subi	r30, 0xC0	; 192
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	00 81       	ld	r16, Z
    20e8:	31 96       	adiw	r30, 0x01	; 1
    20ea:	80 81       	ld	r24, Z
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	08 1b       	sub	r16, r24
    20f0:	11 09       	sbc	r17, r1
    20f2:	ec cf       	rjmp	.-40     	; 0x20cc <Endpoint_Write_Control_Stream_LE+0x86>
    20f4:	f7 01       	movw	r30, r14
    20f6:	81 91       	ld	r24, Z+
    20f8:	7f 01       	movw	r14, r30
    20fa:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
    20fe:	21 97       	sbiw	r28, 0x01	; 1
    2100:	0f 5f       	subi	r16, 0xFF	; 255
    2102:	1f 4f       	sbci	r17, 0xFF	; 255
    2104:	20 97       	sbiw	r28, 0x00	; 0
    2106:	19 f0       	breq	.+6      	; 0x210e <Endpoint_Write_Control_Stream_LE+0xc8>
    2108:	08 30       	cpi	r16, 0x08	; 8
    210a:	11 05       	cpc	r17, r1
    210c:	99 f7       	brne	.-26     	; 0x20f4 <Endpoint_Write_Control_Stream_LE+0xae>
    210e:	dd 24       	eor	r13, r13
    2110:	d3 94       	inc	r13
    2112:	08 30       	cpi	r16, 0x08	; 8
    2114:	11 05       	cpc	r17, r1
    2116:	09 f0       	breq	.+2      	; 0x211a <Endpoint_Write_Control_Stream_LE+0xd4>
    2118:	d1 2c       	mov	r13, r1
    211a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    211e:	20 97       	sbiw	r28, 0x00	; 0
    2120:	09 f0       	breq	.+2      	; 0x2124 <Endpoint_Write_Control_Stream_LE+0xde>
    2122:	b4 cf       	rjmp	.-152    	; 0x208c <Endpoint_Write_Control_Stream_LE+0x46>
    2124:	d1 10       	cpse	r13, r1
    2126:	b2 cf       	rjmp	.-156    	; 0x208c <Endpoint_Write_Control_Stream_LE+0x46>
    2128:	0a c0       	rjmp	.+20     	; 0x213e <Endpoint_Write_Control_Stream_LE+0xf8>
    212a:	80 91 75 95 	lds	r24, 0x9575
    212e:	88 23       	and	r24, r24
    2130:	91 f0       	breq	.+36     	; 0x2156 <Endpoint_Write_Control_Stream_LE+0x110>
    2132:	85 30       	cpi	r24, 0x05	; 5
    2134:	91 f0       	breq	.+36     	; 0x215a <Endpoint_Write_Control_Stream_LE+0x114>
    2136:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    213a:	81 11       	cpse	r24, r1
    213c:	10 c0       	rjmp	.+32     	; 0x215e <Endpoint_Write_Control_Stream_LE+0x118>
    213e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    2142:	88 23       	and	r24, r24
    2144:	91 f3       	breq	.-28     	; 0x212a <Endpoint_Write_Control_Stream_LE+0xe4>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	0b c0       	rjmp	.+22     	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	09 c0       	rjmp	.+18     	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    214e:	83 e0       	ldi	r24, 0x03	; 3
    2150:	07 c0       	rjmp	.+14     	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    2156:	82 e0       	ldi	r24, 0x02	; 2
    2158:	03 c0       	rjmp	.+6      	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <Endpoint_Write_Control_Stream_LE+0x11a>
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	08 95       	ret

00002172 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	e8 2e       	mov	r14, r24
    2182:	f9 2e       	mov	r15, r25
    2184:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    2186:	80 91 82 95 	lds	r24, 0x9582
    218a:	80 68       	ori	r24, 0x80	; 128
    218c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    2190:	c0 91 7c 95 	lds	r28, 0x957C
    2194:	d0 91 7d 95 	lds	r29, 0x957D
    2198:	c0 17       	cp	r28, r16
    219a:	d1 07       	cpc	r29, r17
    219c:	40 f0       	brcs	.+16     	; 0x21ae <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    219e:	01 15       	cp	r16, r1
    21a0:	11 05       	cpc	r17, r1
    21a2:	21 f4       	brne	.+8      	; 0x21ac <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    21a4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    21a8:	e8 01       	movw	r28, r16
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <Endpoint_Write_Control_PStream_LE+0x3c>
    21ac:	e8 01       	movw	r28, r16
    21ae:	0e 2d       	mov	r16, r14
    21b0:	1f 2d       	mov	r17, r15
    21b2:	d1 2c       	mov	r13, r1
    21b4:	4e c0       	rjmp	.+156    	; 0x2252 <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    21b6:	80 91 75 95 	lds	r24, 0x9575

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    21ba:	88 23       	and	r24, r24
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <Endpoint_Write_Control_PStream_LE+0x4e>
    21be:	5f c0       	rjmp	.+190    	; 0x227e <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    21c0:	85 30       	cpi	r24, 0x05	; 5
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <Endpoint_Write_Control_PStream_LE+0x54>
    21c4:	5e c0       	rjmp	.+188    	; 0x2282 <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    21c6:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    21ca:	81 11       	cpse	r24, r1
    21cc:	5c c0       	rjmp	.+184    	; 0x2286 <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    21ce:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    21d2:	81 11       	cpse	r24, r1
    21d4:	4e c0       	rjmp	.+156    	; 0x2272 <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    21d6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    21da:	88 23       	and	r24, r24
    21dc:	d1 f1       	breq	.+116    	; 0x2252 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    21de:	80 91 82 95 	lds	r24, 0x9582
    21e2:	88 23       	and	r24, r24
    21e4:	7c f4       	brge	.+30     	; 0x2204 <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    21e6:	e0 91 7e 95 	lds	r30, 0x957E
    21ea:	f0 91 7f 95 	lds	r31, 0x957F
    21ee:	ef 5b       	subi	r30, 0xBF	; 191
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	e0 80       	ld	r14, Z
    21f4:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    21f6:	20 97       	sbiw	r28, 0x00	; 0
    21f8:	19 f1       	breq	.+70     	; 0x2240 <Endpoint_Write_Control_PStream_LE+0xce>
    21fa:	88 e0       	ldi	r24, 0x08	; 8
    21fc:	e8 16       	cp	r14, r24
    21fe:	f1 04       	cpc	r15, r1
    2200:	78 f0       	brcs	.+30     	; 0x2220 <Endpoint_Write_Control_PStream_LE+0xae>
    2202:	1e c0       	rjmp	.+60     	; 0x2240 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    2204:	80 91 7e 95 	lds	r24, 0x957E
    2208:	90 91 7f 95 	lds	r25, 0x957F
    220c:	fc 01       	movw	r30, r24
    220e:	e0 5c       	subi	r30, 0xC0	; 192
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	e0 80       	ld	r14, Z
    2214:	31 96       	adiw	r30, 0x01	; 1
    2216:	80 81       	ld	r24, Z
    2218:	f1 2c       	mov	r15, r1
    221a:	e8 1a       	sub	r14, r24
    221c:	f1 08       	sbc	r15, r1
    221e:	eb cf       	rjmp	.-42     	; 0x21f6 <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    2220:	f8 01       	movw	r30, r16
    2222:	84 91       	lpm	r24, Z
    2224:	0e 94 8a 11 	call	0x2314	; 0x2314 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2228:	0f 5f       	subi	r16, 0xFF	; 255
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    222c:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    222e:	ff ef       	ldi	r31, 0xFF	; 255
    2230:	ef 1a       	sub	r14, r31
    2232:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2234:	20 97       	sbiw	r28, 0x00	; 0
    2236:	21 f0       	breq	.+8      	; 0x2240 <Endpoint_Write_Control_PStream_LE+0xce>
    2238:	88 e0       	ldi	r24, 0x08	; 8
    223a:	e8 16       	cp	r14, r24
    223c:	f1 04       	cpc	r15, r1
    223e:	81 f7       	brne	.-32     	; 0x2220 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2240:	dd 24       	eor	r13, r13
    2242:	d3 94       	inc	r13
    2244:	e8 e0       	ldi	r30, 0x08	; 8
    2246:	ee 16       	cp	r14, r30
    2248:	f1 04       	cpc	r15, r1
    224a:	09 f0       	breq	.+2      	; 0x224e <Endpoint_Write_Control_PStream_LE+0xdc>
    224c:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    224e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    2252:	20 97       	sbiw	r28, 0x00	; 0
    2254:	09 f0       	breq	.+2      	; 0x2258 <Endpoint_Write_Control_PStream_LE+0xe6>
    2256:	af cf       	rjmp	.-162    	; 0x21b6 <Endpoint_Write_Control_PStream_LE+0x44>
    2258:	d1 10       	cpse	r13, r1
    225a:	ad cf       	rjmp	.-166    	; 0x21b6 <Endpoint_Write_Control_PStream_LE+0x44>
    225c:	0a c0       	rjmp	.+20     	; 0x2272 <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    225e:	80 91 75 95 	lds	r24, 0x9575

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    2262:	88 23       	and	r24, r24
    2264:	91 f0       	breq	.+36     	; 0x228a <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2266:	85 30       	cpi	r24, 0x05	; 5
    2268:	91 f0       	breq	.+36     	; 0x228e <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    226a:	0e 94 01 12 	call	0x2402	; 0x2402 <Endpoint_IsSETUPReceived>
    226e:	81 11       	cpse	r24, r1
    2270:	10 c0       	rjmp	.+32     	; 0x2292 <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    2272:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    2276:	88 23       	and	r24, r24
    2278:	91 f3       	breq	.-28     	; 0x225e <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	0b c0       	rjmp	.+22     	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    2282:	83 e0       	ldi	r24, 0x03	; 3
    2284:	07 c0       	rjmp	.+14     	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    228a:	82 e0       	ldi	r24, 0x02	; 2
    228c:	03 c0       	rjmp	.+6      	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	01 c0       	rjmp	.+2      	; 0x2294 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    2292:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	0f 91       	pop	r16
    229c:	ff 90       	pop	r15
    229e:	ef 90       	pop	r14
    22a0:	df 90       	pop	r13
    22a2:	08 95       	ret

000022a4 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    22a4:	e0 91 80 95 	lds	r30, 0x9580
    22a8:	f0 91 81 95 	lds	r31, 0x9581
    22ac:	a0 91 7e 95 	lds	r26, 0x957E
    22b0:	b0 91 7f 95 	lds	r27, 0x957F
    22b4:	af 5b       	subi	r26, 0xBF	; 191
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	8c 91       	ld	r24, X
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	82 83       	std	Z+2, r24	; 0x02
    22be:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    22c0:	80 81       	ld	r24, Z
    22c2:	8d 79       	andi	r24, 0x9D	; 157
    22c4:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    22c6:	e0 91 7e 95 	lds	r30, 0x957E
    22ca:	f0 91 7f 95 	lds	r31, 0x957F
    22ce:	ef 5b       	subi	r30, 0xBF	; 191
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	10 82       	st	Z, r1
    22d4:	08 95       	ret

000022d6 <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    22d6:	e0 91 80 95 	lds	r30, 0x9580
    22da:	f0 91 81 95 	lds	r31, 0x9581
    22de:	80 81       	ld	r24, Z
    22e0:	8d 79       	andi	r24, 0x9D	; 157
    22e2:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    22e4:	e0 91 7e 95 	lds	r30, 0x957E
    22e8:	f0 91 7f 95 	lds	r31, 0x957F
    22ec:	ef 5b       	subi	r30, 0xBF	; 191
    22ee:	ff 4f       	sbci	r31, 0xFF	; 255
    22f0:	10 82       	st	Z, r1
    22f2:	08 95       	ret

000022f4 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    22f4:	80 91 7e 95 	lds	r24, 0x957E
    22f8:	90 91 7f 95 	lds	r25, 0x957F
    22fc:	fc 01       	movw	r30, r24
    22fe:	ef 5b       	subi	r30, 0xBF	; 191
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	20 81       	ld	r18, Z
    2304:	31 e0       	ldi	r19, 0x01	; 1
    2306:	32 0f       	add	r19, r18
    2308:	30 83       	st	Z, r19
    230a:	fc 01       	movw	r30, r24
    230c:	e2 0f       	add	r30, r18
    230e:	f1 1d       	adc	r31, r1
    2310:	80 81       	ld	r24, Z
}
    2312:	08 95       	ret

00002314 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    2314:	20 91 7e 95 	lds	r18, 0x957E
    2318:	30 91 7f 95 	lds	r19, 0x957F
    231c:	f9 01       	movw	r30, r18
    231e:	ef 5b       	subi	r30, 0xBF	; 191
    2320:	ff 4f       	sbci	r31, 0xFF	; 255
    2322:	90 81       	ld	r25, Z
    2324:	41 e0       	ldi	r20, 0x01	; 1
    2326:	49 0f       	add	r20, r25
    2328:	40 83       	st	Z, r20
    232a:	f9 01       	movw	r30, r18
    232c:	e9 0f       	add	r30, r25
    232e:	f1 1d       	adc	r31, r1
    2330:	80 83       	st	Z, r24
    2332:	08 95       	ret

00002334 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    2334:	80 93 82 95 	sts	0x9582, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    2338:	28 2f       	mov	r18, r24
    233a:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    233c:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    233e:	40 91 c6 04 	lds	r20, 0x04C6
    2342:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    2346:	88 23       	and	r24, r24
    2348:	e4 f4       	brge	.+56     	; 0x2382 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    234a:	64 e8       	ldi	r22, 0x84	; 132
    234c:	62 9f       	mul	r22, r18
    234e:	c0 01       	movw	r24, r0
    2350:	63 9f       	mul	r22, r19
    2352:	90 0d       	add	r25, r0
    2354:	11 24       	eor	r1, r1
    2356:	8b 53       	subi	r24, 0x3B	; 59
    2358:	9a 46       	sbci	r25, 0x6A	; 106
    235a:	80 93 7e 95 	sts	0x957E, r24
    235e:	90 93 7f 95 	sts	0x957F, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    2362:	c9 01       	movw	r24, r18
    2364:	82 95       	swap	r24
    2366:	92 95       	swap	r25
    2368:	90 7f       	andi	r25, 0xF0	; 240
    236a:	98 27       	eor	r25, r24
    236c:	80 7f       	andi	r24, 0xF0	; 240
    236e:	98 27       	eor	r25, r24
    2370:	08 96       	adiw	r24, 0x08	; 8
    2372:	9a 01       	movw	r18, r20
    2374:	28 0f       	add	r18, r24
    2376:	39 1f       	adc	r19, r25
    2378:	20 93 80 95 	sts	0x9580, r18
    237c:	30 93 81 95 	sts	0x9581, r19
    2380:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    2382:	64 e8       	ldi	r22, 0x84	; 132
    2384:	62 9f       	mul	r22, r18
    2386:	c0 01       	movw	r24, r0
    2388:	63 9f       	mul	r22, r19
    238a:	90 0d       	add	r25, r0
    238c:	11 24       	eor	r1, r1
    238e:	8d 57       	subi	r24, 0x7D	; 125
    2390:	9a 46       	sbci	r25, 0x6A	; 106
    2392:	80 93 7e 95 	sts	0x957E, r24
    2396:	90 93 7f 95 	sts	0x957F, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    239a:	22 95       	swap	r18
    239c:	32 95       	swap	r19
    239e:	30 7f       	andi	r19, 0xF0	; 240
    23a0:	32 27       	eor	r19, r18
    23a2:	20 7f       	andi	r18, 0xF0	; 240
    23a4:	32 27       	eor	r19, r18
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	20 93 80 95 	sts	0x9580, r18
    23ae:	30 93 81 95 	sts	0x9581, r19
    23b2:	08 95       	ret

000023b4 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    23b4:	80 91 82 95 	lds	r24, 0x9582
    23b8:	80 68       	ori	r24, 0x80	; 128
    23ba:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    23be:	e0 91 80 95 	lds	r30, 0x9580
    23c2:	f0 91 81 95 	lds	r31, 0x9581
    23c6:	80 81       	ld	r24, Z
}
    23c8:	86 95       	lsr	r24
    23ca:	81 70       	andi	r24, 0x01	; 1
    23cc:	08 95       	ret

000023ce <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    23ce:	80 91 82 95 	lds	r24, 0x9582
    23d2:	8f 77       	andi	r24, 0x7F	; 127
    23d4:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    23d8:	e0 91 80 95 	lds	r30, 0x9580
    23dc:	f0 91 81 95 	lds	r31, 0x9581
    23e0:	80 81       	ld	r24, Z
    23e2:	85 ff       	sbrs	r24, 5
    23e4:	0c c0       	rjmp	.+24     	; 0x23fe <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    23e6:	80 91 7e 95 	lds	r24, 0x957E
    23ea:	90 91 7f 95 	lds	r25, 0x957F
    23ee:	22 81       	ldd	r18, Z+2	; 0x02
    23f0:	33 81       	ldd	r19, Z+3	; 0x03
    23f2:	fc 01       	movw	r30, r24
    23f4:	e0 5c       	subi	r30, 0xC0	; 192
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	20 83       	st	Z, r18
		return true;
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	08 95       	ret
	}

	return false;
    23fe:	80 e0       	ldi	r24, 0x00	; 0
}
    2400:	08 95       	ret

00002402 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    2402:	80 91 82 95 	lds	r24, 0x9582
    2406:	8f 77       	andi	r24, 0x7F	; 127
    2408:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    240c:	e0 91 80 95 	lds	r30, 0x9580
    2410:	f0 91 81 95 	lds	r31, 0x9581
    2414:	80 81       	ld	r24, Z
    2416:	84 ff       	sbrs	r24, 4
    2418:	0c c0       	rjmp	.+24     	; 0x2432 <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    241a:	80 91 7e 95 	lds	r24, 0x957E
    241e:	90 91 7f 95 	lds	r25, 0x957F
    2422:	22 81       	ldd	r18, Z+2	; 0x02
    2424:	33 81       	ldd	r19, Z+3	; 0x03
    2426:	fc 01       	movw	r30, r24
    2428:	e0 5c       	subi	r30, 0xC0	; 192
    242a:	ff 4f       	sbci	r31, 0xFF	; 255
    242c:	20 83       	st	Z, r18
		return true;
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	08 95       	ret
	}

	return false;
    2432:	80 e0       	ldi	r24, 0x00	; 0
}
    2434:	08 95       	ret

00002436 <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    2436:	80 91 82 95 	lds	r24, 0x9582
    243a:	8f 77       	andi	r24, 0x7F	; 127
    243c:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    2440:	e0 91 80 95 	lds	r30, 0x9580
    2444:	f0 91 81 95 	lds	r31, 0x9581
    2448:	80 81       	ld	r24, Z
    244a:	8d 78       	andi	r24, 0x8D	; 141
    244c:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    244e:	e0 91 80 95 	lds	r30, 0x9580
    2452:	f0 91 81 95 	lds	r31, 0x9581
    2456:	80 81       	ld	r24, Z
    2458:	81 60       	ori	r24, 0x01	; 1
    245a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    245c:	e0 91 7e 95 	lds	r30, 0x957E
    2460:	f0 91 7f 95 	lds	r31, 0x957F
    2464:	ef 5b       	subi	r30, 0xBF	; 191
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    246a:	80 91 82 95 	lds	r24, 0x9582
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    2474:	e0 91 80 95 	lds	r30, 0x9580
    2478:	f0 91 81 95 	lds	r31, 0x9581
    247c:	80 81       	ld	r24, Z
    247e:	81 60       	ori	r24, 0x01	; 1
    2480:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    2482:	e0 91 7e 95 	lds	r30, 0x957E
    2486:	f0 91 7f 95 	lds	r31, 0x957F
    248a:	ef 5b       	subi	r30, 0xBF	; 191
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	10 82       	st	Z, r1
    2490:	08 95       	ret

00002492 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    2492:	e0 91 80 95 	lds	r30, 0x9580
    2496:	f0 91 81 95 	lds	r31, 0x9581
    249a:	81 81       	ldd	r24, Z+1	; 0x01
    249c:	84 60       	ori	r24, 0x04	; 4
    249e:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    24a0:	e0 91 80 95 	lds	r30, 0x9580
    24a4:	f0 91 81 95 	lds	r31, 0x9581
    24a8:	81 81       	ldd	r24, Z+1	; 0x01
    24aa:	80 7c       	andi	r24, 0xC0	; 192
    24ac:	80 34       	cpi	r24, 0x40	; 64
    24ae:	61 f4       	brne	.+24     	; 0x24c8 <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    24b0:	80 91 82 95 	lds	r24, 0x9582
    24b4:	80 58       	subi	r24, 0x80	; 128
    24b6:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    24ba:	e0 91 80 95 	lds	r30, 0x9580
    24be:	f0 91 81 95 	lds	r31, 0x9581
    24c2:	81 81       	ldd	r24, Z+1	; 0x01
    24c4:	84 60       	ori	r24, 0x04	; 4
    24c6:	81 83       	std	Z+1, r24	; 0x01
    24c8:	08 95       	ret

000024ca <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    24ca:	1f 93       	push	r17
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
    24d0:	d8 2f       	mov	r29, r24
    24d2:	16 2f       	mov	r17, r22
    24d4:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    24d6:	0e 94 9a 11 	call	0x2334	; 0x2334 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    24da:	e0 91 80 95 	lds	r30, 0x9580
    24de:	f0 91 81 95 	lds	r31, 0x9581
    24e2:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    24e4:	e0 91 80 95 	lds	r30, 0x9580
    24e8:	f0 91 81 95 	lds	r31, 0x9581
    24ec:	dd 23       	and	r29, r29
    24ee:	a4 f0       	brlt	.+40     	; 0x2518 <Endpoint_ConfigureEndpoint_PRV+0x4e>
    24f0:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    24f2:	e0 91 80 95 	lds	r30, 0x9580
    24f6:	f0 91 81 95 	lds	r31, 0x9581
    24fa:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    24fc:	e0 91 80 95 	lds	r30, 0x9580
    2500:	f0 91 81 95 	lds	r31, 0x9581
    2504:	12 82       	std	Z+2, r1	; 0x02
    2506:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    2508:	80 91 7e 95 	lds	r24, 0x957E
    250c:	90 91 7f 95 	lds	r25, 0x957F
    2510:	84 83       	std	Z+4, r24	; 0x04
    2512:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    2514:	40 e0       	ldi	r20, 0x00	; 0
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    2518:	82 e0       	ldi	r24, 0x02	; 2
    251a:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    251c:	e0 91 80 95 	lds	r30, 0x9580
    2520:	f0 91 81 95 	lds	r31, 0x9581
    2524:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    2526:	e0 91 80 95 	lds	r30, 0x9580
    252a:	f0 91 81 95 	lds	r31, 0x9581
    252e:	12 82       	std	Z+2, r1	; 0x02
    2530:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    2532:	80 91 7e 95 	lds	r24, 0x957E
    2536:	90 91 7f 95 	lds	r25, 0x957F
    253a:	84 83       	std	Z+4, r24	; 0x04
    253c:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    253e:	4c 2f       	mov	r20, r28
    2540:	fc 01       	movw	r30, r24
    2542:	e0 5c       	subi	r30, 0xC0	; 192
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    2548:	31 96       	adiw	r30, 0x01	; 1
    254a:	10 82       	st	Z, r1

	return true;
}
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	1f 91       	pop	r17
    2554:	08 95       	ret

00002556 <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    2556:	af 92       	push	r10
    2558:	bf 92       	push	r11
    255a:	cf 92       	push	r12
    255c:	df 92       	push	r13
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    256a:	66 23       	and	r22, r22
    256c:	09 f4       	brne	.+2      	; 0x2570 <Endpoint_ConfigureEndpointTable+0x1a>
    256e:	57 c0       	rjmp	.+174    	; 0x261e <Endpoint_ConfigureEndpointTable+0xc8>
    2570:	a6 2e       	mov	r10, r22
    2572:	7c 01       	movw	r14, r24
    2574:	8c 01       	movw	r16, r24
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	e8 0e       	add	r14, r24
    257a:	f1 1c       	adc	r15, r1
    257c:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    257e:	f8 01       	movw	r30, r16
    2580:	c0 80       	ld	r12, Z
    2582:	cc 20       	and	r12, r12
    2584:	09 f4       	brne	.+2      	; 0x2588 <Endpoint_ConfigureEndpointTable+0x32>
    2586:	41 c0       	rjmp	.+130    	; 0x260a <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    2588:	c1 81       	ldd	r28, Z+1	; 0x01
    258a:	d2 81       	ldd	r29, Z+2	; 0x02
    258c:	f7 01       	movw	r30, r14
    258e:	31 97       	sbiw	r30, 0x01	; 1
    2590:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    2592:	f7 01       	movw	r30, r14
    2594:	90 81       	ld	r25, Z
    2596:	92 30       	cpi	r25, 0x02	; 2
    2598:	10 f4       	brcc	.+4      	; 0x259e <Endpoint_ConfigureEndpointTable+0x48>
    259a:	48 e0       	ldi	r20, 0x08	; 8
    259c:	01 c0       	rjmp	.+2      	; 0x25a0 <Endpoint_ConfigureEndpointTable+0x4a>
    259e:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    25a0:	c9 30       	cpi	r28, 0x09	; 9
    25a2:	d1 05       	cpc	r29, r1
    25a4:	50 f0       	brcs	.+20     	; 0x25ba <Endpoint_ConfigureEndpointTable+0x64>
    25a6:	28 e0       	ldi	r18, 0x08	; 8
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    25ac:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    25ae:	22 0f       	add	r18, r18
    25b0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    25b2:	2c 17       	cp	r18, r28
    25b4:	3d 07       	cpc	r19, r29
    25b6:	d0 f3       	brcs	.-12     	; 0x25ac <Endpoint_ConfigureEndpointTable+0x56>
    25b8:	01 c0       	rjmp	.+2      	; 0x25bc <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    25ba:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    25bc:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    25be:	2c 2d       	mov	r18, r12
    25c0:	2f 70       	andi	r18, 0x0F	; 15
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	25 30       	cpi	r18, 0x05	; 5
    25c6:	31 05       	cpc	r19, r1
    25c8:	64 f5       	brge	.+88     	; 0x2622 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    25ca:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    25cc:	c1 34       	cpi	r28, 0x41	; 65
    25ce:	d1 05       	cpc	r29, r1
    25d0:	50 f5       	brcc	.+84     	; 0x2626 <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    25d2:	88 23       	and	r24, r24
    25d4:	19 f0       	breq	.+6      	; 0x25dc <Endpoint_ConfigureEndpointTable+0x86>
    25d6:	81 30       	cpi	r24, 0x01	; 1
    25d8:	21 f0       	breq	.+8      	; 0x25e2 <Endpoint_ConfigureEndpointTable+0x8c>
    25da:	06 c0       	rjmp	.+12     	; 0x25e8 <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    25dc:	90 64       	ori	r25, 0x40	; 64
    25de:	d9 2e       	mov	r13, r25
    25e0:	07 c0       	rjmp	.+14     	; 0x25f0 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    25e2:	90 6c       	ori	r25, 0xC0	; 192
    25e4:	d9 2e       	mov	r13, r25
    25e6:	0a c0       	rjmp	.+20     	; 0x25fc <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    25e8:	90 68       	ori	r25, 0x80	; 128
    25ea:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    25ec:	81 11       	cpse	r24, r1
    25ee:	06 c0       	rjmp	.+12     	; 0x25fc <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    25f0:	4c 2f       	mov	r20, r28
    25f2:	6d 2d       	mov	r22, r13
    25f4:	80 e8       	ldi	r24, 0x80	; 128
    25f6:	8c 0d       	add	r24, r12
    25f8:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    25fc:	4c 2f       	mov	r20, r28
    25fe:	6d 2d       	mov	r22, r13
    2600:	8c 2d       	mov	r24, r12
    2602:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>
    2606:	88 23       	and	r24, r24
    2608:	79 f0       	breq	.+30     	; 0x2628 <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    260a:	b3 94       	inc	r11
    260c:	0b 5f       	subi	r16, 0xFB	; 251
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	f5 e0       	ldi	r31, 0x05	; 5
    2612:	ef 0e       	add	r14, r31
    2614:	f1 1c       	adc	r15, r1
    2616:	ba 10       	cpse	r11, r10
    2618:	b2 cf       	rjmp	.-156    	; 0x257e <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	05 c0       	rjmp	.+10     	; 0x2628 <Endpoint_ConfigureEndpointTable+0xd2>
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	03 c0       	rjmp	.+6      	; 0x2628 <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	01 c0       	rjmp	.+2      	; 0x2628 <Endpoint_ConfigureEndpointTable+0xd2>
    2626:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
    2634:	df 90       	pop	r13
    2636:	cf 90       	pop	r12
    2638:	bf 90       	pop	r11
    263a:	af 90       	pop	r10
    263c:	08 95       	ret

0000263e <Endpoint_ClearEndpoints>:

	return true;
}

void Endpoint_ClearEndpoints(void)
{
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    2642:	a0 ec       	ldi	r26, 0xC0	; 192
    2644:	b4 e0       	ldi	r27, 0x04	; 4
    2646:	16 96       	adiw	r26, 0x06	; 6
    2648:	ed 91       	ld	r30, X+
    264a:	fc 91       	ld	r31, X
    264c:	17 97       	sbiw	r26, 0x07	; 7
    264e:	c9 01       	movw	r24, r18
    2650:	82 95       	swap	r24
    2652:	92 95       	swap	r25
    2654:	90 7f       	andi	r25, 0xF0	; 240
    2656:	98 27       	eor	r25, r24
    2658:	80 7f       	andi	r24, 0xF0	; 240
    265a:	98 27       	eor	r25, r24
    265c:	e8 0f       	add	r30, r24
    265e:	f9 1f       	adc	r31, r25
    2660:	11 86       	std	Z+9, r1	; 0x09
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    2662:	16 96       	adiw	r26, 0x06	; 6
    2664:	4d 91       	ld	r20, X+
    2666:	5c 91       	ld	r21, X
    2668:	17 97       	sbiw	r26, 0x07	; 7
    266a:	fa 01       	movw	r30, r20
    266c:	e8 0f       	add	r30, r24
    266e:	f9 1f       	adc	r31, r25
    2670:	11 82       	std	Z+1, r1	; 0x01
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
	return true;
}

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    2676:	25 30       	cpi	r18, 0x05	; 5
    2678:	31 05       	cpc	r19, r1
    267a:	29 f7       	brne	.-54     	; 0x2646 <Endpoint_ClearEndpoints+0x8>
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
	}
}
    267c:	08 95       	ret

0000267e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    267e:	80 91 76 95 	lds	r24, 0x9576
    2682:	88 23       	and	r24, r24
    2684:	84 f4       	brge	.+32     	; 0x26a6 <Endpoint_ClearStatusStage+0x28>
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2688:	80 91 75 95 	lds	r24, 0x9575
    268c:	88 23       	and	r24, r24
    268e:	89 f0       	breq	.+34     	; 0x26b2 <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2690:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    2694:	88 23       	and	r24, r24
    2696:	c1 f3       	breq	.-16     	; 0x2688 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    2698:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Endpoint_ClearOUT>
    269c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    269e:	80 91 75 95 	lds	r24, 0x9575
    26a2:	88 23       	and	r24, r24
    26a4:	31 f0       	breq	.+12     	; 0x26b2 <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    26a6:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    26aa:	88 23       	and	r24, r24
    26ac:	c1 f3       	breq	.-16     	; 0x269e <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    26ae:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Endpoint_ClearIN>
    26b2:	08 95       	ret

000026b4 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    26be:	e0 91 c6 04 	lds	r30, 0x04C6
    26c2:	f0 91 c7 04 	lds	r31, 0x04C7
    26c6:	e0 5b       	subi	r30, 0xB0	; 176
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	c0 81       	ld	r28, Z
    26cc:	d1 81       	ldd	r29, Z+1	; 0x01
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    26ce:	0f 2e       	mov	r0, r31
    26d0:	f4 e6       	ldi	r31, 0x64	; 100
    26d2:	ff 2e       	mov	r15, r31
    26d4:	f0 2d       	mov	r31, r0
    26d6:	00 ec       	ldi	r16, 0xC0	; 192
    26d8:	14 e0       	ldi	r17, 0x04	; 4
    26da:	02 c0       	rjmp	.+4      	; 0x26e0 <Endpoint_WaitUntilReady+0x2c>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    26dc:	f2 2e       	mov	r15, r18
    26de:	ec 01       	movw	r28, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    26e0:	80 91 82 95 	lds	r24, 0x9582

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <Endpoint_WaitUntilReady+0x3e>
		{
			if (Endpoint_IsINReady())
    26e8:	0e 94 da 11 	call	0x23b4	; 0x23b4 <Endpoint_IsINReady>
    26ec:	88 23       	and	r24, r24
    26ee:	29 f0       	breq	.+10     	; 0x26fa <Endpoint_WaitUntilReady+0x46>
    26f0:	23 c0       	rjmp	.+70     	; 0x2738 <Endpoint_WaitUntilReady+0x84>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    26f2:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Endpoint_IsOUTReceived>
    26f6:	81 11       	cpse	r24, r1
    26f8:	21 c0       	rjmp	.+66     	; 0x273c <Endpoint_WaitUntilReady+0x88>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    26fa:	80 91 75 95 	lds	r24, 0x9575

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    26fe:	88 23       	and	r24, r24
    2700:	f9 f0       	breq	.+62     	; 0x2740 <Endpoint_WaitUntilReady+0x8c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2702:	85 30       	cpi	r24, 0x05	; 5
    2704:	f9 f0       	breq	.+62     	; 0x2744 <Endpoint_WaitUntilReady+0x90>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    2706:	e0 91 80 95 	lds	r30, 0x9580
    270a:	f0 91 81 95 	lds	r31, 0x9581
    270e:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    2710:	82 fd       	sbrc	r24, 2
    2712:	1a c0       	rjmp	.+52     	; 0x2748 <Endpoint_WaitUntilReady+0x94>
    2714:	d8 01       	movw	r26, r16
    2716:	16 96       	adiw	r26, 0x06	; 6
    2718:	ed 91       	ld	r30, X+
    271a:	fc 91       	ld	r31, X
    271c:	17 97       	sbiw	r26, 0x07	; 7
    271e:	e0 5b       	subi	r30, 0xB0	; 176
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2726:	c8 17       	cp	r28, r24
    2728:	d9 07       	cpc	r29, r25
    272a:	c9 f2       	breq	.-78     	; 0x26de <Endpoint_WaitUntilReady+0x2a>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    272c:	2f ef       	ldi	r18, 0xFF	; 255
    272e:	2f 0d       	add	r18, r15
    2730:	f1 10       	cpse	r15, r1
    2732:	d4 cf       	rjmp	.-88     	; 0x26dc <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_Timeout;
    2734:	84 e0       	ldi	r24, 0x04	; 4
    2736:	09 c0       	rjmp	.+18     	; 0x274a <Endpoint_WaitUntilReady+0x96>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    2738:	80 e0       	ldi	r24, 0x00	; 0
    273a:	07 c0       	rjmp	.+14     	; 0x274a <Endpoint_WaitUntilReady+0x96>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	05 c0       	rjmp	.+10     	; 0x274a <Endpoint_WaitUntilReady+0x96>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	03 c0       	rjmp	.+6      	; 0x274a <Endpoint_WaitUntilReady+0x96>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	01 c0       	rjmp	.+2      	; 0x274a <Endpoint_WaitUntilReady+0x96>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    2748:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    274a:	df 91       	pop	r29
    274c:	cf 91       	pop	r28
    274e:	1f 91       	pop	r17
    2750:	0f 91       	pop	r16
    2752:	ff 90       	pop	r15
    2754:	08 95       	ret

00002756 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    275a:	e0 e4       	ldi	r30, 0x40	; 64
    275c:	f0 e0       	ldi	r31, 0x00	; 0
    275e:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    2760:	84 81       	ldd	r24, Z+4	; 0x04
    2762:	83 60       	ori	r24, 0x03	; 3
    2764:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    2766:	0e 94 09 14 	call	0x2812	; 0x2812 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    276a:	0e 94 10 14 	call	0x2820	; 0x2820 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    276e:	c0 ec       	ldi	r28, 0xC0	; 192
    2770:	d4 e0       	ldi	r29, 0x04	; 4
    2772:	88 81       	ld	r24, Y
    2774:	8f 77       	andi	r24, 0x7F	; 127
    2776:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    2778:	88 81       	ld	r24, Y
    277a:	80 68       	ori	r24, 0x80	; 128
    277c:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    277e:	10 92 75 95 	sts	0x9575, r1
	USB_Device_ConfigurationNumber  = 0;
    2782:	10 92 71 95 	sts	0x9571, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    2786:	10 92 73 95 	sts	0x9573, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    278a:	10 92 72 95 	sts	0x9572, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    278e:	88 81       	ld	r24, Y
    2790:	80 64       	ori	r24, 0x40	; 64
    2792:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    2794:	48 e0       	ldi	r20, 0x08	; 8
    2796:	68 e4       	ldi	r22, 0x48	; 72
    2798:	80 e8       	ldi	r24, 0x80	; 128
    279a:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    279e:	48 e0       	ldi	r20, 0x08	; 8
    27a0:	68 e4       	ldi	r22, 0x48	; 72
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    27a8:	88 85       	ldd	r24, Y+8	; 0x08
    27aa:	80 64       	ori	r24, 0x40	; 64
    27ac:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	81 60       	ori	r24, 0x01	; 1
    27b2:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	08 95       	ret

000027ba <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    27be:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    27c0:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    27c2:	c0 ec       	ldi	r28, 0xC0	; 192
    27c4:	d1 e0       	ldi	r29, 0x01	; 1
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    27ca:	ea e1       	ldi	r30, 0x1A	; 26
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	e4 91       	lpm	r30, Z
    27d0:	a0 ec       	ldi	r26, 0xC0	; 192
    27d2:	b4 e0       	ldi	r27, 0x04	; 4
    27d4:	da 96       	adiw	r26, 0x3a	; 58
    27d6:	ec 93       	st	X, r30
    27d8:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    27da:	eb e1       	ldi	r30, 0x1B	; 27
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	e4 91       	lpm	r30, Z
    27e0:	db 96       	adiw	r26, 0x3b	; 59
    27e2:	ec 93       	st	X, r30
    27e4:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    27e6:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    27e8:	88 e1       	ldi	r24, 0x18	; 24
    27ea:	98 e9       	ldi	r25, 0x98	; 152
    27ec:	8e 7f       	andi	r24, 0xFE	; 254
    27ee:	16 96       	adiw	r26, 0x06	; 6
    27f0:	8d 93       	st	X+, r24
    27f2:	9c 93       	st	X, r25
    27f4:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    27f6:	84 e1       	ldi	r24, 0x14	; 20
    27f8:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	18 96       	adiw	r26, 0x08	; 8
    27fe:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2800:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	80 93 74 95 	sts	0x9574, r24

	USB_ResetInterface();
    2808:	0e 94 ab 13 	call	0x2756	; 0x2756 <USB_ResetInterface>
}
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    2812:	e0 ec       	ldi	r30, 0xC0	; 192
    2814:	f4 e0       	ldi	r31, 0x04	; 4
    2816:	80 85       	ldd	r24, Z+8	; 0x08
    2818:	83 70       	andi	r24, 0x03	; 3
    281a:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    281c:	11 86       	std	Z+9, r1	; 0x09
    281e:	08 95       	ret

00002820 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    2820:	e0 ec       	ldi	r30, 0xC0	; 192
    2822:	f4 e0       	ldi	r31, 0x04	; 4
    2824:	8f ef       	ldi	r24, 0xFF	; 255
    2826:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    2828:	84 87       	std	Z+12, r24	; 0x0c
    282a:	08 95       	ret

0000282c <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	0b b6       	in	r0, 0x3b	; 59
    2838:	0f 92       	push	r0
    283a:	2f 93       	push	r18
    283c:	3f 93       	push	r19
    283e:	4f 93       	push	r20
    2840:	5f 93       	push	r21
    2842:	6f 93       	push	r22
    2844:	7f 93       	push	r23
    2846:	8f 93       	push	r24
    2848:	9f 93       	push	r25
    284a:	af 93       	push	r26
    284c:	bf 93       	push	r27
    284e:	ef 93       	push	r30
    2850:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    2852:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2856:	88 23       	and	r24, r24
    2858:	4c f4       	brge	.+18     	; 0x286c <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    285a:	80 91 c8 04 	lds	r24, 0x04C8
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    2862:	80 e8       	ldi	r24, 0x80	; 128
    2864:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2868:	0e 94 0e 10 	call	0x201c	; 0x201c <USB_Event_Stub>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    286c:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    2870:	86 ff       	sbrs	r24, 6
    2872:	07 c0       	rjmp	.+14     	; 0x2882 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    2874:	80 e4       	ldi	r24, 0x40	; 64
    2876:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    287a:	10 92 75 95 	sts	0x9575, r1
		EVENT_USB_Device_Disconnect();
    287e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    2882:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    2886:	85 ff       	sbrs	r24, 5
    2888:	16 c0       	rjmp	.+44     	; 0x28b6 <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    288a:	80 e2       	ldi	r24, 0x20	; 32
    288c:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    2890:	80 91 71 95 	lds	r24, 0x9571
    2894:	88 23       	and	r24, r24
    2896:	21 f0       	breq	.+8      	; 0x28a0 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2898:	84 e0       	ldi	r24, 0x04	; 4
    289a:	80 93 75 95 	sts	0x9575, r24
    289e:	09 c0       	rjmp	.+18     	; 0x28b2 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    28a0:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    28a4:	81 11       	cpse	r24, r1
    28a6:	02 c0       	rjmp	.+4      	; 0x28ac <__vector_125+0x80>
    28a8:	81 e0       	ldi	r24, 0x01	; 1
    28aa:	01 c0       	rjmp	.+2      	; 0x28ae <__vector_125+0x82>
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	80 93 75 95 	sts	0x9575, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    28b2:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    28b6:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    28ba:	84 ff       	sbrs	r24, 4
    28bc:	18 c0       	rjmp	.+48     	; 0x28ee <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    28be:	e0 ec       	ldi	r30, 0xC0	; 192
    28c0:	f4 e0       	ldi	r31, 0x04	; 4
    28c2:	80 e1       	ldi	r24, 0x10	; 16
    28c4:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    28c6:	82 e0       	ldi	r24, 0x02	; 2
    28c8:	80 93 75 95 	sts	0x9575, r24
		USB_Device_ConfigurationNumber = 0;
    28cc:	10 92 71 95 	sts	0x9571, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    28d0:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    28d2:	0e 94 1f 13 	call	0x263e	; 0x263e <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    28d6:	48 e0       	ldi	r20, 0x08	; 8
    28d8:	68 e4       	ldi	r22, 0x48	; 72
    28da:	80 e8       	ldi	r24, 0x80	; 128
    28dc:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    28e0:	48 e0       	ldi	r20, 0x08	; 8
    28e2:	68 e4       	ldi	r22, 0x48	; 72
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	0e 94 65 12 	call	0x24ca	; 0x24ca <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    28ea:	0e 94 0e 10 	call	0x201c	; 0x201c <USB_Event_Stub>
	}
}
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0b be       	out	0x3b, r0	; 59
    290a:	0f 90       	pop	r0
    290c:	0f be       	out	0x3f, r0	; 63
    290e:	0f 90       	pop	r0
    2910:	1f 90       	pop	r1
    2912:	18 95       	reti

00002914 <USBThread>:
		temp ^= pixel_mask;
		break;
	}

	gfx_mono_put_byte(page, column, temp);
}
    2914:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskSuspendAll>
    2918:	81 e9       	ldi	r24, 0x91	; 145
    291a:	92 e2       	ldi	r25, 0x22	; 34
    291c:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <CDC_Device_USBTask>
    2920:	0e 94 0f 10 	call	0x201e	; 0x201e <USB_USBTask>
    2924:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
    2930:	f1 cf       	rjmp	.-30     	; 0x2914 <USBThread>

00002932 <thread_1>:
    2932:	84 ef       	ldi	r24, 0xF4	; 244
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
    293a:	8f ea       	ldi	r24, 0xAF	; 175
    293c:	92 e2       	ldi	r25, 0x22	; 34
    293e:	0e 94 2f 18 	call	0x305e	; 0x305e <DigitalPin_ToggleValue>
    2942:	f7 cf       	rjmp	.-18     	; 0x2932 <thread_1>

00002944 <thread_2>:
    2944:	e0 e0       	ldi	r30, 0x00	; 0
    2946:	f2 e0       	ldi	r31, 0x02	; 2
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
    294c:	90 e1       	ldi	r25, 0x10	; 16
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	92 83       	std	Z+2, r25	; 0x02
    2952:	13 82       	std	Z+3, r1	; 0x03
    2954:	96 e0       	ldi	r25, 0x06	; 6
    2956:	94 83       	std	Z+4, r25	; 0x04
    2958:	86 83       	std	Z+6, r24	; 0x06
    295a:	80 a3       	std	Z+32, r24	; 0x20
    295c:	88 e0       	ldi	r24, 0x08	; 8
    295e:	81 a3       	std	Z+33, r24	; 0x21
    2960:	c0 e0       	ldi	r28, 0x00	; 0
    2962:	d2 e0       	ldi	r29, 0x02	; 2
    2964:	0f 2e       	mov	r0, r31
    2966:	f7 eb       	ldi	r31, 0xB7	; 183
    2968:	cf 2e       	mov	r12, r31
    296a:	f2 e2       	ldi	r31, 0x22	; 34
    296c:	df 2e       	mov	r13, r31
    296e:	f0 2d       	mov	r31, r0
    2970:	0f 2e       	mov	r0, r31
    2972:	f1 e4       	ldi	r31, 0x41	; 65
    2974:	ef 2e       	mov	r14, r31
    2976:	f3 e9       	ldi	r31, 0x93	; 147
    2978:	ff 2e       	mov	r15, r31
    297a:	f0 2d       	mov	r31, r0
    297c:	2a e0       	ldi	r18, 0x0A	; 10
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	00 e0       	ldi	r16, 0x00	; 0
    2982:	10 e0       	ldi	r17, 0x00	; 0
    2984:	98 81       	ld	r25, Y
    2986:	94 60       	ori	r25, 0x04	; 4
    2988:	98 83       	st	Y, r25
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	90 ff       	sbrs	r25, 0
    298e:	fd cf       	rjmp	.-6      	; 0x298a <thread_2+0x46>
    2990:	88 89       	ldd	r24, Y+16	; 0x10
    2992:	99 89       	ldd	r25, Y+17	; 0x11
    2994:	08 0f       	add	r16, r24
    2996:	19 1f       	adc	r17, r25
    2998:	21 50       	subi	r18, 0x01	; 1
    299a:	31 09       	sbc	r19, r1
    299c:	99 f7       	brne	.-26     	; 0x2984 <thread_2+0x40>
    299e:	0e 94 b5 0a 	call	0x156a	; 0x156a <vTaskSuspendAll>
    29a2:	c8 01       	movw	r24, r16
    29a4:	6a e0       	ldi	r22, 0x0A	; 10
    29a6:	70 e0       	ldi	r23, 0x00	; 0
    29a8:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__divmodhi4>
    29ac:	07 2e       	mov	r0, r23
    29ae:	00 0c       	add	r0, r0
    29b0:	88 0b       	sbc	r24, r24
    29b2:	99 0b       	sbc	r25, r25
    29b4:	0e 94 0a 19 	call	0x3214	; 0x3214 <__floatsisf>
    29b8:	20 e0       	ldi	r18, 0x00	; 0
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	5a e3       	ldi	r21, 0x3A	; 58
    29c0:	0e 94 45 19 	call	0x328a	; 0x328a <__mulsf3>
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	44 e0       	ldi	r20, 0x04	; 4
    29ca:	50 e4       	ldi	r21, 0x40	; 64
    29cc:	0e 94 45 19 	call	0x328a	; 0x328a <__mulsf3>
    29d0:	9f 93       	push	r25
    29d2:	8f 93       	push	r24
    29d4:	7f 93       	push	r23
    29d6:	6f 93       	push	r22
    29d8:	df 92       	push	r13
    29da:	cf 92       	push	r12
    29dc:	ff 92       	push	r15
    29de:	ef 92       	push	r14
    29e0:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <fprintf>
    29e4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <xTaskResumeAll>
    29e8:	84 e6       	ldi	r24, 0x64	; 100
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
    29f0:	8c ea       	ldi	r24, 0xAC	; 172
    29f2:	92 e2       	ldi	r25, 0x22	; 34
    29f4:	0e 94 2f 18 	call	0x305e	; 0x305e <DigitalPin_ToggleValue>
    29f8:	8d b7       	in	r24, 0x3d	; 61
    29fa:	9e b7       	in	r25, 0x3e	; 62
    29fc:	08 96       	adiw	r24, 0x08	; 8
    29fe:	8d bf       	out	0x3d, r24	; 61
    2a00:	9e bf       	out	0x3e, r25	; 62
    2a02:	bc cf       	rjmp	.-136    	; 0x297c <thread_2+0x38>

00002a04 <thread_3>:
    2a04:	cf 93       	push	r28
    2a06:	df 93       	push	r29
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
    2a0c:	2a 97       	sbiw	r28, 0x0a	; 10
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	0e 94 b8 05 	call	0xb70	; 0xb70 <_nrf24l01p_init>
    2a16:	8a e0       	ldi	r24, 0x0A	; 10
    2a18:	e8 ec       	ldi	r30, 0xC8	; 200
    2a1a:	f2 e2       	ldi	r31, 0x22	; 34
    2a1c:	de 01       	movw	r26, r28
    2a1e:	11 96       	adiw	r26, 0x01	; 1
    2a20:	01 90       	ld	r0, Z+
    2a22:	0d 92       	st	X+, r0
    2a24:	8a 95       	dec	r24
    2a26:	e1 f7       	brne	.-8      	; 0x2a20 <thread_3+0x1c>
    2a28:	ce 01       	movw	r24, r28
    2a2a:	01 96       	adiw	r24, 0x01	; 1
    2a2c:	6c 01       	movw	r12, r24
    2a2e:	f6 01       	movw	r30, r12
    2a30:	01 90       	ld	r0, Z+
    2a32:	00 20       	and	r0, r0
    2a34:	e9 f7       	brne	.-6      	; 0x2a30 <thread_3+0x2c>
    2a36:	31 97       	sbiw	r30, 0x01	; 1
    2a38:	7f 01       	movw	r14, r30
    2a3a:	ec 18       	sub	r14, r12
    2a3c:	fd 08       	sbc	r15, r13
    2a3e:	86 01       	movw	r16, r12
    2a40:	21 e3       	ldi	r18, 0x31	; 49
    2a42:	35 e4       	ldi	r19, 0x45	; 69
    2a44:	45 e4       	ldi	r20, 0x45	; 69
    2a46:	55 e4       	ldi	r21, 0x45	; 69
    2a48:	65 e4       	ldi	r22, 0x45	; 69
    2a4a:	70 e0       	ldi	r23, 0x00	; 0
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	0e 94 85 06 	call	0xd0a	; 0xd0a <_nrf24l01p_send_to_address_ack>
    2a54:	88 ee       	ldi	r24, 0xE8	; 232
    2a56:	93 e0       	ldi	r25, 0x03	; 3
    2a58:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <vTaskDelay>
    2a5c:	e8 cf       	rjmp	.-48     	; 0x2a2e <thread_3+0x2a>

00002a5e <usart_spi_transmit_receive>:
    2a5e:	fc 01       	movw	r30, r24
    2a60:	81 81       	ldd	r24, Z+1	; 0x01
    2a62:	85 ff       	sbrs	r24, 5
    2a64:	fd cf       	rjmp	.-6      	; 0x2a60 <usart_spi_transmit_receive+0x2>
    2a66:	60 83       	st	Z, r22
    2a68:	81 81       	ldd	r24, Z+1	; 0x01
    2a6a:	86 ff       	sbrs	r24, 6
    2a6c:	fd cf       	rjmp	.-6      	; 0x2a68 <usart_spi_transmit_receive+0xa>
    2a6e:	80 e4       	ldi	r24, 0x40	; 64
    2a70:	81 83       	std	Z+1, r24	; 0x01
    2a72:	80 81       	ld	r24, Z
    2a74:	08 95       	ret

00002a76 <ssd1306_write_command>:
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	c0 ea       	ldi	r28, 0xA0	; 160
    2a7e:	d6 e0       	ldi	r29, 0x06	; 6
    2a80:	18 e0       	ldi	r17, 0x08	; 8
    2a82:	1e 83       	std	Y+6, r17	; 0x06
    2a84:	e0 e6       	ldi	r30, 0x60	; 96
    2a86:	f6 e0       	ldi	r31, 0x06	; 6
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	96 83       	std	Z+6, r25	; 0x06
    2a8c:	96 83       	std	Z+6, r25	; 0x06
    2a8e:	68 2f       	mov	r22, r24
    2a90:	80 ea       	ldi	r24, 0xA0	; 160
    2a92:	99 e0       	ldi	r25, 0x09	; 9
    2a94:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <usart_spi_transmit_receive>
    2a98:	1d 83       	std	Y+5, r17	; 0x05
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	08 95       	ret

00002aa2 <ssd1306_write_data>:
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	c0 ea       	ldi	r28, 0xA0	; 160
    2ab0:	d6 e0       	ldi	r29, 0x06	; 6
    2ab2:	18 e0       	ldi	r17, 0x08	; 8
    2ab4:	1e 83       	std	Y+6, r17	; 0x06
    2ab6:	0f 2e       	mov	r0, r31
    2ab8:	f0 e6       	ldi	r31, 0x60	; 96
    2aba:	ef 2e       	mov	r14, r31
    2abc:	f6 e0       	ldi	r31, 0x06	; 6
    2abe:	ff 2e       	mov	r15, r31
    2ac0:	f0 2d       	mov	r31, r0
    2ac2:	01 e0       	ldi	r16, 0x01	; 1
    2ac4:	f7 01       	movw	r30, r14
    2ac6:	05 83       	std	Z+5, r16	; 0x05
    2ac8:	68 2f       	mov	r22, r24
    2aca:	80 ea       	ldi	r24, 0xA0	; 160
    2acc:	99 e0       	ldi	r25, 0x09	; 9
    2ace:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <usart_spi_transmit_receive>
    2ad2:	f7 01       	movw	r30, r14
    2ad4:	06 83       	std	Z+6, r16	; 0x06
    2ad6:	1d 83       	std	Y+5, r17	; 0x05
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	08 95       	ret

00002ae6 <ssd1306_set_page_address>:
    2ae6:	87 70       	andi	r24, 0x07	; 7
    2ae8:	80 6b       	ori	r24, 0xB0	; 176
    2aea:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2aee:	08 95       	ret

00002af0 <ssd1306_set_column_address>:
    2af0:	cf 93       	push	r28
    2af2:	c8 2f       	mov	r28, r24
    2af4:	98 2f       	mov	r25, r24
    2af6:	9f 77       	andi	r25, 0x7F	; 127
    2af8:	89 2f       	mov	r24, r25
    2afa:	82 95       	swap	r24
    2afc:	8f 70       	andi	r24, 0x0F	; 15
    2afe:	80 61       	ori	r24, 0x10	; 16
    2b00:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2b04:	8c 2f       	mov	r24, r28
    2b06:	8f 70       	andi	r24, 0x0F	; 15
    2b08:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2b0c:	cf 91       	pop	r28
    2b0e:	08 95       	ret

00002b10 <usart_init_spi>:
    2b10:	cf 93       	push	r28
    2b12:	df 93       	push	r29
    2b14:	ec 01       	movw	r28, r24
    2b16:	fb 01       	movw	r30, r22
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	8f 7e       	andi	r24, 0xEF	; 239
    2b1c:	8c 83       	std	Y+4, r24	; 0x04
    2b1e:	a0 e6       	ldi	r26, 0x60	; 96
    2b20:	b6 e0       	ldi	r27, 0x06	; 6
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	11 96       	adiw	r26, 0x01	; 1
    2b26:	8c 93       	st	X, r24
    2b28:	11 97       	sbiw	r26, 0x01	; 1
    2b2a:	15 96       	adiw	r26, 0x05	; 5
    2b2c:	8c 93       	st	X, r24
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	80 6c       	ori	r24, 0xC0	; 192
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	84 81       	ldd	r24, Z+4	; 0x04
    2b36:	8d 7f       	andi	r24, 0xFD	; 253
    2b38:	81 30       	cpi	r24, 0x01	; 1
    2b3a:	21 f4       	brne	.+8      	; 0x2b44 <usart_init_spi+0x34>
    2b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3e:	82 60       	ori	r24, 0x02	; 2
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	03 c0       	rjmp	.+6      	; 0x2b4a <usart_init_spi+0x3a>
    2b44:	8d 81       	ldd	r24, Y+5	; 0x05
    2b46:	8d 7f       	andi	r24, 0xFD	; 253
    2b48:	8d 83       	std	Y+5, r24	; 0x05
    2b4a:	85 81       	ldd	r24, Z+5	; 0x05
    2b4c:	88 23       	and	r24, r24
    2b4e:	21 f0       	breq	.+8      	; 0x2b58 <usart_init_spi+0x48>
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	84 60       	ori	r24, 0x04	; 4
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	03 c0       	rjmp	.+6      	; 0x2b5e <usart_init_spi+0x4e>
    2b58:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5a:	8b 7f       	andi	r24, 0xFB	; 251
    2b5c:	8d 83       	std	Y+5, r24	; 0x05
    2b5e:	80 81       	ld	r24, Z
    2b60:	91 81       	ldd	r25, Z+1	; 0x01
    2b62:	a2 81       	ldd	r26, Z+2	; 0x02
    2b64:	b3 81       	ldd	r27, Z+3	; 0x03
    2b66:	9c 01       	movw	r18, r24
    2b68:	ad 01       	movw	r20, r26
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	44 1f       	adc	r20, r20
    2b70:	55 1f       	adc	r21, r21
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	78 e4       	ldi	r23, 0x48	; 72
    2b76:	88 ee       	ldi	r24, 0xE8	; 232
    2b78:	91 e0       	ldi	r25, 0x01	; 1
    2b7a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <__udivmodsi4>
    2b7e:	21 50       	subi	r18, 0x01	; 1
    2b80:	31 09       	sbc	r19, r1
    2b82:	83 2f       	mov	r24, r19
    2b84:	8f 70       	andi	r24, 0x0F	; 15
    2b86:	8f 83       	std	Y+7, r24	; 0x07
    2b88:	2e 83       	std	Y+6, r18	; 0x06
    2b8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b8c:	88 60       	ori	r24, 0x08	; 8
    2b8e:	8c 83       	std	Y+4, r24	; 0x04
    2b90:	df 91       	pop	r29
    2b92:	cf 91       	pop	r28
    2b94:	08 95       	ret

00002b96 <ssd1306_init>:
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	00 d0       	rcall	.+0      	; 0x2b9c <ssd1306_init+0x6>
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <ssd1306_init+0x8>
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	20 ea       	ldi	r18, 0xA0	; 160
    2ba4:	36 e0       	ldi	r19, 0x06	; 6
    2ba6:	88 e0       	ldi	r24, 0x08	; 8
    2ba8:	d9 01       	movw	r26, r18
    2baa:	11 96       	adiw	r26, 0x01	; 1
    2bac:	8c 93       	st	X, r24
    2bae:	a0 e6       	ldi	r26, 0x60	; 96
    2bb0:	b6 e0       	ldi	r27, 0x06	; 6
    2bb2:	91 e0       	ldi	r25, 0x01	; 1
    2bb4:	11 96       	adiw	r26, 0x01	; 1
    2bb6:	9c 93       	st	X, r25
    2bb8:	11 97       	sbiw	r26, 0x01	; 1
    2bba:	e0 e0       	ldi	r30, 0x00	; 0
    2bbc:	f6 e0       	ldi	r31, 0x06	; 6
    2bbe:	81 83       	std	Z+1, r24	; 0x01
    2bc0:	92 e0       	ldi	r25, 0x02	; 2
    2bc2:	11 96       	adiw	r26, 0x01	; 1
    2bc4:	9c 93       	st	X, r25
    2bc6:	11 97       	sbiw	r26, 0x01	; 1
    2bc8:	11 96       	adiw	r26, 0x01	; 1
    2bca:	8c 93       	st	X, r24
    2bcc:	d9 01       	movw	r26, r18
    2bce:	15 96       	adiw	r26, 0x05	; 5
    2bd0:	8c 93       	st	X, r24
    2bd2:	86 83       	std	Z+6, r24	; 0x06
    2bd4:	ba e6       	ldi	r27, 0x6A	; 106
    2bd6:	ba 95       	dec	r27
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <ssd1306_init+0x40>
    2bda:	00 c0       	rjmp	.+0      	; 0x2bdc <ssd1306_init+0x46>
    2bdc:	85 83       	std	Z+5, r24	; 0x05
    2bde:	ea e6       	ldi	r30, 0x6A	; 106
    2be0:	ea 95       	dec	r30
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <ssd1306_init+0x4a>
    2be4:	00 c0       	rjmp	.+0      	; 0x2be6 <ssd1306_init+0x50>
    2be6:	e0 e7       	ldi	r30, 0x70	; 112
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	84 81       	ldd	r24, Z+4	; 0x04
    2bec:	8f 7e       	andi	r24, 0xEF	; 239
    2bee:	84 83       	std	Z+4, r24	; 0x04
    2bf0:	80 e0       	ldi	r24, 0x00	; 0
    2bf2:	9b e1       	ldi	r25, 0x1B	; 27
    2bf4:	a7 eb       	ldi	r26, 0xB7	; 183
    2bf6:	b0 e0       	ldi	r27, 0x00	; 0
    2bf8:	89 83       	std	Y+1, r24	; 0x01
    2bfa:	9a 83       	std	Y+2, r25	; 0x02
    2bfc:	ab 83       	std	Y+3, r26	; 0x03
    2bfe:	bc 83       	std	Y+4, r27	; 0x04
    2c00:	1d 82       	std	Y+5, r1	; 0x05
    2c02:	1e 82       	std	Y+6, r1	; 0x06
    2c04:	be 01       	movw	r22, r28
    2c06:	6f 5f       	subi	r22, 0xFF	; 255
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	80 ea       	ldi	r24, 0xA0	; 160
    2c0c:	99 e0       	ldi	r25, 0x09	; 9
    2c0e:	0e 94 88 15 	call	0x2b10	; 0x2b10 <usart_init_spi>
    2c12:	88 ea       	ldi	r24, 0xA8	; 168
    2c14:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c18:	8f e1       	ldi	r24, 0x1F	; 31
    2c1a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c1e:	83 ed       	ldi	r24, 0xD3	; 211
    2c20:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c2a:	80 e4       	ldi	r24, 0x40	; 64
    2c2c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c30:	81 ea       	ldi	r24, 0xA1	; 161
    2c32:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c36:	88 ec       	ldi	r24, 0xC8	; 200
    2c38:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c3c:	8a ed       	ldi	r24, 0xDA	; 218
    2c3e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c42:	82 e0       	ldi	r24, 0x02	; 2
    2c44:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c48:	81 e8       	ldi	r24, 0x81	; 129
    2c4a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c4e:	8f e8       	ldi	r24, 0x8F	; 143
    2c50:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c54:	84 ea       	ldi	r24, 0xA4	; 164
    2c56:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c5a:	86 ea       	ldi	r24, 0xA6	; 166
    2c5c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c60:	85 ed       	ldi	r24, 0xD5	; 213
    2c62:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c66:	80 e8       	ldi	r24, 0x80	; 128
    2c68:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c6c:	8d e8       	ldi	r24, 0x8D	; 141
    2c6e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c72:	84 e1       	ldi	r24, 0x14	; 20
    2c74:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c78:	8b ed       	ldi	r24, 0xDB	; 219
    2c7a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c7e:	80 e4       	ldi	r24, 0x40	; 64
    2c80:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c84:	89 ed       	ldi	r24, 0xD9	; 217
    2c86:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c8a:	81 ef       	ldi	r24, 0xF1	; 241
    2c8c:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c90:	8f ea       	ldi	r24, 0xAF	; 175
    2c92:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
    2c96:	26 96       	adiw	r28, 0x06	; 6
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	de bf       	out	0x3e, r29	; 62
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	08 95       	ret

00002ca2 <ssd1306_write_text>:
    2ca2:	ef 92       	push	r14
    2ca4:	ff 92       	push	r15
    2ca6:	0f 93       	push	r16
    2ca8:	1f 93       	push	r17
    2caa:	cf 93       	push	r28
    2cac:	dc 01       	movw	r26, r24
    2cae:	ec 91       	ld	r30, X
    2cb0:	ee 23       	and	r30, r30
    2cb2:	29 f1       	breq	.+74     	; 0x2cfe <ssd1306_write_text+0x5c>
    2cb4:	7c 01       	movw	r14, r24
    2cb6:	bf ef       	ldi	r27, 0xFF	; 255
    2cb8:	eb 1a       	sub	r14, r27
    2cba:	fb 0a       	sbc	r15, r27
    2cbc:	ef 37       	cpi	r30, 0x7F	; 127
    2cbe:	d0 f4       	brcc	.+52     	; 0x2cf4 <ssd1306_write_text+0x52>
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	ee 0f       	add	r30, r30
    2cc4:	ff 1f       	adc	r31, r31
    2cc6:	ef 56       	subi	r30, 0x6F	; 111
    2cc8:	fe 4d       	sbci	r31, 0xDE	; 222
    2cca:	00 81       	ld	r16, Z
    2ccc:	11 81       	ldd	r17, Z+1	; 0x01
    2cce:	f8 01       	movw	r30, r16
    2cd0:	80 81       	ld	r24, Z
    2cd2:	88 23       	and	r24, r24
    2cd4:	61 f0       	breq	.+24     	; 0x2cee <ssd1306_write_text+0x4c>
    2cd6:	c1 e0       	ldi	r28, 0x01	; 1
    2cd8:	f8 01       	movw	r30, r16
    2cda:	ec 0f       	add	r30, r28
    2cdc:	f1 1d       	adc	r31, r1
    2cde:	80 81       	ld	r24, Z
    2ce0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <ssd1306_write_data>
    2ce4:	cf 5f       	subi	r28, 0xFF	; 255
    2ce6:	d8 01       	movw	r26, r16
    2ce8:	9c 91       	ld	r25, X
    2cea:	9c 17       	cp	r25, r28
    2cec:	a8 f7       	brcc	.-22     	; 0x2cd8 <ssd1306_write_text+0x36>
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <ssd1306_write_data>
    2cf4:	d7 01       	movw	r26, r14
    2cf6:	ed 91       	ld	r30, X+
    2cf8:	7d 01       	movw	r14, r26
    2cfa:	e1 11       	cpse	r30, r1
    2cfc:	df cf       	rjmp	.-66     	; 0x2cbc <ssd1306_write_text+0x1a>
    2cfe:	cf 91       	pop	r28
    2d00:	1f 91       	pop	r17
    2d02:	0f 91       	pop	r16
    2d04:	ff 90       	pop	r15
    2d06:	ef 90       	pop	r14
    2d08:	08 95       	ret

00002d0a <gfx_mono_framebuffer_put_byte>:
    2d0a:	20 e8       	ldi	r18, 0x80	; 128
    2d0c:	82 9f       	mul	r24, r18
    2d0e:	c0 01       	movw	r24, r0
    2d10:	11 24       	eor	r1, r1
    2d12:	86 0f       	add	r24, r22
    2d14:	91 1d       	adc	r25, r1
    2d16:	e0 91 4f 93 	lds	r30, 0x934F
    2d1a:	f0 91 50 93 	lds	r31, 0x9350
    2d1e:	e8 0f       	add	r30, r24
    2d20:	f9 1f       	adc	r31, r25
    2d22:	40 83       	st	Z, r20
    2d24:	08 95       	ret

00002d26 <gfx_mono_framebuffer_get_byte>:
    2d26:	20 e8       	ldi	r18, 0x80	; 128
    2d28:	82 9f       	mul	r24, r18
    2d2a:	c0 01       	movw	r24, r0
    2d2c:	11 24       	eor	r1, r1
    2d2e:	86 0f       	add	r24, r22
    2d30:	91 1d       	adc	r25, r1
    2d32:	e0 91 4f 93 	lds	r30, 0x934F
    2d36:	f0 91 50 93 	lds	r31, 0x9350
    2d3a:	e8 0f       	add	r30, r24
    2d3c:	f9 1f       	adc	r31, r25
    2d3e:	80 81       	ld	r24, Z
    2d40:	08 95       	ret

00002d42 <gfx_mono_ssd1306_put_byte>:
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	18 2f       	mov	r17, r24
    2d4a:	d6 2f       	mov	r29, r22
    2d4c:	c4 2f       	mov	r28, r20
    2d4e:	21 11       	cpse	r18, r1
    2d50:	04 c0       	rjmp	.+8      	; 0x2d5a <gfx_mono_ssd1306_put_byte+0x18>
    2d52:	0e 94 93 16 	call	0x2d26	; 0x2d26 <gfx_mono_framebuffer_get_byte>
    2d56:	8c 17       	cp	r24, r28
    2d58:	71 f0       	breq	.+28     	; 0x2d76 <gfx_mono_ssd1306_put_byte+0x34>
    2d5a:	4c 2f       	mov	r20, r28
    2d5c:	6d 2f       	mov	r22, r29
    2d5e:	81 2f       	mov	r24, r17
    2d60:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <gfx_mono_framebuffer_put_byte>
    2d64:	81 2f       	mov	r24, r17
    2d66:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <ssd1306_set_page_address>
    2d6a:	8d 2f       	mov	r24, r29
    2d6c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <ssd1306_set_column_address>
    2d70:	8c 2f       	mov	r24, r28
    2d72:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <ssd1306_write_data>
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	08 95       	ret

00002d7e <SetupHardware>:
}


/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
    2d82:	e0 e5       	ldi	r30, 0x50	; 80
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	80 e1       	ldi	r24, 0x10	; 16
    2d88:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 61       	ori	r24, 0x10	; 16
    2d8e:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
    2d90:	81 81       	ldd	r24, Z+1	; 0x01
    2d92:	84 ff       	sbrs	r24, 4
    2d94:	fd cf       	rjmp	.-6      	; 0x2d90 <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    2d96:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    2d98:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
    2d9a:	a0 e4       	ldi	r26, 0x40	; 64
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	94 e0       	ldi	r25, 0x04	; 4
    2da0:	28 ed       	ldi	r18, 0xD8	; 216
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	1b be       	out	0x3b, r1	; 59
    2da6:	fd 01       	movw	r30, r26
    2da8:	24 bf       	out	0x34, r18	; 52
    2daa:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    2dac:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2dae:	8f e3       	ldi	r24, 0x3F	; 63
    2db0:	9f e1       	ldi	r25, 0x1F	; 31
    2db2:	01 97       	sbiw	r24, 0x01	; 1
    2db4:	f1 f7       	brne	.-4      	; 0x2db2 <SetupHardware+0x34>
    2db6:	00 c0       	rjmp	.+0      	; 0x2db8 <SetupHardware+0x3a>
    2db8:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
    2dba:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
    2dbc:	e0 e5       	ldi	r30, 0x50	; 80
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	82 60       	ori	r24, 0x02	; 2
    2dc4:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
    2dc6:	81 81       	ldd	r24, Z+1	; 0x01
    2dc8:	81 ff       	sbrs	r24, 1
    2dca:	fd cf       	rjmp	.-6      	; 0x2dc6 <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
    2dcc:	e0 e5       	ldi	r30, 0x50	; 80
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	86 81       	ldd	r24, Z+6	; 0x06
    2dd2:	84 60       	ori	r24, 0x04	; 4
    2dd4:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
    2dd6:	a0 e6       	ldi	r26, 0x60	; 96
    2dd8:	b0 e0       	ldi	r27, 0x00	; 0
    2dda:	8b e1       	ldi	r24, 0x1B	; 27
    2ddc:	15 96       	adiw	r26, 0x05	; 5
    2dde:	8c 93       	st	X, r24
    2de0:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
    2de2:	87 eb       	ldi	r24, 0xB7	; 183
    2de4:	16 96       	adiw	r26, 0x06	; 6
    2de6:	8c 93       	st	X, r24
    2de8:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
    2dea:	c0 ec       	ldi	r28, 0xC0	; 192
    2dec:	d1 e0       	ldi	r29, 0x01	; 1
    2dee:	82 e0       	ldi	r24, 0x02	; 2
    2df0:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
    2df2:	ed e1       	ldi	r30, 0x1D	; 29
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	e4 91       	lpm	r30, Z
    2df8:	12 96       	adiw	r26, 0x02	; 2
    2dfa:	ec 93       	st	X, r30
    2dfc:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
    2dfe:	ec e1       	ldi	r30, 0x1C	; 28
    2e00:	f0 e0       	ldi	r31, 0x00	; 0
    2e02:	e4 91       	lpm	r30, Z
    2e04:	13 96       	adiw	r26, 0x03	; 3
    2e06:	ec 93       	st	X, r30
    2e08:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
    2e0a:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2e10:	87 e0       	ldi	r24, 0x07	; 7
    2e12:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
    2e16:	e0 ee       	ldi	r30, 0xE0	; 224
    2e18:	f7 e0       	ldi	r31, 0x07	; 7
    2e1a:	83 e0       	ldi	r24, 0x03	; 3
    2e1c:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
    2e1e:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
    2e20:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
    2e24:	80 e4       	ldi	r24, 0x40	; 64
    2e26:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
    2e28:	e0 e6       	ldi	r30, 0x60	; 96
    2e2a:	f6 e0       	ldi	r31, 0x06	; 6
    2e2c:	90 e3       	ldi	r25, 0x30	; 48
    2e2e:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
    2e30:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
    2e32:	84 8b       	std	Z+20, r24	; 0x14
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    2e34:	0e 94 dd 13 	call	0x27ba	; 0x27ba <USB_Init>
}
    2e38:	df 91       	pop	r29
    2e3a:	cf 91       	pop	r28
    2e3c:	08 95       	ret

00002e3e <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	DigitalPin_SetDIr(&led,1);
    2e3e:	61 e0       	ldi	r22, 0x01	; 1
    2e40:	8f ea       	ldi	r24, 0xAF	; 175
    2e42:	92 e2       	ldi	r25, 0x22	; 34
    2e44:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	8c ea       	ldi	r24, 0xAC	; 172
    2e4c:	92 e2       	ldi	r25, 0x22	; 34
    2e4e:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <DigitalPin_SetDIr>
	
	SetupHardware();
    2e52:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <SetupHardware>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
    2e56:	81 e5       	ldi	r24, 0x51	; 81
    2e58:	93 e9       	ldi	r25, 0x93	; 147
    2e5a:	80 93 4f 93 	sts	0x934F, r24
    2e5e:	90 93 50 93 	sts	0x9350, r25

	uint8_t page;
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
    2e62:	0e 94 cb 15 	call	0x2b96	; 0x2b96 <ssd1306_init>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2e66:	d0 e0       	ldi	r29, 0x00	; 0
    2e68:	0f c0       	rjmp	.+30     	; 0x2e88 <main+0x4a>
	{
		for (col = 0; col < 128; ++col)
		{
			ssd1306_set_page_address(page);
    2e6a:	8d 2f       	mov	r24, r29
    2e6c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <ssd1306_set_page_address>
			ssd1306_set_column_address(col);
    2e70:	8c 2f       	mov	r24, r28
    2e72:	0e 94 78 15 	call	0x2af0	; 0x2af0 <ssd1306_set_column_address>
			ssd1306_write_data(0x00);
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <ssd1306_write_data>
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		for (col = 0; col < 128; ++col)
    2e7c:	cf 5f       	subi	r28, 0xFF	; 255
    2e7e:	c0 38       	cpi	r28, 0x80	; 128
    2e80:	a1 f7       	brne	.-24     	; 0x2e6a <main+0x2c>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2e82:	df 5f       	subi	r29, 0xFF	; 255
    2e84:	d4 30       	cpi	r29, 0x04	; 4
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <main+0x4e>

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    2e88:	c0 e0       	ldi	r28, 0x00	; 0
    2e8a:	ef cf       	rjmp	.-34     	; 0x2e6a <main+0x2c>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
    2e8c:	80 e4       	ldi	r24, 0x40	; 64
    2e8e:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <ssd1306_write_command>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2e92:	d0 e0       	ldi	r29, 0x00	; 0
    2e94:	0c c0       	rjmp	.+24     	; 0x2eae <main+0x70>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
    2e96:	21 e0       	ldi	r18, 0x01	; 1
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	6c 2f       	mov	r22, r28
    2e9c:	8d 2f       	mov	r24, r29
    2e9e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <gfx_mono_ssd1306_put_byte>
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
    2ea2:	cf 5f       	subi	r28, 0xFF	; 255
    2ea4:	c0 38       	cpi	r28, 0x80	; 128
    2ea6:	b9 f7       	brne	.-18     	; 0x2e96 <main+0x58>
	uint8_t column;
	gfx_mono_set_framebuffer(framebuffer);
	ssd1306_init();
	ssd1306_clear();
	ssd1306_set_display_start_line_address(0);
 	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
    2ea8:	df 5f       	subi	r29, 0xFF	; 255
    2eaa:	d4 30       	cpi	r29, 0x04	; 4
    2eac:	11 f0       	breq	.+4      	; 0x2eb2 <main+0x74>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
    2eae:	c0 e0       	ldi	r28, 0x00	; 0
    2eb0:	f2 cf       	rjmp	.-28     	; 0x2e96 <main+0x58>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
    2eb2:	00 00       	nop
	ssd1306_set_page_address(0);
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
    2eba:	82 ed       	ldi	r24, 0xD2	; 210
    2ebc:	92 e2       	ldi	r25, 0x22	; 34
    2ebe:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <ssd1306_write_text>


	DigitalPin_SetDIr(&led,1);
    2ec2:	61 e0       	ldi	r22, 0x01	; 1
    2ec4:	8f ea       	ldi	r24, 0xAF	; 175
    2ec6:	92 e2       	ldi	r25, 0x22	; 34
    2ec8:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <DigitalPin_SetDIr>
	DigitalPin_SetDIr(&led2,1);
    2ecc:	61 e0       	ldi	r22, 0x01	; 1
    2ece:	8c ea       	ldi	r24, 0xAC	; 172
    2ed0:	92 e2       	ldi	r25, 0x22	; 34
    2ed2:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <DigitalPin_SetDIr>
	//PORT_SetDirection(&PORTR,(1<<0));

	CLKSYS_Enable( OSC_RC32MEN_bm );
    2ed6:	e0 e5       	ldi	r30, 0x50	; 80
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	82 60       	ori	r24, 0x02	; 2
    2ede:	80 83       	st	Z, r24
	do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
    2ee0:	81 81       	ldd	r24, Z+1	; 0x01
    2ee2:	81 ff       	sbrs	r24, 1
    2ee4:	fd cf       	rjmp	.-6      	; 0x2ee0 <main+0xa2>
	CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	0e 94 d6 18 	call	0x31ac	; 0x31ac <CLKSYS_Main_ClockSource_Select>
	CLKSYS_Disable( OSC_RC2MEN_bm );
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	0e 94 cc 18 	call	0x3198	; 0x3198 <CLKSYS_Disable>

	char time_string[20];
	uint8_t rxData[33];


	PORTR.DIRSET = (1<<0);
    2ef2:	e0 ee       	ldi	r30, 0xE0	; 224
    2ef4:	f7 e0       	ldi	r31, 0x07	; 7
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	81 83       	std	Z+1, r24	; 0x01
	PORTR.DIRSET = (1<<1);
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	81 83       	std	Z+1, r24	; 0x01
	PORTD.DIRSET = (1<<4);
    2efe:	80 e1       	ldi	r24, 0x10	; 16
    2f00:	80 93 61 06 	sts	0x0661, r24

	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USBSerialStream);
    2f04:	61 e4       	ldi	r22, 0x41	; 65
    2f06:	73 e9       	ldi	r23, 0x93	; 147
    2f08:	81 e9       	ldi	r24, 0x91	; 145
    2f0a:	92 e2       	ldi	r25, 0x22	; 34
    2f0c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <CDC_Device_CreateStream>
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
    2f10:	78 94       	sei
	GlobalInterruptEnable();

	asm("nop");
    2f12:	00 00       	nop

	TWI_MasterInit(&lcd03i2c,
    2f14:	2b e9       	ldi	r18, 0x9B	; 155
    2f16:	40 e0       	ldi	r20, 0x00	; 0
    2f18:	60 ea       	ldi	r22, 0xA0	; 160
    2f1a:	74 e0       	ldi	r23, 0x04	; 4
    2f1c:	81 e5       	ldi	r24, 0x51	; 81
    2f1e:	95 e9       	ldi	r25, 0x95	; 149
    2f20:	0e 94 f7 18 	call	0x31ee	; 0x31ee <TWI_MasterInit>
	&TWIE,
	TWI_MASTER_INTLVL_OFF_gc,
	TWI_BAUD(F_CPU, 100000));
	
	asm("nop");
    2f24:	00 00       	nop
// 		while(!(TWIE.MASTER.STATUS&TWI_MASTER_WIF_bm));
// 	}
	


	asm("nop");
    2f26:	00 00       	nop





	asm("nop");
    2f28:	00 00       	nop


	
	xTaskCreate(thread_1,(signed portCHAR *) "t1", 100, NULL, tskIDLE_PRIORITY, NULL );
    2f2a:	a1 2c       	mov	r10, r1
    2f2c:	b1 2c       	mov	r11, r1
    2f2e:	c1 2c       	mov	r12, r1
    2f30:	d1 2c       	mov	r13, r1
    2f32:	e1 2c       	mov	r14, r1
    2f34:	f1 2c       	mov	r15, r1
    2f36:	00 e0       	ldi	r16, 0x00	; 0
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	44 e6       	ldi	r20, 0x64	; 100
    2f3e:	50 e0       	ldi	r21, 0x00	; 0
    2f40:	67 ed       	ldi	r22, 0xD7	; 215
    2f42:	72 e2       	ldi	r23, 0x22	; 34
    2f44:	89 e9       	ldi	r24, 0x99	; 153
    2f46:	94 e1       	ldi	r25, 0x14	; 20
    2f48:	0e 94 77 09 	call	0x12ee	; 0x12ee <xTaskGenericCreate>
	xTaskCreate(thread_2,(signed portCHAR *) "t2", 500, NULL, tskIDLE_PRIORITY, NULL );
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	44 ef       	ldi	r20, 0xF4	; 244
    2f52:	51 e0       	ldi	r21, 0x01	; 1
    2f54:	6a ed       	ldi	r22, 0xDA	; 218
    2f56:	72 e2       	ldi	r23, 0x22	; 34
    2f58:	82 ea       	ldi	r24, 0xA2	; 162
    2f5a:	94 e1       	ldi	r25, 0x14	; 20
    2f5c:	0e 94 77 09 	call	0x12ee	; 0x12ee <xTaskGenericCreate>
	xTaskCreate(thread_3,(signed portCHAR *) "t3", 500, NULL, tskIDLE_PRIORITY, NULL );
    2f60:	20 e0       	ldi	r18, 0x00	; 0
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	44 ef       	ldi	r20, 0xF4	; 244
    2f66:	51 e0       	ldi	r21, 0x01	; 1
    2f68:	6d ed       	ldi	r22, 0xDD	; 221
    2f6a:	72 e2       	ldi	r23, 0x22	; 34
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	95 e1       	ldi	r25, 0x15	; 21
    2f70:	0e 94 77 09 	call	0x12ee	; 0x12ee <xTaskGenericCreate>
	xTaskCreate(USBThread,(signed portCHAR *) "usb", 200, NULL, tskIDLE_PRIORITY, NULL );
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	48 ec       	ldi	r20, 0xC8	; 200
    2f7a:	50 e0       	ldi	r21, 0x00	; 0
    2f7c:	60 ee       	ldi	r22, 0xE0	; 224
    2f7e:	72 e2       	ldi	r23, 0x22	; 34
    2f80:	8a e8       	ldi	r24, 0x8A	; 138
    2f82:	94 e1       	ldi	r25, 0x14	; 20
    2f84:	0e 94 77 09 	call	0x12ee	; 0x12ee <xTaskGenericCreate>
	

	//starting the scheduler
	vTaskStartScheduler();
    2f88:	0e 94 8a 0a 	call	0x1514	; 0x1514 <vTaskStartScheduler>

	for (;;)
	{
// 		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
// 		USB_USBTask();
	}
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <main+0x14e>

00002f8e <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2f94:	80 e3       	ldi	r24, 0x30	; 48
    2f96:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2f9a:	82 e0       	ldi	r24, 0x02	; 2
    2f9c:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2fa0:	80 e1       	ldi	r24, 0x10	; 16
    2fa2:	80 93 65 06 	sts	0x0665, r24
    2fa6:	08 95       	ret

00002fa8 <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2fae:	80 e3       	ldi	r24, 0x30	; 48
    2fb0:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2fba:	10 92 65 06 	sts	0x0665, r1
    2fbe:	08 95       	ret

00002fc0 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    2fc0:	81 e9       	ldi	r24, 0x91	; 145
    2fc2:	92 e2       	ldi	r25, 0x22	; 34
    2fc4:	0e 94 b5 0c 	call	0x196a	; 0x196a <CDC_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    2fc8:	81 11       	cpse	r24, r1
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <EVENT_USB_Device_ConfigurationChanged+0x10>
    2fcc:	81 e1       	ldi	r24, 0x11	; 17
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <EVENT_USB_Device_ConfigurationChanged+0x12>
    2fd0:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
    2fd2:	93 e0       	ldi	r25, 0x03	; 3
    2fd4:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
    2fd8:	90 e3       	ldi	r25, 0x30	; 48
    2fda:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
    2fde:	98 2f       	mov	r25, r24
    2fe0:	93 70       	andi	r25, 0x03	; 3
    2fe2:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
    2fe6:	80 73       	andi	r24, 0x30	; 48
    2fe8:	80 93 65 06 	sts	0x0665, r24
    2fec:	08 95       	ret

00002fee <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    2fee:	81 e9       	ldi	r24, 0x91	; 145
    2ff0:	92 e2       	ldi	r25, 0x22	; 34
    2ff2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <CDC_Device_ProcessControlRequest>
    2ff6:	08 95       	ret

00002ff8 <EVENT_CDC_Device_ControLineStateChanged>:
 *  control lines sent from the host..
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
    2ff8:	08 95       	ret

00002ffa <DigitalPin_SetDIr>:
	SREG = sreg;	
}


void DigitalPin_SetDIr(DigitalPin_t *pin , bool dir){
	if(dir) pin->_port->DIRSET = (1<< pin->_pin);
    2ffa:	66 23       	and	r22, r22
    2ffc:	79 f0       	breq	.+30     	; 0x301c <DigitalPin_SetDIr+0x22>
    2ffe:	dc 01       	movw	r26, r24
    3000:	ed 91       	ld	r30, X+
    3002:	fc 91       	ld	r31, X
    3004:	11 97       	sbiw	r26, 0x01	; 1
    3006:	21 e0       	ldi	r18, 0x01	; 1
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	a9 01       	movw	r20, r18
    300c:	12 96       	adiw	r26, 0x02	; 2
    300e:	0c 90       	ld	r0, X
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <DigitalPin_SetDIr+0x1c>
    3012:	44 0f       	add	r20, r20
    3014:	55 1f       	adc	r21, r21
    3016:	0a 94       	dec	r0
    3018:	e2 f7       	brpl	.-8      	; 0x3012 <DigitalPin_SetDIr+0x18>
    301a:	41 83       	std	Z+1, r20	; 0x01
    301c:	08 95       	ret

0000301e <DigitalPin_SetValue>:
}

void DigitalPin_SetValue(DigitalPin_t *pin){
	pin->_port->OUTSET = (1<< pin->_pin);
    301e:	dc 01       	movw	r26, r24
    3020:	ed 91       	ld	r30, X+
    3022:	fc 91       	ld	r31, X
    3024:	11 97       	sbiw	r26, 0x01	; 1
    3026:	21 e0       	ldi	r18, 0x01	; 1
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	a9 01       	movw	r20, r18
    302c:	12 96       	adiw	r26, 0x02	; 2
    302e:	0c 90       	ld	r0, X
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <DigitalPin_SetValue+0x18>
    3032:	44 0f       	add	r20, r20
    3034:	55 1f       	adc	r21, r21
    3036:	0a 94       	dec	r0
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <DigitalPin_SetValue+0x14>
    303a:	45 83       	std	Z+5, r20	; 0x05
    303c:	08 95       	ret

0000303e <DigitalPin_ClearValue>:
}

void DigitalPin_ClearValue(DigitalPin_t *pin){
	pin->_port->OUTCLR = (1<< pin->_pin);
    303e:	dc 01       	movw	r26, r24
    3040:	ed 91       	ld	r30, X+
    3042:	fc 91       	ld	r31, X
    3044:	11 97       	sbiw	r26, 0x01	; 1
    3046:	21 e0       	ldi	r18, 0x01	; 1
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	a9 01       	movw	r20, r18
    304c:	12 96       	adiw	r26, 0x02	; 2
    304e:	0c 90       	ld	r0, X
    3050:	02 c0       	rjmp	.+4      	; 0x3056 <DigitalPin_ClearValue+0x18>
    3052:	44 0f       	add	r20, r20
    3054:	55 1f       	adc	r21, r21
    3056:	0a 94       	dec	r0
    3058:	e2 f7       	brpl	.-8      	; 0x3052 <DigitalPin_ClearValue+0x14>
    305a:	46 83       	std	Z+6, r20	; 0x06
    305c:	08 95       	ret

0000305e <DigitalPin_ToggleValue>:
}

void DigitalPin_ToggleValue(DigitalPin_t *pin){
	pin->_port->OUTTGL = (1<< pin->_pin);
    305e:	dc 01       	movw	r26, r24
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	11 97       	sbiw	r26, 0x01	; 1
    3066:	21 e0       	ldi	r18, 0x01	; 1
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	a9 01       	movw	r20, r18
    306c:	12 96       	adiw	r26, 0x02	; 2
    306e:	0c 90       	ld	r0, X
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <DigitalPin_ToggleValue+0x18>
    3072:	44 0f       	add	r20, r20
    3074:	55 1f       	adc	r21, r21
    3076:	0a 94       	dec	r0
    3078:	e2 f7       	brpl	.-8      	; 0x3072 <DigitalPin_ToggleValue+0x14>
    307a:	47 83       	std	Z+7, r20	; 0x07
    307c:	08 95       	ret

0000307e <__vector_25>:


}

#if defined(USARTC0)
ISR(USARTC0_RXC_vect){
    307e:	1f 92       	push	r1
    3080:	0f 92       	push	r0
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	0f 92       	push	r0
    3086:	11 24       	eor	r1, r1

}
    3088:	0f 90       	pop	r0
    308a:	0f be       	out	0x3f, r0	; 63
    308c:	0f 90       	pop	r0
    308e:	1f 90       	pop	r1
    3090:	18 95       	reti

00003092 <__vector_27>:

ISR(USARTC0_TXC_vect){
    3092:	1f 92       	push	r1
    3094:	0f 92       	push	r0
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	0f 92       	push	r0
    309a:	11 24       	eor	r1, r1
	
}
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <__vector_26>:

ISR(USARTC0_DRE_vect){
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
	
}
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0f 90       	pop	r0
    30b6:	1f 90       	pop	r1
    30b8:	18 95       	reti

000030ba <__vector_28>:
#endif


#if defined(USARTC1)
ISR(USARTC1_RXC_vect){
    30ba:	1f 92       	push	r1
    30bc:	0f 92       	push	r0
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	0f 92       	push	r0
    30c2:	11 24       	eor	r1, r1
	
}
    30c4:	0f 90       	pop	r0
    30c6:	0f be       	out	0x3f, r0	; 63
    30c8:	0f 90       	pop	r0
    30ca:	1f 90       	pop	r1
    30cc:	18 95       	reti

000030ce <__vector_30>:

ISR(USARTC1_TXC_vect){
    30ce:	1f 92       	push	r1
    30d0:	0f 92       	push	r0
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	0f 92       	push	r0
    30d6:	11 24       	eor	r1, r1
	
}
    30d8:	0f 90       	pop	r0
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	0f 90       	pop	r0
    30de:	1f 90       	pop	r1
    30e0:	18 95       	reti

000030e2 <__vector_29>:

ISR(USARTC1_DRE_vect){
    30e2:	1f 92       	push	r1
    30e4:	0f 92       	push	r0
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	0f 92       	push	r0
    30ea:	11 24       	eor	r1, r1
	
}
    30ec:	0f 90       	pop	r0
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	0f 90       	pop	r0
    30f2:	1f 90       	pop	r1
    30f4:	18 95       	reti

000030f6 <__vector_88>:
#endif


#if defined(USARTD0)
ISR(USARTD0_RXC_vect){
    30f6:	1f 92       	push	r1
    30f8:	0f 92       	push	r0
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	0f 92       	push	r0
    30fe:	11 24       	eor	r1, r1
	
}
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	0f 90       	pop	r0
    3106:	1f 90       	pop	r1
    3108:	18 95       	reti

0000310a <__vector_90>:

ISR(USARTD0_TXC_vect){
    310a:	1f 92       	push	r1
    310c:	0f 92       	push	r0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	0f 92       	push	r0
    3112:	11 24       	eor	r1, r1
	
}
    3114:	0f 90       	pop	r0
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	0f 90       	pop	r0
    311a:	1f 90       	pop	r1
    311c:	18 95       	reti

0000311e <__vector_89>:

ISR(USARTD0_DRE_vect){
    311e:	1f 92       	push	r1
    3120:	0f 92       	push	r0
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	0f 92       	push	r0
    3126:	11 24       	eor	r1, r1
	
}
    3128:	0f 90       	pop	r0
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	0f 90       	pop	r0
    312e:	1f 90       	pop	r1
    3130:	18 95       	reti

00003132 <__vector_58>:
	
}
#endif

#if defined(USARTE0)
ISR(USARTE0_RXC_vect){
    3132:	1f 92       	push	r1
    3134:	0f 92       	push	r0
    3136:	0f b6       	in	r0, 0x3f	; 63
    3138:	0f 92       	push	r0
    313a:	11 24       	eor	r1, r1
	
}
    313c:	0f 90       	pop	r0
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	0f 90       	pop	r0
    3142:	1f 90       	pop	r1
    3144:	18 95       	reti

00003146 <__vector_60>:

ISR(USARTE0_TXC_vect){
    3146:	1f 92       	push	r1
    3148:	0f 92       	push	r0
    314a:	0f b6       	in	r0, 0x3f	; 63
    314c:	0f 92       	push	r0
    314e:	11 24       	eor	r1, r1
	
}
    3150:	0f 90       	pop	r0
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	0f 90       	pop	r0
    3156:	1f 90       	pop	r1
    3158:	18 95       	reti

0000315a <__vector_59>:

ISR(USARTE0_DRE_vect){
    315a:	1f 92       	push	r1
    315c:	0f 92       	push	r0
    315e:	0f b6       	in	r0, 0x3f	; 63
    3160:	0f 92       	push	r0
    3162:	11 24       	eor	r1, r1
	
}
    3164:	0f 90       	pop	r0
    3166:	0f be       	out	0x3f, r0	; 63
    3168:	0f 90       	pop	r0
    316a:	1f 90       	pop	r1
    316c:	18 95       	reti

0000316e <CCPWrite>:
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
    316e:	0f 93       	push	r16
    3170:	cf 93       	push	r28
    3172:	df 93       	push	r29
    3174:	1f 92       	push	r1
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	2f b7       	in	r18, 0x3f	; 63
    317c:	29 83       	std	Y+1, r18	; 0x01
    317e:	f8 94       	cli
    3180:	1b be       	out	0x3b, r1	; 59
    3182:	fc 01       	movw	r30, r24
    3184:	08 ed       	ldi	r16, 0xD8	; 216
    3186:	04 bf       	out	0x34, r16	; 52
    3188:	60 83       	st	Z, r22
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	8f bf       	out	0x3f, r24	; 63
    318e:	0f 90       	pop	r0
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	0f 91       	pop	r16
    3196:	08 95       	ret

00003198 <CLKSYS_Disable>:
    3198:	e0 e5       	ldi	r30, 0x50	; 80
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	90 81       	ld	r25, Z
    319e:	28 2f       	mov	r18, r24
    31a0:	20 95       	com	r18
    31a2:	92 23       	and	r25, r18
    31a4:	90 83       	st	Z, r25
    31a6:	90 81       	ld	r25, Z
    31a8:	89 23       	and	r24, r25
    31aa:	08 95       	ret

000031ac <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    31b4:	00 e4       	ldi	r16, 0x40	; 64
    31b6:	10 e0       	ldi	r17, 0x00	; 0
    31b8:	f8 01       	movw	r30, r16
    31ba:	60 81       	ld	r22, Z
    31bc:	68 7f       	andi	r22, 0xF8	; 248
    31be:	68 2b       	or	r22, r24
	CCPWrite( &CLK.CTRL, clkCtrl );
    31c0:	80 e4       	ldi	r24, 0x40	; 64
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 b7 18 	call	0x316e	; 0x316e <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    31c8:	f8 01       	movw	r30, r16
    31ca:	80 81       	ld	r24, Z
	return clkCtrl;
}
    31cc:	8c 23       	and	r24, r28
    31ce:	cf 91       	pop	r28
    31d0:	1f 91       	pop	r17
    31d2:	0f 91       	pop	r16
    31d4:	08 95       	ret

000031d6 <TC0_ConfigClockSource>:
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    31d6:	fc 01       	movw	r30, r24
    31d8:	90 81       	ld	r25, Z
    31da:	90 7f       	andi	r25, 0xF0	; 240
    31dc:	69 2b       	or	r22, r25
    31de:	60 83       	st	Z, r22
    31e0:	08 95       	ret

000031e2 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    31e2:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    31e4:	96 81       	ldd	r25, Z+6	; 0x06
    31e6:	9c 7f       	andi	r25, 0xFC	; 252
    31e8:	69 2b       	or	r22, r25
    31ea:	66 83       	std	Z+6, r22	; 0x06
    31ec:	08 95       	ret

000031ee <TWI_MasterInit>:
 */
void TWI_MasterInit(TWI_Master_t *twi,
                    TWI_t *module,
                    TWI_MASTER_INTLVL_t intLevel,
                    uint8_t baudRateRegisterSetting)
{
    31ee:	fc 01       	movw	r30, r24
	twi->interface = module;
    31f0:	60 83       	st	Z, r22
    31f2:	71 83       	std	Z+1, r23	; 0x01
	twi->interface->MASTER.CTRLA = intLevel |
    31f4:	48 63       	ori	r20, 0x38	; 56
    31f6:	db 01       	movw	r26, r22
    31f8:	11 96       	adiw	r26, 0x01	; 1
    31fa:	4c 93       	st	X, r20
	                               TWI_MASTER_RIEN_bm |
	                               TWI_MASTER_WIEN_bm |
	                               TWI_MASTER_ENABLE_bm;
	twi->interface->MASTER.BAUD = baudRateRegisterSetting;
    31fc:	a0 81       	ld	r26, Z
    31fe:	b1 81       	ldd	r27, Z+1	; 0x01
    3200:	15 96       	adiw	r26, 0x05	; 5
    3202:	2c 93       	st	X, r18
	twi->interface->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    3204:	01 90       	ld	r0, Z+
    3206:	f0 81       	ld	r31, Z
    3208:	e0 2d       	mov	r30, r0
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	84 83       	std	Z+4, r24	; 0x04
    320e:	08 95       	ret

00003210 <__floatunsisf>:
    3210:	e8 94       	clt
    3212:	09 c0       	rjmp	.+18     	; 0x3226 <__floatsisf+0x12>

00003214 <__floatsisf>:
    3214:	97 fb       	bst	r25, 7
    3216:	3e f4       	brtc	.+14     	; 0x3226 <__floatsisf+0x12>
    3218:	90 95       	com	r25
    321a:	80 95       	com	r24
    321c:	70 95       	com	r23
    321e:	61 95       	neg	r22
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	8f 4f       	sbci	r24, 0xFF	; 255
    3224:	9f 4f       	sbci	r25, 0xFF	; 255
    3226:	99 23       	and	r25, r25
    3228:	a9 f0       	breq	.+42     	; 0x3254 <__floatsisf+0x40>
    322a:	f9 2f       	mov	r31, r25
    322c:	96 e9       	ldi	r25, 0x96	; 150
    322e:	bb 27       	eor	r27, r27
    3230:	93 95       	inc	r25
    3232:	f6 95       	lsr	r31
    3234:	87 95       	ror	r24
    3236:	77 95       	ror	r23
    3238:	67 95       	ror	r22
    323a:	b7 95       	ror	r27
    323c:	f1 11       	cpse	r31, r1
    323e:	f8 cf       	rjmp	.-16     	; 0x3230 <__floatsisf+0x1c>
    3240:	fa f4       	brpl	.+62     	; 0x3280 <__floatsisf+0x6c>
    3242:	bb 0f       	add	r27, r27
    3244:	11 f4       	brne	.+4      	; 0x324a <__floatsisf+0x36>
    3246:	60 ff       	sbrs	r22, 0
    3248:	1b c0       	rjmp	.+54     	; 0x3280 <__floatsisf+0x6c>
    324a:	6f 5f       	subi	r22, 0xFF	; 255
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	8f 4f       	sbci	r24, 0xFF	; 255
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	16 c0       	rjmp	.+44     	; 0x3280 <__floatsisf+0x6c>
    3254:	88 23       	and	r24, r24
    3256:	11 f0       	breq	.+4      	; 0x325c <__floatsisf+0x48>
    3258:	96 e9       	ldi	r25, 0x96	; 150
    325a:	11 c0       	rjmp	.+34     	; 0x327e <__floatsisf+0x6a>
    325c:	77 23       	and	r23, r23
    325e:	21 f0       	breq	.+8      	; 0x3268 <__floatsisf+0x54>
    3260:	9e e8       	ldi	r25, 0x8E	; 142
    3262:	87 2f       	mov	r24, r23
    3264:	76 2f       	mov	r23, r22
    3266:	05 c0       	rjmp	.+10     	; 0x3272 <__floatsisf+0x5e>
    3268:	66 23       	and	r22, r22
    326a:	71 f0       	breq	.+28     	; 0x3288 <__floatsisf+0x74>
    326c:	96 e8       	ldi	r25, 0x86	; 134
    326e:	86 2f       	mov	r24, r22
    3270:	70 e0       	ldi	r23, 0x00	; 0
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	2a f0       	brmi	.+10     	; 0x3280 <__floatsisf+0x6c>
    3276:	9a 95       	dec	r25
    3278:	66 0f       	add	r22, r22
    327a:	77 1f       	adc	r23, r23
    327c:	88 1f       	adc	r24, r24
    327e:	da f7       	brpl	.-10     	; 0x3276 <__floatsisf+0x62>
    3280:	88 0f       	add	r24, r24
    3282:	96 95       	lsr	r25
    3284:	87 95       	ror	r24
    3286:	97 f9       	bld	r25, 7
    3288:	08 95       	ret

0000328a <__mulsf3>:
    328a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <__mulsf3x>
    328e:	0c 94 c9 19 	jmp	0x3392	; 0x3392 <__fp_round>
    3292:	0e 94 bb 19 	call	0x3376	; 0x3376 <__fp_pscA>
    3296:	38 f0       	brcs	.+14     	; 0x32a6 <__mulsf3+0x1c>
    3298:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fp_pscB>
    329c:	20 f0       	brcs	.+8      	; 0x32a6 <__mulsf3+0x1c>
    329e:	95 23       	and	r25, r21
    32a0:	11 f0       	breq	.+4      	; 0x32a6 <__mulsf3+0x1c>
    32a2:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__fp_inf>
    32a6:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <__fp_nan>
    32aa:	11 24       	eor	r1, r1
    32ac:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__fp_szero>

000032b0 <__mulsf3x>:
    32b0:	0e 94 da 19 	call	0x33b4	; 0x33b4 <__fp_split3>
    32b4:	70 f3       	brcs	.-36     	; 0x3292 <__mulsf3+0x8>

000032b6 <__mulsf3_pse>:
    32b6:	95 9f       	mul	r25, r21
    32b8:	c1 f3       	breq	.-16     	; 0x32aa <__mulsf3+0x20>
    32ba:	95 0f       	add	r25, r21
    32bc:	50 e0       	ldi	r21, 0x00	; 0
    32be:	55 1f       	adc	r21, r21
    32c0:	62 9f       	mul	r22, r18
    32c2:	f0 01       	movw	r30, r0
    32c4:	72 9f       	mul	r23, r18
    32c6:	bb 27       	eor	r27, r27
    32c8:	f0 0d       	add	r31, r0
    32ca:	b1 1d       	adc	r27, r1
    32cc:	63 9f       	mul	r22, r19
    32ce:	aa 27       	eor	r26, r26
    32d0:	f0 0d       	add	r31, r0
    32d2:	b1 1d       	adc	r27, r1
    32d4:	aa 1f       	adc	r26, r26
    32d6:	64 9f       	mul	r22, r20
    32d8:	66 27       	eor	r22, r22
    32da:	b0 0d       	add	r27, r0
    32dc:	a1 1d       	adc	r26, r1
    32de:	66 1f       	adc	r22, r22
    32e0:	82 9f       	mul	r24, r18
    32e2:	22 27       	eor	r18, r18
    32e4:	b0 0d       	add	r27, r0
    32e6:	a1 1d       	adc	r26, r1
    32e8:	62 1f       	adc	r22, r18
    32ea:	73 9f       	mul	r23, r19
    32ec:	b0 0d       	add	r27, r0
    32ee:	a1 1d       	adc	r26, r1
    32f0:	62 1f       	adc	r22, r18
    32f2:	83 9f       	mul	r24, r19
    32f4:	a0 0d       	add	r26, r0
    32f6:	61 1d       	adc	r22, r1
    32f8:	22 1f       	adc	r18, r18
    32fa:	74 9f       	mul	r23, r20
    32fc:	33 27       	eor	r19, r19
    32fe:	a0 0d       	add	r26, r0
    3300:	61 1d       	adc	r22, r1
    3302:	23 1f       	adc	r18, r19
    3304:	84 9f       	mul	r24, r20
    3306:	60 0d       	add	r22, r0
    3308:	21 1d       	adc	r18, r1
    330a:	82 2f       	mov	r24, r18
    330c:	76 2f       	mov	r23, r22
    330e:	6a 2f       	mov	r22, r26
    3310:	11 24       	eor	r1, r1
    3312:	9f 57       	subi	r25, 0x7F	; 127
    3314:	50 40       	sbci	r21, 0x00	; 0
    3316:	9a f0       	brmi	.+38     	; 0x333e <__mulsf3_pse+0x88>
    3318:	f1 f0       	breq	.+60     	; 0x3356 <__mulsf3_pse+0xa0>
    331a:	88 23       	and	r24, r24
    331c:	4a f0       	brmi	.+18     	; 0x3330 <__mulsf3_pse+0x7a>
    331e:	ee 0f       	add	r30, r30
    3320:	ff 1f       	adc	r31, r31
    3322:	bb 1f       	adc	r27, r27
    3324:	66 1f       	adc	r22, r22
    3326:	77 1f       	adc	r23, r23
    3328:	88 1f       	adc	r24, r24
    332a:	91 50       	subi	r25, 0x01	; 1
    332c:	50 40       	sbci	r21, 0x00	; 0
    332e:	a9 f7       	brne	.-22     	; 0x331a <__mulsf3_pse+0x64>
    3330:	9e 3f       	cpi	r25, 0xFE	; 254
    3332:	51 05       	cpc	r21, r1
    3334:	80 f0       	brcs	.+32     	; 0x3356 <__mulsf3_pse+0xa0>
    3336:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__fp_inf>
    333a:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__fp_szero>
    333e:	5f 3f       	cpi	r21, 0xFF	; 255
    3340:	e4 f3       	brlt	.-8      	; 0x333a <__mulsf3_pse+0x84>
    3342:	98 3e       	cpi	r25, 0xE8	; 232
    3344:	d4 f3       	brlt	.-12     	; 0x333a <__mulsf3_pse+0x84>
    3346:	86 95       	lsr	r24
    3348:	77 95       	ror	r23
    334a:	67 95       	ror	r22
    334c:	b7 95       	ror	r27
    334e:	f7 95       	ror	r31
    3350:	e7 95       	ror	r30
    3352:	9f 5f       	subi	r25, 0xFF	; 255
    3354:	c1 f7       	brne	.-16     	; 0x3346 <__mulsf3_pse+0x90>
    3356:	fe 2b       	or	r31, r30
    3358:	88 0f       	add	r24, r24
    335a:	91 1d       	adc	r25, r1
    335c:	96 95       	lsr	r25
    335e:	87 95       	ror	r24
    3360:	97 f9       	bld	r25, 7
    3362:	08 95       	ret

00003364 <__fp_inf>:
    3364:	97 f9       	bld	r25, 7
    3366:	9f 67       	ori	r25, 0x7F	; 127
    3368:	80 e8       	ldi	r24, 0x80	; 128
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	08 95       	ret

00003370 <__fp_nan>:
    3370:	9f ef       	ldi	r25, 0xFF	; 255
    3372:	80 ec       	ldi	r24, 0xC0	; 192
    3374:	08 95       	ret

00003376 <__fp_pscA>:
    3376:	00 24       	eor	r0, r0
    3378:	0a 94       	dec	r0
    337a:	16 16       	cp	r1, r22
    337c:	17 06       	cpc	r1, r23
    337e:	18 06       	cpc	r1, r24
    3380:	09 06       	cpc	r0, r25
    3382:	08 95       	ret

00003384 <__fp_pscB>:
    3384:	00 24       	eor	r0, r0
    3386:	0a 94       	dec	r0
    3388:	12 16       	cp	r1, r18
    338a:	13 06       	cpc	r1, r19
    338c:	14 06       	cpc	r1, r20
    338e:	05 06       	cpc	r0, r21
    3390:	08 95       	ret

00003392 <__fp_round>:
    3392:	09 2e       	mov	r0, r25
    3394:	03 94       	inc	r0
    3396:	00 0c       	add	r0, r0
    3398:	11 f4       	brne	.+4      	; 0x339e <__fp_round+0xc>
    339a:	88 23       	and	r24, r24
    339c:	52 f0       	brmi	.+20     	; 0x33b2 <__fp_round+0x20>
    339e:	bb 0f       	add	r27, r27
    33a0:	40 f4       	brcc	.+16     	; 0x33b2 <__fp_round+0x20>
    33a2:	bf 2b       	or	r27, r31
    33a4:	11 f4       	brne	.+4      	; 0x33aa <__fp_round+0x18>
    33a6:	60 ff       	sbrs	r22, 0
    33a8:	04 c0       	rjmp	.+8      	; 0x33b2 <__fp_round+0x20>
    33aa:	6f 5f       	subi	r22, 0xFF	; 255
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	8f 4f       	sbci	r24, 0xFF	; 255
    33b0:	9f 4f       	sbci	r25, 0xFF	; 255
    33b2:	08 95       	ret

000033b4 <__fp_split3>:
    33b4:	57 fd       	sbrc	r21, 7
    33b6:	90 58       	subi	r25, 0x80	; 128
    33b8:	44 0f       	add	r20, r20
    33ba:	55 1f       	adc	r21, r21
    33bc:	59 f0       	breq	.+22     	; 0x33d4 <__fp_splitA+0x10>
    33be:	5f 3f       	cpi	r21, 0xFF	; 255
    33c0:	71 f0       	breq	.+28     	; 0x33de <__fp_splitA+0x1a>
    33c2:	47 95       	ror	r20

000033c4 <__fp_splitA>:
    33c4:	88 0f       	add	r24, r24
    33c6:	97 fb       	bst	r25, 7
    33c8:	99 1f       	adc	r25, r25
    33ca:	61 f0       	breq	.+24     	; 0x33e4 <__fp_splitA+0x20>
    33cc:	9f 3f       	cpi	r25, 0xFF	; 255
    33ce:	79 f0       	breq	.+30     	; 0x33ee <__fp_splitA+0x2a>
    33d0:	87 95       	ror	r24
    33d2:	08 95       	ret
    33d4:	12 16       	cp	r1, r18
    33d6:	13 06       	cpc	r1, r19
    33d8:	14 06       	cpc	r1, r20
    33da:	55 1f       	adc	r21, r21
    33dc:	f2 cf       	rjmp	.-28     	; 0x33c2 <__fp_split3+0xe>
    33de:	46 95       	lsr	r20
    33e0:	f1 df       	rcall	.-30     	; 0x33c4 <__fp_splitA>
    33e2:	08 c0       	rjmp	.+16     	; 0x33f4 <__fp_splitA+0x30>
    33e4:	16 16       	cp	r1, r22
    33e6:	17 06       	cpc	r1, r23
    33e8:	18 06       	cpc	r1, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	f1 cf       	rjmp	.-30     	; 0x33d0 <__fp_splitA+0xc>
    33ee:	86 95       	lsr	r24
    33f0:	71 05       	cpc	r23, r1
    33f2:	61 05       	cpc	r22, r1
    33f4:	08 94       	sec
    33f6:	08 95       	ret

000033f8 <__fp_zero>:
    33f8:	e8 94       	clt

000033fa <__fp_szero>:
    33fa:	bb 27       	eor	r27, r27
    33fc:	66 27       	eor	r22, r22
    33fe:	77 27       	eor	r23, r23
    3400:	cb 01       	movw	r24, r22
    3402:	97 f9       	bld	r25, 7
    3404:	08 95       	ret

00003406 <vfprintf>:
    3406:	2f 92       	push	r2
    3408:	3f 92       	push	r3
    340a:	4f 92       	push	r4
    340c:	5f 92       	push	r5
    340e:	6f 92       	push	r6
    3410:	7f 92       	push	r7
    3412:	8f 92       	push	r8
    3414:	9f 92       	push	r9
    3416:	af 92       	push	r10
    3418:	bf 92       	push	r11
    341a:	cf 92       	push	r12
    341c:	df 92       	push	r13
    341e:	ef 92       	push	r14
    3420:	ff 92       	push	r15
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	cf 93       	push	r28
    3428:	df 93       	push	r29
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	63 97       	sbiw	r28, 0x13	; 19
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	6c 01       	movw	r12, r24
    3436:	4b 01       	movw	r8, r22
    3438:	2a 01       	movw	r4, r20
    343a:	fc 01       	movw	r30, r24
    343c:	16 82       	std	Z+6, r1	; 0x06
    343e:	17 82       	std	Z+7, r1	; 0x07
    3440:	83 81       	ldd	r24, Z+3	; 0x03
    3442:	81 ff       	sbrs	r24, 1
    3444:	43 c3       	rjmp	.+1670   	; 0x3acc <vfprintf+0x6c6>
    3446:	ae 01       	movw	r20, r28
    3448:	4f 5f       	subi	r20, 0xFF	; 255
    344a:	5f 4f       	sbci	r21, 0xFF	; 255
    344c:	3a 01       	movw	r6, r20
    344e:	f6 01       	movw	r30, r12
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	f4 01       	movw	r30, r8
    3454:	93 fd       	sbrc	r25, 3
    3456:	85 91       	lpm	r24, Z+
    3458:	93 ff       	sbrs	r25, 3
    345a:	81 91       	ld	r24, Z+
    345c:	4f 01       	movw	r8, r30
    345e:	88 23       	and	r24, r24
    3460:	09 f4       	brne	.+2      	; 0x3464 <vfprintf+0x5e>
    3462:	30 c3       	rjmp	.+1632   	; 0x3ac4 <vfprintf+0x6be>
    3464:	85 32       	cpi	r24, 0x25	; 37
    3466:	39 f4       	brne	.+14     	; 0x3476 <vfprintf+0x70>
    3468:	93 fd       	sbrc	r25, 3
    346a:	85 91       	lpm	r24, Z+
    346c:	93 ff       	sbrs	r25, 3
    346e:	81 91       	ld	r24, Z+
    3470:	4f 01       	movw	r8, r30
    3472:	85 32       	cpi	r24, 0x25	; 37
    3474:	39 f4       	brne	.+14     	; 0x3484 <vfprintf+0x7e>
    3476:	b6 01       	movw	r22, r12
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    347e:	52 01       	movw	r10, r4
    3480:	25 01       	movw	r4, r10
    3482:	e5 cf       	rjmp	.-54     	; 0x344e <vfprintf+0x48>
    3484:	10 e0       	ldi	r17, 0x00	; 0
    3486:	f1 2c       	mov	r15, r1
    3488:	20 e0       	ldi	r18, 0x00	; 0
    348a:	20 32       	cpi	r18, 0x20	; 32
    348c:	a0 f4       	brcc	.+40     	; 0x34b6 <vfprintf+0xb0>
    348e:	8b 32       	cpi	r24, 0x2B	; 43
    3490:	69 f0       	breq	.+26     	; 0x34ac <vfprintf+0xa6>
    3492:	30 f4       	brcc	.+12     	; 0x34a0 <vfprintf+0x9a>
    3494:	80 32       	cpi	r24, 0x20	; 32
    3496:	59 f0       	breq	.+22     	; 0x34ae <vfprintf+0xa8>
    3498:	83 32       	cpi	r24, 0x23	; 35
    349a:	69 f4       	brne	.+26     	; 0x34b6 <vfprintf+0xb0>
    349c:	20 61       	ori	r18, 0x10	; 16
    349e:	2c c0       	rjmp	.+88     	; 0x34f8 <vfprintf+0xf2>
    34a0:	8d 32       	cpi	r24, 0x2D	; 45
    34a2:	39 f0       	breq	.+14     	; 0x34b2 <vfprintf+0xac>
    34a4:	80 33       	cpi	r24, 0x30	; 48
    34a6:	39 f4       	brne	.+14     	; 0x34b6 <vfprintf+0xb0>
    34a8:	21 60       	ori	r18, 0x01	; 1
    34aa:	26 c0       	rjmp	.+76     	; 0x34f8 <vfprintf+0xf2>
    34ac:	22 60       	ori	r18, 0x02	; 2
    34ae:	24 60       	ori	r18, 0x04	; 4
    34b0:	23 c0       	rjmp	.+70     	; 0x34f8 <vfprintf+0xf2>
    34b2:	28 60       	ori	r18, 0x08	; 8
    34b4:	21 c0       	rjmp	.+66     	; 0x34f8 <vfprintf+0xf2>
    34b6:	27 fd       	sbrc	r18, 7
    34b8:	27 c0       	rjmp	.+78     	; 0x3508 <vfprintf+0x102>
    34ba:	30 ed       	ldi	r19, 0xD0	; 208
    34bc:	38 0f       	add	r19, r24
    34be:	3a 30       	cpi	r19, 0x0A	; 10
    34c0:	78 f4       	brcc	.+30     	; 0x34e0 <vfprintf+0xda>
    34c2:	26 ff       	sbrs	r18, 6
    34c4:	06 c0       	rjmp	.+12     	; 0x34d2 <vfprintf+0xcc>
    34c6:	fa e0       	ldi	r31, 0x0A	; 10
    34c8:	1f 9f       	mul	r17, r31
    34ca:	30 0d       	add	r19, r0
    34cc:	11 24       	eor	r1, r1
    34ce:	13 2f       	mov	r17, r19
    34d0:	13 c0       	rjmp	.+38     	; 0x34f8 <vfprintf+0xf2>
    34d2:	4a e0       	ldi	r20, 0x0A	; 10
    34d4:	f4 9e       	mul	r15, r20
    34d6:	30 0d       	add	r19, r0
    34d8:	11 24       	eor	r1, r1
    34da:	f3 2e       	mov	r15, r19
    34dc:	20 62       	ori	r18, 0x20	; 32
    34de:	0c c0       	rjmp	.+24     	; 0x34f8 <vfprintf+0xf2>
    34e0:	8e 32       	cpi	r24, 0x2E	; 46
    34e2:	21 f4       	brne	.+8      	; 0x34ec <vfprintf+0xe6>
    34e4:	26 fd       	sbrc	r18, 6
    34e6:	ee c2       	rjmp	.+1500   	; 0x3ac4 <vfprintf+0x6be>
    34e8:	20 64       	ori	r18, 0x40	; 64
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <vfprintf+0xf2>
    34ec:	8c 36       	cpi	r24, 0x6C	; 108
    34ee:	11 f4       	brne	.+4      	; 0x34f4 <vfprintf+0xee>
    34f0:	20 68       	ori	r18, 0x80	; 128
    34f2:	02 c0       	rjmp	.+4      	; 0x34f8 <vfprintf+0xf2>
    34f4:	88 36       	cpi	r24, 0x68	; 104
    34f6:	41 f4       	brne	.+16     	; 0x3508 <vfprintf+0x102>
    34f8:	f4 01       	movw	r30, r8
    34fa:	93 fd       	sbrc	r25, 3
    34fc:	85 91       	lpm	r24, Z+
    34fe:	93 ff       	sbrs	r25, 3
    3500:	81 91       	ld	r24, Z+
    3502:	4f 01       	movw	r8, r30
    3504:	81 11       	cpse	r24, r1
    3506:	c1 cf       	rjmp	.-126    	; 0x348a <vfprintf+0x84>
    3508:	9b eb       	ldi	r25, 0xBB	; 187
    350a:	98 0f       	add	r25, r24
    350c:	93 30       	cpi	r25, 0x03	; 3
    350e:	18 f4       	brcc	.+6      	; 0x3516 <vfprintf+0x110>
    3510:	20 61       	ori	r18, 0x10	; 16
    3512:	80 5e       	subi	r24, 0xE0	; 224
    3514:	06 c0       	rjmp	.+12     	; 0x3522 <vfprintf+0x11c>
    3516:	9b e9       	ldi	r25, 0x9B	; 155
    3518:	98 0f       	add	r25, r24
    351a:	93 30       	cpi	r25, 0x03	; 3
    351c:	08 f0       	brcs	.+2      	; 0x3520 <vfprintf+0x11a>
    351e:	71 c1       	rjmp	.+738    	; 0x3802 <vfprintf+0x3fc>
    3520:	2f 7e       	andi	r18, 0xEF	; 239
    3522:	26 ff       	sbrs	r18, 6
    3524:	16 e0       	ldi	r17, 0x06	; 6
    3526:	2f 73       	andi	r18, 0x3F	; 63
    3528:	32 2e       	mov	r3, r18
    352a:	85 36       	cpi	r24, 0x65	; 101
    352c:	19 f4       	brne	.+6      	; 0x3534 <vfprintf+0x12e>
    352e:	20 64       	ori	r18, 0x40	; 64
    3530:	32 2e       	mov	r3, r18
    3532:	08 c0       	rjmp	.+16     	; 0x3544 <vfprintf+0x13e>
    3534:	86 36       	cpi	r24, 0x66	; 102
    3536:	21 f4       	brne	.+8      	; 0x3540 <vfprintf+0x13a>
    3538:	f2 2f       	mov	r31, r18
    353a:	f0 68       	ori	r31, 0x80	; 128
    353c:	3f 2e       	mov	r3, r31
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <vfprintf+0x13e>
    3540:	11 11       	cpse	r17, r1
    3542:	11 50       	subi	r17, 0x01	; 1
    3544:	37 fe       	sbrs	r3, 7
    3546:	07 c0       	rjmp	.+14     	; 0x3556 <vfprintf+0x150>
    3548:	1c 33       	cpi	r17, 0x3C	; 60
    354a:	50 f4       	brcc	.+20     	; 0x3560 <vfprintf+0x15a>
    354c:	ee 24       	eor	r14, r14
    354e:	e3 94       	inc	r14
    3550:	e1 0e       	add	r14, r17
    3552:	27 e0       	ldi	r18, 0x07	; 7
    3554:	0b c0       	rjmp	.+22     	; 0x356c <vfprintf+0x166>
    3556:	18 30       	cpi	r17, 0x08	; 8
    3558:	38 f0       	brcs	.+14     	; 0x3568 <vfprintf+0x162>
    355a:	27 e0       	ldi	r18, 0x07	; 7
    355c:	17 e0       	ldi	r17, 0x07	; 7
    355e:	05 c0       	rjmp	.+10     	; 0x356a <vfprintf+0x164>
    3560:	27 e0       	ldi	r18, 0x07	; 7
    3562:	4c e3       	ldi	r20, 0x3C	; 60
    3564:	e4 2e       	mov	r14, r20
    3566:	02 c0       	rjmp	.+4      	; 0x356c <vfprintf+0x166>
    3568:	21 2f       	mov	r18, r17
    356a:	e1 2c       	mov	r14, r1
    356c:	52 01       	movw	r10, r4
    356e:	44 e0       	ldi	r20, 0x04	; 4
    3570:	a4 0e       	add	r10, r20
    3572:	b1 1c       	adc	r11, r1
    3574:	f2 01       	movw	r30, r4
    3576:	60 81       	ld	r22, Z
    3578:	71 81       	ldd	r23, Z+1	; 0x01
    357a:	82 81       	ldd	r24, Z+2	; 0x02
    357c:	93 81       	ldd	r25, Z+3	; 0x03
    357e:	0e 2d       	mov	r16, r14
    3580:	a3 01       	movw	r20, r6
    3582:	0e 94 12 1e 	call	0x3c24	; 0x3c24 <__ftoa_engine>
    3586:	2c 01       	movw	r4, r24
    3588:	09 81       	ldd	r16, Y+1	; 0x01
    358a:	00 ff       	sbrs	r16, 0
    358c:	02 c0       	rjmp	.+4      	; 0x3592 <vfprintf+0x18c>
    358e:	03 ff       	sbrs	r16, 3
    3590:	07 c0       	rjmp	.+14     	; 0x35a0 <vfprintf+0x19a>
    3592:	31 fc       	sbrc	r3, 1
    3594:	08 c0       	rjmp	.+16     	; 0x35a6 <vfprintf+0x1a0>
    3596:	32 fe       	sbrs	r3, 2
    3598:	09 c0       	rjmp	.+18     	; 0x35ac <vfprintf+0x1a6>
    359a:	30 e2       	ldi	r19, 0x20	; 32
    359c:	23 2e       	mov	r2, r19
    359e:	07 c0       	rjmp	.+14     	; 0x35ae <vfprintf+0x1a8>
    35a0:	2d e2       	ldi	r18, 0x2D	; 45
    35a2:	22 2e       	mov	r2, r18
    35a4:	04 c0       	rjmp	.+8      	; 0x35ae <vfprintf+0x1a8>
    35a6:	9b e2       	ldi	r25, 0x2B	; 43
    35a8:	29 2e       	mov	r2, r25
    35aa:	01 c0       	rjmp	.+2      	; 0x35ae <vfprintf+0x1a8>
    35ac:	21 2c       	mov	r2, r1
    35ae:	80 2f       	mov	r24, r16
    35b0:	8c 70       	andi	r24, 0x0C	; 12
    35b2:	19 f0       	breq	.+6      	; 0x35ba <vfprintf+0x1b4>
    35b4:	21 10       	cpse	r2, r1
    35b6:	68 c2       	rjmp	.+1232   	; 0x3a88 <vfprintf+0x682>
    35b8:	a8 c2       	rjmp	.+1360   	; 0x3b0a <vfprintf+0x704>
    35ba:	37 fe       	sbrs	r3, 7
    35bc:	0f c0       	rjmp	.+30     	; 0x35dc <vfprintf+0x1d6>
    35be:	e4 0c       	add	r14, r4
    35c0:	04 ff       	sbrs	r16, 4
    35c2:	04 c0       	rjmp	.+8      	; 0x35cc <vfprintf+0x1c6>
    35c4:	8a 81       	ldd	r24, Y+2	; 0x02
    35c6:	81 33       	cpi	r24, 0x31	; 49
    35c8:	09 f4       	brne	.+2      	; 0x35cc <vfprintf+0x1c6>
    35ca:	ea 94       	dec	r14
    35cc:	1e 14       	cp	r1, r14
    35ce:	74 f5       	brge	.+92     	; 0x362c <vfprintf+0x226>
    35d0:	f8 e0       	ldi	r31, 0x08	; 8
    35d2:	fe 15       	cp	r31, r14
    35d4:	78 f5       	brcc	.+94     	; 0x3634 <vfprintf+0x22e>
    35d6:	88 e0       	ldi	r24, 0x08	; 8
    35d8:	e8 2e       	mov	r14, r24
    35da:	2c c0       	rjmp	.+88     	; 0x3634 <vfprintf+0x22e>
    35dc:	36 fc       	sbrc	r3, 6
    35de:	2a c0       	rjmp	.+84     	; 0x3634 <vfprintf+0x22e>
    35e0:	81 2f       	mov	r24, r17
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	84 15       	cp	r24, r4
    35e6:	95 05       	cpc	r25, r5
    35e8:	9c f0       	brlt	.+38     	; 0x3610 <vfprintf+0x20a>
    35ea:	2c ef       	ldi	r18, 0xFC	; 252
    35ec:	42 16       	cp	r4, r18
    35ee:	2f ef       	ldi	r18, 0xFF	; 255
    35f0:	52 06       	cpc	r5, r18
    35f2:	74 f0       	brlt	.+28     	; 0x3610 <vfprintf+0x20a>
    35f4:	43 2d       	mov	r20, r3
    35f6:	40 68       	ori	r20, 0x80	; 128
    35f8:	34 2e       	mov	r3, r20
    35fa:	0a c0       	rjmp	.+20     	; 0x3610 <vfprintf+0x20a>
    35fc:	e2 e0       	ldi	r30, 0x02	; 2
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	ec 0f       	add	r30, r28
    3602:	fd 1f       	adc	r31, r29
    3604:	e1 0f       	add	r30, r17
    3606:	f1 1d       	adc	r31, r1
    3608:	80 81       	ld	r24, Z
    360a:	80 33       	cpi	r24, 0x30	; 48
    360c:	19 f4       	brne	.+6      	; 0x3614 <vfprintf+0x20e>
    360e:	11 50       	subi	r17, 0x01	; 1
    3610:	11 11       	cpse	r17, r1
    3612:	f4 cf       	rjmp	.-24     	; 0x35fc <vfprintf+0x1f6>
    3614:	37 fe       	sbrs	r3, 7
    3616:	0e c0       	rjmp	.+28     	; 0x3634 <vfprintf+0x22e>
    3618:	ee 24       	eor	r14, r14
    361a:	e3 94       	inc	r14
    361c:	e1 0e       	add	r14, r17
    361e:	81 2f       	mov	r24, r17
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	48 16       	cp	r4, r24
    3624:	59 06       	cpc	r5, r25
    3626:	2c f4       	brge	.+10     	; 0x3632 <vfprintf+0x22c>
    3628:	14 19       	sub	r17, r4
    362a:	04 c0       	rjmp	.+8      	; 0x3634 <vfprintf+0x22e>
    362c:	ee 24       	eor	r14, r14
    362e:	e3 94       	inc	r14
    3630:	01 c0       	rjmp	.+2      	; 0x3634 <vfprintf+0x22e>
    3632:	10 e0       	ldi	r17, 0x00	; 0
    3634:	37 fe       	sbrs	r3, 7
    3636:	06 c0       	rjmp	.+12     	; 0x3644 <vfprintf+0x23e>
    3638:	14 14       	cp	r1, r4
    363a:	15 04       	cpc	r1, r5
    363c:	34 f4       	brge	.+12     	; 0x364a <vfprintf+0x244>
    363e:	c2 01       	movw	r24, r4
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	05 c0       	rjmp	.+10     	; 0x364e <vfprintf+0x248>
    3644:	85 e0       	ldi	r24, 0x05	; 5
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	02 c0       	rjmp	.+4      	; 0x364e <vfprintf+0x248>
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	21 10       	cpse	r2, r1
    3650:	01 96       	adiw	r24, 0x01	; 1
    3652:	11 23       	and	r17, r17
    3654:	31 f0       	breq	.+12     	; 0x3662 <vfprintf+0x25c>
    3656:	21 2f       	mov	r18, r17
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	2f 5f       	subi	r18, 0xFF	; 255
    365c:	3f 4f       	sbci	r19, 0xFF	; 255
    365e:	82 0f       	add	r24, r18
    3660:	93 1f       	adc	r25, r19
    3662:	2f 2d       	mov	r18, r15
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	82 17       	cp	r24, r18
    3668:	93 07       	cpc	r25, r19
    366a:	14 f4       	brge	.+4      	; 0x3670 <vfprintf+0x26a>
    366c:	f8 1a       	sub	r15, r24
    366e:	01 c0       	rjmp	.+2      	; 0x3672 <vfprintf+0x26c>
    3670:	f1 2c       	mov	r15, r1
    3672:	83 2d       	mov	r24, r3
    3674:	89 70       	andi	r24, 0x09	; 9
    3676:	49 f4       	brne	.+18     	; 0x368a <vfprintf+0x284>
    3678:	ff 20       	and	r15, r15
    367a:	39 f0       	breq	.+14     	; 0x368a <vfprintf+0x284>
    367c:	b6 01       	movw	r22, r12
    367e:	80 e2       	ldi	r24, 0x20	; 32
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3686:	fa 94       	dec	r15
    3688:	f7 cf       	rjmp	.-18     	; 0x3678 <vfprintf+0x272>
    368a:	22 20       	and	r2, r2
    368c:	29 f0       	breq	.+10     	; 0x3698 <vfprintf+0x292>
    368e:	b6 01       	movw	r22, r12
    3690:	82 2d       	mov	r24, r2
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3698:	33 fc       	sbrc	r3, 3
    369a:	09 c0       	rjmp	.+18     	; 0x36ae <vfprintf+0x2a8>
    369c:	ff 20       	and	r15, r15
    369e:	39 f0       	breq	.+14     	; 0x36ae <vfprintf+0x2a8>
    36a0:	b6 01       	movw	r22, r12
    36a2:	80 e3       	ldi	r24, 0x30	; 48
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    36aa:	fa 94       	dec	r15
    36ac:	f7 cf       	rjmp	.-18     	; 0x369c <vfprintf+0x296>
    36ae:	37 fe       	sbrs	r3, 7
    36b0:	5a c0       	rjmp	.+180    	; 0x3766 <vfprintf+0x360>
    36b2:	94 2d       	mov	r25, r4
    36b4:	85 2d       	mov	r24, r5
    36b6:	57 fe       	sbrs	r5, 7
    36b8:	02 c0       	rjmp	.+4      	; 0x36be <vfprintf+0x2b8>
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	29 2e       	mov	r2, r25
    36c0:	38 2e       	mov	r3, r24
    36c2:	20 e0       	ldi	r18, 0x00	; 0
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	a2 01       	movw	r20, r4
    36c8:	4e 19       	sub	r20, r14
    36ca:	51 09       	sbc	r21, r1
    36cc:	4c 87       	std	Y+12, r20	; 0x0c
    36ce:	5d 87       	std	Y+13, r21	; 0x0d
    36d0:	a2 01       	movw	r20, r4
    36d2:	42 19       	sub	r20, r2
    36d4:	53 09       	sbc	r21, r3
    36d6:	4e 87       	std	Y+14, r20	; 0x0e
    36d8:	5f 87       	std	Y+15, r21	; 0x0f
    36da:	61 2f       	mov	r22, r17
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	44 27       	eor	r20, r20
    36e0:	55 27       	eor	r21, r21
    36e2:	46 1b       	sub	r20, r22
    36e4:	57 0b       	sbc	r21, r23
    36e6:	48 8b       	std	Y+16, r20	; 0x10
    36e8:	59 8b       	std	Y+17, r21	; 0x11
    36ea:	5f ef       	ldi	r21, 0xFF	; 255
    36ec:	25 16       	cp	r2, r21
    36ee:	35 06       	cpc	r3, r21
    36f0:	49 f4       	brne	.+18     	; 0x3704 <vfprintf+0x2fe>
    36f2:	b6 01       	movw	r22, r12
    36f4:	8e e2       	ldi	r24, 0x2E	; 46
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	2a 8b       	std	Y+18, r18	; 0x12
    36fa:	3b 8b       	std	Y+19, r19	; 0x13
    36fc:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3700:	3b 89       	ldd	r19, Y+19	; 0x13
    3702:	2a 89       	ldd	r18, Y+18	; 0x12
    3704:	42 14       	cp	r4, r2
    3706:	53 04       	cpc	r5, r3
    3708:	6c f0       	brlt	.+26     	; 0x3724 <vfprintf+0x31e>
    370a:	4c 85       	ldd	r20, Y+12	; 0x0c
    370c:	5d 85       	ldd	r21, Y+13	; 0x0d
    370e:	42 15       	cp	r20, r2
    3710:	53 05       	cpc	r21, r3
    3712:	44 f4       	brge	.+16     	; 0x3724 <vfprintf+0x31e>
    3714:	ee 85       	ldd	r30, Y+14	; 0x0e
    3716:	ff 85       	ldd	r31, Y+15	; 0x0f
    3718:	e2 0f       	add	r30, r18
    371a:	f3 1f       	adc	r31, r19
    371c:	e6 0d       	add	r30, r6
    371e:	f7 1d       	adc	r31, r7
    3720:	81 81       	ldd	r24, Z+1	; 0x01
    3722:	01 c0       	rjmp	.+2      	; 0x3726 <vfprintf+0x320>
    3724:	80 e3       	ldi	r24, 0x30	; 48
    3726:	51 e0       	ldi	r21, 0x01	; 1
    3728:	25 1a       	sub	r2, r21
    372a:	31 08       	sbc	r3, r1
    372c:	2f 5f       	subi	r18, 0xFF	; 255
    372e:	3f 4f       	sbci	r19, 0xFF	; 255
    3730:	48 89       	ldd	r20, Y+16	; 0x10
    3732:	59 89       	ldd	r21, Y+17	; 0x11
    3734:	24 16       	cp	r2, r20
    3736:	35 06       	cpc	r3, r21
    3738:	4c f0       	brlt	.+18     	; 0x374c <vfprintf+0x346>
    373a:	b6 01       	movw	r22, r12
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	2a 8b       	std	Y+18, r18	; 0x12
    3740:	3b 8b       	std	Y+19, r19	; 0x13
    3742:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3746:	2a 89       	ldd	r18, Y+18	; 0x12
    3748:	3b 89       	ldd	r19, Y+19	; 0x13
    374a:	cf cf       	rjmp	.-98     	; 0x36ea <vfprintf+0x2e4>
    374c:	24 14       	cp	r2, r4
    374e:	35 04       	cpc	r3, r5
    3750:	39 f4       	brne	.+14     	; 0x3760 <vfprintf+0x35a>
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	96 33       	cpi	r25, 0x36	; 54
    3756:	18 f4       	brcc	.+6      	; 0x375e <vfprintf+0x358>
    3758:	95 33       	cpi	r25, 0x35	; 53
    375a:	11 f4       	brne	.+4      	; 0x3760 <vfprintf+0x35a>
    375c:	04 ff       	sbrs	r16, 4
    375e:	81 e3       	ldi	r24, 0x31	; 49
    3760:	b6 01       	movw	r22, r12
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	4b c0       	rjmp	.+150    	; 0x37fc <vfprintf+0x3f6>
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	81 33       	cpi	r24, 0x31	; 49
    376a:	09 f0       	breq	.+2      	; 0x376e <vfprintf+0x368>
    376c:	0f 7e       	andi	r16, 0xEF	; 239
    376e:	b6 01       	movw	r22, r12
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3776:	11 11       	cpse	r17, r1
    3778:	05 c0       	rjmp	.+10     	; 0x3784 <vfprintf+0x37e>
    377a:	34 fc       	sbrc	r3, 4
    377c:	18 c0       	rjmp	.+48     	; 0x37ae <vfprintf+0x3a8>
    377e:	85 e6       	ldi	r24, 0x65	; 101
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	17 c0       	rjmp	.+46     	; 0x37b2 <vfprintf+0x3ac>
    3784:	b6 01       	movw	r22, r12
    3786:	8e e2       	ldi	r24, 0x2E	; 46
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	ee 24       	eor	r14, r14
    3792:	e3 94       	inc	r14
    3794:	e8 0e       	add	r14, r24
    3796:	f3 01       	movw	r30, r6
    3798:	e8 0f       	add	r30, r24
    379a:	f1 1d       	adc	r31, r1
    379c:	80 81       	ld	r24, Z
    379e:	b6 01       	movw	r22, r12
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    37a6:	11 50       	subi	r17, 0x01	; 1
    37a8:	8e 2d       	mov	r24, r14
    37aa:	91 f7       	brne	.-28     	; 0x3790 <vfprintf+0x38a>
    37ac:	e6 cf       	rjmp	.-52     	; 0x377a <vfprintf+0x374>
    37ae:	85 e4       	ldi	r24, 0x45	; 69
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	b6 01       	movw	r22, r12
    37b4:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    37b8:	57 fc       	sbrc	r5, 7
    37ba:	05 c0       	rjmp	.+10     	; 0x37c6 <vfprintf+0x3c0>
    37bc:	41 14       	cp	r4, r1
    37be:	51 04       	cpc	r5, r1
    37c0:	39 f4       	brne	.+14     	; 0x37d0 <vfprintf+0x3ca>
    37c2:	04 ff       	sbrs	r16, 4
    37c4:	05 c0       	rjmp	.+10     	; 0x37d0 <vfprintf+0x3ca>
    37c6:	51 94       	neg	r5
    37c8:	41 94       	neg	r4
    37ca:	51 08       	sbc	r5, r1
    37cc:	8d e2       	ldi	r24, 0x2D	; 45
    37ce:	01 c0       	rjmp	.+2      	; 0x37d2 <vfprintf+0x3cc>
    37d0:	8b e2       	ldi	r24, 0x2B	; 43
    37d2:	b6 01       	movw	r22, r12
    37d4:	90 e0       	ldi	r25, 0x00	; 0
    37d6:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    37da:	80 e3       	ldi	r24, 0x30	; 48
    37dc:	9a e0       	ldi	r25, 0x0A	; 10
    37de:	49 16       	cp	r4, r25
    37e0:	51 04       	cpc	r5, r1
    37e2:	2c f0       	brlt	.+10     	; 0x37ee <vfprintf+0x3e8>
    37e4:	8f 5f       	subi	r24, 0xFF	; 255
    37e6:	5a e0       	ldi	r21, 0x0A	; 10
    37e8:	45 1a       	sub	r4, r21
    37ea:	51 08       	sbc	r5, r1
    37ec:	f7 cf       	rjmp	.-18     	; 0x37dc <vfprintf+0x3d6>
    37ee:	b6 01       	movw	r22, r12
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    37f6:	b6 01       	movw	r22, r12
    37f8:	c2 01       	movw	r24, r4
    37fa:	c0 96       	adiw	r24, 0x30	; 48
    37fc:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3800:	57 c1       	rjmp	.+686    	; 0x3ab0 <vfprintf+0x6aa>
    3802:	83 36       	cpi	r24, 0x63	; 99
    3804:	31 f0       	breq	.+12     	; 0x3812 <vfprintf+0x40c>
    3806:	83 37       	cpi	r24, 0x73	; 115
    3808:	79 f0       	breq	.+30     	; 0x3828 <vfprintf+0x422>
    380a:	83 35       	cpi	r24, 0x53	; 83
    380c:	09 f0       	breq	.+2      	; 0x3810 <vfprintf+0x40a>
    380e:	58 c0       	rjmp	.+176    	; 0x38c0 <vfprintf+0x4ba>
    3810:	21 c0       	rjmp	.+66     	; 0x3854 <vfprintf+0x44e>
    3812:	52 01       	movw	r10, r4
    3814:	e2 e0       	ldi	r30, 0x02	; 2
    3816:	ae 0e       	add	r10, r30
    3818:	b1 1c       	adc	r11, r1
    381a:	f2 01       	movw	r30, r4
    381c:	80 81       	ld	r24, Z
    381e:	89 83       	std	Y+1, r24	; 0x01
    3820:	01 e0       	ldi	r16, 0x01	; 1
    3822:	10 e0       	ldi	r17, 0x00	; 0
    3824:	23 01       	movw	r4, r6
    3826:	14 c0       	rjmp	.+40     	; 0x3850 <vfprintf+0x44a>
    3828:	52 01       	movw	r10, r4
    382a:	f2 e0       	ldi	r31, 0x02	; 2
    382c:	af 0e       	add	r10, r31
    382e:	b1 1c       	adc	r11, r1
    3830:	f2 01       	movw	r30, r4
    3832:	40 80       	ld	r4, Z
    3834:	51 80       	ldd	r5, Z+1	; 0x01
    3836:	26 ff       	sbrs	r18, 6
    3838:	03 c0       	rjmp	.+6      	; 0x3840 <vfprintf+0x43a>
    383a:	61 2f       	mov	r22, r17
    383c:	70 e0       	ldi	r23, 0x00	; 0
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <vfprintf+0x43e>
    3840:	6f ef       	ldi	r22, 0xFF	; 255
    3842:	7f ef       	ldi	r23, 0xFF	; 255
    3844:	c2 01       	movw	r24, r4
    3846:	2a 8b       	std	Y+18, r18	; 0x12
    3848:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <strnlen>
    384c:	8c 01       	movw	r16, r24
    384e:	2a 89       	ldd	r18, Y+18	; 0x12
    3850:	2f 77       	andi	r18, 0x7F	; 127
    3852:	15 c0       	rjmp	.+42     	; 0x387e <vfprintf+0x478>
    3854:	52 01       	movw	r10, r4
    3856:	f2 e0       	ldi	r31, 0x02	; 2
    3858:	af 0e       	add	r10, r31
    385a:	b1 1c       	adc	r11, r1
    385c:	f2 01       	movw	r30, r4
    385e:	40 80       	ld	r4, Z
    3860:	51 80       	ldd	r5, Z+1	; 0x01
    3862:	26 ff       	sbrs	r18, 6
    3864:	03 c0       	rjmp	.+6      	; 0x386c <vfprintf+0x466>
    3866:	61 2f       	mov	r22, r17
    3868:	70 e0       	ldi	r23, 0x00	; 0
    386a:	02 c0       	rjmp	.+4      	; 0x3870 <vfprintf+0x46a>
    386c:	6f ef       	ldi	r22, 0xFF	; 255
    386e:	7f ef       	ldi	r23, 0xFF	; 255
    3870:	c2 01       	movw	r24, r4
    3872:	2a 8b       	std	Y+18, r18	; 0x12
    3874:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <strnlen_P>
    3878:	8c 01       	movw	r16, r24
    387a:	2a 89       	ldd	r18, Y+18	; 0x12
    387c:	20 68       	ori	r18, 0x80	; 128
    387e:	32 2e       	mov	r3, r18
    3880:	23 fd       	sbrc	r18, 3
    3882:	1a c0       	rjmp	.+52     	; 0x38b8 <vfprintf+0x4b2>
    3884:	8f 2d       	mov	r24, r15
    3886:	90 e0       	ldi	r25, 0x00	; 0
    3888:	08 17       	cp	r16, r24
    388a:	19 07       	cpc	r17, r25
    388c:	a8 f4       	brcc	.+42     	; 0x38b8 <vfprintf+0x4b2>
    388e:	b6 01       	movw	r22, r12
    3890:	80 e2       	ldi	r24, 0x20	; 32
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3898:	fa 94       	dec	r15
    389a:	f4 cf       	rjmp	.-24     	; 0x3884 <vfprintf+0x47e>
    389c:	f2 01       	movw	r30, r4
    389e:	37 fc       	sbrc	r3, 7
    38a0:	85 91       	lpm	r24, Z+
    38a2:	37 fe       	sbrs	r3, 7
    38a4:	81 91       	ld	r24, Z+
    38a6:	2f 01       	movw	r4, r30
    38a8:	b6 01       	movw	r22, r12
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    38b0:	f1 10       	cpse	r15, r1
    38b2:	fa 94       	dec	r15
    38b4:	01 50       	subi	r16, 0x01	; 1
    38b6:	11 09       	sbc	r17, r1
    38b8:	01 15       	cp	r16, r1
    38ba:	11 05       	cpc	r17, r1
    38bc:	79 f7       	brne	.-34     	; 0x389c <vfprintf+0x496>
    38be:	f8 c0       	rjmp	.+496    	; 0x3ab0 <vfprintf+0x6aa>
    38c0:	84 36       	cpi	r24, 0x64	; 100
    38c2:	11 f0       	breq	.+4      	; 0x38c8 <vfprintf+0x4c2>
    38c4:	89 36       	cpi	r24, 0x69	; 105
    38c6:	59 f5       	brne	.+86     	; 0x391e <vfprintf+0x518>
    38c8:	52 01       	movw	r10, r4
    38ca:	27 ff       	sbrs	r18, 7
    38cc:	09 c0       	rjmp	.+18     	; 0x38e0 <vfprintf+0x4da>
    38ce:	f4 e0       	ldi	r31, 0x04	; 4
    38d0:	af 0e       	add	r10, r31
    38d2:	b1 1c       	adc	r11, r1
    38d4:	f2 01       	movw	r30, r4
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	0a c0       	rjmp	.+20     	; 0x38f4 <vfprintf+0x4ee>
    38e0:	f2 e0       	ldi	r31, 0x02	; 2
    38e2:	af 0e       	add	r10, r31
    38e4:	b1 1c       	adc	r11, r1
    38e6:	f2 01       	movw	r30, r4
    38e8:	60 81       	ld	r22, Z
    38ea:	71 81       	ldd	r23, Z+1	; 0x01
    38ec:	88 27       	eor	r24, r24
    38ee:	77 fd       	sbrc	r23, 7
    38f0:	80 95       	com	r24
    38f2:	98 2f       	mov	r25, r24
    38f4:	2f 76       	andi	r18, 0x6F	; 111
    38f6:	32 2e       	mov	r3, r18
    38f8:	97 ff       	sbrs	r25, 7
    38fa:	09 c0       	rjmp	.+18     	; 0x390e <vfprintf+0x508>
    38fc:	90 95       	com	r25
    38fe:	80 95       	com	r24
    3900:	70 95       	com	r23
    3902:	61 95       	neg	r22
    3904:	7f 4f       	sbci	r23, 0xFF	; 255
    3906:	8f 4f       	sbci	r24, 0xFF	; 255
    3908:	9f 4f       	sbci	r25, 0xFF	; 255
    390a:	20 68       	ori	r18, 0x80	; 128
    390c:	32 2e       	mov	r3, r18
    390e:	2a e0       	ldi	r18, 0x0A	; 10
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	a3 01       	movw	r20, r6
    3914:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__ultoa_invert>
    3918:	e8 2e       	mov	r14, r24
    391a:	e6 18       	sub	r14, r6
    391c:	3f c0       	rjmp	.+126    	; 0x399c <vfprintf+0x596>
    391e:	02 2f       	mov	r16, r18
    3920:	85 37       	cpi	r24, 0x75	; 117
    3922:	21 f4       	brne	.+8      	; 0x392c <vfprintf+0x526>
    3924:	0f 7e       	andi	r16, 0xEF	; 239
    3926:	2a e0       	ldi	r18, 0x0A	; 10
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	1d c0       	rjmp	.+58     	; 0x3966 <vfprintf+0x560>
    392c:	09 7f       	andi	r16, 0xF9	; 249
    392e:	8f 36       	cpi	r24, 0x6F	; 111
    3930:	91 f0       	breq	.+36     	; 0x3956 <vfprintf+0x550>
    3932:	18 f4       	brcc	.+6      	; 0x393a <vfprintf+0x534>
    3934:	88 35       	cpi	r24, 0x58	; 88
    3936:	59 f0       	breq	.+22     	; 0x394e <vfprintf+0x548>
    3938:	c5 c0       	rjmp	.+394    	; 0x3ac4 <vfprintf+0x6be>
    393a:	80 37       	cpi	r24, 0x70	; 112
    393c:	19 f0       	breq	.+6      	; 0x3944 <vfprintf+0x53e>
    393e:	88 37       	cpi	r24, 0x78	; 120
    3940:	11 f0       	breq	.+4      	; 0x3946 <vfprintf+0x540>
    3942:	c0 c0       	rjmp	.+384    	; 0x3ac4 <vfprintf+0x6be>
    3944:	00 61       	ori	r16, 0x10	; 16
    3946:	04 ff       	sbrs	r16, 4
    3948:	09 c0       	rjmp	.+18     	; 0x395c <vfprintf+0x556>
    394a:	04 60       	ori	r16, 0x04	; 4
    394c:	07 c0       	rjmp	.+14     	; 0x395c <vfprintf+0x556>
    394e:	24 ff       	sbrs	r18, 4
    3950:	08 c0       	rjmp	.+16     	; 0x3962 <vfprintf+0x55c>
    3952:	06 60       	ori	r16, 0x06	; 6
    3954:	06 c0       	rjmp	.+12     	; 0x3962 <vfprintf+0x55c>
    3956:	28 e0       	ldi	r18, 0x08	; 8
    3958:	30 e0       	ldi	r19, 0x00	; 0
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <vfprintf+0x560>
    395c:	20 e1       	ldi	r18, 0x10	; 16
    395e:	30 e0       	ldi	r19, 0x00	; 0
    3960:	02 c0       	rjmp	.+4      	; 0x3966 <vfprintf+0x560>
    3962:	20 e1       	ldi	r18, 0x10	; 16
    3964:	32 e0       	ldi	r19, 0x02	; 2
    3966:	52 01       	movw	r10, r4
    3968:	07 ff       	sbrs	r16, 7
    396a:	09 c0       	rjmp	.+18     	; 0x397e <vfprintf+0x578>
    396c:	f4 e0       	ldi	r31, 0x04	; 4
    396e:	af 0e       	add	r10, r31
    3970:	b1 1c       	adc	r11, r1
    3972:	f2 01       	movw	r30, r4
    3974:	60 81       	ld	r22, Z
    3976:	71 81       	ldd	r23, Z+1	; 0x01
    3978:	82 81       	ldd	r24, Z+2	; 0x02
    397a:	93 81       	ldd	r25, Z+3	; 0x03
    397c:	08 c0       	rjmp	.+16     	; 0x398e <vfprintf+0x588>
    397e:	f2 e0       	ldi	r31, 0x02	; 2
    3980:	af 0e       	add	r10, r31
    3982:	b1 1c       	adc	r11, r1
    3984:	f2 01       	movw	r30, r4
    3986:	60 81       	ld	r22, Z
    3988:	71 81       	ldd	r23, Z+1	; 0x01
    398a:	80 e0       	ldi	r24, 0x00	; 0
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	a3 01       	movw	r20, r6
    3990:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__ultoa_invert>
    3994:	e8 2e       	mov	r14, r24
    3996:	e6 18       	sub	r14, r6
    3998:	0f 77       	andi	r16, 0x7F	; 127
    399a:	30 2e       	mov	r3, r16
    399c:	36 fe       	sbrs	r3, 6
    399e:	0b c0       	rjmp	.+22     	; 0x39b6 <vfprintf+0x5b0>
    39a0:	33 2d       	mov	r19, r3
    39a2:	3e 7f       	andi	r19, 0xFE	; 254
    39a4:	e1 16       	cp	r14, r17
    39a6:	50 f4       	brcc	.+20     	; 0x39bc <vfprintf+0x5b6>
    39a8:	34 fe       	sbrs	r3, 4
    39aa:	0a c0       	rjmp	.+20     	; 0x39c0 <vfprintf+0x5ba>
    39ac:	32 fc       	sbrc	r3, 2
    39ae:	08 c0       	rjmp	.+16     	; 0x39c0 <vfprintf+0x5ba>
    39b0:	33 2d       	mov	r19, r3
    39b2:	3e 7e       	andi	r19, 0xEE	; 238
    39b4:	05 c0       	rjmp	.+10     	; 0x39c0 <vfprintf+0x5ba>
    39b6:	0e 2d       	mov	r16, r14
    39b8:	33 2d       	mov	r19, r3
    39ba:	03 c0       	rjmp	.+6      	; 0x39c2 <vfprintf+0x5bc>
    39bc:	0e 2d       	mov	r16, r14
    39be:	01 c0       	rjmp	.+2      	; 0x39c2 <vfprintf+0x5bc>
    39c0:	01 2f       	mov	r16, r17
    39c2:	34 ff       	sbrs	r19, 4
    39c4:	0c c0       	rjmp	.+24     	; 0x39de <vfprintf+0x5d8>
    39c6:	fe 01       	movw	r30, r28
    39c8:	ee 0d       	add	r30, r14
    39ca:	f1 1d       	adc	r31, r1
    39cc:	80 81       	ld	r24, Z
    39ce:	80 33       	cpi	r24, 0x30	; 48
    39d0:	11 f4       	brne	.+4      	; 0x39d6 <vfprintf+0x5d0>
    39d2:	39 7e       	andi	r19, 0xE9	; 233
    39d4:	08 c0       	rjmp	.+16     	; 0x39e6 <vfprintf+0x5e0>
    39d6:	32 ff       	sbrs	r19, 2
    39d8:	05 c0       	rjmp	.+10     	; 0x39e4 <vfprintf+0x5de>
    39da:	0e 5f       	subi	r16, 0xFE	; 254
    39dc:	04 c0       	rjmp	.+8      	; 0x39e6 <vfprintf+0x5e0>
    39de:	83 2f       	mov	r24, r19
    39e0:	86 78       	andi	r24, 0x86	; 134
    39e2:	09 f0       	breq	.+2      	; 0x39e6 <vfprintf+0x5e0>
    39e4:	0f 5f       	subi	r16, 0xFF	; 255
    39e6:	33 fd       	sbrc	r19, 3
    39e8:	13 c0       	rjmp	.+38     	; 0x3a10 <vfprintf+0x60a>
    39ea:	30 ff       	sbrs	r19, 0
    39ec:	06 c0       	rjmp	.+12     	; 0x39fa <vfprintf+0x5f4>
    39ee:	1e 2d       	mov	r17, r14
    39f0:	0f 15       	cp	r16, r15
    39f2:	18 f4       	brcc	.+6      	; 0x39fa <vfprintf+0x5f4>
    39f4:	1f 0d       	add	r17, r15
    39f6:	10 1b       	sub	r17, r16
    39f8:	0f 2d       	mov	r16, r15
    39fa:	0f 15       	cp	r16, r15
    39fc:	68 f4       	brcc	.+26     	; 0x3a18 <vfprintf+0x612>
    39fe:	b6 01       	movw	r22, r12
    3a00:	80 e2       	ldi	r24, 0x20	; 32
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	3b 8b       	std	Y+19, r19	; 0x13
    3a06:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3a0a:	0f 5f       	subi	r16, 0xFF	; 255
    3a0c:	3b 89       	ldd	r19, Y+19	; 0x13
    3a0e:	f5 cf       	rjmp	.-22     	; 0x39fa <vfprintf+0x5f4>
    3a10:	0f 15       	cp	r16, r15
    3a12:	10 f4       	brcc	.+4      	; 0x3a18 <vfprintf+0x612>
    3a14:	f0 1a       	sub	r15, r16
    3a16:	01 c0       	rjmp	.+2      	; 0x3a1a <vfprintf+0x614>
    3a18:	f1 2c       	mov	r15, r1
    3a1a:	34 ff       	sbrs	r19, 4
    3a1c:	12 c0       	rjmp	.+36     	; 0x3a42 <vfprintf+0x63c>
    3a1e:	b6 01       	movw	r22, r12
    3a20:	80 e3       	ldi	r24, 0x30	; 48
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	3b 8b       	std	Y+19, r19	; 0x13
    3a26:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3a2a:	3b 89       	ldd	r19, Y+19	; 0x13
    3a2c:	32 ff       	sbrs	r19, 2
    3a2e:	17 c0       	rjmp	.+46     	; 0x3a5e <vfprintf+0x658>
    3a30:	31 fd       	sbrc	r19, 1
    3a32:	03 c0       	rjmp	.+6      	; 0x3a3a <vfprintf+0x634>
    3a34:	88 e7       	ldi	r24, 0x78	; 120
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	02 c0       	rjmp	.+4      	; 0x3a3e <vfprintf+0x638>
    3a3a:	88 e5       	ldi	r24, 0x58	; 88
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	b6 01       	movw	r22, r12
    3a40:	0c c0       	rjmp	.+24     	; 0x3a5a <vfprintf+0x654>
    3a42:	83 2f       	mov	r24, r19
    3a44:	86 78       	andi	r24, 0x86	; 134
    3a46:	59 f0       	breq	.+22     	; 0x3a5e <vfprintf+0x658>
    3a48:	31 ff       	sbrs	r19, 1
    3a4a:	02 c0       	rjmp	.+4      	; 0x3a50 <vfprintf+0x64a>
    3a4c:	8b e2       	ldi	r24, 0x2B	; 43
    3a4e:	01 c0       	rjmp	.+2      	; 0x3a52 <vfprintf+0x64c>
    3a50:	80 e2       	ldi	r24, 0x20	; 32
    3a52:	37 fd       	sbrc	r19, 7
    3a54:	8d e2       	ldi	r24, 0x2D	; 45
    3a56:	b6 01       	movw	r22, r12
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3a5e:	e1 16       	cp	r14, r17
    3a60:	38 f4       	brcc	.+14     	; 0x3a70 <vfprintf+0x66a>
    3a62:	b6 01       	movw	r22, r12
    3a64:	80 e3       	ldi	r24, 0x30	; 48
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3a6c:	11 50       	subi	r17, 0x01	; 1
    3a6e:	f7 cf       	rjmp	.-18     	; 0x3a5e <vfprintf+0x658>
    3a70:	ea 94       	dec	r14
    3a72:	f3 01       	movw	r30, r6
    3a74:	ee 0d       	add	r30, r14
    3a76:	f1 1d       	adc	r31, r1
    3a78:	80 81       	ld	r24, Z
    3a7a:	b6 01       	movw	r22, r12
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3a82:	e1 10       	cpse	r14, r1
    3a84:	f5 cf       	rjmp	.-22     	; 0x3a70 <vfprintf+0x66a>
    3a86:	14 c0       	rjmp	.+40     	; 0x3ab0 <vfprintf+0x6aa>
    3a88:	f4 e0       	ldi	r31, 0x04	; 4
    3a8a:	ff 15       	cp	r31, r15
    3a8c:	58 f5       	brcc	.+86     	; 0x3ae4 <vfprintf+0x6de>
    3a8e:	84 e0       	ldi	r24, 0x04	; 4
    3a90:	f8 1a       	sub	r15, r24
    3a92:	33 fe       	sbrs	r3, 3
    3a94:	1e c0       	rjmp	.+60     	; 0x3ad2 <vfprintf+0x6cc>
    3a96:	21 10       	cpse	r2, r1
    3a98:	26 c0       	rjmp	.+76     	; 0x3ae6 <vfprintf+0x6e0>
    3a9a:	03 ff       	sbrs	r16, 3
    3a9c:	2a c0       	rjmp	.+84     	; 0x3af2 <vfprintf+0x6ec>
    3a9e:	04 ed       	ldi	r16, 0xD4	; 212
    3aa0:	12 e0       	ldi	r17, 0x02	; 2
    3aa2:	f3 2d       	mov	r31, r3
    3aa4:	f0 71       	andi	r31, 0x10	; 16
    3aa6:	3f 2e       	mov	r3, r31
    3aa8:	f8 01       	movw	r30, r16
    3aaa:	84 91       	lpm	r24, Z
    3aac:	81 11       	cpse	r24, r1
    3aae:	24 c0       	rjmp	.+72     	; 0x3af8 <vfprintf+0x6f2>
    3ab0:	ff 20       	and	r15, r15
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <vfprintf+0x6b0>
    3ab4:	e5 cc       	rjmp	.-1590   	; 0x3480 <vfprintf+0x7a>
    3ab6:	b6 01       	movw	r22, r12
    3ab8:	80 e2       	ldi	r24, 0x20	; 32
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3ac0:	fa 94       	dec	r15
    3ac2:	f6 cf       	rjmp	.-20     	; 0x3ab0 <vfprintf+0x6aa>
    3ac4:	f6 01       	movw	r30, r12
    3ac6:	86 81       	ldd	r24, Z+6	; 0x06
    3ac8:	97 81       	ldd	r25, Z+7	; 0x07
    3aca:	26 c0       	rjmp	.+76     	; 0x3b18 <vfprintf+0x712>
    3acc:	8f ef       	ldi	r24, 0xFF	; 255
    3ace:	9f ef       	ldi	r25, 0xFF	; 255
    3ad0:	23 c0       	rjmp	.+70     	; 0x3b18 <vfprintf+0x712>
    3ad2:	b6 01       	movw	r22, r12
    3ad4:	80 e2       	ldi	r24, 0x20	; 32
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3adc:	fa 94       	dec	r15
    3ade:	f1 10       	cpse	r15, r1
    3ae0:	f8 cf       	rjmp	.-16     	; 0x3ad2 <vfprintf+0x6cc>
    3ae2:	d9 cf       	rjmp	.-78     	; 0x3a96 <vfprintf+0x690>
    3ae4:	f1 2c       	mov	r15, r1
    3ae6:	b6 01       	movw	r22, r12
    3ae8:	82 2d       	mov	r24, r2
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3af0:	d4 cf       	rjmp	.-88     	; 0x3a9a <vfprintf+0x694>
    3af2:	08 ed       	ldi	r16, 0xD8	; 216
    3af4:	12 e0       	ldi	r17, 0x02	; 2
    3af6:	d5 cf       	rjmp	.-86     	; 0x3aa2 <vfprintf+0x69c>
    3af8:	31 10       	cpse	r3, r1
    3afa:	80 52       	subi	r24, 0x20	; 32
    3afc:	b6 01       	movw	r22, r12
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <fputc>
    3b04:	0f 5f       	subi	r16, 0xFF	; 255
    3b06:	1f 4f       	sbci	r17, 0xFF	; 255
    3b08:	cf cf       	rjmp	.-98     	; 0x3aa8 <vfprintf+0x6a2>
    3b0a:	23 e0       	ldi	r18, 0x03	; 3
    3b0c:	2f 15       	cp	r18, r15
    3b0e:	10 f4       	brcc	.+4      	; 0x3b14 <vfprintf+0x70e>
    3b10:	83 e0       	ldi	r24, 0x03	; 3
    3b12:	be cf       	rjmp	.-132    	; 0x3a90 <vfprintf+0x68a>
    3b14:	f1 2c       	mov	r15, r1
    3b16:	c1 cf       	rjmp	.-126    	; 0x3a9a <vfprintf+0x694>
    3b18:	63 96       	adiw	r28, 0x13	; 19
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	de bf       	out	0x3e, r29	; 62
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	ff 90       	pop	r15
    3b28:	ef 90       	pop	r14
    3b2a:	df 90       	pop	r13
    3b2c:	cf 90       	pop	r12
    3b2e:	bf 90       	pop	r11
    3b30:	af 90       	pop	r10
    3b32:	9f 90       	pop	r9
    3b34:	8f 90       	pop	r8
    3b36:	7f 90       	pop	r7
    3b38:	6f 90       	pop	r6
    3b3a:	5f 90       	pop	r5
    3b3c:	4f 90       	pop	r4
    3b3e:	3f 90       	pop	r3
    3b40:	2f 90       	pop	r2
    3b42:	08 95       	ret

00003b44 <__divmodhi4>:
    3b44:	97 fb       	bst	r25, 7
    3b46:	07 2e       	mov	r0, r23
    3b48:	16 f4       	brtc	.+4      	; 0x3b4e <__divmodhi4+0xa>
    3b4a:	00 94       	com	r0
    3b4c:	07 d0       	rcall	.+14     	; 0x3b5c <__divmodhi4_neg1>
    3b4e:	77 fd       	sbrc	r23, 7
    3b50:	09 d0       	rcall	.+18     	; 0x3b64 <__divmodhi4_neg2>
    3b52:	0e 94 fe 1d 	call	0x3bfc	; 0x3bfc <__udivmodhi4>
    3b56:	07 fc       	sbrc	r0, 7
    3b58:	05 d0       	rcall	.+10     	; 0x3b64 <__divmodhi4_neg2>
    3b5a:	3e f4       	brtc	.+14     	; 0x3b6a <__divmodhi4_exit>

00003b5c <__divmodhi4_neg1>:
    3b5c:	90 95       	com	r25
    3b5e:	81 95       	neg	r24
    3b60:	9f 4f       	sbci	r25, 0xFF	; 255
    3b62:	08 95       	ret

00003b64 <__divmodhi4_neg2>:
    3b64:	70 95       	com	r23
    3b66:	61 95       	neg	r22
    3b68:	7f 4f       	sbci	r23, 0xFF	; 255

00003b6a <__divmodhi4_exit>:
    3b6a:	08 95       	ret

00003b6c <__udivmodsi4>:
    3b6c:	a1 e2       	ldi	r26, 0x21	; 33
    3b6e:	1a 2e       	mov	r1, r26
    3b70:	aa 1b       	sub	r26, r26
    3b72:	bb 1b       	sub	r27, r27
    3b74:	fd 01       	movw	r30, r26
    3b76:	0d c0       	rjmp	.+26     	; 0x3b92 <__udivmodsi4_ep>

00003b78 <__udivmodsi4_loop>:
    3b78:	aa 1f       	adc	r26, r26
    3b7a:	bb 1f       	adc	r27, r27
    3b7c:	ee 1f       	adc	r30, r30
    3b7e:	ff 1f       	adc	r31, r31
    3b80:	a2 17       	cp	r26, r18
    3b82:	b3 07       	cpc	r27, r19
    3b84:	e4 07       	cpc	r30, r20
    3b86:	f5 07       	cpc	r31, r21
    3b88:	20 f0       	brcs	.+8      	; 0x3b92 <__udivmodsi4_ep>
    3b8a:	a2 1b       	sub	r26, r18
    3b8c:	b3 0b       	sbc	r27, r19
    3b8e:	e4 0b       	sbc	r30, r20
    3b90:	f5 0b       	sbc	r31, r21

00003b92 <__udivmodsi4_ep>:
    3b92:	66 1f       	adc	r22, r22
    3b94:	77 1f       	adc	r23, r23
    3b96:	88 1f       	adc	r24, r24
    3b98:	99 1f       	adc	r25, r25
    3b9a:	1a 94       	dec	r1
    3b9c:	69 f7       	brne	.-38     	; 0x3b78 <__udivmodsi4_loop>
    3b9e:	60 95       	com	r22
    3ba0:	70 95       	com	r23
    3ba2:	80 95       	com	r24
    3ba4:	90 95       	com	r25
    3ba6:	9b 01       	movw	r18, r22
    3ba8:	ac 01       	movw	r20, r24
    3baa:	bd 01       	movw	r22, r26
    3bac:	cf 01       	movw	r24, r30
    3bae:	08 95       	ret

00003bb0 <__tablejump2__>:
    3bb0:	ee 0f       	add	r30, r30
    3bb2:	ff 1f       	adc	r31, r31
    3bb4:	88 1f       	adc	r24, r24
    3bb6:	8b bf       	out	0x3b, r24	; 59
    3bb8:	07 90       	elpm	r0, Z+
    3bba:	f6 91       	elpm	r31, Z
    3bbc:	e0 2d       	mov	r30, r0
    3bbe:	19 94       	eijmp

00003bc0 <__ashrdi3>:
    3bc0:	97 fb       	bst	r25, 7
    3bc2:	10 f8       	bld	r1, 0

00003bc4 <__lshrdi3>:
    3bc4:	16 94       	lsr	r1
    3bc6:	00 08       	sbc	r0, r0
    3bc8:	0f 93       	push	r16
    3bca:	08 30       	cpi	r16, 0x08	; 8
    3bcc:	98 f0       	brcs	.+38     	; 0x3bf4 <__lshrdi3+0x30>
    3bce:	08 50       	subi	r16, 0x08	; 8
    3bd0:	23 2f       	mov	r18, r19
    3bd2:	34 2f       	mov	r19, r20
    3bd4:	45 2f       	mov	r20, r21
    3bd6:	56 2f       	mov	r21, r22
    3bd8:	67 2f       	mov	r22, r23
    3bda:	78 2f       	mov	r23, r24
    3bdc:	89 2f       	mov	r24, r25
    3bde:	90 2d       	mov	r25, r0
    3be0:	f4 cf       	rjmp	.-24     	; 0x3bca <__lshrdi3+0x6>
    3be2:	05 94       	asr	r0
    3be4:	97 95       	ror	r25
    3be6:	87 95       	ror	r24
    3be8:	77 95       	ror	r23
    3bea:	67 95       	ror	r22
    3bec:	57 95       	ror	r21
    3bee:	47 95       	ror	r20
    3bf0:	37 95       	ror	r19
    3bf2:	27 95       	ror	r18
    3bf4:	0a 95       	dec	r16
    3bf6:	aa f7       	brpl	.-22     	; 0x3be2 <__lshrdi3+0x1e>
    3bf8:	0f 91       	pop	r16
    3bfa:	08 95       	ret

00003bfc <__udivmodhi4>:
    3bfc:	aa 1b       	sub	r26, r26
    3bfe:	bb 1b       	sub	r27, r27
    3c00:	51 e1       	ldi	r21, 0x11	; 17
    3c02:	07 c0       	rjmp	.+14     	; 0x3c12 <__udivmodhi4_ep>

00003c04 <__udivmodhi4_loop>:
    3c04:	aa 1f       	adc	r26, r26
    3c06:	bb 1f       	adc	r27, r27
    3c08:	a6 17       	cp	r26, r22
    3c0a:	b7 07       	cpc	r27, r23
    3c0c:	10 f0       	brcs	.+4      	; 0x3c12 <__udivmodhi4_ep>
    3c0e:	a6 1b       	sub	r26, r22
    3c10:	b7 0b       	sbc	r27, r23

00003c12 <__udivmodhi4_ep>:
    3c12:	88 1f       	adc	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	5a 95       	dec	r21
    3c18:	a9 f7       	brne	.-22     	; 0x3c04 <__udivmodhi4_loop>
    3c1a:	80 95       	com	r24
    3c1c:	90 95       	com	r25
    3c1e:	bc 01       	movw	r22, r24
    3c20:	cd 01       	movw	r24, r26
    3c22:	08 95       	ret

00003c24 <__ftoa_engine>:
    3c24:	28 30       	cpi	r18, 0x08	; 8
    3c26:	08 f0       	brcs	.+2      	; 0x3c2a <__ftoa_engine+0x6>
    3c28:	27 e0       	ldi	r18, 0x07	; 7
    3c2a:	33 27       	eor	r19, r19
    3c2c:	da 01       	movw	r26, r20
    3c2e:	99 0f       	add	r25, r25
    3c30:	31 1d       	adc	r19, r1
    3c32:	87 fd       	sbrc	r24, 7
    3c34:	91 60       	ori	r25, 0x01	; 1
    3c36:	00 96       	adiw	r24, 0x00	; 0
    3c38:	61 05       	cpc	r22, r1
    3c3a:	71 05       	cpc	r23, r1
    3c3c:	39 f4       	brne	.+14     	; 0x3c4c <__ftoa_engine+0x28>
    3c3e:	32 60       	ori	r19, 0x02	; 2
    3c40:	2e 5f       	subi	r18, 0xFE	; 254
    3c42:	3d 93       	st	X+, r19
    3c44:	30 e3       	ldi	r19, 0x30	; 48
    3c46:	2a 95       	dec	r18
    3c48:	e1 f7       	brne	.-8      	; 0x3c42 <__ftoa_engine+0x1e>
    3c4a:	08 95       	ret
    3c4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c4e:	30 f0       	brcs	.+12     	; 0x3c5c <__ftoa_engine+0x38>
    3c50:	80 38       	cpi	r24, 0x80	; 128
    3c52:	71 05       	cpc	r23, r1
    3c54:	61 05       	cpc	r22, r1
    3c56:	09 f0       	breq	.+2      	; 0x3c5a <__ftoa_engine+0x36>
    3c58:	3c 5f       	subi	r19, 0xFC	; 252
    3c5a:	3c 5f       	subi	r19, 0xFC	; 252
    3c5c:	3d 93       	st	X+, r19
    3c5e:	91 30       	cpi	r25, 0x01	; 1
    3c60:	08 f0       	brcs	.+2      	; 0x3c64 <__ftoa_engine+0x40>
    3c62:	80 68       	ori	r24, 0x80	; 128
    3c64:	91 1d       	adc	r25, r1
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	1f 93       	push	r17
    3c6c:	0f 93       	push	r16
    3c6e:	ff 92       	push	r15
    3c70:	ef 92       	push	r14
    3c72:	19 2f       	mov	r17, r25
    3c74:	98 7f       	andi	r25, 0xF8	; 248
    3c76:	96 95       	lsr	r25
    3c78:	e9 2f       	mov	r30, r25
    3c7a:	96 95       	lsr	r25
    3c7c:	96 95       	lsr	r25
    3c7e:	e9 0f       	add	r30, r25
    3c80:	ff 27       	eor	r31, r31
    3c82:	ea 5c       	subi	r30, 0xCA	; 202
    3c84:	fc 4f       	sbci	r31, 0xFC	; 252
    3c86:	99 27       	eor	r25, r25
    3c88:	33 27       	eor	r19, r19
    3c8a:	ee 24       	eor	r14, r14
    3c8c:	ff 24       	eor	r15, r15
    3c8e:	a7 01       	movw	r20, r14
    3c90:	e7 01       	movw	r28, r14
    3c92:	05 90       	lpm	r0, Z+
    3c94:	08 94       	sec
    3c96:	07 94       	ror	r0
    3c98:	28 f4       	brcc	.+10     	; 0x3ca4 <__ftoa_engine+0x80>
    3c9a:	36 0f       	add	r19, r22
    3c9c:	e7 1e       	adc	r14, r23
    3c9e:	f8 1e       	adc	r15, r24
    3ca0:	49 1f       	adc	r20, r25
    3ca2:	51 1d       	adc	r21, r1
    3ca4:	66 0f       	add	r22, r22
    3ca6:	77 1f       	adc	r23, r23
    3ca8:	88 1f       	adc	r24, r24
    3caa:	99 1f       	adc	r25, r25
    3cac:	06 94       	lsr	r0
    3cae:	a1 f7       	brne	.-24     	; 0x3c98 <__ftoa_engine+0x74>
    3cb0:	05 90       	lpm	r0, Z+
    3cb2:	07 94       	ror	r0
    3cb4:	28 f4       	brcc	.+10     	; 0x3cc0 <__ftoa_engine+0x9c>
    3cb6:	e7 0e       	add	r14, r23
    3cb8:	f8 1e       	adc	r15, r24
    3cba:	49 1f       	adc	r20, r25
    3cbc:	56 1f       	adc	r21, r22
    3cbe:	c1 1d       	adc	r28, r1
    3cc0:	77 0f       	add	r23, r23
    3cc2:	88 1f       	adc	r24, r24
    3cc4:	99 1f       	adc	r25, r25
    3cc6:	66 1f       	adc	r22, r22
    3cc8:	06 94       	lsr	r0
    3cca:	a1 f7       	brne	.-24     	; 0x3cb4 <__ftoa_engine+0x90>
    3ccc:	05 90       	lpm	r0, Z+
    3cce:	07 94       	ror	r0
    3cd0:	28 f4       	brcc	.+10     	; 0x3cdc <__ftoa_engine+0xb8>
    3cd2:	f8 0e       	add	r15, r24
    3cd4:	49 1f       	adc	r20, r25
    3cd6:	56 1f       	adc	r21, r22
    3cd8:	c7 1f       	adc	r28, r23
    3cda:	d1 1d       	adc	r29, r1
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	66 1f       	adc	r22, r22
    3ce2:	77 1f       	adc	r23, r23
    3ce4:	06 94       	lsr	r0
    3ce6:	a1 f7       	brne	.-24     	; 0x3cd0 <__ftoa_engine+0xac>
    3ce8:	05 90       	lpm	r0, Z+
    3cea:	07 94       	ror	r0
    3cec:	20 f4       	brcc	.+8      	; 0x3cf6 <__ftoa_engine+0xd2>
    3cee:	49 0f       	add	r20, r25
    3cf0:	56 1f       	adc	r21, r22
    3cf2:	c7 1f       	adc	r28, r23
    3cf4:	d8 1f       	adc	r29, r24
    3cf6:	99 0f       	add	r25, r25
    3cf8:	66 1f       	adc	r22, r22
    3cfa:	77 1f       	adc	r23, r23
    3cfc:	88 1f       	adc	r24, r24
    3cfe:	06 94       	lsr	r0
    3d00:	a9 f7       	brne	.-22     	; 0x3cec <__ftoa_engine+0xc8>
    3d02:	84 91       	lpm	r24, Z
    3d04:	10 95       	com	r17
    3d06:	17 70       	andi	r17, 0x07	; 7
    3d08:	41 f0       	breq	.+16     	; 0x3d1a <__ftoa_engine+0xf6>
    3d0a:	d6 95       	lsr	r29
    3d0c:	c7 95       	ror	r28
    3d0e:	57 95       	ror	r21
    3d10:	47 95       	ror	r20
    3d12:	f7 94       	ror	r15
    3d14:	e7 94       	ror	r14
    3d16:	1a 95       	dec	r17
    3d18:	c1 f7       	brne	.-16     	; 0x3d0a <__ftoa_engine+0xe6>
    3d1a:	ec ed       	ldi	r30, 0xDC	; 220
    3d1c:	f2 e0       	ldi	r31, 0x02	; 2
    3d1e:	68 94       	set
    3d20:	15 90       	lpm	r1, Z+
    3d22:	15 91       	lpm	r17, Z+
    3d24:	35 91       	lpm	r19, Z+
    3d26:	65 91       	lpm	r22, Z+
    3d28:	95 91       	lpm	r25, Z+
    3d2a:	05 90       	lpm	r0, Z+
    3d2c:	7f e2       	ldi	r23, 0x2F	; 47
    3d2e:	73 95       	inc	r23
    3d30:	e1 18       	sub	r14, r1
    3d32:	f1 0a       	sbc	r15, r17
    3d34:	43 0b       	sbc	r20, r19
    3d36:	56 0b       	sbc	r21, r22
    3d38:	c9 0b       	sbc	r28, r25
    3d3a:	d0 09       	sbc	r29, r0
    3d3c:	c0 f7       	brcc	.-16     	; 0x3d2e <__ftoa_engine+0x10a>
    3d3e:	e1 0c       	add	r14, r1
    3d40:	f1 1e       	adc	r15, r17
    3d42:	43 1f       	adc	r20, r19
    3d44:	56 1f       	adc	r21, r22
    3d46:	c9 1f       	adc	r28, r25
    3d48:	d0 1d       	adc	r29, r0
    3d4a:	7e f4       	brtc	.+30     	; 0x3d6a <__ftoa_engine+0x146>
    3d4c:	70 33       	cpi	r23, 0x30	; 48
    3d4e:	11 f4       	brne	.+4      	; 0x3d54 <__ftoa_engine+0x130>
    3d50:	8a 95       	dec	r24
    3d52:	e6 cf       	rjmp	.-52     	; 0x3d20 <__ftoa_engine+0xfc>
    3d54:	e8 94       	clt
    3d56:	01 50       	subi	r16, 0x01	; 1
    3d58:	30 f0       	brcs	.+12     	; 0x3d66 <__ftoa_engine+0x142>
    3d5a:	08 0f       	add	r16, r24
    3d5c:	0a f4       	brpl	.+2      	; 0x3d60 <__ftoa_engine+0x13c>
    3d5e:	00 27       	eor	r16, r16
    3d60:	02 17       	cp	r16, r18
    3d62:	08 f4       	brcc	.+2      	; 0x3d66 <__ftoa_engine+0x142>
    3d64:	20 2f       	mov	r18, r16
    3d66:	23 95       	inc	r18
    3d68:	02 2f       	mov	r16, r18
    3d6a:	7a 33       	cpi	r23, 0x3A	; 58
    3d6c:	28 f0       	brcs	.+10     	; 0x3d78 <__ftoa_engine+0x154>
    3d6e:	79 e3       	ldi	r23, 0x39	; 57
    3d70:	7d 93       	st	X+, r23
    3d72:	2a 95       	dec	r18
    3d74:	e9 f7       	brne	.-6      	; 0x3d70 <__ftoa_engine+0x14c>
    3d76:	10 c0       	rjmp	.+32     	; 0x3d98 <__ftoa_engine+0x174>
    3d78:	7d 93       	st	X+, r23
    3d7a:	2a 95       	dec	r18
    3d7c:	89 f6       	brne	.-94     	; 0x3d20 <__ftoa_engine+0xfc>
    3d7e:	06 94       	lsr	r0
    3d80:	97 95       	ror	r25
    3d82:	67 95       	ror	r22
    3d84:	37 95       	ror	r19
    3d86:	17 95       	ror	r17
    3d88:	17 94       	ror	r1
    3d8a:	e1 18       	sub	r14, r1
    3d8c:	f1 0a       	sbc	r15, r17
    3d8e:	43 0b       	sbc	r20, r19
    3d90:	56 0b       	sbc	r21, r22
    3d92:	c9 0b       	sbc	r28, r25
    3d94:	d0 09       	sbc	r29, r0
    3d96:	98 f0       	brcs	.+38     	; 0x3dbe <__ftoa_engine+0x19a>
    3d98:	23 95       	inc	r18
    3d9a:	7e 91       	ld	r23, -X
    3d9c:	73 95       	inc	r23
    3d9e:	7a 33       	cpi	r23, 0x3A	; 58
    3da0:	08 f0       	brcs	.+2      	; 0x3da4 <__ftoa_engine+0x180>
    3da2:	70 e3       	ldi	r23, 0x30	; 48
    3da4:	7c 93       	st	X, r23
    3da6:	20 13       	cpse	r18, r16
    3da8:	b8 f7       	brcc	.-18     	; 0x3d98 <__ftoa_engine+0x174>
    3daa:	7e 91       	ld	r23, -X
    3dac:	70 61       	ori	r23, 0x10	; 16
    3dae:	7d 93       	st	X+, r23
    3db0:	30 f0       	brcs	.+12     	; 0x3dbe <__ftoa_engine+0x19a>
    3db2:	83 95       	inc	r24
    3db4:	71 e3       	ldi	r23, 0x31	; 49
    3db6:	7d 93       	st	X+, r23
    3db8:	70 e3       	ldi	r23, 0x30	; 48
    3dba:	2a 95       	dec	r18
    3dbc:	e1 f7       	brne	.-8      	; 0x3db6 <__ftoa_engine+0x192>
    3dbe:	11 24       	eor	r1, r1
    3dc0:	ef 90       	pop	r14
    3dc2:	ff 90       	pop	r15
    3dc4:	0f 91       	pop	r16
    3dc6:	1f 91       	pop	r17
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	99 27       	eor	r25, r25
    3dce:	87 fd       	sbrc	r24, 7
    3dd0:	90 95       	com	r25
    3dd2:	08 95       	ret

00003dd4 <strnlen_P>:
    3dd4:	fc 01       	movw	r30, r24
    3dd6:	05 90       	lpm	r0, Z+
    3dd8:	61 50       	subi	r22, 0x01	; 1
    3dda:	70 40       	sbci	r23, 0x00	; 0
    3ddc:	01 10       	cpse	r0, r1
    3dde:	d8 f7       	brcc	.-10     	; 0x3dd6 <strnlen_P+0x2>
    3de0:	80 95       	com	r24
    3de2:	90 95       	com	r25
    3de4:	8e 0f       	add	r24, r30
    3de6:	9f 1f       	adc	r25, r31
    3de8:	08 95       	ret

00003dea <memset>:
    3dea:	dc 01       	movw	r26, r24
    3dec:	01 c0       	rjmp	.+2      	; 0x3df0 <memset+0x6>
    3dee:	6d 93       	st	X+, r22
    3df0:	41 50       	subi	r20, 0x01	; 1
    3df2:	50 40       	sbci	r21, 0x00	; 0
    3df4:	e0 f7       	brcc	.-8      	; 0x3dee <memset+0x4>
    3df6:	08 95       	ret

00003df8 <strnlen>:
    3df8:	fc 01       	movw	r30, r24
    3dfa:	61 50       	subi	r22, 0x01	; 1
    3dfc:	70 40       	sbci	r23, 0x00	; 0
    3dfe:	01 90       	ld	r0, Z+
    3e00:	01 10       	cpse	r0, r1
    3e02:	d8 f7       	brcc	.-10     	; 0x3dfa <strnlen+0x2>
    3e04:	80 95       	com	r24
    3e06:	90 95       	com	r25
    3e08:	8e 0f       	add	r24, r30
    3e0a:	9f 1f       	adc	r25, r31
    3e0c:	08 95       	ret

00003e0e <fprintf>:
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	ae 01       	movw	r20, r28
    3e18:	46 5f       	subi	r20, 0xF6	; 246
    3e1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1c:	68 85       	ldd	r22, Y+8	; 0x08
    3e1e:	79 85       	ldd	r23, Y+9	; 0x09
    3e20:	8e 81       	ldd	r24, Y+6	; 0x06
    3e22:	9f 81       	ldd	r25, Y+7	; 0x07
    3e24:	0e 94 03 1a 	call	0x3406	; 0x3406 <vfprintf>
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	08 95       	ret

00003e2e <fputc>:
    3e2e:	0f 93       	push	r16
    3e30:	1f 93       	push	r17
    3e32:	cf 93       	push	r28
    3e34:	df 93       	push	r29
    3e36:	fb 01       	movw	r30, r22
    3e38:	23 81       	ldd	r18, Z+3	; 0x03
    3e3a:	21 fd       	sbrc	r18, 1
    3e3c:	03 c0       	rjmp	.+6      	; 0x3e44 <fputc+0x16>
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	9f ef       	ldi	r25, 0xFF	; 255
    3e42:	28 c0       	rjmp	.+80     	; 0x3e94 <fputc+0x66>
    3e44:	22 ff       	sbrs	r18, 2
    3e46:	16 c0       	rjmp	.+44     	; 0x3e74 <fputc+0x46>
    3e48:	46 81       	ldd	r20, Z+6	; 0x06
    3e4a:	57 81       	ldd	r21, Z+7	; 0x07
    3e4c:	24 81       	ldd	r18, Z+4	; 0x04
    3e4e:	35 81       	ldd	r19, Z+5	; 0x05
    3e50:	42 17       	cp	r20, r18
    3e52:	53 07       	cpc	r21, r19
    3e54:	44 f4       	brge	.+16     	; 0x3e66 <fputc+0x38>
    3e56:	a0 81       	ld	r26, Z
    3e58:	b1 81       	ldd	r27, Z+1	; 0x01
    3e5a:	9d 01       	movw	r18, r26
    3e5c:	2f 5f       	subi	r18, 0xFF	; 255
    3e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e60:	20 83       	st	Z, r18
    3e62:	31 83       	std	Z+1, r19	; 0x01
    3e64:	8c 93       	st	X, r24
    3e66:	26 81       	ldd	r18, Z+6	; 0x06
    3e68:	37 81       	ldd	r19, Z+7	; 0x07
    3e6a:	2f 5f       	subi	r18, 0xFF	; 255
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	26 83       	std	Z+6, r18	; 0x06
    3e70:	37 83       	std	Z+7, r19	; 0x07
    3e72:	10 c0       	rjmp	.+32     	; 0x3e94 <fputc+0x66>
    3e74:	eb 01       	movw	r28, r22
    3e76:	09 2f       	mov	r16, r25
    3e78:	18 2f       	mov	r17, r24
    3e7a:	00 84       	ldd	r0, Z+8	; 0x08
    3e7c:	f1 85       	ldd	r31, Z+9	; 0x09
    3e7e:	e0 2d       	mov	r30, r0
    3e80:	19 95       	eicall
    3e82:	89 2b       	or	r24, r25
    3e84:	e1 f6       	brne	.-72     	; 0x3e3e <fputc+0x10>
    3e86:	8e 81       	ldd	r24, Y+6	; 0x06
    3e88:	9f 81       	ldd	r25, Y+7	; 0x07
    3e8a:	01 96       	adiw	r24, 0x01	; 1
    3e8c:	8e 83       	std	Y+6, r24	; 0x06
    3e8e:	9f 83       	std	Y+7, r25	; 0x07
    3e90:	81 2f       	mov	r24, r17
    3e92:	90 2f       	mov	r25, r16
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	1f 91       	pop	r17
    3e9a:	0f 91       	pop	r16
    3e9c:	08 95       	ret

00003e9e <__ultoa_invert>:
    3e9e:	fa 01       	movw	r30, r20
    3ea0:	aa 27       	eor	r26, r26
    3ea2:	28 30       	cpi	r18, 0x08	; 8
    3ea4:	51 f1       	breq	.+84     	; 0x3efa <__ultoa_invert+0x5c>
    3ea6:	20 31       	cpi	r18, 0x10	; 16
    3ea8:	81 f1       	breq	.+96     	; 0x3f0a <__ultoa_invert+0x6c>
    3eaa:	e8 94       	clt
    3eac:	6f 93       	push	r22
    3eae:	6e 7f       	andi	r22, 0xFE	; 254
    3eb0:	6e 5f       	subi	r22, 0xFE	; 254
    3eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    3eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb8:	af 4f       	sbci	r26, 0xFF	; 255
    3eba:	b1 e0       	ldi	r27, 0x01	; 1
    3ebc:	3e d0       	rcall	.+124    	; 0x3f3a <__ultoa_invert+0x9c>
    3ebe:	b4 e0       	ldi	r27, 0x04	; 4
    3ec0:	3c d0       	rcall	.+120    	; 0x3f3a <__ultoa_invert+0x9c>
    3ec2:	67 0f       	add	r22, r23
    3ec4:	78 1f       	adc	r23, r24
    3ec6:	89 1f       	adc	r24, r25
    3ec8:	9a 1f       	adc	r25, r26
    3eca:	a1 1d       	adc	r26, r1
    3ecc:	68 0f       	add	r22, r24
    3ece:	79 1f       	adc	r23, r25
    3ed0:	8a 1f       	adc	r24, r26
    3ed2:	91 1d       	adc	r25, r1
    3ed4:	a1 1d       	adc	r26, r1
    3ed6:	6a 0f       	add	r22, r26
    3ed8:	71 1d       	adc	r23, r1
    3eda:	81 1d       	adc	r24, r1
    3edc:	91 1d       	adc	r25, r1
    3ede:	a1 1d       	adc	r26, r1
    3ee0:	20 d0       	rcall	.+64     	; 0x3f22 <__ultoa_invert+0x84>
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <__ultoa_invert+0x48>
    3ee4:	68 94       	set
    3ee6:	3f 91       	pop	r19
    3ee8:	2a e0       	ldi	r18, 0x0A	; 10
    3eea:	26 9f       	mul	r18, r22
    3eec:	11 24       	eor	r1, r1
    3eee:	30 19       	sub	r19, r0
    3ef0:	30 5d       	subi	r19, 0xD0	; 208
    3ef2:	31 93       	st	Z+, r19
    3ef4:	de f6       	brtc	.-74     	; 0x3eac <__ultoa_invert+0xe>
    3ef6:	cf 01       	movw	r24, r30
    3ef8:	08 95       	ret
    3efa:	46 2f       	mov	r20, r22
    3efc:	47 70       	andi	r20, 0x07	; 7
    3efe:	40 5d       	subi	r20, 0xD0	; 208
    3f00:	41 93       	st	Z+, r20
    3f02:	b3 e0       	ldi	r27, 0x03	; 3
    3f04:	0f d0       	rcall	.+30     	; 0x3f24 <__ultoa_invert+0x86>
    3f06:	c9 f7       	brne	.-14     	; 0x3efa <__ultoa_invert+0x5c>
    3f08:	f6 cf       	rjmp	.-20     	; 0x3ef6 <__ultoa_invert+0x58>
    3f0a:	46 2f       	mov	r20, r22
    3f0c:	4f 70       	andi	r20, 0x0F	; 15
    3f0e:	40 5d       	subi	r20, 0xD0	; 208
    3f10:	4a 33       	cpi	r20, 0x3A	; 58
    3f12:	18 f0       	brcs	.+6      	; 0x3f1a <__ultoa_invert+0x7c>
    3f14:	49 5d       	subi	r20, 0xD9	; 217
    3f16:	31 fd       	sbrc	r19, 1
    3f18:	40 52       	subi	r20, 0x20	; 32
    3f1a:	41 93       	st	Z+, r20
    3f1c:	02 d0       	rcall	.+4      	; 0x3f22 <__ultoa_invert+0x84>
    3f1e:	a9 f7       	brne	.-22     	; 0x3f0a <__ultoa_invert+0x6c>
    3f20:	ea cf       	rjmp	.-44     	; 0x3ef6 <__ultoa_invert+0x58>
    3f22:	b4 e0       	ldi	r27, 0x04	; 4
    3f24:	a6 95       	lsr	r26
    3f26:	97 95       	ror	r25
    3f28:	87 95       	ror	r24
    3f2a:	77 95       	ror	r23
    3f2c:	67 95       	ror	r22
    3f2e:	ba 95       	dec	r27
    3f30:	c9 f7       	brne	.-14     	; 0x3f24 <__ultoa_invert+0x86>
    3f32:	00 97       	sbiw	r24, 0x00	; 0
    3f34:	61 05       	cpc	r22, r1
    3f36:	71 05       	cpc	r23, r1
    3f38:	08 95       	ret
    3f3a:	9b 01       	movw	r18, r22
    3f3c:	ac 01       	movw	r20, r24
    3f3e:	0a 2e       	mov	r0, r26
    3f40:	06 94       	lsr	r0
    3f42:	57 95       	ror	r21
    3f44:	47 95       	ror	r20
    3f46:	37 95       	ror	r19
    3f48:	27 95       	ror	r18
    3f4a:	ba 95       	dec	r27
    3f4c:	c9 f7       	brne	.-14     	; 0x3f40 <__ultoa_invert+0xa2>
    3f4e:	62 0f       	add	r22, r18
    3f50:	73 1f       	adc	r23, r19
    3f52:	84 1f       	adc	r24, r20
    3f54:	95 1f       	adc	r25, r21
    3f56:	a0 1d       	adc	r26, r0
    3f58:	08 95       	ret

00003f5a <_exit>:
    3f5a:	f8 94       	cli

00003f5c <__stop_program>:
    3f5c:	ff cf       	rjmp	.-2      	; 0x3f5c <__stop_program>
