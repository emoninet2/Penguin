
ostritch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002a4  00802000  000020ea  0000217e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000034c  008022a4  008022a4  00002422  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002422  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ca71  00000000  00000000  00002aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f8d  00000000  00000000  0000f55d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035b9  00000000  00000000  000114ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000168c  00000000  00000000  00014aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000468a  00000000  00000000  00016130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006e28  00000000  00000000  0001a7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008f8  00000000  00000000  000215e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__ctors_end>
       4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
       c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      10:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      14:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      18:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      1c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      20:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      24:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      28:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      2c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      30:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      34:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      38:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      3c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      40:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      44:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      48:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      50:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      54:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      58:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      5c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      60:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      64:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      68:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      6c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      70:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      74:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      78:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      7c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      80:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      84:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      88:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      8c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      90:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      94:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      98:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      9c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      e8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      ec:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
      fc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     100:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     104:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     108:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     10c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     110:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     114:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     118:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     11c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     120:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     124:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     128:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     12c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     130:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     134:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     138:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     13c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     140:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     144:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     148:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     14c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     150:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     154:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     158:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     15c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     160:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     164:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     168:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     16c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     170:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     174:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     178:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     17c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     180:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     184:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     188:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     18c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     190:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     194:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     198:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     19c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1a8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ac:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1b8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1bc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1c8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1cc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1d8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1dc:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e4:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1e8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1ec:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f0:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1f4:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <__vector_125>
     1f8:	0c 94 87 01 	jmp	0x30e	; 0x30e <__bad_interrupt>
     1fc:	d7 09       	sbc	r29, r7
     1fe:	02 0a       	sbc	r0, r18
     200:	d9 0a       	sbc	r13, r25
     202:	02 0a       	sbc	r0, r18
     204:	d9 0a       	sbc	r13, r25
     206:	3d 0a       	sbc	r3, r29
     208:	54 0a       	sbc	r5, r20
     20a:	d9 0a       	sbc	r13, r25
     20c:	ab 0a       	sbc	r10, r27
     20e:	b8 0a       	sbc	r11, r24

00000210 <__trampolines_start>:
     210:	0c 94 ab 0a 	jmp	0x1556	; 0x1556 <USB_Device_ProcessControlRequest+0x20e>
     214:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <USB_Device_ProcessControlRequest+0xbc>
     218:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <USB_Device_ProcessControlRequest+0x228>
     21c:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <USB_Device_ProcessControlRequest+0x160>
     220:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <USB_Device_ProcessControlRequest+0x66>
     224:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <USB_Device_ProcessControlRequest+0x132>
     228:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>

0000022c <ProductString>:
     22c:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
     23c:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
     24c:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

0000025a <ManufacturerString>:
     25a:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     26a:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000274 <LanguageString>:
     274:	04 03 09 04                                         ....

00000278 <ConfigurationDescriptor>:
     278:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     288:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     298:	00 05                                               ..

0000029a <DeviceDescriptor>:
     29a:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
     2aa:	00 01                                               ..

000002ac <GenericReport>:
     2ac:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     2bc:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

000002cc <__ctors_end>:
     2cc:	11 24       	eor	r1, r1
     2ce:	1f be       	out	0x3f, r1	; 63
     2d0:	cf ef       	ldi	r28, 0xFF	; 255
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df e9       	ldi	r29, 0x9F	; 159
     2d6:	de bf       	out	0x3e, r29	; 62
     2d8:	00 e0       	ldi	r16, 0x00	; 0
     2da:	0c bf       	out	0x3c, r16	; 60

000002dc <__do_copy_data>:
     2dc:	12 e2       	ldi	r17, 0x22	; 34
     2de:	a0 e0       	ldi	r26, 0x00	; 0
     2e0:	b0 e2       	ldi	r27, 0x20	; 32
     2e2:	ea ee       	ldi	r30, 0xEA	; 234
     2e4:	f0 e2       	ldi	r31, 0x20	; 32
     2e6:	00 e0       	ldi	r16, 0x00	; 0
     2e8:	0b bf       	out	0x3b, r16	; 59
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <__do_copy_data+0x14>
     2ec:	07 90       	elpm	r0, Z+
     2ee:	0d 92       	st	X+, r0
     2f0:	a4 3a       	cpi	r26, 0xA4	; 164
     2f2:	b1 07       	cpc	r27, r17
     2f4:	d9 f7       	brne	.-10     	; 0x2ec <__do_copy_data+0x10>

000002f6 <__do_clear_bss>:
     2f6:	25 e2       	ldi	r18, 0x25	; 37
     2f8:	a4 ea       	ldi	r26, 0xA4	; 164
     2fa:	b2 e2       	ldi	r27, 0x22	; 34
     2fc:	01 c0       	rjmp	.+2      	; 0x300 <.do_clear_bss_start>

000002fe <.do_clear_bss_loop>:
     2fe:	1d 92       	st	X+, r1

00000300 <.do_clear_bss_start>:
     300:	a0 3f       	cpi	r26, 0xF0	; 240
     302:	b2 07       	cpc	r27, r18
     304:	e1 f7       	brne	.-8      	; 0x2fe <.do_clear_bss_loop>
     306:	0e 94 89 06 	call	0xd12	; 0xd12 <main>
     30a:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <_exit>

0000030e <__bad_interrupt>:
     30e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000312 <arch_spi_master_transmit_byte_val>:
}


static uint8_t arch_spi_master_transmit_byte_val(uint8_t data)
{
	NRF24L01P_SPI.DATA = data;
     312:	80 93 c3 08 	sts	0x08C3, r24
	while(!(SPIC.STATUS &(1<<SPI_IF_bp)));
     316:	e0 ec       	ldi	r30, 0xC0	; 192
     318:	f8 e0       	ldi	r31, 0x08	; 8
     31a:	82 81       	ldd	r24, Z+2	; 0x02
     31c:	88 23       	and	r24, r24
     31e:	ec f7       	brge	.-6      	; 0x31a <arch_spi_master_transmit_byte_val+0x8>
	return SPIC.DATA;
     320:	80 91 c3 08 	lds	r24, 0x08C3
}
     324:	08 95       	ret

00000326 <arch_spi_master_transmit_byte_ref>:

static uint8_t arch_spi_master_transmit_byte_ref(uint8_t *data)
{
	NRF24L01P_SPI.DATA = *data;
     326:	fc 01       	movw	r30, r24
     328:	80 81       	ld	r24, Z
     32a:	80 93 c3 08 	sts	0x08C3, r24
	while(!(NRF24L01P_SPI.STATUS &(1<<SPI_IF_bp)));
     32e:	e0 ec       	ldi	r30, 0xC0	; 192
     330:	f8 e0       	ldi	r31, 0x08	; 8
     332:	82 81       	ldd	r24, Z+2	; 0x02
     334:	88 23       	and	r24, r24
     336:	ec f7       	brge	.-6      	; 0x332 <arch_spi_master_transmit_byte_ref+0xc>
	return NRF24L01P_SPI.DATA;
     338:	80 91 c3 08 	lds	r24, 0x08C3
}
     33c:	08 95       	ret

0000033e <_nrf24l01p_ce_pin>:
#define NRF24L01P_SPI SPIC
#define NRF24L01P_SPI_PORT PORTC


static void arch_nrf24l01p_ce_pin(bool state){
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
     33e:	88 23       	and	r24, r24
     340:	21 f0       	breq	.+8      	; 0x34a <_nrf24l01p_ce_pin+0xc>
     342:	92 e0       	ldi	r25, 0x02	; 2
     344:	90 93 45 06 	sts	0x0645, r25
     348:	03 c0       	rjmp	.+6      	; 0x350 <_nrf24l01p_ce_pin+0x12>
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	90 93 46 06 	sts	0x0646, r25
#include "nrf24l01p.h"


void _nrf24l01p_ce_pin(bool state){
	arch_nrf24l01p_ce_pin(state);
	ce_value = state;
     350:	80 93 af 24 	sts	0x24AF, r24
     354:	08 95       	ret

00000356 <_nrf24l01p_read_register>:
	_nrf24l01p_startup();
	
}


void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	7b 01       	movw	r14, r22
     364:	8a 01       	movw	r16, r20
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
     366:	90 e1       	ldi	r25, 0x10	; 16
     368:	90 93 46 06 	sts	0x0646, r25
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     36c:	10 92 ae 24 	sts	0x24AE, r1
}


void _nrf24l01p_read_register(uint8_t address, uint8_t *dataout, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
     370:	8f 71       	andi	r24, 0x1F	; 31
     372:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     376:	10 16       	cp	r1, r16
     378:	11 06       	cpc	r1, r17
     37a:	94 f4       	brge	.+36     	; 0x3a0 <_nrf24l01p_read_register+0x4a>
     37c:	e7 01       	movw	r28, r14
     37e:	0e 0d       	add	r16, r14
     380:	1f 1d       	adc	r17, r15
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
	*data = NRF24L01P_SPI.DATA;
     382:	0f 2e       	mov	r0, r31
     384:	f0 ec       	ldi	r31, 0xC0	; 192
     386:	ef 2e       	mov	r14, r31
     388:	f8 e0       	ldi	r31, 0x08	; 8
     38a:	ff 2e       	mov	r15, r31
     38c:	f0 2d       	mov	r31, r0
	return NRF24L01P_SPI.DATA;
}

static void arch_spi_master_receive_byte_ref(uint8_t *data){
	//transmit dummy byte
	arch_spi_master_transmit_byte_val(0xFF);
     38e:	8f ef       	ldi	r24, 0xFF	; 255
     390:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	*data = NRF24L01P_SPI.DATA;
     394:	f7 01       	movw	r30, r14
     396:	83 81       	ldd	r24, Z+3	; 0x03
     398:	89 93       	st	Y+, r24
     39a:	c0 17       	cp	r28, r16
     39c:	d1 07       	cpc	r29, r17
     39e:	b9 f7       	brne	.-18     	; 0x38e <_nrf24l01p_read_register+0x38>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     3a0:	80 e1       	ldi	r24, 0x10	; 16
     3a2:	80 93 45 06 	sts	0x0645, r24
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	80 93 ae 24 	sts	0x24AE, r24
	arch_spi_master_transmit_byte_val(address&(_NRF24L01P_REG_ADDRESS_MASK));
	for(int i=0;i<len;i++){
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	ef 90       	pop	r14
     3b8:	08 95       	ret

000003ba <_nrf24l01p_write_register>:
// 	uint8_t temp =  arch_spi_master_transmit_byte_val(0xff);
// 	_nrf24l01p_csn_pin(1);

// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	7b 01       	movw	r14, r22
     3c8:	8a 01       	movw	r16, r20
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
     3ca:	90 e1       	ldi	r25, 0x10	; 16
     3cc:	90 93 46 06 	sts	0x0646, r25
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     3d0:	10 92 ae 24 	sts	0x24AE, r1

// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
     3d4:	8f 71       	andi	r24, 0x1F	; 31
     3d6:	80 62       	ori	r24, 0x20	; 32
     3d8:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<len;i++){
     3dc:	10 16       	cp	r1, r16
     3de:	11 06       	cpc	r1, r17
     3e0:	54 f4       	brge	.+20     	; 0x3f6 <_nrf24l01p_write_register+0x3c>
     3e2:	e7 01       	movw	r28, r14
     3e4:	0e 0d       	add	r16, r14
     3e6:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 93 01 	call	0x326	; 0x326 <arch_spi_master_transmit_byte_ref>
     3ee:	21 96       	adiw	r28, 0x01	; 1
// 	return temp;
// }
void _nrf24l01p_write_register(uint8_t address, uint8_t *datain, int len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
     3f0:	c0 17       	cp	r28, r16
     3f2:	d1 07       	cpc	r29, r17
     3f4:	c9 f7       	brne	.-14     	; 0x3e8 <_nrf24l01p_write_register+0x2e>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     3f6:	80 e1       	ldi	r24, 0x10	; 16
     3f8:	80 93 45 06 	sts	0x0645, r24
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	80 93 ae 24 	sts	0x24AE, r24
	arch_spi_master_transmit_byte_val(( _NRF24L01P_SPI_CMD_WR_REG | (address&(_NRF24L01P_REG_ADDRESS_MASK))));
	for(int i=0;i<len;i++){
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	08 95       	ret

00000410 <_nrf24l01p_write_tx_payload>:
	for(int i=0;i<pay_len;i++){
		arch_spi_master_receive_byte_ref(dataout+ i);
	}
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	7c 01       	movw	r14, r24
     41e:	8b 01       	movw	r16, r22
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	80 93 46 06 	sts	0x0646, r24
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     426:	10 92 ae 24 	sts	0x24AE, r1
	}
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
     42a:	80 ea       	ldi	r24, 0xA0	; 160
     42c:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	for(int i=0;i<pay_len;i++){
     430:	10 16       	cp	r1, r16
     432:	11 06       	cpc	r1, r17
     434:	54 f4       	brge	.+20     	; 0x44a <_nrf24l01p_write_tx_payload+0x3a>
     436:	e7 01       	movw	r28, r14
     438:	0e 0d       	add	r16, r14
     43a:	1f 1d       	adc	r17, r15
		arch_spi_master_transmit_byte_ref(datain+i);
     43c:	ce 01       	movw	r24, r28
     43e:	0e 94 93 01 	call	0x326	; 0x326 <arch_spi_master_transmit_byte_ref>
     442:	21 96       	adiw	r28, 0x01	; 1
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_write_tx_payload(uint8_t *datain, int pay_len){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
	for(int i=0;i<pay_len;i++){
     444:	c0 17       	cp	r28, r16
     446:	d1 07       	cpc	r29, r17
     448:	c9 f7       	brne	.-14     	; 0x43c <_nrf24l01p_write_tx_payload+0x2c>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     44a:	80 e1       	ldi	r24, 0x10	; 16
     44c:	80 93 45 06 	sts	0x0645, r24
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	80 93 ae 24 	sts	0x24AE, r24
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_WR_TX_PAYLOAD);
	for(int i=0;i<pay_len;i++){
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	1f 91       	pop	r17
     45c:	0f 91       	pop	r16
     45e:	ff 90       	pop	r15
     460:	ef 90       	pop	r14
     462:	08 95       	ret

00000464 <_nrf24l01p_flush_rx>:
void _nrf24l01p_flush_tx(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_flush_rx(){
     464:	1f 93       	push	r17
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
     46a:	c0 e4       	ldi	r28, 0x40	; 64
     46c:	d6 e0       	ldi	r29, 0x06	; 6
     46e:	10 e1       	ldi	r17, 0x10	; 16
     470:	1e 83       	std	Y+6, r17	; 0x06
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     472:	10 92 ae 24 	sts	0x24AE, r1
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_TX);
	_nrf24l01p_csn_pin(1);
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
     476:	82 ee       	ldi	r24, 0xE2	; 226
     478:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     47c:	1d 83       	std	Y+5, r17	; 0x05
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	80 93 ae 24 	sts	0x24AE, r24
}
void _nrf24l01p_flush_rx(){
	_nrf24l01p_csn_pin(0);
	arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_FLUSH_RX);
	_nrf24l01p_csn_pin(1);
}
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	08 95       	ret

0000048c <_nrf24l01p_get_status>:
		arch_spi_master_transmit_byte_ref(datain+i);
	}
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
     48c:	1f 93       	push	r17
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
     492:	c0 e4       	ldi	r28, 0x40	; 64
     494:	d6 e0       	ldi	r29, 0x06	; 6
     496:	10 e1       	ldi	r17, 0x10	; 16
     498:	1e 83       	std	Y+6, r17	; 0x06
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     49a:	10 92 ae 24 	sts	0x24AE, r1
	_nrf24l01p_csn_pin(1);
}

int _nrf24l01p_get_status(){
	_nrf24l01p_csn_pin(0);
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
     49e:	8f ef       	ldi	r24, 0xFF	; 255
     4a0:	0e 94 89 01 	call	0x312	; 0x312 <arch_spi_master_transmit_byte_val>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     4a4:	1d 83       	std	Y+5, r17	; 0x05
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	90 93 ae 24 	sts	0x24AE, r25
	_nrf24l01p_csn_pin(0);
	int temp = arch_spi_master_transmit_byte_val(_NRF24L01P_SPI_CMD_NOP);
	_nrf24l01p_csn_pin(1);
	
	return temp;
}
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	08 95       	ret

000004b6 <_nrf24l01p_power_up>:

void _nrf24l01p_power_up(){
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	1f 92       	push	r1
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	be 01       	movw	r22, r28
     4c6:	6f 5f       	subi	r22, 0xFF	; 255
     4c8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PWR_UP;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	82 60       	ori	r24, 0x02	; 2
     4d4:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	be 01       	movw	r22, r28
     4dc:	6f 5f       	subi	r22, 0xFF	; 255
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e6:	8f ee       	ldi	r24, 0xEF	; 239
     4e8:	92 ed       	ldi	r25, 0xD2	; 210
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <_nrf24l01p_power_up+0x34>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <_nrf24l01p_power_up+0x3a>
     4f0:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	mode = _NRF24L01P_MODE_STANDBY;
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	80 93 b0 24 	sts	0x24B0, r24
}
     4f8:	0f 90       	pop	r0
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <_nrf24l01p_power_down>:
void _nrf24l01p_power_down(){
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	1f 92       	push	r1
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     50a:	41 e0       	ldi	r20, 0x01	; 1
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	be 01       	movw	r22, r28
     510:	6f 5f       	subi	r22, 0xFF	; 255
     512:	7f 4f       	sbci	r23, 0xFF	; 255
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PWR_UP;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	8d 7f       	andi	r24, 0xFD	; 253
     51e:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	be 01       	movw	r22, r28
     526:	6f 5f       	subi	r22, 0xFF	; 255
     528:	7f 4f       	sbci	r23, 0xFF	; 255
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_POWER_DOWN;
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	80 93 b0 24 	sts	0x24B0, r24
}
     536:	0f 90       	pop	r0
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <_nrf24l01p_rx_mode>:
void _nrf24l01p_rx_mode(){
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	1f 92       	push	r1
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     548:	41 e0       	ldi	r20, 0x01	; 1
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	be 01       	movw	r22, r28
     54e:	6f 5f       	subi	r22, 0xFF	; 255
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp |= _NRF24L01P_CONFIG_PRIM_RX;
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	81 60       	ori	r24, 0x01	; 1
     55c:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     55e:	41 e0       	ldi	r20, 0x01	; 1
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	be 01       	movw	r22, r28
     564:	6f 5f       	subi	r22, 0xFF	; 255
     566:	7f 4f       	sbci	r23, 0xFF	; 255
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_RX;
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	80 93 b0 24 	sts	0x24B0, r24
}
     574:	0f 90       	pop	r0
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <_nrf24l01p_tx_mode>:
void _nrf24l01p_tx_mode(){
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	1f 92       	push	r1
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     586:	41 e0       	ldi	r20, 0x01	; 1
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp &= ~_NRF24L01P_CONFIG_PRIM_RX;
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	8e 7f       	andi	r24, 0xFE	; 254
     59a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG,&temp,sizeof(temp));
     59c:	41 e0       	ldi	r20, 0x01	; 1
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	mode = _NRF24L01P_MODE_TX;
     5ac:	84 e0       	ldi	r24, 0x04	; 4
     5ae:	80 93 b0 24 	sts	0x24B0, r24
}
     5b2:	0f 90       	pop	r0
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <_nrf24l01p_disable_auto_ack_all_pipes>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
	clr_bit(temp,pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
}
void _nrf24l01p_disable_auto_ack_all_pipes(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	1f 92       	push	r1
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0;
     5c4:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(temp));
     5c6:	41 e0       	ldi	r20, 0x01	; 1
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	be 01       	movw	r22, r28
     5cc:	6f 5f       	subi	r22, 0xFF	; 255
     5ce:	7f 4f       	sbci	r23, 0xFF	; 255
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
}
     5d6:	0f 90       	pop	r0
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <_nrf24l01p_enable_rx_on_pipe>:

void _nrf24l01p_enable_rx_on_pipe(_nrf24l01p_pipe_t pipe){
     5de:	1f 93       	push	r17
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	1f 92       	push	r1
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     5ec:	41 e0       	ldi	r20, 0x01	; 1
     5ee:	50 e0       	ldi	r21, 0x00	; 0
     5f0:	be 01       	movw	r22, r28
     5f2:	6f 5f       	subi	r22, 0xFF	; 255
     5f4:	7f 4f       	sbci	r23, 0xFF	; 255
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	set_bit(temp,pipe);
     5fc:	21 e0       	ldi	r18, 0x01	; 1
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	c9 01       	movw	r24, r18
     602:	02 c0       	rjmp	.+4      	; 0x608 <_nrf24l01p_enable_rx_on_pipe+0x2a>
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	1a 95       	dec	r17
     60a:	e2 f7       	brpl	.-8      	; 0x604 <_nrf24l01p_enable_rx_on_pipe+0x26>
     60c:	99 81       	ldd	r25, Y+1	; 0x01
     60e:	89 2b       	or	r24, r25
     610:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_RXADDR,&temp,sizeof(temp));
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	be 01       	movw	r22, r28
     618:	6f 5f       	subi	r22, 0xFF	; 255
     61a:	7f 4f       	sbci	r23, 0xFF	; 255
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
}
     622:	0f 90       	pop	r0
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	08 95       	ret

0000062c <_nrf24l01p_get_data_sent_flag>:
}

bool _nrf24l01p_get_data_sent_flag(){
	bool flag;
	//(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS)?flag = 1 : flag = 0;
	if(_nrf24l01p_get_status()&_NRF24L01P_STATUS_TX_DS) flag = 1;
     62c:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_get_status>
     630:	96 95       	lsr	r25
     632:	87 95       	ror	r24
     634:	92 95       	swap	r25
     636:	82 95       	swap	r24
     638:	8f 70       	andi	r24, 0x0F	; 15
     63a:	89 27       	eor	r24, r25
     63c:	9f 70       	andi	r25, 0x0F	; 15
     63e:	89 27       	eor	r24, r25
	else flag  = 0;
	return flag;
}
     640:	81 70       	andi	r24, 0x01	; 1
     642:	08 95       	ret

00000644 <_nrf24l01p_clear_data_sent_flag>:

void _nrf24l01p_clear_data_sent_flag(){
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	1f 92       	push	r1
     64a:	cd b7       	in	r28, 0x3d	; 61
     64c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = _nrf24l01p_get_status();
     64e:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_get_status>
	temp |= _NRF24L01P_STATUS_TX_DS;
     652:	80 62       	ori	r24, 0x20	; 32
     654:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS,&temp,sizeof(temp));
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	be 01       	movw	r22, r28
     65c:	6f 5f       	subi	r22, 0xFF	; 255
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	87 e0       	ldi	r24, 0x07	; 7
     662:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
}
     666:	0f 90       	pop	r0
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <_nrf24l01p_enable_dynamic_payload_pipe>:
	if(temp&_NRF24L01P_FIFO_STATUS_RX_REUSE) flag = 1 ;
	else flag = 0;
	return flag;
}

void _nrf24l01p_enable_dynamic_payload_pipe(_nrf24l01p_pipe_t pipe){
     66e:	1f 93       	push	r17
     670:	cf 93       	push	r28
     672:	df 93       	push	r29
     674:	1f 92       	push	r1
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	18 2f       	mov	r17, r24
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	be 01       	movw	r22, r28
     682:	6f 5f       	subi	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	8c e1       	ldi	r24, 0x1C	; 28
     688:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp |= (1<<pipe);
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	c9 01       	movw	r24, r18
     692:	02 c0       	rjmp	.+4      	; 0x698 <_nrf24l01p_enable_dynamic_payload_pipe+0x2a>
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	1a 95       	dec	r17
     69a:	e2 f7       	brpl	.-8      	; 0x694 <_nrf24l01p_enable_dynamic_payload_pipe+0x26>
     69c:	99 81       	ldd	r25, Y+1	; 0x01
     69e:	89 2b       	or	r24, r25
     6a0:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	be 01       	movw	r22, r28
     6a8:	6f 5f       	subi	r22, 0xFF	; 255
     6aa:	7f 4f       	sbci	r23, 0xFF	; 255
     6ac:	8c e1       	ldi	r24, 0x1C	; 28
     6ae:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
}
     6b2:	0f 90       	pop	r0
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <_nrf24l01p_disable_dynamic_payload_all_pipe>:
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
	temp &= ~(1<<pipe);
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
}
void _nrf24l01p_disable_dynamic_payload_all_pipe(){
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	1f 92       	push	r1
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp = 0x00;
     6c6:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_DYNPD,&temp,sizeof(temp));
     6c8:	41 e0       	ldi	r20, 0x01	; 1
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	be 01       	movw	r22, r28
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	8c e1       	ldi	r24, 0x1C	; 28
     6d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	
}
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <_nrf24l01p_enable_dynamic_payload>:
void _nrf24l01p_enable_dynamic_payload(){
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	1f 92       	push	r1
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp;
	_nrf24l01p_read_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     6ea:	41 e0       	ldi	r20, 0x01	; 1
     6ec:	50 e0       	ldi	r21, 0x00	; 0
     6ee:	be 01       	movw	r22, r28
     6f0:	6f 5f       	subi	r22, 0xFF	; 255
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	8d e1       	ldi	r24, 0x1D	; 29
     6f6:	0e 94 ab 01 	call	0x356	; 0x356 <_nrf24l01p_read_register>
	temp |= _NRF24L01_FEATURE_EN_DPL;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	84 60       	ori	r24, 0x04	; 4
     6fe:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_FEATURE,&temp,sizeof(temp));
     700:	41 e0       	ldi	r20, 0x01	; 1
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	be 01       	movw	r22, r28
     706:	6f 5f       	subi	r22, 0xFF	; 255
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	8d e1       	ldi	r24, 0x1D	; 29
     70c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
}
     710:	0f 90       	pop	r0
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <_nrf24l01p_startup>:
// 	printf("fifo status : %x\r\n",read_register(_NRF24L01P_REG_FIFO_STATUS));
}


//////////////////////////////////////////////////////////////////////////
void _nrf24l01p_startup(){
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	1f 92       	push	r1
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	#define TRANSFER_SIZE 1
	//nrf24l01p_write_rf_setup(0b00000111);
	uint8_t temp = 0b00000111;
     722:	87 e0       	ldi	r24, 0x07	; 7
     724:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     726:	41 e0       	ldi	r20, 0x01	; 1
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	be 01       	movw	r22, r28
     72c:	6f 5f       	subi	r22, 0xFF	; 255
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	86 e0       	ldi	r24, 0x06	; 6
     732:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_en_aa(0);
	temp = 0;
     736:	19 82       	std	Y+1, r1	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_EN_AA,&temp,sizeof(uint8_t));
     738:	41 e0       	ldi	r20, 0x01	; 1
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	be 01       	movw	r22, r28
     73e:	6f 5f       	subi	r22, 0xFF	; 255
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	//
	// 	nrf24l01p_write_rx_pw(0, TRANSFER_SIZE);
	temp = TRANSFER_SIZE;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_RF_SETUP,&temp, sizeof(temp));
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	50 e0       	ldi	r21, 0x00	; 0
     750:	be 01       	movw	r22, r28
     752:	6f 5f       	subi	r22, 0xFF	; 255
     754:	7f 4f       	sbci	r23, 0xFF	; 255
     756:	86 e0       	ldi	r24, 0x06	; 6
     758:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	_nrf24l01p_power_up();
     75c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <_nrf24l01p_power_up>
     760:	8f ee       	ldi	r24, 0xEF	; 239
     762:	92 ed       	ldi	r25, 0xD2	; 210
     764:	01 97       	sbiw	r24, 0x01	; 1
     766:	f1 f7       	brne	.-4      	; 0x764 <_nrf24l01p_startup+0x4c>
     768:	00 c0       	rjmp	.+0      	; 0x76a <_nrf24l01p_startup+0x52>
     76a:	00 00       	nop
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Tpd2stby_us);
	//
	_nrf24l01p_rx_mode();
     76c:	0e 94 9f 02 	call	0x53e	; 0x53e <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(1);
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>

}
     776:	0f 90       	pop	r0
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <_nrf24l01p_init>:

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
}

void _nrf24l01p_init(){
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	1f 92       	push	r1
     78a:	1f 92       	push	r1
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
	else NRF24L01P_CSN_PIN_PORT.OUTCLR = (1<<NRF24L01P_CSN_PIN_BIT);
}

static void arch_nrf24l01p_initialize(){
	NRF24L01P_SPI_PORT.DIRSET = (1<<5) | (1<<4) | (1<<7);
     790:	00 e4       	ldi	r16, 0x40	; 64
     792:	16 e0       	ldi	r17, 0x06	; 6
     794:	80 eb       	ldi	r24, 0xB0	; 176
     796:	f8 01       	movw	r30, r16
     798:	81 83       	std	Z+1, r24	; 0x01
	NRF24L01P_SPI.CTRL = (1<<SPI_ENABLE_bp) | (1<<SPI_MASTER_bp);
     79a:	80 e5       	ldi	r24, 0x50	; 80
     79c:	80 93 c0 08 	sts	0x08C0, r24
	NRF24L01P_CSN_PIN_PORT.DIRSET = (1<<NRF24L01P_CSN_PIN_BIT);
     7a0:	68 94       	set
     7a2:	ff 24       	eor	r15, r15
     7a4:	f4 f8       	bld	r15, 4
     7a6:	f1 82       	std	Z+1, r15	; 0x01
	NRF24L01P_CE_PIN_PORT.DIRSET = (1<<NRF24L01P_CE_PIN_BIT);
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	81 83       	std	Z+1, r24	; 0x01
	arch_nrf24l01p_initialize();
	
	_nrf24l01p_ce_pin(0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	if(state) NRF24L01P_CE_PIN_PORT.OUTSET = (1<<NRF24L01P_CE_PIN_BIT) ;
	else NRF24L01P_CE_PIN_PORT.OUTCLR = (1<<NRF24L01P_CE_PIN_BIT);
}

static void arch_nrf24l01p_csn_pin(bool state){
	if(state) NRF24L01P_CSN_PIN_PORT.OUTSET = (1<<NRF24L01P_CSN_PIN_BIT) ;
     7b2:	f8 01       	movw	r30, r16
     7b4:	f5 82       	std	Z+5, r15	; 0x05
	ce_value = state;
}
void _nrf24l01p_csn_pin(bool state){

	arch_nrf24l01p_csn_pin(state);
	csn_value = state;
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 ae 24 	sts	0x24AE, r24
	
	_nrf24l01p_ce_pin(0);
	_nrf24l01p_csn_pin(1);
	
	
	_nrf24l01p_flush_rx();
     7bc:	0e 94 32 02 	call	0x464	; 0x464 <_nrf24l01p_flush_rx>
	_nrf24l01p_power_down();
     7c0:	0e 94 80 02 	call	0x500	; 0x500 <_nrf24l01p_power_down>
	uint8_t status_rst_val = 0x0e;//reset status
     7c4:	8e e0       	ldi	r24, 0x0E	; 14
     7c6:	89 83       	std	Y+1, r24	; 0x01
	_nrf24l01p_write_register(_NRF24L01P_REG_STATUS, &status_rst_val,1);
     7c8:	41 e0       	ldi	r20, 0x01	; 1
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	be 01       	movw	r22, r28
     7ce:	6f 5f       	subi	r22, 0xFF	; 255
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	87 e0       	ldi	r24, 0x07	; 7
     7d4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	uint8_t config_rst_val = 0x0b;//reset config
     7d8:	8b e0       	ldi	r24, 0x0B	; 11
     7da:	8a 83       	std	Y+2, r24	; 0x02
	_nrf24l01p_write_register(_NRF24L01P_REG_CONFIG, &config_rst_val,1);
     7dc:	41 e0       	ldi	r20, 0x01	; 1
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	be 01       	movw	r22, r28
     7e2:	6e 5f       	subi	r22, 0xFE	; 254
     7e4:	7f 4f       	sbci	r23, 0xFF	; 255
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_nrf24l01p_write_register>
	_nrf24l01p_disable_auto_ack_all_pipes();
     7ec:	0e 94 dd 02 	call	0x5ba	; 0x5ba <_nrf24l01p_disable_auto_ack_all_pipes>
	_nrf24l01p_disable_dynamic_payload_all_pipe();/////////ALSO CREEATE FOR DISABLE AUTO ACK FOR ALL PIPE
     7f0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_nrf24l01p_disable_dynamic_payload_all_pipe>
	_nrf24l01p_startup();
     7f4:	0e 94 8c 03 	call	0x718	; 0x718 <_nrf24l01p_startup>
	
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	08 95       	ret

00000808 <_nrf24l01p_write>:
	return flag;
}

volatile int mystat;

int _nrf24l01p_write(uint8_t *data, int datalen){
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	7c 01       	movw	r14, r24
     814:	eb 01       	movw	r28, r22
	int originalCe = ce_value;//backup original ce_value
     816:	10 91 af 24 	lds	r17, 0x24AF
	_nrf24l01p_ce_pin(0);//disable();
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	if ( datalen <= 0 ) return 0;
     820:	1c 16       	cp	r1, r28
     822:	1d 06       	cpc	r1, r29
     824:	84 f5       	brge	.+96     	; 0x886 <_nrf24l01p_write+0x7e>
	if ( datalen > _NRF24L01P_TX_FIFO_SIZE ) datalen = _NRF24L01P_TX_FIFO_SIZE;
	
	_nrf24l01p_clear_data_sent_flag();
     826:	0e 94 22 03 	call	0x644	; 0x644 <_nrf24l01p_clear_data_sent_flag>
     82a:	be 01       	movw	r22, r28
     82c:	a1 97       	sbiw	r28, 0x21	; 33
     82e:	14 f0       	brlt	.+4      	; 0x834 <_nrf24l01p_write+0x2c>
     830:	60 e2       	ldi	r22, 0x20	; 32
     832:	70 e0       	ldi	r23, 0x00	; 0
	_nrf24l01p_write_tx_payload(data,datalen);
     834:	c7 01       	movw	r24, r14
     836:	0e 94 08 02 	call	0x410	; 0x410 <_nrf24l01p_write_tx_payload>
	
	int originalMode = mode; //backup mode
     83a:	c0 91 b0 24 	lds	r28, 0x24B0
	_nrf24l01p_tx_mode();
     83e:	0e 94 be 02 	call	0x57c	; 0x57c <_nrf24l01p_tx_mode>
	
	_nrf24l01p_ce_pin(1);//enable();
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
     848:	80 ea       	ldi	r24, 0xA0	; 160
     84a:	8a 95       	dec	r24
     84c:	f1 f7       	brne	.-4      	; 0x84a <_nrf24l01p_write+0x42>
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
	
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     854:	07 c0       	rjmp	.+14     	; 0x864 <_nrf24l01p_write+0x5c>
		mystat = _nrf24l01p_get_status();
     856:	0e 94 46 02 	call	0x48c	; 0x48c <_nrf24l01p_get_status>
     85a:	80 93 b1 24 	sts	0x24B1, r24
     85e:	90 93 b2 24 	sts	0x24B2, r25
		asm("nop");
     862:	00 00       	nop
	
	_nrf24l01p_ce_pin(1);//enable();
	_nrf24l01p_delay_us(_NRF24L01P_TIMING_Thce_us);
	_nrf24l01p_ce_pin(0);
	
	while ( !(_nrf24l01p_get_data_sent_flag()) ){
     864:	0e 94 16 03 	call	0x62c	; 0x62c <_nrf24l01p_get_data_sent_flag>
     868:	88 23       	and	r24, r24
     86a:	a9 f3       	breq	.-22     	; 0x856 <_nrf24l01p_write+0x4e>
		mystat = _nrf24l01p_get_status();
		asm("nop");
	}
	asm("nop");//UFFFFFFFFFF
     86c:	00 00       	nop
	_nrf24l01p_clear_data_sent_flag();
     86e:	0e 94 22 03 	call	0x644	; 0x644 <_nrf24l01p_clear_data_sent_flag>
	if ( originalMode == _NRF24L01P_MODE_RX ) _nrf24l01p_rx_mode();//restore original mode
     872:	c3 30       	cpi	r28, 0x03	; 3
     874:	11 f4       	brne	.+4      	; 0x87a <_nrf24l01p_write+0x72>
     876:	0e 94 9f 02 	call	0x53e	; 0x53e <_nrf24l01p_rx_mode>
	_nrf24l01p_ce_pin(originalCe);//restore original CE pin status
     87a:	81 2f       	mov	r24, r17
     87c:	0e 94 9f 01 	call	0x33e	; 0x33e <_nrf24l01p_ce_pin>
     880:	80 e4       	ldi	r24, 0x40	; 64
     882:	8a 95       	dec	r24
     884:	f1 f7       	brne	.-4      	; 0x882 <_nrf24l01p_write+0x7a>
	_nrf24l01p_delay_us( _NRF24L01P_TIMING_Tpece2csn_us );
	
	return 0;
}
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	08 95       	ret

00000896 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     896:	29 2f       	mov	r18, r25
     898:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     89a:	23 30       	cpi	r18, 0x03	; 3
     89c:	31 05       	cpc	r19, r1
     89e:	c9 f0       	breq	.+50     	; 0x8d2 <CALLBACK_USB_GetDescriptor+0x3c>
     8a0:	3c f4       	brge	.+14     	; 0x8b0 <CALLBACK_USB_GetDescriptor+0x1a>
     8a2:	21 30       	cpi	r18, 0x01	; 1
     8a4:	31 05       	cpc	r19, r1
     8a6:	59 f0       	breq	.+22     	; 0x8be <CALLBACK_USB_GetDescriptor+0x28>
     8a8:	22 30       	cpi	r18, 0x02	; 2
     8aa:	31 05       	cpc	r19, r1
     8ac:	69 f0       	breq	.+26     	; 0x8c8 <CALLBACK_USB_GetDescriptor+0x32>
     8ae:	36 c0       	rjmp	.+108    	; 0x91c <CALLBACK_USB_GetDescriptor+0x86>
     8b0:	21 32       	cpi	r18, 0x21	; 33
     8b2:	31 05       	cpc	r19, r1
     8b4:	49 f1       	breq	.+82     	; 0x908 <CALLBACK_USB_GetDescriptor+0x72>
     8b6:	22 32       	cpi	r18, 0x22	; 34
     8b8:	31 05       	cpc	r19, r1
     8ba:	59 f1       	breq	.+86     	; 0x912 <CALLBACK_USB_GetDescriptor+0x7c>
     8bc:	2f c0       	rjmp	.+94     	; 0x91c <CALLBACK_USB_GetDescriptor+0x86>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     8be:	82 e1       	ldi	r24, 0x12	; 18
     8c0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     8c2:	2a e9       	ldi	r18, 0x9A	; 154
     8c4:	32 e0       	ldi	r19, 0x02	; 2
     8c6:	33 c0       	rjmp	.+102    	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     8c8:	82 e2       	ldi	r24, 0x22	; 34
     8ca:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     8cc:	28 e7       	ldi	r18, 0x78	; 120
     8ce:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
     8d2:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	91 05       	cpc	r25, r1
     8d8:	59 f0       	breq	.+22     	; 0x8f0 <CALLBACK_USB_GetDescriptor+0x5a>
     8da:	82 30       	cpi	r24, 0x02	; 2
     8dc:	91 05       	cpc	r25, r1
     8de:	71 f0       	breq	.+28     	; 0x8fc <CALLBACK_USB_GetDescriptor+0x66>
     8e0:	89 2b       	or	r24, r25
     8e2:	09 f5       	brne	.+66     	; 0x926 <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     8e4:	e4 e7       	ldi	r30, 0x74	; 116
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	84 91       	lpm	r24, Z
     8ea:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     8ec:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     8ee:	1f c0       	rjmp	.+62     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     8f0:	ea e5       	ldi	r30, 0x5A	; 90
     8f2:	f2 e0       	ldi	r31, 0x02	; 2
     8f4:	84 91       	lpm	r24, Z
     8f6:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     8f8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     8fa:	19 c0       	rjmp	.+50     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     8fc:	ec e2       	ldi	r30, 0x2C	; 44
     8fe:	f2 e0       	ldi	r31, 0x02	; 2
     900:	84 91       	lpm	r24, Z
     902:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     904:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     906:	13 c0       	rjmp	.+38     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     90c:	2a e8       	ldi	r18, 0x8A	; 138
     90e:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     910:	0e c0       	rjmp	.+28     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     912:	80 e2       	ldi	r24, 0x20	; 32
     914:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     916:	2c ea       	ldi	r18, 0xAC	; 172
     918:	32 e0       	ldi	r19, 0x02	; 2
			Size    = sizeof(GenericReport);
			break;
     91a:	09 c0       	rjmp	.+18     	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	04 c0       	rjmp	.+8      	; 0x92e <CALLBACK_USB_GetDescriptor+0x98>
	uint16_t    Size    = NO_DESCRIPTOR;
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     92e:	fa 01       	movw	r30, r20
     930:	20 83       	st	Z, r18
     932:	31 83       	std	Z+1, r19	; 0x01
	return Size;
}
     934:	08 95       	ret

00000936 <usart_spi_transmit_receive>:
 *
 * @param usart
 * @param txdata
 * @return data received from slave
 */
uint8_t usart_spi_transmit_receive(USART_t * usart,uint8_t txdata){
     936:	fc 01       	movw	r30, r24
	
	while ((usart->STATUS & USART_DREIF_bm) == 0);
     938:	81 81       	ldd	r24, Z+1	; 0x01
     93a:	85 ff       	sbrs	r24, 5
     93c:	fd cf       	rjmp	.-6      	; 0x938 <usart_spi_transmit_receive+0x2>
	usart->DATA = txdata;
     93e:	60 83       	st	Z, r22
	while((usart->STATUS & USART_TXCIF_bm) == 0);
     940:	81 81       	ldd	r24, Z+1	; 0x01
     942:	86 ff       	sbrs	r24, 6
     944:	fd cf       	rjmp	.-6      	; 0x940 <usart_spi_transmit_receive+0xa>
	(usart)->STATUS = USART_TXCIF_bm;
     946:	80 e4       	ldi	r24, 0x40	; 64
     948:	81 83       	std	Z+1, r24	; 0x01
	return (usart)->DATA;
     94a:	80 81       	ld	r24, Z
}
     94c:	08 95       	ret

0000094e <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     954:	c0 ea       	ldi	r28, 0xA0	; 160
     956:	d6 e0       	ldi	r29, 0x06	; 6
     958:	18 e0       	ldi	r17, 0x08	; 8
     95a:	1e 83       	std	Y+6, r17	; 0x06
	port_out_value_clear_mask(&PORTD,(1<<0));//select command
     95c:	e0 e6       	ldi	r30, 0x60	; 96
     95e:	f6 e0       	ldi	r31, 0x06	; 6
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	96 83       	std	Z+6, r25	; 0x06
	ssd1306_sel_cmd() ;
     964:	96 83       	std	Z+6, r25	; 0x06
	usart_spi_transmit_receive(&USARTD0, command);//transmit
     966:	68 2f       	mov	r22, r24
     968:	80 ea       	ldi	r24, 0xA0	; 160
     96a:	99 e0       	ldi	r25, 0x09	; 9
     96c:	0e 94 9b 04 	call	0x936	; 0x936 <usart_spi_transmit_receive>
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     970:	1d 83       	std	Y+5, r17	; 0x05
	
}
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	08 95       	ret

0000097a <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
	
	port_out_value_clear_mask(&PORTF,(1<<3));//select device
     986:	c0 ea       	ldi	r28, 0xA0	; 160
     988:	d6 e0       	ldi	r29, 0x06	; 6
     98a:	18 e0       	ldi	r17, 0x08	; 8
     98c:	1e 83       	std	Y+6, r17	; 0x06
	ssd1306_sel_data() ;
     98e:	0f 2e       	mov	r0, r31
     990:	f0 e6       	ldi	r31, 0x60	; 96
     992:	ef 2e       	mov	r14, r31
     994:	f6 e0       	ldi	r31, 0x06	; 6
     996:	ff 2e       	mov	r15, r31
     998:	f0 2d       	mov	r31, r0
     99a:	01 e0       	ldi	r16, 0x01	; 1
     99c:	f7 01       	movw	r30, r14
     99e:	05 83       	std	Z+5, r16	; 0x05
	usart_spi_transmit_receive(&USARTD0, data);//transmit
     9a0:	68 2f       	mov	r22, r24
     9a2:	80 ea       	ldi	r24, 0xA0	; 160
     9a4:	99 e0       	ldi	r25, 0x09	; 9
     9a6:	0e 94 9b 04 	call	0x936	; 0x936 <usart_spi_transmit_receive>
	ssd1306_sel_cmd();
     9aa:	f7 01       	movw	r30, r14
     9ac:	06 83       	std	Z+6, r16	; 0x06
	port_out_value_set_mask(&PORTF,(1<<3));//deselect device
     9ae:	1d 83       	std	Y+5, r17	; 0x05

}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <ssd1306_set_page_address>:
 */
void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
     9be:	87 70       	andi	r24, 0x07	; 7
     9c0:	80 6b       	ori	r24, 0xB0	; 176
     9c2:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
     9c6:	08 95       	ret

000009c8 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
void ssd1306_set_column_address(uint8_t address)
{
     9c8:	cf 93       	push	r28
     9ca:	c8 2f       	mov	r28, r24
	// Make sure the address is 7 bits
	address &= 0x7F;
     9cc:	98 2f       	mov	r25, r24
     9ce:	9f 77       	andi	r25, 0x7F	; 127
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
     9d0:	89 2f       	mov	r24, r25
     9d2:	82 95       	swap	r24
     9d4:	8f 70       	andi	r24, 0x0F	; 15
     9d6:	80 61       	ori	r24, 0x10	; 16
     9d8:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     9dc:	8c 2f       	mov	r24, r28
     9de:	8f 70       	andi	r24, 0x0F	; 15
     9e0:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
}
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <usart_init_spi>:
	}
}


void usart_init_spi(USART_t *usart, const usart_spi_options_emon_t *opt)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ec 01       	movw	r28, r24
     9ee:	fb 01       	movw	r30, r22
	//ioport_pin_t sck_pin;
	//uint8_t invert_sck;

	(usart)->CTRLB &= ~USART_RXEN_bm;
     9f0:	8c 81       	ldd	r24, Y+4	; 0x04
     9f2:	8f 7e       	andi	r24, 0xEF	; 239
     9f4:	8c 83       	std	Y+4, r24	; 0x04

	//invert_sck = (opt->spimode == 2) || (opt->spimode == 3);

	PORTD.DIRSET = (1<<1);//sck pin output
     9f6:	a0 e6       	ldi	r26, 0x60	; 96
     9f8:	b6 e0       	ldi	r27, 0x06	; 6
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	11 96       	adiw	r26, 0x01	; 1
     9fe:	8c 93       	st	X, r24
     a00:	11 97       	sbiw	r26, 0x01	; 1
	PORTD.OUTSET = (1<<1);//sck pin output level high
     a02:	15 96       	adiw	r26, 0x05	; 5
     a04:	8c 93       	st	X, r24

	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | USART_CMODE_MSPI_gc;
     a06:	8d 81       	ldd	r24, Y+5	; 0x05
     a08:	80 6c       	ori	r24, 0xC0	; 192
     a0a:	8d 83       	std	Y+5, r24	; 0x05

	if (opt->spimode == 1 || opt->spimode == 3) {
     a0c:	84 81       	ldd	r24, Z+4	; 0x04
     a0e:	8d 7f       	andi	r24, 0xFD	; 253
     a10:	81 30       	cpi	r24, 0x01	; 1
     a12:	21 f4       	brne	.+8      	; 0xa1c <usart_init_spi+0x34>
		usart->CTRLC |= USART_UCPHA_bm;
     a14:	8d 81       	ldd	r24, Y+5	; 0x05
     a16:	82 60       	ori	r24, 0x02	; 2
     a18:	8d 83       	std	Y+5, r24	; 0x05
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <usart_init_spi+0x3a>
	}
	else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     a1c:	8d 81       	ldd	r24, Y+5	; 0x05
     a1e:	8d 7f       	andi	r24, 0xFD	; 253
     a20:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	if (opt->data_order) {
     a22:	85 81       	ldd	r24, Z+5	; 0x05
     a24:	88 23       	and	r24, r24
     a26:	21 f0       	breq	.+8      	; 0xa30 <usart_init_spi+0x48>
		(usart)->CTRLC |= USART_DORD_bm;
     a28:	8d 81       	ldd	r24, Y+5	; 0x05
     a2a:	84 60       	ori	r24, 0x04	; 4
     a2c:	8d 83       	std	Y+5, r24	; 0x05
     a2e:	03 c0       	rjmp	.+6      	; 0xa36 <usart_init_spi+0x4e>
	}
	else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     a30:	8d 81       	ldd	r24, Y+5	; 0x05
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	8d 83       	std	Y+5, r24	; 0x05
	}


	uint16_t bsel_value = (32000000UL/ (opt->baudrate*2)) -1 ;
     a36:	80 81       	ld	r24, Z
     a38:	91 81       	ldd	r25, Z+1	; 0x01
     a3a:	a2 81       	ldd	r26, Z+2	; 0x02
     a3c:	b3 81       	ldd	r27, Z+3	; 0x03
     a3e:	9c 01       	movw	r18, r24
     a40:	ad 01       	movw	r20, r26
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	44 1f       	adc	r20, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	78 e4       	ldi	r23, 0x48	; 72
     a4e:	88 ee       	ldi	r24, 0xE8	; 232
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 2c 10 	call	0x2058	; 0x2058 <__udivmodsi4>
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	31 09       	sbc	r19, r1
	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     a5a:	83 2f       	mov	r24, r19
     a5c:	8f 70       	andi	r24, 0x0F	; 15
     a5e:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     a60:	2e 83       	std	Y+6, r18	; 0x06
	
	(usart)->CTRLB |= USART_TXEN_bm;
     a62:	8c 81       	ldd	r24, Y+4	; 0x04
     a64:	88 60       	ori	r24, 0x08	; 8
     a66:	8c 83       	std	Y+4, r24	; 0x04

}
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <ssd1306_init>:




void ssd1306_init(void)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	00 d0       	rcall	.+0      	; 0xa74 <ssd1306_init+0x6>
     a74:	00 d0       	rcall	.+0      	; 0xa76 <ssd1306_init+0x8>
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62

	port_direction_set_mask(&PORTF,(1<<3));//ss
     a7a:	20 ea       	ldi	r18, 0xA0	; 160
     a7c:	36 e0       	ldi	r19, 0x06	; 6
     a7e:	88 e0       	ldi	r24, 0x08	; 8
     a80:	d9 01       	movw	r26, r18
     a82:	11 96       	adiw	r26, 0x01	; 1
     a84:	8c 93       	st	X, r24
	port_direction_set_mask(&PORTD,(1<<0));//data_cmd
     a86:	a0 e6       	ldi	r26, 0x60	; 96
     a88:	b6 e0       	ldi	r27, 0x06	; 6
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	11 96       	adiw	r26, 0x01	; 1
     a8e:	9c 93       	st	X, r25
     a90:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTA,(1<<3));//reset
     a92:	e0 e0       	ldi	r30, 0x00	; 0
     a94:	f6 e0       	ldi	r31, 0x06	; 6
     a96:	81 83       	std	Z+1, r24	; 0x01
	port_direction_set_mask(&PORTD,(1<<1));//sck
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	11 96       	adiw	r26, 0x01	; 1
     a9c:	9c 93       	st	X, r25
     a9e:	11 97       	sbiw	r26, 0x01	; 1
	port_direction_set_mask(&PORTD,(1<<3));//mosi
     aa0:	11 96       	adiw	r26, 0x01	; 1
     aa2:	8c 93       	st	X, r24
// 	
	port_out_value_set_mask(&PORTF,(1<<3));//ss
     aa4:	d9 01       	movw	r26, r18
     aa6:	15 96       	adiw	r26, 0x05	; 5
     aa8:	8c 93       	st	X, r24
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
	PORTA.OUTCLR = (1<<3);
     aaa:	86 83       	std	Z+6, r24	; 0x06
     aac:	b0 ea       	ldi	r27, 0xA0	; 160
     aae:	ba 95       	dec	r27
     ab0:	f1 f7       	brne	.-4      	; 0xaae <ssd1306_init+0x40>
	delay_us(10); // At least 3us
	PORTA.OUTSET = (1<<3);
     ab2:	85 83       	std	Z+5, r24	; 0x05
     ab4:	e0 ea       	ldi	r30, 0xA0	; 160
     ab6:	ea 95       	dec	r30
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <ssd1306_init+0x48>
	spi_flags_t spi_flags = 0;
	//board_spi_select_id_t spi_select_id = 0;
	
	//irqflags_t flags = cpu_irq_save();
	//*((uint8_t *)&PR.PRGEN + SYSCLK_PORT_D) &= ~PR_USART0_bm;
	PR.PRPD &= ~PR_USART0_bm;
     aba:	e0 e7       	ldi	r30, 0x70	; 112
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	84 81       	ldd	r24, Z+4	; 0x04
     ac0:	8f 7e       	andi	r24, 0xEF	; 239
     ac2:	84 83       	std	Z+4, r24	; 0x04
	
	//cpu_irq_restore(flags);
	
	usart_spi_options_emon_t opt;
	opt.baudrate=12000000;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	9b e1       	ldi	r25, 0x1B	; 27
     ac8:	a7 eb       	ldi	r26, 0xB7	; 183
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	9a 83       	std	Y+2, r25	; 0x02
     ad0:	ab 83       	std	Y+3, r26	; 0x03
     ad2:	bc 83       	std	Y+4, r27	; 0x04
	opt.spimode=spi_flags;
     ad4:	1d 82       	std	Y+5, r1	; 0x05
	opt.data_order=0;
     ad6:	1e 82       	std	Y+6, r1	; 0x06
	usart_init_spi(&USARTD0, &opt);
     ad8:	be 01       	movw	r22, r28
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	80 ea       	ldi	r24, 0xA0	; 160
     ae0:	99 e0       	ldi	r25, 0x09	; 9
     ae2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <usart_init_spi>
	

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
     ae6:	88 ea       	ldi	r24, 0xA8	; 168
     ae8:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x1F);
     aec:	8f e1       	ldi	r24, 0x1F	; 31
     aee:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
     af2:	83 ed       	ldi	r24, 0xD3	; 211
     af4:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x00);
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
     afe:	80 e4       	ldi	r24, 0x40	; 64
     b00:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     b04:	81 ea       	ldi	r24, 0xA1	; 161
     b06:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     b0a:	88 ec       	ldi	r24, 0xC8	; 200
     b0c:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
     b10:	8a ed       	ldi	r24, 0xDA	; 218
     b12:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x02);
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	//ssd1306_set_contrast(0x8F);
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     b1c:	81 e8       	ldi	r24, 0x81	; 129
     b1e:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x8F);
     b22:	8f e8       	ldi	r24, 0x8F	; 143
     b24:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

		
	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     b28:	84 ea       	ldi	r24, 0xA4	; 164
     b2a:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	//ssd1306_display_invert_disable();
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
     b2e:	86 ea       	ldi	r24, 0xA6	; 166
     b30:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     b34:	85 ed       	ldi	r24, 0xD5	; 213
     b36:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x80);
     b3a:	80 e8       	ldi	r24, 0x80	; 128
     b3c:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     b40:	8d e8       	ldi	r24, 0x8D	; 141
     b42:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x14);
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     b4c:	8b ed       	ldi	r24, 0xDB	; 219
     b4e:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
     b52:	80 e4       	ldi	r24, 0x40	; 64
     b54:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     b58:	89 ed       	ldi	r24, 0xD9	; 217
     b5a:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_write_command(0xF1);
     b5e:	81 ef       	ldi	r24, 0xF1	; 241
     b60:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>

	//ssd1306_display_on();
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
     b64:	8f ea       	ldi	r24, 0xAF	; 175
     b66:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
}
     b6a:	26 96       	adiw	r28, 0x06	; 6
     b6c:	cd bf       	out	0x3d, r28	; 61
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(char *string)
{
     b76:	ef 92       	push	r14
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     b80:	dc 01       	movw	r26, r24
     b82:	ec 91       	ld	r30, X
     b84:	ee 23       	and	r30, r30
     b86:	29 f1       	breq	.+74     	; 0xbd2 <ssd1306_write_text+0x5c>
     b88:	7c 01       	movw	r14, r24
     b8a:	bf ef       	ldi	r27, 0xFF	; 255
     b8c:	eb 1a       	sub	r14, r27
     b8e:	fb 0a       	sbc	r15, r27
		if (*string < 0x7F) {
     b90:	ef 37       	cpi	r30, 0x7F	; 127
     b92:	d0 f4       	brcc	.+52     	; 0xbc8 <ssd1306_write_text+0x52>
			char_ptr = font_table[*string - 32];
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	e5 57       	subi	r30, 0x75	; 117
     b9c:	fe 4d       	sbci	r31, 0xDE	; 222
     b9e:	00 81       	ld	r16, Z
     ba0:	11 81       	ldd	r17, Z+1	; 0x01
			for (i = 1; i <= char_ptr[0]; i++) {
     ba2:	f8 01       	movw	r30, r16
     ba4:	80 81       	ld	r24, Z
     ba6:	88 23       	and	r24, r24
     ba8:	61 f0       	breq	.+24     	; 0xbc2 <ssd1306_write_text+0x4c>
     baa:	c1 e0       	ldi	r28, 0x01	; 1
				ssd1306_write_data(char_ptr[i]);
     bac:	f8 01       	movw	r30, r16
     bae:	ec 0f       	add	r30, r28
     bb0:	f1 1d       	adc	r31, r1
     bb2:	80 81       	ld	r24, Z
     bb4:	0e 94 bd 04 	call	0x97a	; 0x97a <ssd1306_write_data>
	uint8_t i;

	while (*string != '\0') {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
     bb8:	cf 5f       	subi	r28, 0xFF	; 255
     bba:	d8 01       	movw	r26, r16
     bbc:	9c 91       	ld	r25, X
     bbe:	9c 17       	cp	r25, r28
     bc0:	a8 f7       	brcc	.-22     	; 0xbac <ssd1306_write_text+0x36>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 bd 04 	call	0x97a	; 0x97a <ssd1306_write_data>
void ssd1306_write_text(char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != '\0') {
     bc8:	d7 01       	movw	r26, r14
     bca:	ed 91       	ld	r30, X+
     bcc:	7d 01       	movw	r14, r26
     bce:	e1 11       	cpse	r30, r1
     bd0:	df cf       	rjmp	.-66     	; 0xb90 <ssd1306_write_text+0x1a>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	08 95       	ret

00000bde <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(uint8_t page, uint8_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     bde:	20 e8       	ldi	r18, 0x80	; 128
     be0:	82 9f       	mul	r24, r18
     be2:	c0 01       	movw	r24, r0
     be4:	11 24       	eor	r1, r1
     be6:	86 0f       	add	r24, r22
     be8:	91 1d       	adc	r25, r1
     bea:	e0 91 ac 22 	lds	r30, 0x22AC
     bee:	f0 91 ad 22 	lds	r31, 0x22AD
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	40 83       	st	Z, r20
     bf8:	08 95       	ret

00000bfa <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(uint8_t page, uint8_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     bfa:	20 e8       	ldi	r18, 0x80	; 128
     bfc:	82 9f       	mul	r24, r18
     bfe:	c0 01       	movw	r24, r0
     c00:	11 24       	eor	r1, r1
     c02:	86 0f       	add	r24, r22
     c04:	91 1d       	adc	r25, r1
     c06:	e0 91 ac 22 	lds	r30, 0x22AC
     c0a:	f0 91 ad 22 	lds	r31, 0x22AD
     c0e:	e8 0f       	add	r30, r24
     c10:	f9 1f       	adc	r31, r25
}
     c12:	80 81       	ld	r24, Z
     c14:	08 95       	ret

00000c16 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
 */
void gfx_mono_ssd1306_put_byte(uint8_t page, uint8_t column,
		uint8_t data, uint8_t force)
{
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	18 2f       	mov	r17, r24
     c1e:	d6 2f       	mov	r29, r22
     c20:	c4 2f       	mov	r28, r20
//#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
     c22:	21 11       	cpse	r18, r1
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <gfx_mono_ssd1306_put_byte+0x18>
     c26:	0e 94 fd 05 	call	0xbfa	; 0xbfa <gfx_mono_framebuffer_get_byte>
     c2a:	8c 17       	cp	r24, r28
     c2c:	71 f0       	breq	.+28     	; 0xc4a <gfx_mono_ssd1306_put_byte+0x34>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
     c2e:	4c 2f       	mov	r20, r28
     c30:	6d 2f       	mov	r22, r29
     c32:	81 2f       	mov	r24, r17
     c34:	0e 94 ef 05 	call	0xbde	; 0xbde <gfx_mono_framebuffer_put_byte>
//#endif

	ssd1306_set_page_address(page);
     c38:	81 2f       	mov	r24, r17
     c3a:	0e 94 df 04 	call	0x9be	; 0x9be <ssd1306_set_page_address>
	ssd1306_set_column_address(column);
     c3e:	8d 2f       	mov	r24, r29
     c40:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ssd1306_set_column_address>

	ssd1306_write_data(data);
     c44:	8c 2f       	mov	r24, r28
     c46:	0e 94 bd 04 	call	0x97a	; 0x97a <ssd1306_write_data>
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	08 95       	ret

00000c52 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
				  return false;

				switch (Source)
				{
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.PLLCTRL = (OSC_PLLSRC_RC2M_gc  | MulFactor);
     c56:	e0 e5       	ldi	r30, 0x50	; 80
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	88 e1       	ldi	r24, 0x18	; 24
     c5c:	85 83       	std	Z+5, r24	; 0x05
						break;
					default:
						return false;
				}

				OSC.CTRL |= OSC_PLLEN_bm;
     c5e:	80 81       	ld	r24, Z
     c60:	80 61       	ori	r24, 0x10	; 16
     c62:	80 83       	st	Z, r24

				while (!(OSC.STATUS & OSC_PLLRDY_bm));
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	84 ff       	sbrs	r24, 4
     c68:	fd cf       	rjmp	.-6      	; 0xc64 <SetupHardware+0x12>
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
     c6a:	8f b7       	in	r24, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
     c6c:	f8 94       	cli
			 *  \param[in] Value    Value to write to the protected location
			 */
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value) ATTR_NON_NULL_PTR_ARG(1) ATTR_ALWAYS_INLINE;
			static inline void XMEGACLK_CCP_Write(volatile void* Address, const uint8_t Value)
			{
				__asm__ __volatile__ (
     c6e:	a0 e4       	ldi	r26, 0x40	; 64
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	94 e0       	ldi	r25, 0x04	; 4
     c74:	28 ed       	ldi	r18, 0xD8	; 216
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	1b be       	out	0x3b, r1	; 59
     c7a:	fd 01       	movw	r30, r26
     c7c:	24 bf       	out	0x34, r18	; 52
     c7e:	90 83       	st	Z, r25
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
     c80:	8f bf       	out	0x3f, r24	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c82:	8f ed       	ldi	r24, 0xDF	; 223
     c84:	9e e2       	ldi	r25, 0x2E	; 46
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <SetupHardware+0x34>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <SetupHardware+0x3a>
     c8c:	00 00       	nop
				XMEGACLK_CCP_Write(&CLK.CTRL, ClockSourceMask);

				SetGlobalInterruptMask(CurrentGlobalInt);

				Delay_MS(1);
				return (CLK.CTRL == ClockSourceMask);
     c8e:	8c 91       	ld	r24, X
					case CLOCK_SRC_INT_RC2MHZ:
						OSC.CTRL |= OSC_RC2MEN_bm;
						while (!(OSC.STATUS & OSC_RC2MRDY_bm));
						return true;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.CTRL |= OSC_RC32MEN_bm;
     c90:	e0 e5       	ldi	r30, 0x50	; 80
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	82 60       	ori	r24, 0x02	; 2
     c98:	80 83       	st	Z, r24
						while (!(OSC.STATUS & OSC_RC32MRDY_bm));
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	81 ff       	sbrs	r24, 1
     c9e:	fd cf       	rjmp	.-6      	; 0xc9a <SetupHardware+0x48>
						DFLLRC2M.COMP1  = (DFLLCompare & 0xFF);
						DFLLRC2M.COMP2  = (DFLLCompare >> 8);
						DFLLRC2M.CTRL   = DFLL_ENABLE_bm;
						break;
					case CLOCK_SRC_INT_RC32MHZ:
						OSC.DFLLCTRL   |= (Reference << OSC_RC32MCREF_gp);
     ca0:	e0 e5       	ldi	r30, 0x50	; 80
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	86 81       	ldd	r24, Z+6	; 0x06
     ca6:	84 60       	ori	r24, 0x04	; 4
     ca8:	86 83       	std	Z+6, r24	; 0x06
						DFLLRC32M.COMP1 = (DFLLCompare & 0xFF);
     caa:	a0 e6       	ldi	r26, 0x60	; 96
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	8b e1       	ldi	r24, 0x1B	; 27
     cb0:	15 96       	adiw	r26, 0x05	; 5
     cb2:	8c 93       	st	X, r24
     cb4:	15 97       	sbiw	r26, 0x05	; 5
						DFLLRC32M.COMP2 = (DFLLCompare >> 8);
     cb6:	87 eb       	ldi	r24, 0xB7	; 183
     cb8:	16 96       	adiw	r26, 0x06	; 6
     cba:	8c 93       	st	X, r24
     cbc:	16 97       	sbiw	r26, 0x06	; 6

						if (Reference == DFLL_REF_INT_USBSOF)
						{
							NVM.CMD        = NVM_CMD_READ_CALIB_ROW_gc;
     cbe:	c0 ec       	ldi	r28, 0xC0	; 192
     cc0:	d1 e0       	ldi	r29, 0x01	; 1
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	8a 87       	std	Y+10, r24	; 0x0a
							DFLLRC32M.CALA = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSCA));
     cc6:	ed e1       	ldi	r30, 0x1D	; 29
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	e4 91       	lpm	r30, Z
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	ec 93       	st	X, r30
     cd0:	12 97       	sbiw	r26, 0x02	; 2
							DFLLRC32M.CALB = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBRCOSC));
     cd2:	ec e1       	ldi	r30, 0x1C	; 28
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	e4 91       	lpm	r30, Z
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	ec 93       	st	X, r30
     cdc:	13 97       	sbiw	r26, 0x03	; 3
							NVM.CMD        = 0;
     cde:	1a 86       	std	Y+10, r1	; 0x0a
						}

						DFLLRC32M.CTRL  = DFLL_ENABLE_bm;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	8c 93       	st	X, r24

	/* Start the 32MHz internal RC oscillator and start the DFLL to increase it to 48MHz using the USB SOF as a reference */
	XMEGACLK_StartInternalOscillator(CLOCK_SRC_INT_RC32MHZ);
	XMEGACLK_StartDFLL(CLOCK_SRC_INT_RC32MHZ, DFLL_REF_INT_USBSOF, F_USB);

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
     ce4:	87 e0       	ldi	r24, 0x07	; 7
     ce6:	80 93 a2 00 	sts	0x00A2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				PORTR.DIRSET    = LEDS_PORTR_LEDS;
     cea:	e0 ee       	ldi	r30, 0xE0	; 224
     cec:	f7 e0       	ldi	r31, 0x07	; 7
     cee:	83 e0       	ldi	r24, 0x03	; 3
     cf0:	81 83       	std	Z+1, r24	; 0x01
				PORTR.OUTCLR    = LEDS_PORTR_LEDS;
     cf2:	86 83       	std	Z+6, r24	; 0x06

				PORTCFG.MPCMASK = LEDS_PORTR_LEDS;
     cf4:	80 93 b0 00 	sts	0x00B0, r24
				PORTR.PIN0CTRL  = PORT_INVEN_bm;
     cf8:	80 e4       	ldi	r24, 0x40	; 64
     cfa:	80 8b       	std	Z+16, r24	; 0x10

				PORTD.DIRSET    = LEDS_PORTD_LEDS;
     cfc:	e0 e6       	ldi	r30, 0x60	; 96
     cfe:	f6 e0       	ldi	r31, 0x06	; 6
     d00:	90 e3       	ldi	r25, 0x30	; 48
     d02:	91 83       	std	Z+1, r25	; 0x01
				PORTD.OUTCLR    = LEDS_PORTD_LEDS;
     d04:	96 83       	std	Z+6, r25	; 0x06

				PORTD.PIN4CTRL  = PORT_INVEN_bm;
     d06:	84 8b       	std	Z+20, r24	; 0x14
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
     d08:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <USB_Init>
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     d12:	cf 93       	push	r28
     d14:	df 93       	push	r29
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	25 97       	sbiw	r28, 0x05	; 5
     d1c:	cd bf       	out	0x3d, r28	; 61
     d1e:	de bf       	out	0x3e, r29	; 62
	_nrf24l01p_init();
     d20:	0e 94 bf 03 	call	0x77e	; 0x77e <_nrf24l01p_init>
	_nrf24l01p_enable_dynamic_payload();
     d24:	0e 94 70 03 	call	0x6e0	; 0x6e0 <_nrf24l01p_enable_dynamic_payload>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P0);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P1);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P2);
     d34:	82 e0       	ldi	r24, 0x02	; 2
     d36:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P3);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P4);
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	_nrf24l01p_enable_rx_on_pipe(_NRF24L01P_PIPE_P5);
     d46:	85 e0       	ldi	r24, 0x05	; 5
     d48:	0e 94 ef 02 	call	0x5de	; 0x5de <_nrf24l01p_enable_rx_on_pipe>
	
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P0);
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P1);
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P2);
     d58:	82 e0       	ldi	r24, 0x02	; 2
     d5a:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P3);
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P4);
     d64:	84 e0       	ldi	r24, 0x04	; 4
     d66:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	_nrf24l01p_enable_dynamic_payload_pipe(_NRF24L01P_PIPE_P5);
     d6a:	85 e0       	ldi	r24, 0x05	; 5
     d6c:	0e 94 37 03 	call	0x66e	; 0x66e <_nrf24l01p_enable_dynamic_payload_pipe>
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
     d70:	8e ea       	ldi	r24, 0xAE	; 174
     d72:	92 e2       	ldi	r25, 0x22	; 34
     d74:	80 93 ac 22 	sts	0x22AC, r24
     d78:	90 93 ad 22 	sts	0x22AD, r25
	uint8_t page;
	uint8_t column;

	gfx_mono_set_framebuffer(framebuffer);

	ssd1306_init();
     d7c:	0e 94 37 05 	call	0xa6e	; 0xa6e <ssd1306_init>
	asm("nop");
     d80:	00 00       	nop
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     d82:	00 e0       	ldi	r16, 0x00	; 0
	{
		ssd1306_set_page_address(page);
     d84:	80 2f       	mov	r24, r16
     d86:	0e 94 df 04 	call	0x9be	; 0x9be <ssd1306_set_page_address>
		ssd1306_set_column_address(0);
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <ssd1306_set_column_address>
     d90:	10 e0       	ldi	r17, 0x00	; 0
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	0e 94 bd 04 	call	0x97a	; 0x97a <ssd1306_write_data>

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
     d98:	1f 5f       	subi	r17, 0xFF	; 255
     d9a:	10 38       	cpi	r17, 0x80	; 128
     d9c:	d1 f7       	brne	.-12     	; 0xd92 <main+0x80>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	04 30       	cpi	r16, 0x04	; 4
     da2:	81 f7       	brne	.-32     	; 0xd84 <main+0x72>
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(address));
     da4:	80 e4       	ldi	r24, 0x40	; 64
     da6:	0e 94 a7 04 	call	0x94e	; 0x94e <ssd1306_write_command>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     daa:	00 e0       	ldi	r16, 0x00	; 0
     dac:	0c c0       	rjmp	.+24     	; 0xdc6 <main+0xb4>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
     dae:	21 e0       	ldi	r18, 0x01	; 1
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	61 2f       	mov	r22, r17
     db4:	80 2f       	mov	r24, r16
     db6:	0e 94 0b 06 	call	0xc16	; 0xc16 <gfx_mono_ssd1306_put_byte>

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     dba:	1f 5f       	subi	r17, 0xFF	; 255
     dbc:	10 38       	cpi	r17, 0x80	; 128
     dbe:	b9 f7       	brne	.-18     	; 0xdae <main+0x9c>
	ssd1306_clear();

	ssd1306_set_display_start_line_address(0);


	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     dc0:	0f 5f       	subi	r16, 0xFF	; 255
     dc2:	04 30       	cpi	r16, 0x04	; 4
     dc4:	11 f0       	breq	.+4      	; 0xdca <main+0xb8>
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
     dc6:	10 e0       	ldi	r17, 0x00	; 0
     dc8:	f2 cf       	rjmp	.-28     	; 0xdae <main+0x9c>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_ssd1306_put_byte(page, column, 0x00, 1);
		}
	}

	asm("nop");
     dca:	00 00       	nop
	ssd1306_set_page_address(0);
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	0e 94 df 04 	call	0x9be	; 0x9be <ssd1306_set_page_address>
	ssd1306_write_text("EMON");
     dd2:	89 e9       	ldi	r24, 0x99	; 153
     dd4:	92 e2       	ldi	r25, 0x22	; 34
     dd6:	0e 94 bb 05 	call	0xb76	; 0xb76 <ssd1306_write_text>


	
 	SetupHardware();
     dda:	0e 94 29 06 	call	0xc52	; 0xc52 <SetupHardware>
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     de4:	80 e3       	ldi	r24, 0x30	; 48
     de6:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     df0:	10 92 65 06 	sts	0x0665, r1
				#if (ARCH == ARCH_AVR8)
				sei();
				#elif (ARCH == ARCH_UC3)
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
     df4:	78 94       	sei
// 
 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 	GlobalInterruptEnable();

	PORT_SetDirection(&PORTR,(1<<0));
     df6:	80 93 e0 07 	sts	0x07E0, r24
	while(1)
	{

			
// 			PORT_TogglePins(&PORTR,(1<<0));
 			char myname[] = "test";
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f5 e0       	ldi	r31, 0x05	; 5
     dfe:	ff 2e       	mov	r15, r31
     e00:	f0 2d       	mov	r31, r0
     e02:	8e 01       	movw	r16, r28
     e04:	0f 5f       	subi	r16, 0xFF	; 255
     e06:	1f 4f       	sbci	r17, 0xFF	; 255
     e08:	ee e9       	ldi	r30, 0x9E	; 158
     e0a:	f2 e2       	ldi	r31, 0x22	; 34
     e0c:	d8 01       	movw	r26, r16
     e0e:	8f 2d       	mov	r24, r15
     e10:	01 90       	ld	r0, Z+
     e12:	0d 92       	st	X+, r0
     e14:	8a 95       	dec	r24
     e16:	e1 f7       	brne	.-8      	; 0xe10 <main+0xfe>
			_nrf24l01p_write((uint8_t*) myname, strlen(myname));
     e18:	f8 01       	movw	r30, r16
     e1a:	01 90       	ld	r0, Z+
     e1c:	00 20       	and	r0, r0
     e1e:	e9 f7       	brne	.-6      	; 0xe1a <main+0x108>
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	bf 01       	movw	r22, r30
     e24:	60 1b       	sub	r22, r16
     e26:	71 0b       	sbc	r23, r17
     e28:	c8 01       	movw	r24, r16
     e2a:	0e 94 04 04 	call	0x808	; 0x808 <_nrf24l01p_write>

		
 			HID_Device_USBTask(&Generic_HID_Interface);
     e2e:	89 e8       	ldi	r24, 0x89	; 137
     e30:	92 e2       	ldi	r25, 0x22	; 34
     e32:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <HID_Device_USBTask>
 			USB_USBTask();
     e36:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <USB_USBTask>
	}
     e3a:	e6 cf       	rjmp	.-52     	; 0xe08 <main+0xf6>

00000e3c <EVENT_USB_Device_Connect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e4e:	80 e1       	ldi	r24, 0x10	; 16
     e50:	80 93 65 06 	sts	0x0665, r24
     e54:	08 95       	ret

00000e56 <EVENT_USB_Device_Disconnect>:
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	80 93 e6 07 	sts	0x07E6, r24
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e5c:	80 e3       	ldi	r24, 0x30	; 48
     e5e:	80 93 66 06 	sts	0x0666, r24

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 e5 07 	sts	0x07E5, r24
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e68:	10 92 65 06 	sts	0x0665, r1
     e6c:	08 95       	ret

00000e6e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
     e6e:	89 e8       	ldi	r24, 0x89	; 137
     e70:	92 e2       	ldi	r25, 0x22	; 34
     e72:	0e 94 c4 08 	call	0x1188	; 0x1188 <HID_Device_ConfigureEndpoints>
			 *  \note This function is not available when the \c NO_SOF_EVENTS compile time token is defined.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB.INTCTRLA |=  USB_SOFIE_bm;
     e76:	e0 ec       	ldi	r30, 0xC0	; 192
     e78:	f4 e0       	ldi	r31, 0x04	; 4
     e7a:	90 85       	ldd	r25, Z+8	; 0x08
     e7c:	90 68       	ori	r25, 0x80	; 128
     e7e:	90 87       	std	Z+8, r25	; 0x08

	USB_Device_EnableSOFEvents();

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     e80:	81 11       	cpse	r24, r1
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <EVENT_USB_Device_ConfigurationChanged+0x1a>
     e84:	81 e1       	ldi	r24, 0x11	; 17
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <EVENT_USB_Device_ConfigurationChanged+0x1c>
     e88:	82 e2       	ldi	r24, 0x22	; 34
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     e90:	90 e3       	ldi	r25, 0x30	; 48
     e92:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     e96:	98 2f       	mov	r25, r24
     e98:	93 70       	andi	r25, 0x03	; 3
     e9a:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     e9e:	80 73       	andi	r24, 0x30	; 48
     ea0:	80 93 65 06 	sts	0x0665, r24
     ea4:	08 95       	ret

00000ea6 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
     ea6:	89 e8       	ldi	r24, 0x89	; 137
     ea8:	92 e2       	ldi	r25, 0x22	; 34
     eaa:	0e 94 a3 07 	call	0xf46	; 0xf46 <HID_Device_ProcessControlRequest>
     eae:	08 95       	ret

00000eb0 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     eb0:	80 91 97 22 	lds	r24, 0x2297
     eb4:	90 91 98 22 	lds	r25, 0x2298
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	29 f0       	breq	.+10     	; 0xec6 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	80 93 97 22 	sts	0x2297, r24
     ec2:	90 93 98 22 	sts	0x2298, r25
     ec6:	08 95       	ret

00000ec8 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	f9 01       	movw	r30, r18
			}

			static inline uint8_t LEDs_GetLEDs(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t LEDs_GetLEDs(void)
			{
				return ((PORTR_OUT & LEDS_PORTR_LEDS) | (PORTD_OUT & LEDS_PORTD_LEDS));
     ece:	80 91 e4 07 	lds	r24, 0x07E4
     ed2:	90 91 64 06 	lds	r25, 0x0664
     ed6:	90 73       	andi	r25, 0x30	; 48
     ed8:	83 70       	andi	r24, 0x03	; 3
     eda:	89 2b       	or	r24, r25
	uint8_t* Data        = (uint8_t*)ReportData;
	uint8_t  CurrLEDMask = LEDs_GetLEDs();

	Data[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
     edc:	98 2f       	mov	r25, r24
     ede:	91 70       	andi	r25, 0x01	; 1
     ee0:	90 83       	st	Z, r25
	Data[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
     ee2:	81 fb       	bst	r24, 1
     ee4:	99 27       	eor	r25, r25
     ee6:	90 f9       	bld	r25, 0
     ee8:	91 83       	std	Z+1, r25	; 0x01
	Data[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
     eea:	84 fb       	bst	r24, 4
     eec:	99 27       	eor	r25, r25
     eee:	90 f9       	bld	r25, 0
     ef0:	92 83       	std	Z+2, r25	; 0x02
	Data[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);
     ef2:	82 95       	swap	r24
     ef4:	86 95       	lsr	r24
     ef6:	87 70       	andi	r24, 0x07	; 7
     ef8:	83 83       	std	Z+3, r24	; 0x03

	*ReportSize = GENERIC_REPORT_SIZE;
     efa:	88 e0       	ldi	r24, 0x08	; 8
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	91 83       	std	Z+1, r25	; 0x01
	return false;
}
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	08 95       	ret

00000f0c <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     f0c:	f9 01       	movw	r30, r18
	uint8_t* Data       = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;

	if (Data[0])
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 81       	ld	r25, Z
     f12:	91 11       	cpse	r25, r1
     f14:	01 c0       	rjmp	.+2      	; 0xf18 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
     f16:	80 e0       	ldi	r24, 0x00	; 0
	  NewLEDMask |= LEDS_LED1;

	if (Data[1])
     f18:	91 81       	ldd	r25, Z+1	; 0x01
     f1a:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED2;
     f1c:	82 60       	ori	r24, 0x02	; 2

	if (Data[2])
     f1e:	92 81       	ldd	r25, Z+2	; 0x02
     f20:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED3;
     f22:	80 61       	ori	r24, 0x10	; 16

	if (Data[3])
     f24:	93 81       	ldd	r25, Z+3	; 0x03
     f26:	91 11       	cpse	r25, r1
	  NewLEDMask |= LEDS_LED4;
     f28:	80 62       	ori	r24, 0x20	; 32
				PORTD_OUTCLR = LEDMask & LEDS_PORTD_LEDS;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTR_OUTCLR = LEDS_PORTR_LEDS;
     f2a:	93 e0       	ldi	r25, 0x03	; 3
     f2c:	90 93 e6 07 	sts	0x07E6, r25
				PORTD_OUTCLR = LEDS_PORTD_LEDS;
     f30:	90 e3       	ldi	r25, 0x30	; 48
     f32:	90 93 66 06 	sts	0x0666, r25

				PORTR_OUTSET = (LEDMask & LEDS_PORTR_LEDS);
     f36:	98 2f       	mov	r25, r24
     f38:	93 70       	andi	r25, 0x03	; 3
     f3a:	90 93 e5 07 	sts	0x07E5, r25
				PORTD_OUTSET = (LEDMask & LEDS_PORTD_LEDS);
     f3e:	80 73       	andi	r24, 0x30	; 48
     f40:	80 93 65 06 	sts	0x0665, r24
     f44:	08 95       	ret

00000f46 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     f46:	5f 92       	push	r5
     f48:	6f 92       	push	r6
     f4a:	7f 92       	push	r7
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	00 d0       	rcall	.+0      	; 0xf66 <HID_Device_ProcessControlRequest+0x20>
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     f6c:	ed b6       	in	r14, 0x3d	; 61
     f6e:	fe b6       	in	r15, 0x3e	; 62
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     f70:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <HID_Device_ProcessControlRequest+0x34>
     f78:	f2 c0       	rjmp	.+484    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     f7a:	f6 01       	movw	r30, r12
     f7c:	20 81       	ld	r18, Z
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	80 91 bc 24 	lds	r24, 0x24BC
     f84:	90 91 bd 24 	lds	r25, 0x24BD
     f88:	82 17       	cp	r24, r18
     f8a:	93 07       	cpc	r25, r19
     f8c:	09 f0       	breq	.+2      	; 0xf90 <HID_Device_ProcessControlRequest+0x4a>
     f8e:	e7 c0       	rjmp	.+462    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
	  return;

	switch (USB_ControlRequest.bRequest)
     f90:	80 91 b9 24 	lds	r24, 0x24B9
     f94:	83 30       	cpi	r24, 0x03	; 3
     f96:	09 f4       	brne	.+2      	; 0xf9a <HID_Device_ProcessControlRequest+0x54>
     f98:	8c c0       	rjmp	.+280    	; 0x10b2 <HID_Device_ProcessControlRequest+0x16c>
     f9a:	30 f4       	brcc	.+12     	; 0xfa8 <HID_Device_ProcessControlRequest+0x62>
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	71 f0       	breq	.+28     	; 0xfbc <HID_Device_ProcessControlRequest+0x76>
     fa0:	82 30       	cpi	r24, 0x02	; 2
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <HID_Device_ProcessControlRequest+0x60>
     fa4:	c5 c0       	rjmp	.+394    	; 0x1130 <HID_Device_ProcessControlRequest+0x1ea>
     fa6:	db c0       	rjmp	.+438    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	09 f4       	brne	.+2      	; 0xfae <HID_Device_ProcessControlRequest+0x68>
     fac:	a7 c0       	rjmp	.+334    	; 0x10fc <HID_Device_ProcessControlRequest+0x1b6>
     fae:	8b 30       	cpi	r24, 0x0B	; 11
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <HID_Device_ProcessControlRequest+0x6e>
     fb2:	93 c0       	rjmp	.+294    	; 0x10da <HID_Device_ProcessControlRequest+0x194>
     fb4:	89 30       	cpi	r24, 0x09	; 9
     fb6:	09 f0       	breq	.+2      	; 0xfba <HID_Device_ProcessControlRequest+0x74>
     fb8:	d2 c0       	rjmp	.+420    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
     fba:	4a c0       	rjmp	.+148    	; 0x1050 <HID_Device_ProcessControlRequest+0x10a>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     fbc:	80 91 b8 24 	lds	r24, 0x24B8
     fc0:	81 3a       	cpi	r24, 0xA1	; 161
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <HID_Device_ProcessControlRequest+0x80>
     fc4:	cc c0       	rjmp	.+408    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
     fc6:	ad b6       	in	r10, 0x3d	; 61
     fc8:	be b6       	in	r11, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     fca:	19 82       	std	Y+1, r1	; 0x01
     fcc:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     fce:	e8 eb       	ldi	r30, 0xB8	; 184
     fd0:	f4 e2       	ldi	r31, 0x24	; 36
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	13 81       	ldd	r17, Z+3	; 0x03
     fd6:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     fd8:	f6 01       	movw	r30, r12
     fda:	80 85       	ldd	r24, Z+8	; 0x08
     fdc:	48 2f       	mov	r20, r24
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	8d b7       	in	r24, 0x3d	; 61
     fe2:	9e b7       	in	r25, 0x3e	; 62
     fe4:	84 1b       	sub	r24, r20
     fe6:	95 0b       	sbc	r25, r21
     fe8:	8d bf       	out	0x3d, r24	; 61
     fea:	9e bf       	out	0x3e, r25	; 62
     fec:	ed b7       	in	r30, 0x3d	; 61
     fee:	fe b7       	in	r31, 0x3e	; 62
     ff0:	31 96       	adiw	r30, 0x01	; 1
     ff2:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	cf 01       	movw	r24, r30
     ffa:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     ffe:	4f ef       	ldi	r20, 0xFF	; 255
    1000:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1002:	8e 01       	movw	r16, r28
    1004:	0f 5f       	subi	r16, 0xFF	; 255
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	94 01       	movw	r18, r8
    100a:	be 01       	movw	r22, r28
    100c:	6d 5f       	subi	r22, 0xFD	; 253
    100e:	7f 4f       	sbci	r23, 0xFF	; 255
    1010:	c6 01       	movw	r24, r12
    1012:	0e 94 64 07 	call	0xec8	; 0xec8 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1016:	f6 01       	movw	r30, r12
    1018:	86 81       	ldd	r24, Z+6	; 0x06
    101a:	97 81       	ldd	r25, Z+7	; 0x07
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	29 f0       	breq	.+10     	; 0x102a <HID_Device_ProcessControlRequest+0xe4>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1020:	40 85       	ldd	r20, Z+8	; 0x08
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	b4 01       	movw	r22, r8
    1026:	0e 94 63 10 	call	0x20c6	; 0x20c6 <memcpy>
					       HIDInterfaceInfo->Config.PrevReportINBufferSize);
				}

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

				Endpoint_ClearSETUP();
    1030:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

				if (ReportID)
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	81 11       	cpse	r24, r1
				  Endpoint_Write_8(ReportID);
    1038:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    103c:	69 81       	ldd	r22, Y+1	; 0x01
    103e:	7a 81       	ldd	r23, Y+2	; 0x02
    1040:	c4 01       	movw	r24, r8
    1042:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Endpoint_Write_Control_Stream_LE>
				Endpoint_ClearOUT();
    1046:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>
    104a:	ad be       	out	0x3d, r10	; 61
    104c:	be be       	out	0x3e, r11	; 62
    104e:	87 c0       	rjmp	.+270    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1050:	80 91 b8 24 	lds	r24, 0x24B8
    1054:	81 32       	cpi	r24, 0x21	; 33
    1056:	09 f0       	breq	.+2      	; 0x105a <HID_Device_ProcessControlRequest+0x114>
    1058:	82 c0       	rjmp	.+260    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
    105a:	8d b6       	in	r8, 0x3d	; 61
    105c:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    105e:	e8 eb       	ldi	r30, 0xB8	; 184
    1060:	f4 e2       	ldi	r31, 0x24	; 36
    1062:	06 81       	ldd	r16, Z+6	; 0x06
    1064:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1066:	72 80       	ldd	r7, Z+2	; 0x02
    1068:	63 80       	ldd	r6, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    106a:	8d b7       	in	r24, 0x3d	; 61
    106c:	9e b7       	in	r25, 0x3e	; 62
    106e:	80 1b       	sub	r24, r16
    1070:	91 0b       	sbc	r25, r17
    1072:	8d bf       	out	0x3d, r24	; 61
    1074:	9e bf       	out	0x3e, r25	; 62
    1076:	ed b7       	in	r30, 0x3d	; 61
    1078:	fe b7       	in	r31, 0x3e	; 62
    107a:	31 96       	adiw	r30, 0x01	; 1
    107c:	5f 01       	movw	r10, r30

				Endpoint_ClearSETUP();
    107e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1082:	b8 01       	movw	r22, r16
    1084:	c5 01       	movw	r24, r10
    1086:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <Endpoint_Read_Control_Stream_LE>
				Endpoint_ClearIN();
    108a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    108e:	21 e0       	ldi	r18, 0x01	; 1
    1090:	71 10       	cpse	r7, r1
    1092:	01 c0       	rjmp	.+2      	; 0x1096 <HID_Device_ProcessControlRequest+0x150>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	02 1b       	sub	r16, r18
    109a:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    109c:	2a 0d       	add	r18, r10
    109e:	3b 1d       	adc	r19, r11
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
    10a0:	4f ef       	ldi	r20, 0xFF	; 255
    10a2:	46 0d       	add	r20, r6

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    10a4:	67 2d       	mov	r22, r7
    10a6:	c6 01       	movw	r24, r12
    10a8:	0e 94 86 07 	call	0xf0c	; 0xf0c <CALLBACK_HID_Device_ProcessHIDReport>
    10ac:	8d be       	out	0x3d, r8	; 61
    10ae:	9e be       	out	0x3e, r9	; 62
    10b0:	56 c0       	rjmp	.+172    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    10b2:	80 91 b8 24 	lds	r24, 0x24B8
    10b6:	81 3a       	cpi	r24, 0xA1	; 161
    10b8:	09 f0       	breq	.+2      	; 0x10bc <HID_Device_ProcessControlRequest+0x176>
    10ba:	51 c0       	rjmp	.+162    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    10bc:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
				while (!(Endpoint_IsINReady()));
    10c0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    10c4:	88 23       	and	r24, r24
    10c6:	e1 f3       	breq	.-8      	; 0x10c0 <HID_Device_ProcessControlRequest+0x17a>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    10c8:	f6 01       	movw	r30, r12
    10ca:	81 85       	ldd	r24, Z+9	; 0x09
    10cc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
				Endpoint_ClearIN();
    10d0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    10d4:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>
    10d8:	42 c0       	rjmp	.+132    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10da:	80 91 b8 24 	lds	r24, 0x24B8
    10de:	81 32       	cpi	r24, 0x21	; 33
    10e0:	f1 f5       	brne	.+124    	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    10e2:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    10e6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    10ea:	90 91 ba 24 	lds	r25, 0x24BA
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	91 11       	cpse	r25, r1
    10f2:	01 c0       	rjmp	.+2      	; 0x10f6 <HID_Device_ProcessControlRequest+0x1b0>
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	f6 01       	movw	r30, r12
    10f8:	81 87       	std	Z+9, r24	; 0x09
    10fa:	31 c0       	rjmp	.+98     	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10fc:	80 91 b8 24 	lds	r24, 0x24B8
    1100:	81 32       	cpi	r24, 0x21	; 33
    1102:	69 f5       	brne	.+90     	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    1104:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
				Endpoint_ClearStatusStage();
    1108:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    110c:	80 91 ba 24 	lds	r24, 0x24BA
    1110:	90 91 bb 24 	lds	r25, 0x24BB
    1114:	88 27       	eor	r24, r24
    1116:	00 24       	eor	r0, r0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	00 1c       	adc	r0, r0
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	00 1c       	adc	r0, r0
    1124:	89 2f       	mov	r24, r25
    1126:	90 2d       	mov	r25, r0
    1128:	f6 01       	movw	r30, r12
    112a:	84 87       	std	Z+12, r24	; 0x0c
    112c:	95 87       	std	Z+13, r25	; 0x0d
    112e:	17 c0       	rjmp	.+46     	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1130:	80 91 b8 24 	lds	r24, 0x24B8
    1134:	81 3a       	cpi	r24, 0xA1	; 161
    1136:	99 f4       	brne	.+38     	; 0x115e <HID_Device_ProcessControlRequest+0x218>
			{
				Endpoint_ClearSETUP();
    1138:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
				while (!(Endpoint_IsINReady()));
    113c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    1140:	88 23       	and	r24, r24
    1142:	e1 f3       	breq	.-8      	; 0x113c <HID_Device_ProcessControlRequest+0x1f6>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1144:	f6 01       	movw	r30, r12
    1146:	84 85       	ldd	r24, Z+12	; 0x0c
    1148:	95 85       	ldd	r25, Z+13	; 0x0d
    114a:	96 95       	lsr	r25
    114c:	87 95       	ror	r24
    114e:	96 95       	lsr	r25
    1150:	87 95       	ror	r24
    1152:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
				Endpoint_ClearIN();
    1156:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
				Endpoint_ClearStatusStage();
    115a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    115e:	ed be       	out	0x3d, r14	; 61
    1160:	fe be       	out	0x3e, r15	; 62
    1162:	23 96       	adiw	r28, 0x03	; 3
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	de bf       	out	0x3e, r29	; 62
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	7f 90       	pop	r7
    1182:	6f 90       	pop	r6
    1184:	5f 90       	pop	r5
    1186:	08 95       	ret

00001188 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1188:	fc 01       	movw	r30, r24
    118a:	39 96       	adiw	r30, 0x09	; 9
    118c:	27 e0       	ldi	r18, 0x07	; 7
    118e:	df 01       	movw	r26, r30
    1190:	1d 92       	st	X+, r1
    1192:	2a 95       	dec	r18
    1194:	e9 f7       	brne	.-6      	; 0x1190 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	fc 01       	movw	r30, r24
    119a:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    119c:	24 ef       	ldi	r18, 0xF4	; 244
    119e:	31 e0       	ldi	r19, 0x01	; 1
    11a0:	24 87       	std	Z+12, r18	; 0x0c
    11a2:	35 87       	std	Z+13, r19	; 0x0d

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    11a4:	23 e0       	ldi	r18, 0x03	; 3
    11a6:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    11a8:	61 e0       	ldi	r22, 0x01	; 1
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    11b0:	08 95       	ret

000011b2 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    11b2:	5f 92       	push	r5
    11b4:	6f 92       	push	r6
    11b6:	7f 92       	push	r7
    11b8:	8f 92       	push	r8
    11ba:	9f 92       	push	r9
    11bc:	af 92       	push	r10
    11be:	bf 92       	push	r11
    11c0:	cf 92       	push	r12
    11c2:	df 92       	push	r13
    11c4:	ef 92       	push	r14
    11c6:	ff 92       	push	r15
    11c8:	0f 93       	push	r16
    11ca:	1f 93       	push	r17
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <HID_Device_USBTask+0x20>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    11d8:	ad b6       	in	r10, 0x3d	; 61
    11da:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    11dc:	80 91 b7 24 	lds	r24, 0x24B7
    11e0:	84 30       	cpi	r24, 0x04	; 4
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <HID_Device_USBTask+0x34>
    11e4:	9c c0       	rjmp	.+312    	; 0x131e <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    11e6:	e0 91 c6 04 	lds	r30, 0x04C6
    11ea:	f0 91 c7 04 	lds	r31, 0x04C7
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    11ee:	d7 01       	movw	r26, r14
    11f0:	1a 96       	adiw	r26, 0x0a	; 10
    11f2:	2d 91       	ld	r18, X+
    11f4:	3c 91       	ld	r19, X
    11f6:	1b 97       	sbiw	r26, 0x0b	; 11
    11f8:	80 a1       	ldd	r24, Z+32	; 0x20
    11fa:	91 a1       	ldd	r25, Z+33	; 0x21
    11fc:	28 17       	cp	r18, r24
    11fe:	39 07       	cpc	r19, r25
    1200:	09 f4       	brne	.+2      	; 0x1204 <HID_Device_USBTask+0x52>
    1202:	8d c0       	rjmp	.+282    	; 0x131e <HID_Device_USBTask+0x16c>
		#else
		return;
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	8c 91       	ld	r24, X
    1208:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    120c:	80 91 c0 24 	lds	r24, 0x24C0
    1210:	90 91 c1 24 	lds	r25, 0x24C1
    1214:	fc 01       	movw	r30, r24
    1216:	ef 5b       	subi	r30, 0xBF	; 191
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	20 81       	ld	r18, Z
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	80 81       	ld	r24, Z

	if (Endpoint_IsReadWriteAllowed())
    1220:	28 17       	cp	r18, r24
    1222:	08 f0       	brcs	.+2      	; 0x1226 <HID_Device_USBTask+0x74>
    1224:	7c c0       	rjmp	.+248    	; 0x131e <HID_Device_USBTask+0x16c>
    1226:	8d b6       	in	r8, 0x3d	; 61
    1228:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    122a:	f7 01       	movw	r30, r14
    122c:	40 85       	ldd	r20, Z+8	; 0x08
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	8d b7       	in	r24, 0x3d	; 61
    1232:	9e b7       	in	r25, 0x3e	; 62
    1234:	84 1b       	sub	r24, r20
    1236:	95 0b       	sbc	r25, r21
    1238:	8d bf       	out	0x3d, r24	; 61
    123a:	9e bf       	out	0x3e, r25	; 62
    123c:	ad b7       	in	r26, 0x3d	; 61
    123e:	be b7       	in	r27, 0x3e	; 62
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	6d 01       	movw	r12, r26
		uint8_t  ReportID     = 0;
    1244:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1246:	19 82       	std	Y+1, r1	; 0x01
    1248:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1254:	8e 01       	movw	r16, r28
    1256:	0f 5f       	subi	r16, 0xFF	; 255
    1258:	1f 4f       	sbci	r17, 0xFF	; 255
    125a:	96 01       	movw	r18, r12
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	be 01       	movw	r22, r28
    1260:	6d 5f       	subi	r22, 0xFD	; 253
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	c7 01       	movw	r24, r14
    1266:	0e 94 64 07 	call	0xec8	; 0xec8 <CALLBACK_HID_Device_CreateHIDReport>
    126a:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    126c:	f7 01       	movw	r30, r14
    126e:	84 85       	ldd	r24, Z+12	; 0x0c
    1270:	95 85       	ldd	r25, Z+13	; 0x0d
    1272:	89 2b       	or	r24, r25
    1274:	41 f0       	breq	.+16     	; 0x1286 <HID_Device_USBTask+0xd4>
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	26 85       	ldd	r18, Z+14	; 0x0e
    127a:	37 85       	ldd	r19, Z+15	; 0x0f
    127c:	23 2b       	or	r18, r19
    127e:	09 f0       	breq	.+2      	; 0x1282 <HID_Device_USBTask+0xd0>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	78 2e       	mov	r7, r24
    1284:	01 c0       	rjmp	.+2      	; 0x1288 <HID_Device_USBTask+0xd6>
    1286:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1288:	d7 01       	movw	r26, r14
    128a:	16 96       	adiw	r26, 0x06	; 6
    128c:	0d 91       	ld	r16, X+
    128e:	1c 91       	ld	r17, X
    1290:	17 97       	sbiw	r26, 0x07	; 7
    1292:	01 15       	cp	r16, r1
    1294:	11 05       	cpc	r17, r1
    1296:	99 f0       	breq	.+38     	; 0x12be <HID_Device_USBTask+0x10c>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1298:	49 81       	ldd	r20, Y+1	; 0x01
    129a:	5a 81       	ldd	r21, Y+2	; 0x02
    129c:	b8 01       	movw	r22, r16
    129e:	c6 01       	movw	r24, r12
    12a0:	0e 94 56 10 	call	0x20ac	; 0x20ac <memcmp>
    12a4:	66 24       	eor	r6, r6
    12a6:	63 94       	inc	r6
    12a8:	89 2b       	or	r24, r25
    12aa:	09 f4       	brne	.+2      	; 0x12ae <HID_Device_USBTask+0xfc>
    12ac:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    12ae:	f7 01       	movw	r30, r14
    12b0:	40 85       	ldd	r20, Z+8	; 0x08
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	b6 01       	movw	r22, r12
    12b6:	c8 01       	movw	r24, r16
    12b8:	0e 94 63 10 	call	0x20c6	; 0x20c6 <memcpy>
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <HID_Device_USBTask+0x10e>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    12be:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	9a 81       	ldd	r25, Y+2	; 0x02
    12c4:	89 2b       	or	r24, r25
    12c6:	01 f1       	breq	.+64     	; 0x1308 <HID_Device_USBTask+0x156>
    12c8:	51 10       	cpse	r5, r1
    12ca:	04 c0       	rjmp	.+8      	; 0x12d4 <HID_Device_USBTask+0x122>
    12cc:	61 10       	cpse	r6, r1
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <HID_Device_USBTask+0x122>
    12d0:	70 fe       	sbrs	r7, 0
    12d2:	1a c0       	rjmp	.+52     	; 0x1308 <HID_Device_USBTask+0x156>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    12d4:	d7 01       	movw	r26, r14
    12d6:	1c 96       	adiw	r26, 0x0c	; 12
    12d8:	8d 91       	ld	r24, X+
    12da:	9c 91       	ld	r25, X
    12dc:	1d 97       	sbiw	r26, 0x0d	; 13
    12de:	1e 96       	adiw	r26, 0x0e	; 14
    12e0:	8d 93       	st	X+, r24
    12e2:	9c 93       	st	X, r25
    12e4:	1f 97       	sbiw	r26, 0x0f	; 15

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	8c 91       	ld	r24, X
    12ea:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

			if (ReportID)
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	81 11       	cpse	r24, r1
			  Endpoint_Write_8(ReportID);
    12f2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	7a 81       	ldd	r23, Y+2	; 0x02
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	c6 01       	movw	r24, r12
    1300:	0e 94 0c 0b 	call	0x1618	; 0x1618 <Endpoint_Write_Stream_LE>

			Endpoint_ClearIN();
    1304:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
    1308:	e0 91 c6 04 	lds	r30, 0x04C6
    130c:	f0 91 c7 04 	lds	r31, 0x04C7
    1310:	80 a1       	ldd	r24, Z+32	; 0x20
    1312:	91 a1       	ldd	r25, Z+33	; 0x21
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1314:	f7 01       	movw	r30, r14
    1316:	82 87       	std	Z+10, r24	; 0x0a
    1318:	93 87       	std	Z+11, r25	; 0x0b
    131a:	8d be       	out	0x3d, r8	; 61
    131c:	9e be       	out	0x3e, r9	; 62
	}
}
    131e:	ad be       	out	0x3d, r10	; 61
    1320:	be be       	out	0x3e, r11	; 62
    1322:	23 96       	adiw	r28, 0x03	; 3
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	ff 90       	pop	r15
    1332:	ef 90       	pop	r14
    1334:	df 90       	pop	r13
    1336:	cf 90       	pop	r12
    1338:	bf 90       	pop	r11
    133a:	af 90       	pop	r10
    133c:	9f 90       	pop	r9
    133e:	8f 90       	pop	r8
    1340:	7f 90       	pop	r7
    1342:	6f 90       	pop	r6
    1344:	5f 90       	pop	r5
    1346:	08 95       	ret

00001348 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	ea 97       	sbiw	r28, 0x3a	; 58
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	08 eb       	ldi	r16, 0xB8	; 184
    1360:	14 e2       	ldi	r17, 0x24	; 36
    1362:	0f 2e       	mov	r0, r31
    1364:	f0 ec       	ldi	r31, 0xC0	; 192
    1366:	ef 2e       	mov	r14, r31
    1368:	f4 e2       	ldi	r31, 0x24	; 36
    136a:	ff 2e       	mov	r15, r31
    136c:	f0 2d       	mov	r31, r0
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    136e:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Endpoint_Read_8>
    1372:	f8 01       	movw	r30, r16
    1374:	81 93       	st	Z+, r24
    1376:	8f 01       	movw	r16, r30
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1378:	ee 15       	cp	r30, r14
    137a:	ff 05       	cpc	r31, r15
    137c:	c1 f7       	brne	.-16     	; 0x136e <USB_Device_ProcessControlRequest+0x26>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    137e:	0e 94 53 07 	call	0xea6	; 0xea6 <EVENT_USB_Device_ControlRequest>

	if (Endpoint_IsSETUPReceived())
    1382:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    1386:	88 23       	and	r24, r24
    1388:	09 f4       	brne	.+2      	; 0x138c <USB_Device_ProcessControlRequest+0x44>
    138a:	13 c1       	rjmp	.+550    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    138c:	e8 eb       	ldi	r30, 0xB8	; 184
    138e:	f4 e2       	ldi	r31, 0x24	; 36
    1390:	20 81       	ld	r18, Z

		switch (USB_ControlRequest.bRequest)
    1392:	31 81       	ldd	r19, Z+1	; 0x01
    1394:	83 2f       	mov	r24, r19
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	8a 30       	cpi	r24, 0x0A	; 10
    139a:	91 05       	cpc	r25, r1
    139c:	08 f0       	brcs	.+2      	; 0x13a0 <USB_Device_ProcessControlRequest+0x58>
    139e:	09 c1       	rjmp	.+530    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
    13a0:	fc 01       	movw	r30, r24
    13a2:	88 27       	eor	r24, r24
    13a4:	e2 50       	subi	r30, 0x02	; 2
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	0c 94 4e 10 	jmp	0x209c	; 0x209c <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13ae:	20 38       	cpi	r18, 0x80	; 128
    13b0:	21 f0       	breq	.+8      	; 0x13ba <USB_Device_ProcessControlRequest+0x72>
    13b2:	22 38       	cpi	r18, 0x82	; 130
    13b4:	09 f0       	breq	.+2      	; 0x13b8 <USB_Device_ProcessControlRequest+0x70>
    13b6:	fd c0       	rjmp	.+506    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    13ba:	10 91 b4 24 	lds	r17, 0x24B4
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    13be:	80 91 b5 24 	lds	r24, 0x24B5
    13c2:	88 23       	and	r24, r24
    13c4:	91 f0       	breq	.+36     	; 0x13ea <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    13c6:	12 60       	ori	r17, 0x02	; 2
    13c8:	10 c0       	rjmp	.+32     	; 0x13ea <USB_Device_ProcessControlRequest+0xa2>
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    13ca:	80 91 bc 24 	lds	r24, 0x24BC
    13ce:	8f 70       	andi	r24, 0x0F	; 15
    13d0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    13d4:	e0 91 c2 24 	lds	r30, 0x24C2
    13d8:	f0 91 c3 24 	lds	r31, 0x24C3
    13dc:	11 81       	ldd	r17, Z+1	; 0x01
    13de:	12 fb       	bst	r17, 2
    13e0:	11 27       	eor	r17, r17
    13e2:	10 f9       	bld	r17, 0

			CurrentStatus = Endpoint_IsStalled();

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
			break;
		default:
			return;
	}

	Endpoint_ClearSETUP();
    13ea:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				Endpoint_Write_8(Data & 0xFF);
    13ee:	81 2f       	mov	r24, r17
    13f0:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
				Endpoint_Write_8(Data >> 8);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();
    13fa:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    13fe:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>
    1402:	d7 c0       	rjmp	.+430    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1404:	22 23       	and	r18, r18
    1406:	09 f4       	brne	.+2      	; 0x140a <USB_Device_ProcessControlRequest+0xc2>
    1408:	dd c0       	rjmp	.+442    	; 0x15c4 <USB_Device_ProcessControlRequest+0x27c>
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	09 f0       	breq	.+2      	; 0x1410 <USB_Device_ProcessControlRequest+0xc8>
    140e:	d1 c0       	rjmp	.+418    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
    1410:	de c0       	rjmp	.+444    	; 0x15ce <USB_Device_ProcessControlRequest+0x286>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	33 30       	cpi	r19, 0x03	; 3
    1416:	09 f0       	breq	.+2      	; 0x141a <USB_Device_ProcessControlRequest+0xd2>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	80 93 b5 24 	sts	0x24B5, r24
    141e:	25 c0       	rjmp	.+74     	; 0x146a <USB_Device_ProcessControlRequest+0x122>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1420:	e0 91 bc 24 	lds	r30, 0x24BC
    1424:	1e 2f       	mov	r17, r30
    1426:	1f 70       	andi	r17, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1428:	09 f4       	brne	.+2      	; 0x142c <USB_Device_ProcessControlRequest+0xe4>
    142a:	c3 c0       	rjmp	.+390    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    142c:	81 2f       	mov	r24, r17
    142e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

				if (Endpoint_IsEnabled())
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1432:	80 91 b9 24 	lds	r24, 0x24B9
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	19 f4       	brne	.+6      	; 0x1440 <USB_Device_ProcessControlRequest+0xf8>
					{
						Endpoint_StallTransaction();
    143a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Endpoint_StallTransaction>
    143e:	15 c0       	rjmp	.+42     	; 0x146a <USB_Device_ProcessControlRequest+0x122>
			 *  \ingroup Group_EndpointPacketManagement_XMEGA
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				USB_Endpoint_SelectedHandle->CTRL &= ~USB_EP_STALL_bm;
    1440:	e0 91 c2 24 	lds	r30, 0x24C2
    1444:	f0 91 c3 24 	lds	r31, 0x24C3
    1448:	81 81       	ldd	r24, Z+1	; 0x01
    144a:	8b 7f       	andi	r24, 0xFB	; 251
    144c:	81 83       	std	Z+1, r24	; 0x01
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				if (Address & ENDPOINT_DIR_IN)
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].IN.Position  = 0;
				else
				  USB_Endpoint_FIFOs[Address & ENDPOINT_EPNUM_MASK].OUT.Position = 0;
    144e:	24 e8       	ldi	r18, 0x84	; 132
    1450:	12 9f       	mul	r17, r18
    1452:	f0 01       	movw	r30, r0
    1454:	11 24       	eor	r1, r1
    1456:	ea 5f       	subi	r30, 0xFA	; 250
    1458:	fa 4d       	sbci	r31, 0xDA	; 218
    145a:	10 82       	st	Z, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				USB_Endpoint_SelectedHandle->STATUS &= ~USB_EP_TOGGLE_bm;
    145c:	e0 91 c2 24 	lds	r30, 0x24C2
    1460:	f0 91 c3 24 	lds	r31, 0x24C3
    1464:	80 81       	ld	r24, Z
    1466:	8e 7f       	andi	r24, 0xFE	; 254
    1468:	80 83       	st	Z, r24
		#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	Endpoint_ClearSETUP();
    1470:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1474:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>
    1478:	9c c0       	rjmp	.+312    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    147a:	21 11       	cpse	r18, r1
    147c:	9a c0       	rjmp	.+308    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    147e:	10 91 ba 24 	lds	r17, 0x24BA
    1482:	1f 77       	andi	r17, 0x7F	; 127

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();
    1484:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

	Endpoint_ClearStatusStage();
    1488:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>

	while (!(Endpoint_IsINReady()));
    148c:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    1490:	88 23       	and	r24, r24
    1492:	e1 f3       	breq	.-8      	; 0x148c <USB_Device_ProcessControlRequest+0x144>
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    1494:	10 93 c3 04 	sts	0x04C3, r17

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1498:	11 11       	cpse	r17, r1
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <USB_Device_ProcessControlRequest+0x158>
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <USB_Device_ProcessControlRequest+0x15a>
    14a0:	83 e0       	ldi	r24, 0x03	; 3
    14a2:	80 93 b7 24 	sts	0x24B7, r24
    14a6:	85 c0       	rjmp	.+266    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14a8:	20 58       	subi	r18, 0x80	; 128
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	08 f0       	brcs	.+2      	; 0x14b0 <USB_Device_ProcessControlRequest+0x168>
    14ae:	81 c0       	rjmp	.+258    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    14b0:	80 91 ba 24 	lds	r24, 0x24BA
    14b4:	90 91 bb 24 	lds	r25, 0x24BB
    14b8:	8c 3d       	cpi	r24, 0xDC	; 220
    14ba:	e3 e0       	ldi	r30, 0x03	; 3
    14bc:	9e 07       	cpc	r25, r30
    14be:	b9 f5       	brne	.+110    	; 0x152e <USB_Device_ProcessControlRequest+0x1e6>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    14c4:	8a e3       	ldi	r24, 0x3A	; 58
    14c6:	89 83       	std	Y+1, r24	; 0x01
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    14c8:	7f b7       	in	r23, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    14ca:	f8 94       	cli
				#endif

				GCC_MEMORY_BARRIER();
    14cc:	ae 01       	movw	r20, r28
    14ce:	4d 5f       	subi	r20, 0xFD	; 253
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    14d2:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    14d4:	38 e0       	ldi	r19, 0x08	; 8

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte;

					NVM.CMD    = NVM_CMD_READ_CALIB_ROW_gc;
    14d6:	a0 ec       	ldi	r26, 0xC0	; 192
    14d8:	b1 e0       	ldi	r27, 0x01	; 1
    14da:	62 e0       	ldi	r22, 0x02	; 2
    14dc:	1a 96       	adiw	r26, 0x0a	; 10
    14de:	6c 93       	st	X, r22
    14e0:	1a 97       	sbiw	r26, 0x0a	; 10
					SerialByte = pgm_read_byte(SigReadAddress);
    14e2:	e3 2f       	mov	r30, r19
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	84 91       	lpm	r24, Z
					NVM.CMD    = 0;
    14e8:	1a 96       	adiw	r26, 0x0a	; 10
    14ea:	1c 92       	st	X, r1
    14ec:	1a 97       	sbiw	r26, 0x0a	; 10

					if (SerialCharNum & 0x01)
    14ee:	20 ff       	sbrs	r18, 0
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <USB_Device_ProcessControlRequest+0x1b0>
					{
						SerialByte >>= 4;
    14f2:	82 95       	swap	r24
    14f4:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    14f6:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    14f8:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    14fa:	8a 30       	cpi	r24, 0x0A	; 10
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <USB_Device_ProcessControlRequest+0x1bc>
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	c7 96       	adiw	r24, 0x37	; 55
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <USB_Device_ProcessControlRequest+0x1c0>
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	c0 96       	adiw	r24, 0x30	; 48
    1508:	fa 01       	movw	r30, r20
    150a:	81 93       	st	Z+, r24
    150c:	91 93       	st	Z+, r25
    150e:	af 01       	movw	r20, r30
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1510:	2f 5f       	subi	r18, 0xFF	; 255
    1512:	2c 31       	cpi	r18, 0x1C	; 28
    1514:	19 f7       	brne	.-58     	; 0x14dc <USB_Device_ProcessControlRequest+0x194>
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1516:	7f bf       	out	0x3f, r23	; 63

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();
    1518:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    151c:	6a e3       	ldi	r22, 0x3A	; 58
    151e:	70 e0       	ldi	r23, 0x00	; 0
    1520:	ce 01       	movw	r24, r28
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <Endpoint_Write_Control_Stream_LE>
	Endpoint_ClearOUT();
    1528:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>
    152c:	42 c0       	rjmp	.+132    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    152e:	ae 01       	movw	r20, r28
    1530:	4f 5f       	subi	r20, 0xFF	; 255
    1532:	5f 4f       	sbci	r21, 0xFF	; 255
    1534:	60 91 bc 24 	lds	r22, 0x24BC
    1538:	0e 94 4b 04 	call	0x896	; 0x896 <CALLBACK_USB_GetDescriptor>
    153c:	8c 01       	movw	r16, r24
    153e:	89 2b       	or	r24, r25
    1540:	c1 f1       	breq	.+112    	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}

	Endpoint_ClearSETUP();
    1542:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1546:	b8 01       	movw	r22, r16
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#endif

	Endpoint_ClearOUT();
    1550:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>
    1554:	2e c0       	rjmp	.+92     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1556:	20 38       	cpi	r18, 0x80	; 128
    1558:	61 f5       	brne	.+88     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
	EVENT_USB_Device_ConfigurationChanged();
}

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    155a:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    155e:	80 91 b3 24 	lds	r24, 0x24B3
    1562:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
	Endpoint_ClearIN();
    1566:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>

	Endpoint_ClearStatusStage();
    156a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>
    156e:	21 c0       	rjmp	.+66     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1570:	21 11       	cpse	r18, r1
    1572:	1f c0       	rjmp	.+62     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1574:	80 91 ba 24 	lds	r24, 0x24BA
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	d8 f4       	brcc	.+54     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
	if ((uint8_t)USB_ControlRequest.wValue > DevDescriptorPtr->NumberOfConfigurations)
	  return;
	#endif
	#endif

	Endpoint_ClearSETUP();
    157c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1580:	80 91 ba 24 	lds	r24, 0x24BA
    1584:	80 93 b3 24 	sts	0x24B3, r24

	Endpoint_ClearStatusStage();
    1588:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    158c:	80 91 b3 24 	lds	r24, 0x24B3
    1590:	88 23       	and	r24, r24
    1592:	21 f0       	breq	.+8      	; 0x159c <USB_Device_ProcessControlRequest+0x254>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1594:	84 e0       	ldi	r24, 0x04	; 4
    1596:	80 93 b7 24 	sts	0x24B7, r24
    159a:	09 c0       	rjmp	.+18     	; 0x15ae <USB_Device_ProcessControlRequest+0x266>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    159c:	80 91 c3 04 	lds	r24, 0x04C3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    15a0:	81 11       	cpse	r24, r1
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <USB_Device_ProcessControlRequest+0x260>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <USB_Device_ProcessControlRequest+0x262>
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	80 93 b7 24 	sts	0x24B7, r24

	EVENT_USB_Device_ConfigurationChanged();
    15ae:	0e 94 37 07 	call	0xe6e	; 0xe6e <EVENT_USB_Device_ConfigurationChanged>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    15b2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    15b6:	88 23       	and	r24, r24
    15b8:	81 f0       	breq	.+32     	; 0x15da <USB_Device_ProcessControlRequest+0x292>
	{
		Endpoint_ClearSETUP();
    15ba:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <Endpoint_ClearSETUP>
		Endpoint_StallTransaction();
    15be:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <Endpoint_StallTransaction>
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <USB_Device_ProcessControlRequest+0x292>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    15c4:	80 91 ba 24 	lds	r24, 0x24BA
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	99 f7       	brne	.-26     	; 0x15b2 <USB_Device_ProcessControlRequest+0x26a>
    15cc:	22 cf       	rjmp	.-444    	; 0x1412 <USB_Device_ProcessControlRequest+0xca>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    15ce:	80 91 ba 24 	lds	r24, 0x24BA
    15d2:	88 23       	and	r24, r24
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <USB_Device_ProcessControlRequest+0x290>
    15d6:	24 cf       	rjmp	.-440    	; 0x1420 <USB_Device_ProcessControlRequest+0xd8>
    15d8:	48 cf       	rjmp	.-368    	; 0x146a <USB_Device_ProcessControlRequest+0x122>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    15da:	ea 96       	adiw	r28, 0x3a	; 58
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	08 95       	ret

000015ee <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    15ee:	08 95       	ret

000015f0 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    15f0:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    15f2:	80 91 b7 24 	lds	r24, 0x24B7
    15f6:	88 23       	and	r24, r24
    15f8:	69 f0       	breq	.+26     	; 0x1614 <USB_USBTask+0x24>
			 *  \return Index of the currently selected endpoint.
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				return USB_Endpoint_SelectedEndpoint;
    15fa:	c0 91 c4 24 	lds	r28, 0x24C4
	  return;

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (Endpoint_IsSETUPReceived())
    1604:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    1608:	81 11       	cpse	r24, r1
	  USB_Device_ProcessControlRequest();
    160a:	0e 94 a4 09 	call	0x1348	; 0x1348 <USB_Device_ProcessControlRequest>

	Endpoint_SelectEndpoint(PrevEndpoint);
    160e:	8c 2f       	mov	r24, r28
    1610:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	8c 01       	movw	r16, r24
    162a:	eb 01       	movw	r28, r22
    162c:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    162e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Endpoint_WaitUntilReady>
    1632:	81 11       	cpse	r24, r1
    1634:	3d c0       	rjmp	.+122    	; 0x16b0 <Endpoint_Write_Stream_LE+0x98>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1636:	c1 14       	cp	r12, r1
    1638:	d1 04       	cpc	r13, r1
    163a:	39 f0       	breq	.+14     	; 0x164a <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    163c:	f6 01       	movw	r30, r12
    163e:	80 81       	ld	r24, Z
    1640:	91 81       	ldd	r25, Z+1	; 0x01
    1642:	c8 1b       	sub	r28, r24
    1644:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1646:	08 0f       	add	r16, r24
    1648:	19 1f       	adc	r17, r25
	}

	while (Length)
    164a:	20 97       	sbiw	r28, 0x00	; 0
    164c:	81 f1       	breq	.+96     	; 0x16ae <Endpoint_Write_Stream_LE+0x96>
    164e:	e1 2c       	mov	r14, r1
    1650:	f1 2c       	mov	r15, r1
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return (USB_Endpoint_SelectedFIFO->Position < USB_Endpoint_SelectedFIFO->Length);
    1652:	20 91 c0 24 	lds	r18, 0x24C0
    1656:	30 91 c1 24 	lds	r19, 0x24C1
    165a:	f9 01       	movw	r30, r18
    165c:	ef 5b       	subi	r30, 0xBF	; 191
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	90 81       	ld	r25, Z
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1666:	98 17       	cp	r25, r24
    1668:	a8 f0       	brcs	.+42     	; 0x1694 <Endpoint_Write_Stream_LE+0x7c>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    166a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    166e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
    1672:	c1 14       	cp	r12, r1
    1674:	d1 04       	cpc	r13, r1
    1676:	49 f0       	breq	.+18     	; 0x168a <Endpoint_Write_Stream_LE+0x72>
			{
				*BytesProcessed += BytesInTransfer;
    1678:	f6 01       	movw	r30, r12
    167a:	80 81       	ld	r24, Z
    167c:	91 81       	ldd	r25, Z+1	; 0x01
    167e:	e8 0e       	add	r14, r24
    1680:	f9 1e       	adc	r15, r25
    1682:	e0 82       	st	Z, r14
    1684:	f1 82       	std	Z+1, r15	; 0x01
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1686:	85 e0       	ldi	r24, 0x05	; 5
    1688:	13 c0       	rjmp	.+38     	; 0x16b0 <Endpoint_Write_Stream_LE+0x98>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    168a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <Endpoint_WaitUntilReady>
    168e:	88 23       	and	r24, r24
    1690:	51 f0       	breq	.+20     	; 0x16a6 <Endpoint_Write_Stream_LE+0x8e>
    1692:	0e c0       	rjmp	.+28     	; 0x16b0 <Endpoint_Write_Stream_LE+0x98>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1694:	f8 01       	movw	r30, r16
    1696:	81 91       	ld	r24, Z+
    1698:	8f 01       	movw	r16, r30
    169a:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    169e:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    16a0:	ff ef       	ldi	r31, 0xFF	; 255
    16a2:	ef 1a       	sub	r14, r31
    16a4:	ff 0a       	sbc	r15, r31
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    16a6:	20 97       	sbiw	r28, 0x00	; 0
    16a8:	a1 f6       	brne	.-88     	; 0x1652 <Endpoint_Write_Stream_LE+0x3a>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <Endpoint_Write_Stream_LE+0x98>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	1f 91       	pop	r17
    16b6:	0f 91       	pop	r16
    16b8:	ff 90       	pop	r15
    16ba:	ef 90       	pop	r14
    16bc:	df 90       	pop	r13
    16be:	cf 90       	pop	r12
    16c0:	08 95       	ret

000016c2 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    16c2:	cf 92       	push	r12
    16c4:	df 92       	push	r13
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	c8 2e       	mov	r12, r24
    16d4:	d9 2e       	mov	r13, r25
    16d6:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    16d8:	80 91 c4 24 	lds	r24, 0x24C4
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    16e2:	c0 91 be 24 	lds	r28, 0x24BE
    16e6:	d0 91 bf 24 	lds	r29, 0x24BF
    16ea:	c0 17       	cp	r28, r16
    16ec:	d1 07       	cpc	r29, r17
    16ee:	40 f0       	brcs	.+16     	; 0x1700 <Endpoint_Write_Control_Stream_LE+0x3e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    16f0:	01 15       	cp	r16, r1
    16f2:	11 05       	cpc	r17, r1
    16f4:	21 f4       	brne	.+8      	; 0x16fe <Endpoint_Write_Control_Stream_LE+0x3c>
	  Endpoint_ClearIN();
    16f6:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
    16fa:	e8 01       	movw	r28, r16
    16fc:	01 c0       	rjmp	.+2      	; 0x1700 <Endpoint_Write_Control_Stream_LE+0x3e>
    16fe:	e8 01       	movw	r28, r16
    1700:	ec 2c       	mov	r14, r12
    1702:	fd 2c       	mov	r15, r13
    1704:	d1 2c       	mov	r13, r1
    1706:	49 c0       	rjmp	.+146    	; 0x179a <Endpoint_Write_Control_Stream_LE+0xd8>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1708:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    170c:	88 23       	and	r24, r24
    170e:	09 f4       	brne	.+2      	; 0x1712 <Endpoint_Write_Control_Stream_LE+0x50>
    1710:	5a c0       	rjmp	.+180    	; 0x17c6 <Endpoint_Write_Control_Stream_LE+0x104>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1712:	85 30       	cpi	r24, 0x05	; 5
    1714:	09 f4       	brne	.+2      	; 0x1718 <Endpoint_Write_Control_Stream_LE+0x56>
    1716:	59 c0       	rjmp	.+178    	; 0x17ca <Endpoint_Write_Control_Stream_LE+0x108>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1718:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    171c:	81 11       	cpse	r24, r1
    171e:	57 c0       	rjmp	.+174    	; 0x17ce <Endpoint_Write_Control_Stream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1720:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    1724:	81 11       	cpse	r24, r1
    1726:	49 c0       	rjmp	.+146    	; 0x17ba <Endpoint_Write_Control_Stream_LE+0xf8>
		  break;

		if (Endpoint_IsINReady())
    1728:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    172c:	88 23       	and	r24, r24
    172e:	a9 f1       	breq	.+106    	; 0x179a <Endpoint_Write_Control_Stream_LE+0xd8>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1730:	80 91 c4 24 	lds	r24, 0x24C4
    1734:	88 23       	and	r24, r24
    1736:	74 f4       	brge	.+28     	; 0x1754 <Endpoint_Write_Control_Stream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    1738:	e0 91 c0 24 	lds	r30, 0x24C0
    173c:	f0 91 c1 24 	lds	r31, 0x24C1
    1740:	ef 5b       	subi	r30, 0xBF	; 191
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	00 81       	ld	r16, Z
    1746:	10 e0       	ldi	r17, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1748:	20 97       	sbiw	r28, 0x00	; 0
    174a:	f9 f0       	breq	.+62     	; 0x178a <Endpoint_Write_Control_Stream_LE+0xc8>
    174c:	08 30       	cpi	r16, 0x08	; 8
    174e:	11 05       	cpc	r17, r1
    1750:	78 f0       	brcs	.+30     	; 0x1770 <Endpoint_Write_Control_Stream_LE+0xae>
    1752:	1b c0       	rjmp	.+54     	; 0x178a <Endpoint_Write_Control_Stream_LE+0xc8>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1754:	80 91 c0 24 	lds	r24, 0x24C0
    1758:	90 91 c1 24 	lds	r25, 0x24C1
    175c:	fc 01       	movw	r30, r24
    175e:	e0 5c       	subi	r30, 0xC0	; 192
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	00 81       	ld	r16, Z
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	80 81       	ld	r24, Z
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	08 1b       	sub	r16, r24
    176c:	11 09       	sbc	r17, r1
    176e:	ec cf       	rjmp	.-40     	; 0x1748 <Endpoint_Write_Control_Stream_LE+0x86>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1770:	f7 01       	movw	r30, r14
    1772:	81 91       	ld	r24, Z+
    1774:	7f 01       	movw	r14, r30
    1776:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    177a:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    177c:	0f 5f       	subi	r16, 0xFF	; 255
    177e:	1f 4f       	sbci	r17, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1780:	20 97       	sbiw	r28, 0x00	; 0
    1782:	19 f0       	breq	.+6      	; 0x178a <Endpoint_Write_Control_Stream_LE+0xc8>
    1784:	08 30       	cpi	r16, 0x08	; 8
    1786:	11 05       	cpc	r17, r1
    1788:	99 f7       	brne	.-26     	; 0x1770 <Endpoint_Write_Control_Stream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    178a:	dd 24       	eor	r13, r13
    178c:	d3 94       	inc	r13
    178e:	08 30       	cpi	r16, 0x08	; 8
    1790:	11 05       	cpc	r17, r1
    1792:	09 f0       	breq	.+2      	; 0x1796 <Endpoint_Write_Control_Stream_LE+0xd4>
    1794:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    1796:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    179a:	20 97       	sbiw	r28, 0x00	; 0
    179c:	09 f0       	breq	.+2      	; 0x17a0 <Endpoint_Write_Control_Stream_LE+0xde>
    179e:	b4 cf       	rjmp	.-152    	; 0x1708 <Endpoint_Write_Control_Stream_LE+0x46>
    17a0:	d1 10       	cpse	r13, r1
    17a2:	b2 cf       	rjmp	.-156    	; 0x1708 <Endpoint_Write_Control_Stream_LE+0x46>
    17a4:	0a c0       	rjmp	.+20     	; 0x17ba <Endpoint_Write_Control_Stream_LE+0xf8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    17a6:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    17aa:	88 23       	and	r24, r24
    17ac:	91 f0       	breq	.+36     	; 0x17d2 <Endpoint_Write_Control_Stream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    17ae:	85 30       	cpi	r24, 0x05	; 5
    17b0:	91 f0       	breq	.+36     	; 0x17d6 <Endpoint_Write_Control_Stream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    17b2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    17b6:	81 11       	cpse	r24, r1
    17b8:	10 c0       	rjmp	.+32     	; 0x17da <Endpoint_Write_Control_Stream_LE+0x118>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    17ba:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    17be:	88 23       	and	r24, r24
    17c0:	91 f3       	breq	.-28     	; 0x17a6 <Endpoint_Write_Control_Stream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	0b c0       	rjmp	.+22     	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	07 c0       	rjmp	.+14     	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    17d2:	82 e0       	ldi	r24, 0x02	; 2
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    17d6:	83 e0       	ldi	r24, 0x03	; 3
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <Endpoint_Write_Control_Stream_LE+0x11a>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    17da:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	e8 2e       	mov	r14, r24
    17fc:	f9 2e       	mov	r15, r25
    17fe:	eb 01       	movw	r28, r22
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1800:	80 91 c4 24 	lds	r24, 0x24C4
    1804:	8f 77       	andi	r24, 0x7F	; 127
    1806:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (!(Length))
    180a:	20 97       	sbiw	r28, 0x00	; 0
    180c:	11 f4       	brne	.+4      	; 0x1812 <Endpoint_Read_Control_Stream_LE+0x24>
	  Endpoint_ClearOUT();
    180e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    1812:	0e 2d       	mov	r16, r14
    1814:	1f 2d       	mov	r17, r15
    1816:	36 c0       	rjmp	.+108    	; 0x1884 <Endpoint_Read_Control_Stream_LE+0x96>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1818:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    181c:	88 23       	and	r24, r24
    181e:	09 f4       	brne	.+2      	; 0x1822 <Endpoint_Read_Control_Stream_LE+0x34>
    1820:	46 c0       	rjmp	.+140    	; 0x18ae <Endpoint_Read_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1822:	85 30       	cpi	r24, 0x05	; 5
    1824:	09 f4       	brne	.+2      	; 0x1828 <Endpoint_Read_Control_Stream_LE+0x3a>
    1826:	45 c0       	rjmp	.+138    	; 0x18b2 <Endpoint_Read_Control_Stream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1828:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    182c:	81 11       	cpse	r24, r1
    182e:	43 c0       	rjmp	.+134    	; 0x18b6 <Endpoint_Read_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1830:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    1834:	88 23       	and	r24, r24
    1836:	81 f3       	breq	.-32     	; 0x1818 <Endpoint_Read_Control_Stream_LE+0x2a>
    1838:	07 c0       	rjmp	.+14     	; 0x1848 <Endpoint_Read_Control_Stream_LE+0x5a>
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    183a:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Endpoint_Read_8>
    183e:	f8 01       	movw	r30, r16
    1840:	81 93       	st	Z+, r24
    1842:	8f 01       	movw	r16, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1844:	21 97       	sbiw	r28, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    1846:	e1 f0       	breq	.+56     	; 0x1880 <Endpoint_Read_Control_Stream_LE+0x92>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1848:	80 91 c4 24 	lds	r24, 0x24C4
    184c:	88 23       	and	r24, r24
    184e:	4c f4       	brge	.+18     	; 0x1862 <Endpoint_Read_Control_Stream_LE+0x74>
				  return USB_Endpoint_SelectedFIFO->Position;
    1850:	e0 91 c0 24 	lds	r30, 0x24C0
    1854:	f0 91 c1 24 	lds	r31, 0x24C1
    1858:	ef 5b       	subi	r30, 0xBF	; 191
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	0d c0       	rjmp	.+26     	; 0x187c <Endpoint_Read_Control_Stream_LE+0x8e>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1862:	20 91 c0 24 	lds	r18, 0x24C0
    1866:	30 91 c1 24 	lds	r19, 0x24C1
    186a:	f9 01       	movw	r30, r18
    186c:	e0 5c       	subi	r30, 0xC0	; 192
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	31 96       	adiw	r30, 0x01	; 1
    1874:	20 81       	ld	r18, Z
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	82 1b       	sub	r24, r18
    187a:	91 09       	sbc	r25, r1
    187c:	89 2b       	or	r24, r25
    187e:	e9 f6       	brne	.-70     	; 0x183a <Endpoint_Read_Control_Stream_LE+0x4c>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
			}

			Endpoint_ClearOUT();
    1880:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    1884:	20 97       	sbiw	r28, 0x00	; 0
    1886:	69 f0       	breq	.+26     	; 0x18a2 <Endpoint_Read_Control_Stream_LE+0xb4>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1888:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    188c:	88 23       	and	r24, r24
    188e:	a9 f0       	breq	.+42     	; 0x18ba <Endpoint_Read_Control_Stream_LE+0xcc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1890:	85 30       	cpi	r24, 0x05	; 5
    1892:	51 f6       	brne	.-108    	; 0x1828 <Endpoint_Read_Control_Stream_LE+0x3a>
    1894:	14 c0       	rjmp	.+40     	; 0x18be <Endpoint_Read_Control_Stream_LE+0xd0>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1896:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    189a:	88 23       	and	r24, r24
    189c:	91 f0       	breq	.+36     	; 0x18c2 <Endpoint_Read_Control_Stream_LE+0xd4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	91 f0       	breq	.+36     	; 0x18c6 <Endpoint_Read_Control_Stream_LE+0xd8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    18a2:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    18a6:	88 23       	and	r24, r24
    18a8:	b1 f3       	breq	.-20     	; 0x1896 <Endpoint_Read_Control_Stream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	0d c0       	rjmp	.+26     	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18ae:	82 e0       	ldi	r24, 0x02	; 2
    18b0:	0b c0       	rjmp	.+22     	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18b2:	83 e0       	ldi	r24, 0x03	; 3
    18b4:	09 c0       	rjmp	.+18     	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	07 c0       	rjmp	.+14     	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18ba:	82 e0       	ldi	r24, 0x02	; 2
    18bc:	05 c0       	rjmp	.+10     	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <Endpoint_Read_Control_Stream_LE+0xda>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    18c6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	08 95       	ret

000018d6 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    18d6:	df 92       	push	r13
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	e8 2e       	mov	r14, r24
    18e6:	f9 2e       	mov	r15, r25
    18e8:	8b 01       	movw	r16, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    18ea:	80 91 c4 24 	lds	r24, 0x24C4
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (Length > USB_ControlRequest.wLength)
    18f4:	c0 91 be 24 	lds	r28, 0x24BE
    18f8:	d0 91 bf 24 	lds	r29, 0x24BF
    18fc:	c0 17       	cp	r28, r16
    18fe:	d1 07       	cpc	r29, r17
    1900:	40 f0       	brcs	.+16     	; 0x1912 <Endpoint_Write_Control_PStream_LE+0x3c>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1902:	01 15       	cp	r16, r1
    1904:	11 05       	cpc	r17, r1
    1906:	21 f4       	brne	.+8      	; 0x1910 <Endpoint_Write_Control_PStream_LE+0x3a>
	  Endpoint_ClearIN();
    1908:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
    190c:	e8 01       	movw	r28, r16
    190e:	01 c0       	rjmp	.+2      	; 0x1912 <Endpoint_Write_Control_PStream_LE+0x3c>
    1910:	e8 01       	movw	r28, r16
    1912:	0e 2d       	mov	r16, r14
    1914:	1f 2d       	mov	r17, r15
    1916:	d1 2c       	mov	r13, r1
    1918:	4e c0       	rjmp	.+156    	; 0x19b6 <Endpoint_Write_Control_PStream_LE+0xe0>

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    191a:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    191e:	88 23       	and	r24, r24
    1920:	09 f4       	brne	.+2      	; 0x1924 <Endpoint_Write_Control_PStream_LE+0x4e>
    1922:	5f c0       	rjmp	.+190    	; 0x19e2 <Endpoint_Write_Control_PStream_LE+0x10c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1924:	85 30       	cpi	r24, 0x05	; 5
    1926:	09 f4       	brne	.+2      	; 0x192a <Endpoint_Write_Control_PStream_LE+0x54>
    1928:	5e c0       	rjmp	.+188    	; 0x19e6 <Endpoint_Write_Control_PStream_LE+0x110>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    192a:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    192e:	81 11       	cpse	r24, r1
    1930:	5c c0       	rjmp	.+184    	; 0x19ea <Endpoint_Write_Control_PStream_LE+0x114>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1932:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    1936:	81 11       	cpse	r24, r1
    1938:	4e c0       	rjmp	.+156    	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x100>
		  break;

		if (Endpoint_IsINReady())
    193a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    193e:	88 23       	and	r24, r24
    1940:	d1 f1       	breq	.+116    	; 0x19b6 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Total number of bytes in the currently selected Endpoint's FIFO buffer.
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				if (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN)
    1942:	80 91 c4 24 	lds	r24, 0x24C4
    1946:	88 23       	and	r24, r24
    1948:	7c f4       	brge	.+30     	; 0x1968 <Endpoint_Write_Control_PStream_LE+0x92>
				  return USB_Endpoint_SelectedFIFO->Position;
    194a:	e0 91 c0 24 	lds	r30, 0x24C0
    194e:	f0 91 c1 24 	lds	r31, 0x24C1
    1952:	ef 5b       	subi	r30, 0xBF	; 191
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	e0 80       	ld	r14, Z
    1958:	f1 2c       	mov	r15, r1
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    195a:	20 97       	sbiw	r28, 0x00	; 0
    195c:	19 f1       	breq	.+70     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0xce>
    195e:	88 e0       	ldi	r24, 0x08	; 8
    1960:	e8 16       	cp	r14, r24
    1962:	f1 04       	cpc	r15, r1
    1964:	78 f0       	brcs	.+30     	; 0x1984 <Endpoint_Write_Control_PStream_LE+0xae>
    1966:	1e c0       	rjmp	.+60     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0xce>
				else
				  return (USB_Endpoint_SelectedFIFO->Length - USB_Endpoint_SelectedFIFO->Position);
    1968:	80 91 c0 24 	lds	r24, 0x24C0
    196c:	90 91 c1 24 	lds	r25, 0x24C1
    1970:	fc 01       	movw	r30, r24
    1972:	e0 5c       	subi	r30, 0xC0	; 192
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	e0 80       	ld	r14, Z
    1978:	31 96       	adiw	r30, 0x01	; 1
    197a:	80 81       	ld	r24, Z
    197c:	f1 2c       	mov	r15, r1
    197e:	e8 1a       	sub	r14, r24
    1980:	f1 08       	sbc	r15, r1
    1982:	eb cf       	rjmp	.-42     	; 0x195a <Endpoint_Write_Control_PStream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1984:	f8 01       	movw	r30, r16
    1986:	84 91       	lpm	r24, Z
    1988:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Endpoint_Write_8>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    198c:	0f 5f       	subi	r16, 0xFF	; 255
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
				Length--;
    1990:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1992:	ff ef       	ldi	r31, 0xFF	; 255
    1994:	ef 1a       	sub	r14, r31
    1996:	ff 0a       	sbc	r15, r31

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1998:	20 97       	sbiw	r28, 0x00	; 0
    199a:	21 f0       	breq	.+8      	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0xce>
    199c:	88 e0       	ldi	r24, 0x08	; 8
    199e:	e8 16       	cp	r14, r24
    19a0:	f1 04       	cpc	r15, r1
    19a2:	81 f7       	brne	.-32     	; 0x1984 <Endpoint_Write_Control_PStream_LE+0xae>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19a4:	dd 24       	eor	r13, r13
    19a6:	d3 94       	inc	r13
    19a8:	e8 e0       	ldi	r30, 0x08	; 8
    19aa:	ee 16       	cp	r14, r30
    19ac:	f1 04       	cpc	r15, r1
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <Endpoint_Write_Control_PStream_LE+0xdc>
    19b0:	d1 2c       	mov	r13, r1
			Endpoint_ClearIN();
    19b2:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19b6:	20 97       	sbiw	r28, 0x00	; 0
    19b8:	09 f0       	breq	.+2      	; 0x19bc <Endpoint_Write_Control_PStream_LE+0xe6>
    19ba:	af cf       	rjmp	.-162    	; 0x191a <Endpoint_Write_Control_PStream_LE+0x44>
    19bc:	d1 10       	cpse	r13, r1
    19be:	ad cf       	rjmp	.-166    	; 0x191a <Endpoint_Write_Control_PStream_LE+0x44>
    19c0:	0a c0       	rjmp	.+20     	; 0x19d6 <Endpoint_Write_Control_PStream_LE+0x100>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19c2:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19c6:	88 23       	and	r24, r24
    19c8:	91 f0       	breq	.+36     	; 0x19ee <Endpoint_Write_Control_PStream_LE+0x118>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19ca:	85 30       	cpi	r24, 0x05	; 5
    19cc:	91 f0       	breq	.+36     	; 0x19f2 <Endpoint_Write_Control_PStream_LE+0x11c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19ce:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Endpoint_IsSETUPReceived>
    19d2:	81 11       	cpse	r24, r1
    19d4:	10 c0       	rjmp	.+32     	; 0x19f6 <Endpoint_Write_Control_PStream_LE+0x120>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19d6:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    19da:	88 23       	and	r24, r24
    19dc:	91 f3       	breq	.-28     	; 0x19c2 <Endpoint_Write_Control_PStream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	0b c0       	rjmp	.+22     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19e2:	82 e0       	ldi	r24, 0x02	; 2
    19e4:	09 c0       	rjmp	.+18     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19e6:	83 e0       	ldi	r24, 0x03	; 3
    19e8:	07 c0       	rjmp	.+14     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19ee:	82 e0       	ldi	r24, 0x02	; 2
    19f0:	03 c0       	rjmp	.+6      	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19f2:	83 e0       	ldi	r24, 0x03	; 3
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x122>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19f6:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	08 95       	ret

00001a08 <Endpoint_ClearIN>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_ClearIN(void)
{
	USB_Endpoint_SelectedHandle->CNT     = USB_Endpoint_SelectedFIFO->Position;
    1a08:	e0 91 c2 24 	lds	r30, 0x24C2
    1a0c:	f0 91 c3 24 	lds	r31, 0x24C3
    1a10:	a0 91 c0 24 	lds	r26, 0x24C0
    1a14:	b0 91 c1 24 	lds	r27, 0x24C1
    1a18:	af 5b       	subi	r26, 0xBF	; 191
    1a1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1c:	8c 91       	ld	r24, X
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	82 83       	std	Z+2, r24	; 0x02
    1a22:	93 83       	std	Z+3, r25	; 0x03
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1a24:	80 81       	ld	r24, Z
    1a26:	8d 79       	andi	r24, 0x9D	; 157
    1a28:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1a2a:	e0 91 c0 24 	lds	r30, 0x24C0
    1a2e:	f0 91 c1 24 	lds	r31, 0x24C1
    1a32:	ef 5b       	subi	r30, 0xBF	; 191
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	10 82       	st	Z, r1
    1a38:	08 95       	ret

00001a3a <Endpoint_ClearOUT>:
}

void Endpoint_ClearOUT(void)
{
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1a3a:	e0 91 c2 24 	lds	r30, 0x24C2
    1a3e:	f0 91 c3 24 	lds	r31, 0x24C3
    1a42:	80 81       	ld	r24, Z
    1a44:	8d 79       	andi	r24, 0x9D	; 157
    1a46:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1a48:	e0 91 c0 24 	lds	r30, 0x24C0
    1a4c:	f0 91 c1 24 	lds	r31, 0x24C1
    1a50:	ef 5b       	subi	r30, 0xBF	; 191
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	10 82       	st	Z, r1
    1a56:	08 95       	ret

00001a58 <Endpoint_Read_8>:
	}
}

uint8_t Endpoint_Read_8(void)
{
	return USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++];
    1a58:	80 91 c0 24 	lds	r24, 0x24C0
    1a5c:	90 91 c1 24 	lds	r25, 0x24C1
    1a60:	fc 01       	movw	r30, r24
    1a62:	ef 5b       	subi	r30, 0xBF	; 191
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	20 81       	ld	r18, Z
    1a68:	31 e0       	ldi	r19, 0x01	; 1
    1a6a:	32 0f       	add	r19, r18
    1a6c:	30 83       	st	Z, r19
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e2 0f       	add	r30, r18
    1a72:	f1 1d       	adc	r31, r1
    1a74:	80 81       	ld	r24, Z
}
    1a76:	08 95       	ret

00001a78 <Endpoint_Write_8>:

void Endpoint_Write_8(const uint8_t Data)
{
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
    1a78:	20 91 c0 24 	lds	r18, 0x24C0
    1a7c:	30 91 c1 24 	lds	r19, 0x24C1
    1a80:	f9 01       	movw	r30, r18
    1a82:	ef 5b       	subi	r30, 0xBF	; 191
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	90 81       	ld	r25, Z
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	49 0f       	add	r20, r25
    1a8c:	40 83       	st	Z, r20
    1a8e:	f9 01       	movw	r30, r18
    1a90:	e9 0f       	add	r30, r25
    1a92:	f1 1d       	adc	r31, r1
    1a94:	80 83       	st	Z, r24
    1a96:	08 95       	ret

00001a98 <Endpoint_SelectEndpoint>:

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);

	USB_Endpoint_SelectedEndpoint = Address;
    1a98:	80 93 c4 24 	sts	0x24C4, r24
	USB_Endpoint_SelectedFIFO->Data[USB_Endpoint_SelectedFIFO->Position++] = Data;
}

void Endpoint_SelectEndpoint(const uint8_t Address)
{
	uint8_t EndpointNumber = (Address & ENDPOINT_EPNUM_MASK);
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	2f 70       	andi	r18, 0x0F	; 15

	USB_Endpoint_SelectedEndpoint = Address;

	Endpoint_FIFOPair_t* EndpointFIFOPair = &USB_Endpoint_FIFOs[EndpointNumber];
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
	USB_EndpointTable_t* EndpointTable    = (USB_EndpointTable_t*)USB.EPPTR;
    1aa2:	40 91 c6 04 	lds	r20, 0x04C6
    1aa6:	50 91 c7 04 	lds	r21, 0x04C7

	if (Address & ENDPOINT_DIR_IN)
    1aaa:	88 23       	and	r24, r24
    1aac:	e4 f4       	brge	.+56     	; 0x1ae6 <Endpoint_SelectEndpoint+0x4e>
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->IN;
    1aae:	64 e8       	ldi	r22, 0x84	; 132
    1ab0:	62 9f       	mul	r22, r18
    1ab2:	c0 01       	movw	r24, r0
    1ab4:	63 9f       	mul	r22, r19
    1ab6:	90 0d       	add	r25, r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	89 5f       	subi	r24, 0xF9	; 249
    1abc:	9a 4d       	sbci	r25, 0xDA	; 218
    1abe:	80 93 c0 24 	sts	0x24C0, r24
    1ac2:	90 93 c1 24 	sts	0x24C1, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].IN;
    1ac6:	c9 01       	movw	r24, r18
    1ac8:	82 95       	swap	r24
    1aca:	92 95       	swap	r25
    1acc:	90 7f       	andi	r25, 0xF0	; 240
    1ace:	98 27       	eor	r25, r24
    1ad0:	80 7f       	andi	r24, 0xF0	; 240
    1ad2:	98 27       	eor	r25, r24
    1ad4:	08 96       	adiw	r24, 0x08	; 8
    1ad6:	9a 01       	movw	r18, r20
    1ad8:	28 0f       	add	r18, r24
    1ada:	39 1f       	adc	r19, r25
    1adc:	20 93 c2 24 	sts	0x24C2, r18
    1ae0:	30 93 c3 24 	sts	0x24C3, r19
    1ae4:	08 95       	ret
	}
	else
	{
		USB_Endpoint_SelectedFIFO   = &EndpointFIFOPair->OUT;
    1ae6:	64 e8       	ldi	r22, 0x84	; 132
    1ae8:	62 9f       	mul	r22, r18
    1aea:	c0 01       	movw	r24, r0
    1aec:	63 9f       	mul	r22, r19
    1aee:	90 0d       	add	r25, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	8b 53       	subi	r24, 0x3B	; 59
    1af4:	9b 4d       	sbci	r25, 0xDB	; 219
    1af6:	80 93 c0 24 	sts	0x24C0, r24
    1afa:	90 93 c1 24 	sts	0x24C1, r25
		USB_Endpoint_SelectedHandle = &EndpointTable->Endpoints[EndpointNumber].OUT;
    1afe:	22 95       	swap	r18
    1b00:	32 95       	swap	r19
    1b02:	30 7f       	andi	r19, 0xF0	; 240
    1b04:	32 27       	eor	r19, r18
    1b06:	20 7f       	andi	r18, 0xF0	; 240
    1b08:	32 27       	eor	r19, r18
    1b0a:	24 0f       	add	r18, r20
    1b0c:	35 1f       	adc	r19, r21
    1b0e:	20 93 c2 24 	sts	0x24C2, r18
    1b12:	30 93 c3 24 	sts	0x24C3, r19
    1b16:	08 95       	ret

00001b18 <Endpoint_IsINReady>:
volatile USB_EP_t*        USB_Endpoint_SelectedHandle;
volatile Endpoint_FIFO_t* USB_Endpoint_SelectedFIFO;

bool Endpoint_IsINReady(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1b18:	80 91 c4 24 	lds	r24, 0x24C4
    1b1c:	80 68       	ori	r24, 0x80	; 128
    1b1e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	return ((USB_Endpoint_SelectedHandle->STATUS & USB_EP_BUSNACK0_bm) ? true : false);
    1b22:	e0 91 c2 24 	lds	r30, 0x24C2
    1b26:	f0 91 c3 24 	lds	r31, 0x24C3
    1b2a:	80 81       	ld	r24, Z
}
    1b2c:	86 95       	lsr	r24
    1b2e:	81 70       	andi	r24, 0x01	; 1
    1b30:	08 95       	ret

00001b32 <Endpoint_IsOUTReceived>:

bool Endpoint_IsOUTReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1b32:	80 91 c4 24 	lds	r24, 0x24C4
    1b36:	8f 77       	andi	r24, 0x7F	; 127
    1b38:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_TRNCOMPL0_bm)
    1b3c:	e0 91 c2 24 	lds	r30, 0x24C2
    1b40:	f0 91 c3 24 	lds	r31, 0x24C3
    1b44:	80 81       	ld	r24, Z
    1b46:	85 ff       	sbrs	r24, 5
    1b48:	0c c0       	rjmp	.+24     	; 0x1b62 <Endpoint_IsOUTReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1b4a:	80 91 c0 24 	lds	r24, 0x24C0
    1b4e:	90 91 c1 24 	lds	r25, 0x24C1
    1b52:	22 81       	ldd	r18, Z+2	; 0x02
    1b54:	33 81       	ldd	r19, Z+3	; 0x03
    1b56:	fc 01       	movw	r30, r24
    1b58:	e0 5c       	subi	r30, 0xC0	; 192
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	20 83       	st	Z, r18
		return true;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	08 95       	ret
	}

	return false;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
}
    1b64:	08 95       	ret

00001b66 <Endpoint_IsSETUPReceived>:

bool Endpoint_IsSETUPReceived(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1b66:	80 91 c4 24 	lds	r24, 0x24C4
    1b6a:	8f 77       	andi	r24, 0x7F	; 127
    1b6c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	if (USB_Endpoint_SelectedHandle->STATUS & USB_EP_SETUP_bm)
    1b70:	e0 91 c2 24 	lds	r30, 0x24C2
    1b74:	f0 91 c3 24 	lds	r31, 0x24C3
    1b78:	80 81       	ld	r24, Z
    1b7a:	84 ff       	sbrs	r24, 4
    1b7c:	0c c0       	rjmp	.+24     	; 0x1b96 <Endpoint_IsSETUPReceived+0x30>
	{
		USB_Endpoint_SelectedFIFO->Length = USB_Endpoint_SelectedHandle->CNT;
    1b7e:	80 91 c0 24 	lds	r24, 0x24C0
    1b82:	90 91 c1 24 	lds	r25, 0x24C1
    1b86:	22 81       	ldd	r18, Z+2	; 0x02
    1b88:	33 81       	ldd	r19, Z+3	; 0x03
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	e0 5c       	subi	r30, 0xC0	; 192
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	20 83       	st	Z, r18
		return true;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	08 95       	ret
	}

	return false;
    1b96:	80 e0       	ldi	r24, 0x00	; 0
}
    1b98:	08 95       	ret

00001b9a <Endpoint_ClearSETUP>:

void Endpoint_ClearSETUP(void)
{
	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint & ~ENDPOINT_DIR_IN);
    1b9a:	80 91 c4 24 	lds	r24, 0x24C4
    1b9e:	8f 77       	andi	r24, 0x7F	; 127
    1ba0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS &= ~(USB_EP_SETUP_bm | USB_EP_TRNCOMPL0_bm | USB_EP_BUSNACK0_bm | USB_EP_OVF_bm);
    1ba4:	e0 91 c2 24 	lds	r30, 0x24C2
    1ba8:	f0 91 c3 24 	lds	r31, 0x24C3
    1bac:	80 81       	ld	r24, Z
    1bae:	8d 78       	andi	r24, 0x8D	; 141
    1bb0:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1bb2:	e0 91 c2 24 	lds	r30, 0x24C2
    1bb6:	f0 91 c3 24 	lds	r31, 0x24C3
    1bba:	80 81       	ld	r24, Z
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1bc0:	e0 91 c0 24 	lds	r30, 0x24C0
    1bc4:	f0 91 c1 24 	lds	r31, 0x24C1
    1bc8:	ef 5b       	subi	r30, 0xBF	; 191
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	10 82       	st	Z, r1

	Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint | ENDPOINT_DIR_IN);
    1bce:	80 91 c4 24 	lds	r24, 0x24C4
    1bd2:	80 68       	ori	r24, 0x80	; 128
    1bd4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
	USB_Endpoint_SelectedHandle->STATUS |= USB_EP_TOGGLE_bm;
    1bd8:	e0 91 c2 24 	lds	r30, 0x24C2
    1bdc:	f0 91 c3 24 	lds	r31, 0x24C3
    1be0:	80 81       	ld	r24, Z
    1be2:	81 60       	ori	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1be6:	e0 91 c0 24 	lds	r30, 0x24C0
    1bea:	f0 91 c1 24 	lds	r31, 0x24C1
    1bee:	ef 5b       	subi	r30, 0xBF	; 191
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	10 82       	st	Z, r1
    1bf4:	08 95       	ret

00001bf6 <Endpoint_StallTransaction>:
	USB_Endpoint_SelectedFIFO->Position  = 0;
}

void Endpoint_StallTransaction(void)
{
	USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1bf6:	e0 91 c2 24 	lds	r30, 0x24C2
    1bfa:	f0 91 c3 24 	lds	r31, 0x24C3
    1bfe:	81 81       	ldd	r24, Z+1	; 0x01
    1c00:	84 60       	ori	r24, 0x04	; 4
    1c02:	81 83       	std	Z+1, r24	; 0x01

	if ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_TYPE_gm) == USB_EP_TYPE_CONTROL_gc)
    1c04:	e0 91 c2 24 	lds	r30, 0x24C2
    1c08:	f0 91 c3 24 	lds	r31, 0x24C3
    1c0c:	81 81       	ldd	r24, Z+1	; 0x01
    1c0e:	80 7c       	andi	r24, 0xC0	; 192
    1c10:	80 34       	cpi	r24, 0x40	; 64
    1c12:	61 f4       	brne	.+24     	; 0x1c2c <Endpoint_StallTransaction+0x36>
	{
		Endpoint_SelectEndpoint(USB_Endpoint_SelectedEndpoint ^ ENDPOINT_DIR_IN);
    1c14:	80 91 c4 24 	lds	r24, 0x24C4
    1c18:	80 58       	subi	r24, 0x80	; 128
    1c1a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>
		USB_Endpoint_SelectedHandle->CTRL |= USB_EP_STALL_bm;
    1c1e:	e0 91 c2 24 	lds	r30, 0x24C2
    1c22:	f0 91 c3 24 	lds	r31, 0x24C3
    1c26:	81 81       	ldd	r24, Z+1	; 0x01
    1c28:	84 60       	ori	r24, 0x04	; 4
    1c2a:	81 83       	std	Z+1, r24	; 0x01
    1c2c:	08 95       	ret

00001c2e <Endpoint_ConfigureEndpoint_PRV>:
}

bool Endpoint_ConfigureEndpoint_PRV(const uint8_t Address,
                                    const uint8_t Config,
                                    const uint8_t Size)
{
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	d8 2f       	mov	r29, r24
    1c36:	16 2f       	mov	r17, r22
    1c38:	c4 2f       	mov	r28, r20
	Endpoint_SelectEndpoint(Address);
    1c3a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <Endpoint_SelectEndpoint>

	USB_Endpoint_SelectedHandle->CTRL    = 0;
    1c3e:	e0 91 c2 24 	lds	r30, 0x24C2
    1c42:	f0 91 c3 24 	lds	r31, 0x24C3
    1c46:	11 82       	std	Z+1, r1	; 0x01
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1c48:	e0 91 c2 24 	lds	r30, 0x24C2
    1c4c:	f0 91 c3 24 	lds	r31, 0x24C3
    1c50:	dd 23       	and	r29, r29
    1c52:	a4 f0       	brlt	.+40     	; 0x1c7c <Endpoint_ConfigureEndpoint_PRV+0x4e>
    1c54:	10 82       	st	Z, r1
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1c56:	e0 91 c2 24 	lds	r30, 0x24C2
    1c5a:	f0 91 c3 24 	lds	r31, 0x24C3
    1c5e:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1c60:	e0 91 c2 24 	lds	r30, 0x24C2
    1c64:	f0 91 c3 24 	lds	r31, 0x24C3
    1c68:	12 82       	std	Z+2, r1	; 0x02
    1c6a:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1c6c:	80 91 c0 24 	lds	r24, 0x24C0
    1c70:	90 91 c1 24 	lds	r25, 0x24C1
    1c74:	84 83       	std	Z+4, r24	; 0x04
    1c76:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <Endpoint_ConfigureEndpoint_PRV+0x76>
                                    const uint8_t Size)
{
	Endpoint_SelectEndpoint(Address);

	USB_Endpoint_SelectedHandle->CTRL    = 0;
	USB_Endpoint_SelectedHandle->STATUS  = (Address & ENDPOINT_DIR_IN) ? USB_EP_BUSNACK0_bm : 0;
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	80 83       	st	Z, r24
	USB_Endpoint_SelectedHandle->CTRL    = Config;
    1c80:	e0 91 c2 24 	lds	r30, 0x24C2
    1c84:	f0 91 c3 24 	lds	r31, 0x24C3
    1c88:	11 83       	std	Z+1, r17	; 0x01
	USB_Endpoint_SelectedHandle->CNT     = 0;
    1c8a:	e0 91 c2 24 	lds	r30, 0x24C2
    1c8e:	f0 91 c3 24 	lds	r31, 0x24C3
    1c92:	12 82       	std	Z+2, r1	; 0x02
    1c94:	13 82       	std	Z+3, r1	; 0x03
	USB_Endpoint_SelectedHandle->DATAPTR = (intptr_t)USB_Endpoint_SelectedFIFO->Data;
    1c96:	80 91 c0 24 	lds	r24, 0x24C0
    1c9a:	90 91 c1 24 	lds	r25, 0x24C1
    1c9e:	84 83       	std	Z+4, r24	; 0x04
    1ca0:	95 83       	std	Z+5, r25	; 0x05

	USB_Endpoint_SelectedFIFO->Length    = (Address & ENDPOINT_DIR_IN) ? Size : 0;
    1ca2:	4c 2f       	mov	r20, r28
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e0 5c       	subi	r30, 0xC0	; 192
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	40 83       	st	Z, r20
	USB_Endpoint_SelectedFIFO->Position  = 0;
    1cac:	31 96       	adiw	r30, 0x01	; 1
    1cae:	10 82       	st	Z, r1

	return true;
}
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	08 95       	ret

00001cba <Endpoint_ConfigureEndpointTable>:
	}
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1cba:	af 92       	push	r10
    1cbc:	bf 92       	push	r11
    1cbe:	cf 92       	push	r12
    1cc0:	df 92       	push	r13
    1cc2:	ef 92       	push	r14
    1cc4:	ff 92       	push	r15
    1cc6:	0f 93       	push	r16
    1cc8:	1f 93       	push	r17
    1cca:	cf 93       	push	r28
    1ccc:	df 93       	push	r29
	for (uint8_t i = 0; i < Entries; i++)
    1cce:	66 23       	and	r22, r22
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <Endpoint_ConfigureEndpointTable+0x1a>
    1cd2:	57 c0       	rjmp	.+174    	; 0x1d82 <Endpoint_ConfigureEndpointTable+0xc8>
    1cd4:	a6 2e       	mov	r10, r22
    1cd6:	7c 01       	movw	r14, r24
    1cd8:	8c 01       	movw	r16, r24
    1cda:	84 e0       	ldi	r24, 0x04	; 4
    1cdc:	e8 0e       	add	r14, r24
    1cde:	f1 1c       	adc	r15, r1
    1ce0:	b1 2c       	mov	r11, r1
	{
		if (!(Table[i].Address))
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	c0 80       	ld	r12, Z
    1ce6:	cc 20       	and	r12, r12
    1ce8:	09 f4       	brne	.+2      	; 0x1cec <Endpoint_ConfigureEndpointTable+0x32>
    1cea:	41 c0       	rjmp	.+130    	; 0x1d6e <Endpoint_ConfigureEndpointTable+0xb4>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1cec:	c1 81       	ldd	r28, Z+1	; 0x01
    1cee:	d2 81       	ldd	r29, Z+2	; 0x02
    1cf0:	f7 01       	movw	r30, r14
    1cf2:	31 97       	sbiw	r30, 0x01	; 1
    1cf4:	80 81       	ld	r24, Z
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1cf6:	f7 01       	movw	r30, r14
    1cf8:	90 81       	ld	r25, Z
    1cfa:	92 30       	cpi	r25, 0x02	; 2
    1cfc:	10 f4       	brcc	.+4      	; 0x1d02 <Endpoint_ConfigureEndpointTable+0x48>
    1cfe:	48 e0       	ldi	r20, 0x08	; 8
    1d00:	01 c0       	rjmp	.+2      	; 0x1d04 <Endpoint_ConfigureEndpointTable+0x4a>
    1d02:	48 e1       	ldi	r20, 0x18	; 24
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1d04:	c9 30       	cpi	r28, 0x09	; 9
    1d06:	d1 05       	cpc	r29, r1
    1d08:	50 f0       	brcs	.+20     	; 0x1d1e <Endpoint_ConfigureEndpointTable+0x64>
    1d0a:	28 e0       	ldi	r18, 0x08	; 8
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
				{
					MaskVal++;
    1d10:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
    1d12:	22 0f       	add	r18, r18
    1d14:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1d16:	2c 17       	cp	r18, r28
    1d18:	3d 07       	cpc	r19, r29
    1d1a:	d0 f3       	brcs	.-12     	; 0x1d10 <Endpoint_ConfigureEndpointTable+0x56>
    1d1c:	01 c0       	rjmp	.+2      	; 0x1d20 <Endpoint_ConfigureEndpointTable+0x66>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t EPConfigMask = (USB_EP_INTDSBL_bm | ((Banks > 1) ? USB_EP_PINGPONG_bm : 0) | Endpoint_BytesToEPSizeMask(Size));
    1d20:	94 2b       	or	r25, r20

				if ((Address & ENDPOINT_EPNUM_MASK) >= ENDPOINT_TOTAL_ENDPOINTS)
    1d22:	2c 2d       	mov	r18, r12
    1d24:	2f 70       	andi	r18, 0x0F	; 15
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	64 f5       	brge	.+88     	; 0x1d86 <Endpoint_ConfigureEndpointTable+0xcc>
				  return false;

				// TODO - Fix once limitations are lifted
				EPConfigMask &= ~USB_EP_PINGPONG_bm;
    1d2e:	9f 7e       	andi	r25, 0xEF	; 239
				if (Size > 64)
    1d30:	c1 34       	cpi	r28, 0x41	; 65
    1d32:	d1 05       	cpc	r29, r1
    1d34:	50 f5       	brcc	.+84     	; 0x1d8a <Endpoint_ConfigureEndpointTable+0xd0>
				  return false;

				switch (Type)
    1d36:	88 23       	and	r24, r24
    1d38:	19 f0       	breq	.+6      	; 0x1d40 <Endpoint_ConfigureEndpointTable+0x86>
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	21 f0       	breq	.+8      	; 0x1d46 <Endpoint_ConfigureEndpointTable+0x8c>
    1d3e:	06 c0       	rjmp	.+12     	; 0x1d4c <Endpoint_ConfigureEndpointTable+0x92>
				{
					case EP_TYPE_CONTROL:
						EPConfigMask |= USB_EP_TYPE_CONTROL_gc;
    1d40:	90 64       	ori	r25, 0x40	; 64
    1d42:	d9 2e       	mov	r13, r25
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <Endpoint_ConfigureEndpointTable+0x9a>
						break;
					case EP_TYPE_ISOCHRONOUS:
						EPConfigMask |= USB_EP_TYPE_ISOCHRONOUS_gc;
    1d46:	90 6c       	ori	r25, 0xC0	; 192
    1d48:	d9 2e       	mov	r13, r25
    1d4a:	0a c0       	rjmp	.+20     	; 0x1d60 <Endpoint_ConfigureEndpointTable+0xa6>
						break;
					default:
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
    1d4c:	90 68       	ori	r25, 0x80	; 128
    1d4e:	d9 2e       	mov	r13, r25
						break;
				}

				if (Type == EP_TYPE_CONTROL)
    1d50:	81 11       	cpse	r24, r1
    1d52:	06 c0       	rjmp	.+12     	; 0x1d60 <Endpoint_ConfigureEndpointTable+0xa6>
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1d54:	4c 2f       	mov	r20, r28
    1d56:	6d 2d       	mov	r22, r13
    1d58:	80 e8       	ldi	r24, 0x80	; 128
    1d5a:	8c 0d       	add	r24, r12
    1d5c:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1d60:	4c 2f       	mov	r20, r28
    1d62:	6d 2d       	mov	r22, r13
    1d64:	8c 2d       	mov	r24, r12
    1d66:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>
    1d6a:	88 23       	and	r24, r24
    1d6c:	79 f0       	breq	.+30     	; 0x1d8c <Endpoint_ConfigureEndpointTable+0xd2>
}

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1d6e:	b3 94       	inc	r11
    1d70:	0b 5f       	subi	r16, 0xFB	; 251
    1d72:	1f 4f       	sbci	r17, 0xFF	; 255
    1d74:	f5 e0       	ldi	r31, 0x05	; 5
    1d76:	ef 0e       	add	r14, r31
    1d78:	f1 1c       	adc	r15, r1
    1d7a:	ba 10       	cpse	r11, r10
    1d7c:	b2 cf       	rjmp	.-156    	; 0x1ce2 <Endpoint_ConfigureEndpointTable+0x28>
		{
			return false;
		}
	}

	return true;
    1d7e:	81 e0       	ldi	r24, 0x01	; 1
    1d80:	05 c0       	rjmp	.+10     	; 0x1d8c <Endpoint_ConfigureEndpointTable+0xd2>
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	03 c0       	rjmp	.+6      	; 0x1d8c <Endpoint_ConfigureEndpointTable+0xd2>
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		{
			return false;
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	01 c0       	rjmp	.+2      	; 0x1d8c <Endpoint_ConfigureEndpointTable+0xd2>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return true;
}
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	bf 90       	pop	r11
    1d9e:	af 90       	pop	r10
    1da0:	08 95       	ret

00001da2 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1da2:	e0 ec       	ldi	r30, 0xC0	; 192
    1da4:	f4 e0       	ldi	r31, 0x04	; 4
    1da6:	a6 81       	ldd	r26, Z+6	; 0x06
    1da8:	b7 81       	ldd	r27, Z+7	; 0x07
    1daa:	19 96       	adiw	r26, 0x09	; 9
    1dac:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1dae:	a6 81       	ldd	r26, Z+6	; 0x06
    1db0:	b7 81       	ldd	r27, Z+7	; 0x07
    1db2:	11 96       	adiw	r26, 0x01	; 1
    1db4:	1c 92       	st	X, r1

void Endpoint_ClearEndpoints(void)
{
	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
	{
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].IN.CTRL  = 0;
    1db6:	a6 81       	ldd	r26, Z+6	; 0x06
    1db8:	b7 81       	ldd	r27, Z+7	; 0x07
    1dba:	59 96       	adiw	r26, 0x19	; 25
    1dbc:	1c 92       	st	X, r1
		((USB_EndpointTable_t*)USB.EPPTR)->Endpoints[EPNum].OUT.CTRL = 0;
    1dbe:	06 80       	ldd	r0, Z+6	; 0x06
    1dc0:	f7 81       	ldd	r31, Z+7	; 0x07
    1dc2:	e0 2d       	mov	r30, r0
    1dc4:	11 8a       	std	Z+17, r1	; 0x11
    1dc6:	08 95       	ret

00001dc8 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1dc8:	80 91 b8 24 	lds	r24, 0x24B8
    1dcc:	88 23       	and	r24, r24
    1dce:	84 f4       	brge	.+32     	; 0x1df0 <Endpoint_ClearStatusStage+0x28>
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1dd2:	80 91 b7 24 	lds	r24, 0x24B7
    1dd6:	88 23       	and	r24, r24
    1dd8:	89 f0       	breq	.+34     	; 0x1dfc <Endpoint_ClearStatusStage+0x34>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1dda:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    1dde:	88 23       	and	r24, r24
    1de0:	c1 f3       	breq	.-16     	; 0x1dd2 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    1de2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <Endpoint_ClearOUT>
    1de6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1de8:	80 91 b7 24 	lds	r24, 0x24B7
    1dec:	88 23       	and	r24, r24
    1dee:	31 f0       	breq	.+12     	; 0x1dfc <Endpoint_ClearStatusStage+0x34>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1df0:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    1df4:	88 23       	and	r24, r24
    1df6:	c1 f3       	breq	.-16     	; 0x1de8 <Endpoint_ClearStatusStage+0x20>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearIN();
    1df8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <Endpoint_ClearIN>
    1dfc:	08 95       	ret

00001dfe <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return ((USB_EndpointTable_t*)USB.EPPTR)->FrameNum;
    1e08:	e0 91 c6 04 	lds	r30, 0x04C6
    1e0c:	f0 91 c7 04 	lds	r31, 0x04C7
    1e10:	00 a1       	ldd	r16, Z+32	; 0x20
    1e12:	11 a1       	ldd	r17, Z+33	; 0x21
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1e14:	c4 e6       	ldi	r28, 0x64	; 100
    1e16:	0f 2e       	mov	r0, r31
    1e18:	f0 ec       	ldi	r31, 0xC0	; 192
    1e1a:	ef 2e       	mov	r14, r31
    1e1c:	f4 e0       	ldi	r31, 0x04	; 4
    1e1e:	ff 2e       	mov	r15, r31
    1e20:	f0 2d       	mov	r31, r0
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <Endpoint_WaitUntilReady+0x2a>

		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1e24:	c2 2f       	mov	r28, r18
    1e26:	8c 01       	movw	r16, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (USB_Endpoint_SelectedEndpoint & ENDPOINT_DIR_IN);
    1e28:	80 91 c4 24 	lds	r24, 0x24C4

	uint16_t PreviousFrameNumber = USB_Device_GetFrameNumber();

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    1e2c:	88 23       	and	r24, r24
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <Endpoint_WaitUntilReady+0x3c>
		{
			if (Endpoint_IsINReady())
    1e30:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <Endpoint_IsINReady>
    1e34:	88 23       	and	r24, r24
    1e36:	29 f0       	breq	.+10     	; 0x1e42 <Endpoint_WaitUntilReady+0x44>
    1e38:	21 c0       	rjmp	.+66     	; 0x1e7c <Endpoint_WaitUntilReady+0x7e>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1e3a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Endpoint_IsOUTReceived>
    1e3e:	81 11       	cpse	r24, r1
    1e40:	1f c0       	rjmp	.+62     	; 0x1e80 <Endpoint_WaitUntilReady+0x82>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e42:	80 91 b7 24 	lds	r24, 0x24B7

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e46:	88 23       	and	r24, r24
    1e48:	e9 f0       	breq	.+58     	; 0x1e84 <Endpoint_WaitUntilReady+0x86>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e4a:	85 30       	cpi	r24, 0x05	; 5
    1e4c:	e9 f0       	breq	.+58     	; 0x1e88 <Endpoint_WaitUntilReady+0x8a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((USB_Endpoint_SelectedHandle->CTRL & USB_EP_STALL_bm) ? true : false);
    1e4e:	e0 91 c2 24 	lds	r30, 0x24C2
    1e52:	f0 91 c3 24 	lds	r31, 0x24C3
    1e56:	81 81       	ldd	r24, Z+1	; 0x01
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1e58:	82 fd       	sbrc	r24, 2
    1e5a:	18 c0       	rjmp	.+48     	; 0x1e8c <Endpoint_WaitUntilReady+0x8e>
    1e5c:	d7 01       	movw	r26, r14
    1e5e:	16 96       	adiw	r26, 0x06	; 6
    1e60:	ed 91       	ld	r30, X+
    1e62:	fc 91       	ld	r31, X
    1e64:	17 97       	sbiw	r26, 0x07	; 7
    1e66:	80 a1       	ldd	r24, Z+32	; 0x20
    1e68:	91 a1       	ldd	r25, Z+33	; 0x21
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1e6a:	08 17       	cp	r16, r24
    1e6c:	19 07       	cpc	r17, r25
    1e6e:	d9 f2       	breq	.-74     	; 0x1e26 <Endpoint_WaitUntilReady+0x28>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	2c 0f       	add	r18, r28
    1e74:	c1 11       	cpse	r28, r1
    1e76:	d6 cf       	rjmp	.-84     	; 0x1e24 <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_Timeout;
    1e78:	84 e0       	ldi	r24, 0x04	; 4
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <Endpoint_WaitUntilReady+0x90>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	07 c0       	rjmp	.+14     	; 0x1e8e <Endpoint_WaitUntilReady+0x90>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	05 c0       	rjmp	.+10     	; 0x1e8e <Endpoint_WaitUntilReady+0x90>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <Endpoint_WaitUntilReady+0x90>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	01 c0       	rjmp	.+2      	; 0x1e8e <Endpoint_WaitUntilReady+0x90>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1e8c:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	08 95       	ret

00001e9a <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1e9a:	cf 93       	push	r28
    1e9c:	df 93       	push	r29
	{
		DividerIndex++;
		PrescalerNeeded >>= 1;
	}

	CLK.USBCTRL = (DividerIndex - 1) << CLK_USBPSDIV_gp;
    1e9e:	e0 e4       	ldi	r30, 0x40	; 64
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	14 82       	std	Z+4, r1	; 0x04

	if (USB_Options & USB_OPT_PLLCLKSRC)
	  CLK.USBCTRL |= (CLK_USBSRC_PLL_gc   | CLK_USBSEN_bm);
	else
	  CLK.USBCTRL |= (CLK_USBSRC_RC32M_gc | CLK_USBSEN_bm);
    1ea4:	84 81       	ldd	r24, Z+4	; 0x04
    1ea6:	83 60       	ori	r24, 0x03	; 3
    1ea8:	84 83       	std	Z+4, r24	; 0x04

	USB_Device_SetDeviceAddress(0);

	USB_INT_DisableAllInterrupts();
    1eaa:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1eae:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USB.CTRLA &= ~USB_ENABLE_bm;
    1eb2:	c0 ec       	ldi	r28, 0xC0	; 192
    1eb4:	d4 e0       	ldi	r29, 0x04	; 4
    1eb6:	88 81       	ld	r24, Y
    1eb8:	8f 77       	andi	r24, 0x7F	; 127
    1eba:	88 83       	st	Y, r24
				USB.CTRLA |=  USB_ENABLE_bm;
    1ebc:	88 81       	ld	r24, Y
    1ebe:	80 68       	ori	r24, 0x80	; 128
    1ec0:	88 83       	st	Y, r24
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ec2:	10 92 b7 24 	sts	0x24B7, r1
	USB_Device_ConfigurationNumber  = 0;
    1ec6:	10 92 b3 24 	sts	0x24B3, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1eca:	10 92 b5 24 	sts	0x24B5, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1ece:	10 92 b4 24 	sts	0x24B4, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				USB.CTRLA |=  USB_SPEED_bm;
    1ed2:	88 81       	ld	r24, Y
    1ed4:	80 64       	ori	r24, 0x40	; 64
    1ed6:	88 83       	st	Y, r24
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    1ed8:	48 e0       	ldi	r20, 0x08	; 8
    1eda:	68 e4       	ldi	r22, 0x48	; 72
    1edc:	80 e8       	ldi	r24, 0x80	; 128
    1ede:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    1ee2:	48 e0       	ldi	r20, 0x08	; 8
    1ee4:	68 e4       	ldi	r22, 0x48	; 72
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>
			static inline void USB_INT_Enable(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						USB.INTCTRLA |= USB_BUSEVIE_bm;
    1eec:	88 85       	ldd	r24, Y+8	; 0x08
    1eee:	80 64       	ori	r24, 0x40	; 64
    1ef0:	88 87       	std	Y+8, r24	; 0x08
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				USB.CTRLB |= USB_ATTACH_bm;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	81 60       	ori	r24, 0x01	; 1
    1ef6:	89 83       	std	Y+1, r24	; 0x01
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();

	USB_Controller_Reset();
	USB_Init_Device();
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <USB_Init>:

               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
				#if (ARCH == ARCH_AVR8)
				return SREG;
				#elif (ARCH == ARCH_UC3)
				return __builtin_mfsr(AVR32_SR);
				#elif (ARCH == ARCH_XMEGA)
				return SREG;
    1f02:	2f b7       	in	r18, 0x3f	; 63
				#if (ARCH == ARCH_AVR8)
				cli();
				#elif (ARCH == ARCH_UC3)
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
    1f04:	f8 94       	cli
	#endif

	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	NVM.CMD  = NVM_CMD_READ_CALIB_ROW_gc;
    1f06:	c0 ec       	ldi	r28, 0xC0	; 192
    1f08:	d1 e0       	ldi	r29, 0x01	; 1
    1f0a:	82 e0       	ldi	r24, 0x02	; 2
    1f0c:	8a 87       	std	Y+10, r24	; 0x0a
	USB.CAL0 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL0));
    1f0e:	ea e1       	ldi	r30, 0x1A	; 26
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	e4 91       	lpm	r30, Z
    1f14:	a0 ec       	ldi	r26, 0xC0	; 192
    1f16:	b4 e0       	ldi	r27, 0x04	; 4
    1f18:	da 96       	adiw	r26, 0x3a	; 58
    1f1a:	ec 93       	st	X, r30
    1f1c:	da 97       	sbiw	r26, 0x3a	; 58
	USB.CAL1 = pgm_read_byte(offsetof(NVM_PROD_SIGNATURES_t, USBCAL1));
    1f1e:	eb e1       	ldi	r30, 0x1B	; 27
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	e4 91       	lpm	r30, Z
    1f24:	db 96       	adiw	r26, 0x3b	; 59
    1f26:	ec 93       	st	X, r30
    1f28:	db 97       	sbiw	r26, 0x3b	; 59
	NVM.CMD  = NVM_CMD_NO_OPERATION_gc;
    1f2a:	1a 86       	std	Y+10, r1	; 0x0a

	/* Ugly workaround to ensure an aligned table, since __BIGGEST_ALIGNMENT__ == 1 for the 8-bit AVR-GCC toolchain */
	USB.EPPTR = ((intptr_t)&USB_EndpointTable[1] & ~(1 << 0));
    1f2c:	8e ec       	ldi	r24, 0xCE	; 206
    1f2e:	95 e2       	ldi	r25, 0x25	; 37
    1f30:	8e 7f       	andi	r24, 0xFE	; 254
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	8d 93       	st	X+, r24
    1f36:	9c 93       	st	X, r25
    1f38:	17 97       	sbiw	r26, 0x07	; 7
	USB.CTRLA = (USB_STFRNUM_bm | ((ENDPOINT_TOTAL_ENDPOINTS - 1) << USB_MAXEP_gp));
    1f3a:	81 e1       	ldi	r24, 0x11	; 17
    1f3c:	8c 93       	st	X, r24

	if ((USB_Options & USB_OPT_BUSEVENT_PRIHIGH) == USB_OPT_BUSEVENT_PRIHIGH)
	  USB.INTCTRLA = (3 << USB_INTLVL_gp);
    1f3e:	83 e0       	ldi	r24, 0x03	; 3
    1f40:	18 96       	adiw	r26, 0x08	; 8
    1f42:	8c 93       	st	X, r24
				if (GlobalIntState & AVR32_SR_GM)
				  __builtin_ssrf(AVR32_SR_GM_OFFSET);
				else
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
    1f44:	2f bf       	out	0x3f, r18	; 63

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = Mode;
	#endif

	USB_IsInitialized = true;
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	80 93 b6 24 	sts	0x24B6, r24

	USB_ResetInterface();
    1f4c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <USB_ResetInterface>
}
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	08 95       	ret

00001f56 <USB_INT_DisableAllInterrupts>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	USB.INTCTRLA    &= USB_INTLVL_gm;
    1f56:	e0 ec       	ldi	r30, 0xC0	; 192
    1f58:	f4 e0       	ldi	r31, 0x04	; 4
    1f5a:	80 85       	ldd	r24, Z+8	; 0x08
    1f5c:	83 70       	andi	r24, 0x03	; 3
    1f5e:	80 87       	std	Z+8, r24	; 0x08
	USB.INTCTRLB     = 0;
    1f60:	11 86       	std	Z+9, r1	; 0x09
    1f62:	08 95       	ret

00001f64 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	USB.INTFLAGSACLR = 0xFF;
    1f64:	e0 ec       	ldi	r30, 0xC0	; 192
    1f66:	f4 e0       	ldi	r31, 0x04	; 4
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	82 87       	std	Z+10, r24	; 0x0a
	USB.INTFLAGSBCLR = 0xFF;
    1f6c:	84 87       	std	Z+12, r24	; 0x0c
    1f6e:	08 95       	ret

00001f70 <__vector_125>:
}

ISR(USB_BUSEVENT_vect)
{
    1f70:	1f 92       	push	r1
    1f72:	0f 92       	push	r0
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	0f 92       	push	r0
    1f78:	11 24       	eor	r1, r1
    1f7a:	0b b6       	in	r0, 0x3b	; 59
    1f7c:	0f 92       	push	r0
    1f7e:	2f 93       	push	r18
    1f80:	3f 93       	push	r19
    1f82:	4f 93       	push	r20
    1f84:	5f 93       	push	r21
    1f86:	6f 93       	push	r22
    1f88:	7f 93       	push	r23
    1f8a:	8f 93       	push	r24
    1f8c:	9f 93       	push	r25
    1f8e:	af 93       	push	r26
    1f90:	bf 93       	push	r27
    1f92:	ef 93       	push	r30
    1f94:	ff 93       	push	r31
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTFLAGSACLR & USB_SOFIF_bm) ? true : false);
    1f96:	80 91 ca 04 	lds	r24, 0x04CA
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1f9a:	88 23       	and	r24, r24
    1f9c:	4c f4       	brge	.+18     	; 0x1fb0 <__vector_125+0x40>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI:
						return ((USB.INTCTRLA & USB_BUSEVIE_bm) ? true : false);
					case USB_INT_SOFI:
						return ((USB.INTCTRLA & USB_SOFIE_bm) ? true : false);
    1f9e:	80 91 c8 04 	lds	r24, 0x04C8
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <__vector_125+0x40>
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
						break;
					case USB_INT_SOFI:
						USB.INTFLAGSACLR = USB_SOFIF_bm;
    1fa6:	80 e8       	ldi	r24, 0x80	; 128
    1fa8:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1fac:	0e 94 58 07 	call	0xeb0	; 0xeb0 <EVENT_USB_Device_StartOfFrame>
			static inline bool USB_INT_HasOccurred(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
    1fb0:	80 91 ca 04 	lds	r24, 0x04CA
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Suspend))
    1fb4:	86 ff       	sbrs	r24, 6
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <__vector_125+0x56>
			static inline void USB_INT_Clear(const uint8_t Interrupt)
			{
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
    1fb8:	80 e4       	ldi	r24, 0x40	; 64
    1fba:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Suspend);

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
    1fbe:	10 92 b7 24 	sts	0x24B7, r1
		EVENT_USB_Device_Disconnect();
    1fc2:	0e 94 2b 07 	call	0xe56	; 0xe56 <EVENT_USB_Device_Disconnect>
				switch (Interrupt)
				{
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
    1fc6:	80 91 ca 04 	lds	r24, 0x04CA
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Resume))
    1fca:	85 ff       	sbrs	r24, 5
    1fcc:	16 c0       	rjmp	.+44     	; 0x1ffa <__vector_125+0x8a>
				{
					case USB_INT_BUSEVENTI_Suspend:
						USB.INTFLAGSACLR = USB_SUSPENDIF_bm;
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
    1fce:	80 e2       	ldi	r24, 0x20	; 32
    1fd0:	80 93 ca 04 	sts	0x04CA, r24
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Resume);

		if (USB_Device_ConfigurationNumber)
    1fd4:	80 91 b3 24 	lds	r24, 0x24B3
    1fd8:	88 23       	and	r24, r24
    1fda:	21 f0       	breq	.+8      	; 0x1fe4 <__vector_125+0x74>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	80 93 b7 24 	sts	0x24B7, r24
    1fe2:	09 c0       	rjmp	.+18     	; 0x1ff6 <__vector_125+0x86>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return ((USB.ADDR != 0) ? true : false);
    1fe4:	80 91 c3 04 	lds	r24, 0x04C3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1fe8:	81 11       	cpse	r24, r1
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <__vector_125+0x80>
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	01 c0       	rjmp	.+2      	; 0x1ff2 <__vector_125+0x82>
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	80 93 b7 24 	sts	0x24B7, r24

		#if !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
    1ff6:	0e 94 1e 07 	call	0xe3c	; 0xe3c <EVENT_USB_Device_Connect>
					case USB_INT_BUSEVENTI_Suspend:
						return ((USB.INTFLAGSACLR & USB_SUSPENDIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Resume:
						return ((USB.INTFLAGSACLR & USB_RESUMEIF_bm) ? true : false);
					case USB_INT_BUSEVENTI_Reset:
						return ((USB.INTFLAGSACLR & USB_RSTIF_bm) ? true : false);
    1ffa:	80 91 ca 04 	lds	r24, 0x04CA
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_BUSEVENTI_Reset))
    1ffe:	84 ff       	sbrs	r24, 4
    2000:	18 c0       	rjmp	.+48     	; 0x2032 <__vector_125+0xc2>
						break;
					case USB_INT_BUSEVENTI_Resume:
						USB.INTFLAGSACLR = USB_RESUMEIF_bm;
						break;
					case USB_INT_BUSEVENTI_Reset:
						USB.INTFLAGSACLR = USB_RSTIF_bm;
    2002:	e0 ec       	ldi	r30, 0xC0	; 192
    2004:	f4 e0       	ldi	r31, 0x04	; 4
    2006:	80 e1       	ldi	r24, 0x10	; 16
    2008:	82 87       	std	Z+10, r24	; 0x0a
	{
		USB_INT_Clear(USB_INT_BUSEVENTI_Reset);

		USB_DeviceState                = DEVICE_STATE_Default;
    200a:	82 e0       	ldi	r24, 0x02	; 2
    200c:	80 93 b7 24 	sts	0x24B7, r24
		USB_Device_ConfigurationNumber = 0;
    2010:	10 92 b3 24 	sts	0x24B3, r1
			}

			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				USB.ADDR = Address;
    2014:	13 82       	std	Z+3, r1	; 0x03

		USB_Device_EnableDeviceAddress(0);

		Endpoint_ClearEndpoints();
    2016:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <Endpoint_ClearEndpoints>
						EPConfigMask |= USB_EP_TYPE_BULK_gc;
						break;
				}

				if (Type == EP_TYPE_CONTROL)
				  Endpoint_ConfigureEndpoint_PRV(Address ^ ENDPOINT_DIR_IN, EPConfigMask, Size);
    201a:	48 e0       	ldi	r20, 0x08	; 8
    201c:	68 e4       	ldi	r22, 0x48	; 72
    201e:	80 e8       	ldi	r24, 0x80	; 128
    2020:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>

				return Endpoint_ConfigureEndpoint_PRV(Address, EPConfigMask, Size);
    2024:	48 e0       	ldi	r20, 0x08	; 8
    2026:	68 e4       	ldi	r22, 0x48	; 72
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <Endpoint_ConfigureEndpoint_PRV>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           USB_Device_ControlEndpointSize, 1);

		EVENT_USB_Device_Reset();
    202e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <USB_Event_Stub>
	}
}
    2032:	ff 91       	pop	r31
    2034:	ef 91       	pop	r30
    2036:	bf 91       	pop	r27
    2038:	af 91       	pop	r26
    203a:	9f 91       	pop	r25
    203c:	8f 91       	pop	r24
    203e:	7f 91       	pop	r23
    2040:	6f 91       	pop	r22
    2042:	5f 91       	pop	r21
    2044:	4f 91       	pop	r20
    2046:	3f 91       	pop	r19
    2048:	2f 91       	pop	r18
    204a:	0f 90       	pop	r0
    204c:	0b be       	out	0x3b, r0	; 59
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	0f 90       	pop	r0
    2054:	1f 90       	pop	r1
    2056:	18 95       	reti

00002058 <__udivmodsi4>:
    2058:	a1 e2       	ldi	r26, 0x21	; 33
    205a:	1a 2e       	mov	r1, r26
    205c:	aa 1b       	sub	r26, r26
    205e:	bb 1b       	sub	r27, r27
    2060:	fd 01       	movw	r30, r26
    2062:	0d c0       	rjmp	.+26     	; 0x207e <__udivmodsi4_ep>

00002064 <__udivmodsi4_loop>:
    2064:	aa 1f       	adc	r26, r26
    2066:	bb 1f       	adc	r27, r27
    2068:	ee 1f       	adc	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	a2 17       	cp	r26, r18
    206e:	b3 07       	cpc	r27, r19
    2070:	e4 07       	cpc	r30, r20
    2072:	f5 07       	cpc	r31, r21
    2074:	20 f0       	brcs	.+8      	; 0x207e <__udivmodsi4_ep>
    2076:	a2 1b       	sub	r26, r18
    2078:	b3 0b       	sbc	r27, r19
    207a:	e4 0b       	sbc	r30, r20
    207c:	f5 0b       	sbc	r31, r21

0000207e <__udivmodsi4_ep>:
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	88 1f       	adc	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	1a 94       	dec	r1
    2088:	69 f7       	brne	.-38     	; 0x2064 <__udivmodsi4_loop>
    208a:	60 95       	com	r22
    208c:	70 95       	com	r23
    208e:	80 95       	com	r24
    2090:	90 95       	com	r25
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	bd 01       	movw	r22, r26
    2098:	cf 01       	movw	r24, r30
    209a:	08 95       	ret

0000209c <__tablejump2__>:
    209c:	ee 0f       	add	r30, r30
    209e:	ff 1f       	adc	r31, r31
    20a0:	88 1f       	adc	r24, r24
    20a2:	8b bf       	out	0x3b, r24	; 59
    20a4:	07 90       	elpm	r0, Z+
    20a6:	f6 91       	elpm	r31, Z
    20a8:	e0 2d       	mov	r30, r0
    20aa:	19 94       	eijmp

000020ac <memcmp>:
    20ac:	fb 01       	movw	r30, r22
    20ae:	dc 01       	movw	r26, r24
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <memcmp+0xe>
    20b2:	8d 91       	ld	r24, X+
    20b4:	01 90       	ld	r0, Z+
    20b6:	80 19       	sub	r24, r0
    20b8:	21 f4       	brne	.+8      	; 0x20c2 <memcmp+0x16>
    20ba:	41 50       	subi	r20, 0x01	; 1
    20bc:	50 40       	sbci	r21, 0x00	; 0
    20be:	c8 f7       	brcc	.-14     	; 0x20b2 <memcmp+0x6>
    20c0:	88 1b       	sub	r24, r24
    20c2:	99 0b       	sbc	r25, r25
    20c4:	08 95       	ret

000020c6 <memcpy>:
    20c6:	fb 01       	movw	r30, r22
    20c8:	dc 01       	movw	r26, r24
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <memcpy+0xa>
    20cc:	01 90       	ld	r0, Z+
    20ce:	0d 92       	st	X+, r0
    20d0:	41 50       	subi	r20, 0x01	; 1
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	d8 f7       	brcc	.-10     	; 0x20cc <memcpy+0x6>
    20d6:	08 95       	ret

000020d8 <memset>:
    20d8:	dc 01       	movw	r26, r24
    20da:	01 c0       	rjmp	.+2      	; 0x20de <memset+0x6>
    20dc:	6d 93       	st	X+, r22
    20de:	41 50       	subi	r20, 0x01	; 1
    20e0:	50 40       	sbci	r21, 0x00	; 0
    20e2:	e0 f7       	brcc	.-8      	; 0x20dc <memset+0x4>
    20e4:	08 95       	ret

000020e6 <_exit>:
    20e6:	f8 94       	cli

000020e8 <__stop_program>:
    20e8:	ff cf       	rjmp	.-2      	; 0x20e8 <__stop_program>
